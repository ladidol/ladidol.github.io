<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>springMVC</title>
      <link href="/2022/03/28/SpringMVC/"/>
      <url>/2022/03/28/SpringMVC/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><h1 id="什么是SpringMVC"><a href="#什么是SpringMVC" class="headerlink" title="什么是SpringMVC"></a>什么是SpringMVC</h1><p><a href="https://blog.csdn.net/xiangminlu/article/details/105680357?utm_source=app&app_version=5.1.1&code=app_1562916241&uLinkId=usr1mkqgl919blen">传送门</a></p><p>跟着狂神的笔记走</p><h2 id="1、回顾MVC"><a href="#1、回顾MVC" class="headerlink" title="1、回顾MVC"></a>1、回顾MVC</h2><h3 id="1-1、什么是MVC"><a href="#1-1、什么是MVC" class="headerlink" title="1.1、什么是MVC"></a>1.1、什么是MVC</h3><ul><li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。</li><li>是将业务逻辑、数据、显示分离的方法来组织代码。</li><li>MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong>。</li><li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong>。当然不同的MVC存在差异。</li></ul><p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p><p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p><p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p><p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328105750587.png" alt="image-20220328105750587"></p><h3 id="1-2、Model1时代"><a href="#1-2、Model1时代" class="headerlink" title="1.2、Model1时代"></a>1.2、Model1时代</h3><ul><li>在web早期的开发中，通常采用的都是Model1。</li><li>Model1中，主要分为两层，视图层和模型层。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328105813905.png" alt="image-20220328105813905"></p><p>Model1优点：架构简单，比较适合小型项目开发；</p><p>Model1缺点：JSP职责不单一，职责过重，不便于维护；</p><h3 id="1-3、Model2时代"><a href="#1-3、Model2时代" class="headerlink" title="1.3、Model2时代"></a>1.3、Model2时代</h3><p>Model2把一个项目分成三部分，包括<strong>视图、控制、模型。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328105829629.png" alt="image-20220328105829629"></p><ol><li>用户发请求</li><li>Servlet接收请求数据，并调用对应的业务逻辑方法</li><li>业务处理完毕，返回更新后的数据给servlet</li><li>servlet转向到JSP，由JSP来渲染页面</li><li>响应给前端更新后的页面</li></ol><p><strong>职责分析：</strong></p><p><strong>Controller：控制器</strong></p><ol><li>取得表单数据</li><li>调用业务逻辑</li><li>转向指定的页面</li></ol><p><strong>Model：模型</strong></p><ol><li>业务逻辑</li><li>保存数据的状态</li></ol><p><strong>View：视图</strong></p><ol><li>显示页面</li></ol><p>Model2这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。Model 1模式的实现比较简单，适用于快速开发小规模项目，Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2消除了Model1的缺点。</p><h3 id="1-4、回顾Servlet"><a href="#1-4、回顾Servlet" class="headerlink" title="1.4、回顾Servlet"></a>1.4、回顾Servlet</h3><ol><li><p>新建一个Maven工程当做父工程！pom依赖！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>建立一个Moudle：springmvc-01-servlet ， 添加Web app的支持！</p></li><li><p>导入servlet 和 jsp 的 jar 依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写一个Servlet类，用来处理用户的请求</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.servlet;</span><br><span class="line"><span class="comment">//实现Servlet接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       <span class="comment">//取得参数</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (method.equals(<span class="string">&quot;add&quot;</span>))&#123;</span><br><span class="line">           req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;执行了add方法&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">if</span> (method.equals(<span class="string">&quot;delete&quot;</span>))&#123;</span><br><span class="line">           req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;执行了delete方法&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">//业务逻辑</span></span><br><span class="line">       <span class="comment">//视图跳转</span></span><br><span class="line">       req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/Hello.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       doGet(req,resp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写Hello.jsp，在WEB-INF目录下新建一个jsp的文件夹，新建hello.jsp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Ladidol&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>在web.xml中注册Servlet</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.feng.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>xml</span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/user<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>项目结构为:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328184716136.png" alt="image-20220328184716136"></p></li><li><p>配置Tomcat，并启动测试</p></li><li><ul><li>localhost:8080&#x2F;user?method&#x3D;add</li><li>localhost:8080&#x2F;user?method&#x3D;delete</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328193043592.png" alt="image-20220328193043592"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328193025347.png" alt="image-20220328193025347"></p></li></ol><h3 id="MVC框架要做哪些事情"><a href="#MVC框架要做哪些事情" class="headerlink" title="MVC框架要做哪些事情"></a><strong>MVC框架要做哪些事情</strong></h3><ol><li>将url映射到java类或java类的方法 .</li><li>封装用户提交的数据 .</li><li>处理请求–调用相关的业务处理–封装响应数据 .</li><li>将响应的数据进行渲染 . jsp &#x2F; html 等表示层数据 .</li></ol><p><strong>说明：</strong></p><p>​    常见的服务器端MVC框架有：Struts、Spring MVC、ASP.NET MVC、Zend Framework、JSF；常见前端MVC框架：vue、angularjs、react、backbone；由MVC演化出了另外一些模式如：MVP、MVVM 等等….</p><h2 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h2><h3 id="2-1、概述"><a href="#2-1、概述" class="headerlink" title="2.1、概述"></a>2.1、概述</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328185108528.png" alt="image-20220328185108528"></p><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p><p>查看官方文档：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p><p><strong>我们为什么要学习SpringMVC呢?</strong></p><p> Spring MVC的特点：</p><ol><li>轻量级，简单易学</li><li>高效 , 基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活</li></ol><p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p><p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p><p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等……所以我们要学习 .</p><p><strong>最重要的一点还是用的人多 , 使用的公司多 .</strong> </p><h3 id="2-2、中心控制器"><a href="#2-2、中心控制器" class="headerlink" title="2.2、中心控制器"></a>2.2、中心控制器</h3><p>​    Spring的web框架围绕DispatcherServlet设计。DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。</p><p>​    Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，**DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)**。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328185204226.png" alt="image-20220328185204226"></p><p>SpringMVC的原理如下图所示：</p><p>​    当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328185451543.png" alt="image-20220328185451543"></p><h3 id="2-3、SpringMVC执行原理"><a href="#2-3、SpringMVC执行原理" class="headerlink" title="2.3、SpringMVC执行原理"></a>2.3、SpringMVC执行原理</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328185537134.png" alt="image-20220328185537134"></p><p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p><ol><li><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</p><p>我们假设请求的url为 : <a href="http://localhost:8080/SpringmvcFeng/hello">http://localhost:8080/SpringmvcFeng/hello</a></p><p><strong>如上url拆分成三部分：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080表示服务器域名</span><br><span class="line">SpringMVC表示部署在服务器上的web站点</span><br><span class="line">hello表示控制器</span><br></pre></td></tr></table></figure><p>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</p></li><li><p>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</p></li><li><p>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</p></li><li><p>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</p></li><li><p>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</p></li><li><p>Handler让具体的Controller执行。</p></li><li><p>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</p></li><li><p>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</p></li><li><p>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</p></li><li><p>视图解析器将解析的逻辑视图名传给DispatcherServlet。</p></li><li><p>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</p></li><li><p>最终视图呈现给用户。</p></li></ol><p>在这里先听一遍原理，不理解没有关系，我们马上来写一个对应的代码实现大家就明白了，如果不明白，那就写10遍，没有笨人，只有懒人！</p><h1 id="第一个MVC程序"><a href="#第一个MVC程序" class="headerlink" title="第一个MVC程序"></a>第一个MVC程序</h1><h3 id="xml配置版"><a href="#xml配置版" class="headerlink" title="xml配置版"></a>xml配置版</h3><p>1、新建一个Moudle ， springmvc02hello ， 添加web的支持！</p><p>2、确定导入了SpringMVC 的依赖！</p><p>3、配置web.xml  ， 注册DispatcherServlet</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--1.注册DispatcherServlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--启动级别-1--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、编写SpringMVC 的 配置文件！名称：springmvc-servlet.xml  : [servletname]-servlet.xml</p><p>说明，这里的名称要求是按照官方来的,注意这个是放在resources目录下</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--处理映射器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--处理适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--将自己的类交给SpringIOC容器，注册bean--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Handler--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.controller.HelloController&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、添加 处理映射器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理映射器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>6、添加 处理器适配器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理适配器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>7、添加 视图解析器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>8、编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：这里我们先导入Controller接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">//ModelAndView 模型和视图</span></span><br><span class="line">       <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//封装对象，放在ModelAndView中。Model</span></span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;Hello,ladidol&#x27;s SpringMVC!&quot;</span>);</span><br><span class="line">       <span class="comment">//封装要跳转的视图，放在ModelAndView中</span></span><br><span class="line">       mv.setViewName(<span class="string">&quot;hello&quot;</span>); <span class="comment">//: /WEB-INF/jsp/hello.jsp</span></span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9、将自己的类交给SpringIOC容器，注册bean</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--将自己的类交给SpringIOC容器，注册bean--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Handler--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.controller.HelloController&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>10、写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面；</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;ladidol&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>11、项目结构:</p><p><img src="C:\Users\冯小强\AppData\Roaming\Typora\typora-user-images\image-20220328195124714.png" alt="image-20220328195124714"></p><p>12、配置Tomcat 启动测试！</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328195043632.png" alt="image-20220328195043632"></p><h3 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h3><p><strong>1、新建一个Moudle，springmvc03helloannotation 。添加web支持！</strong></p><p>2、由于Maven可能存在资源过滤的问题，我们将配置完善</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、在pom.xml文件引入相关的依赖：主要有Spring框架核心库、Spring MVC、servlet , JSTL等。我们在父依赖中已经引入了！</p><p><strong>4、配置web.xml</strong></p><p>注意点：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>&#x2F; 和 &#x2F;* 的区别：</strong>&lt; url-pattern &gt; &#x2F; &lt;&#x2F; url-pattern &gt; 不会匹配到.jsp， 只针对我们编写的请求；即：.jsp 不会进入spring的 DispatcherServlet类 。&lt; url-pattern &gt; &#x2F;* &lt;&#x2F; url-pattern &gt; 会匹配 *.jsp，会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错。</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 注意web.xml版本问题，要最新版！</span><br><span class="line">- 注册DispatcherServlet</span><br><span class="line">- 关联SpringMVC的配置文件</span><br><span class="line">- 启动级别为1</span><br><span class="line">- 映射路径为 / 【不要用/*，会404】</span><br></pre></td></tr></table></figure><p> <strong>5、添加Spring MVC配置文件</strong></p><p> 在resource目录下添加springmvc-servlet.xml配置文件，配置的形式与Spring容器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，具体配置信息如下：</p> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.feng.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    支持mvc注解驱动</span></span><br><span class="line"><span class="comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">        要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">        这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 在视图解析器中我们把所有的视图都存放在&#x2F;WEB-INF&#x2F;目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 让IOC的注解生效</span><br><span class="line">- 静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 .....</span><br><span class="line">- MVC的注解驱动</span><br><span class="line">- 配置视图解析器</span><br></pre></td></tr></table></figure><p><strong>6、创建Controller</strong></p><p>编写一个Java控制类：com.kuang.controller.HelloController , 注意编码规范</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/HelloController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//真实访问地址 : 项目名/HelloController/hello</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">       <span class="comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span></span><br><span class="line">       model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello,SpringMVC by ladidol&#x27;s annotation&quot;</span>);</span><br><span class="line">       <span class="comment">//web-inf/jsp/hello.jsp</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Controller是为了让Spring IOC容器初始化时自动扫描到；<ul><li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是&#x2F;HelloController&#x2F;hello；</li><li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li><li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF&#x2F;jsp&#x2F;<strong>hello</strong>.jsp。</li></ul></li></ul><p>7、<strong>创建视图层</strong></p><p>在WEB-INF&#x2F; jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息；</p><p> 可以通过EL表示取出Model中存放的值，或者对象；</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;springmvcAnnotation&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>8、项目结构:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328201444753.png" alt="image-20220328201444753"></p><p><strong>配置Tomcat运行</strong></p><p>配置Tomcat ，  开启服务器 ， 访问 对应的请求路径！</p><p>注意tomcat中打包的站路径不要和之前的重复了;</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328201315318.png" alt="image-20220328201315318"></p><p><strong>OK，运行成功！</strong></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>实现步骤其实非常的简单：</p><ol><li>新建一个web项目</li><li>导入相关jar包</li><li>编写web.xml , 注册DispatcherServlet</li><li>编写springmvc配置文件</li><li>接下来就是去创建对应的控制类 , controller</li><li>最后完善前端视图和controller之间的对应</li><li>测试运行调试.</li></ol><p>使用springMVC必须配置的三大件：</p><p><strong>处理器映射器、处理器适配器、视图解析器</strong></p><p>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的xml配置</p><p>再来回顾下原理吧~</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328202420580.png"></p><h1 id="RestFul和控制器"><a href="#RestFul和控制器" class="headerlink" title="RestFul和控制器"></a>RestFul和控制器</h1><h3 id="控制器Controller"><a href="#控制器Controller" class="headerlink" title="控制器Controller"></a>控制器Controller</h3><ul><li><p>控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</p></li><li><p>控制器负责解析用户的请求并将其转换为一个模型。</p></li><li><p>在Spring MVC中一个控制器类可以包含多个方法</p></li><li><p>在Spring MVC中，对于Controller的配置方式有很多种</p></li></ul><h3 id="实现Controller接口"><a href="#实现Controller接口" class="headerlink" title="实现Controller接口"></a>实现Controller接口</h3><p>Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现该接口的类获得控制器功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">   <span class="comment">//处理请求且返回一个模型与视图对象</span></span><br><span class="line">   ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest var1, HttpServletResponse var2)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><ol><li><p>新建一个Moudle，springmvc-04-controller 。将刚才的03 拷贝一份, 我们进行操作！</p></li><li><ul><li>删掉HelloController</li><li>mvc的配置文件只留下 视图解析器！</li></ul></li><li><p>编写一个Controller类，ControllerTest1</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义控制器</span></span><br><span class="line"><span class="comment">//注意点：不要导错包，实现Controller接口，重写方法；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest1</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;Test1Controller&quot;</span>);</span><br><span class="line">       mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写完毕后，去Spring配置文件中注册请求的bean；name对应请求路径，class对应处理请求的类</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;/t1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.controller.ControllerTest1&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写前端test.jsp，注意在WEB-INF&#x2F;jsp目录下编写，对应我们的视图解析器</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;ladidol&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置Tomcat运行测试，我这里没有项目发布名配置的就是一个 &#x2F; ，所以请求不用加项目名，OK！</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328203553161.png" alt="image-20220328203553161"></p></li></ol><p><strong>说明：</strong></p><ul><li><p>实现接口Controller定义控制器是较老的办法</p></li><li><p>缺点是：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦；</p></li></ul><h3 id="使用注解-Controller"><a href="#使用注解-Controller" class="headerlink" title="使用注解@Controller"></a>使用注解@Controller</h3><ul><li><p>@Controller注解类型用于声明Spring类的实例是一个控制器（在讲IOC时还提到了另外3个注解）；</p></li><li><p>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.feng.controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>增加一个ControllerTest2类，使用注解实现；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Controller注解的类会自动添加到Spring上下文中</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest2</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//映射访问路径</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/t2&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">       <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">       model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;ControllerTest2&quot;</span>);</span><br><span class="line">       <span class="comment">//返回视图位置</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行tomcat测试</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328203612734.png" alt="image-20220328203612734"></p></li></ul><p><strong>可以发现，我们的两个请求都可以指向一个视图，但是页面结果的结果是不一样的，从这里可以看出视图是被复用的，而控制器与视图之间是弱偶合关系。</strong></p><p><strong>注解方式是平时使用的最多的方式！</strong></p><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h3><p><strong>@RequestMapping</strong></p><ul><li><p>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p></li><li><p>为了测试结论更加准确，我们可以加上一个项目名测试 myweb</p></li><li><p>只注解在方法上面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/h1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问路径：<a href="http://localhost:8080/">http://localhost:8080</a> &#x2F; 项目名 &#x2F; h1</p></li><li><p>同时注解类与方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/h1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问路径：<a href="http://localhost:8080/">http://localhost:8080</a> &#x2F; 项目名&#x2F; admin &#x2F;h1  , 需要先指定类的路径再指定方法的路径；</p></li></ul><h3 id="RestFul-风格"><a href="#RestFul-风格" class="headerlink" title="RestFul 风格"></a>RestFul 风格</h3><p><strong>概念</strong></p><p>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p><strong>功能</strong></p><p>资源：互联网所有的事物都可以被抽象为资源</p><p>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</p><p>分别对应 添加、 删除、修改、查询。</p><p><strong>传统方式操作资源</strong>  ：通过不同的参数来实现不同的效果！方法单一，post 和 get</p><p>​    <a href="http://127.0.0.1/item/queryItem.action?id=1">http://127.0.0.1/item/queryItem.action?id=1</a> 查询,GET</p><p>​    <a href="http://127.0.0.1/item/saveItem.action">http://127.0.0.1/item/saveItem.action</a> 新增,POST</p><p>​    <a href="http://127.0.0.1/item/updateItem.action">http://127.0.0.1/item/updateItem.action</a> 更新,POST</p><p>​    <a href="http://127.0.0.1/item/deleteItem.action?id=1">http://127.0.0.1/item/deleteItem.action?id=1</a> 删除,GET或POST</p><p><strong>使用RESTful操作资源</strong> ：可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p><p>​    <a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 查询,GET</p><p>​    <a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 新增,POST</p><p>​    <a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 更新,PUT</p><p>​    <a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 删除,DELETE</p><p><strong>学习测试</strong></p><ol><li><p>在新建一个类 RestFulController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestFulController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在Spring MVC中可以使用  @PathVariable 注解，让方法参数的值对应绑定到一个URI模板变量上。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestFulController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//映射访问路径</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> p1, <span class="meta">@PathVariable</span> <span class="type">int</span> p2, Model model)</span>&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> p1+p2;</span><br><span class="line">       <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">       model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果：&quot;</span>+result);</span><br><span class="line">       <span class="comment">//返回视图位置</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">       </span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们来测试请求查看下</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328204123412.png" alt="image-20220328204123412"></p></li><li><p>思考：使用路径变量的好处？</p></li><li><ul><li><p>使路径变得更加简洁；</p></li><li><p>获得参数更加方便，框架会自动进行类型转换。</p></li><li><p>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访问是的路径是&#x2F;commit&#x2F;1&#x2F;a，则路径与方法不匹配，而不会是参数转换失败。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328204134399.png" alt="image-20220328204134399"></p></li></ul></li><li><p>我们来修改下对应的参数类型，再次测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//映射访问路径</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> p1, <span class="meta">@PathVariable</span> String p2, Model model)</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> p1+p2;</span><br><span class="line">   <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">   model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果：&quot;</span>+result);</span><br><span class="line">   <span class="comment">//返回视图位置</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328204157121.png" alt="image-20220328204157121"></p></li></ol><p><strong>使用method属性指定请求类型</strong></p><p>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</p><p>我们来测试一下：</p><ul><li><p>增加一个方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//映射访问路径,必须是POST请求</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.POST&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index2</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">   model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们使用浏览器地址栏进行访问默认是Get请求，会报错405：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328204220050.png" alt="image-20220328204220050"></p></li><li><p>如果将POST修改为GET则正常了；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//映射访问路径,必须是Get请求</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.GET&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index2</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">   model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328204232218.png" alt="image-20220328204232218"></p></li></ul><p><strong>小结：</strong></p><p>对于model的理解<a href="https://blog.csdn.net/Hello_ChenLiYan/article/details/106411452">传送门</a></p><p>Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。</p><p><strong>所有的地址栏请求默认都会是 HTTP GET 类型的。</strong></p><p>方法级别的注解变体有如下几个：组合注解</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@GetMapping</span><br><span class="line">@PostMapping</span><br><span class="line">@PutMapping</span><br><span class="line">@DeleteMapping</span><br><span class="line">@PatchMapping</span><br></pre></td></tr></table></figure><p>@GetMapping 是一个组合注解，平时使用的会比较多！</p><p>它所扮演的是 @RequestMapping(method &#x3D;RequestMethod.GET) 的一个快捷方式。</p><h1 id="数据处理及跳转"><a href="#数据处理及跳转" class="headerlink" title="数据处理及跳转"></a>数据处理及跳转</h1><h2 id="结果跳转方式"><a href="#结果跳转方式" class="headerlink" title="结果跳转方式"></a>结果跳转方式</h2><h3 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h3><p>设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面 .</p><p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应的controller类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest1</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ControllerTest1&quot;</span>);</span><br><span class="line">       mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ServletAPI"><a href="#ServletAPI" class="headerlink" title="ServletAPI"></a>ServletAPI</h3><p>通过设置ServletAPI , 不需要视图解析器 .</p><p>1、通过HttpServletResponse进行输出</p><p>2、通过HttpServletResponse实现重定向</p><p>3、通过HttpServletResponse实现转发</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultGo</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       rsp.getWriter().println(<span class="string">&quot;Hello,Spring BY servlet API&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t2&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       rsp.sendRedirect(<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t3&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       req.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;/result/t3&quot;</span>);</span><br><span class="line">       req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,rsp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h3><p><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器；</strong></p><p>测试前，需要将视图解析器注释掉</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultSpringMVC</span> &#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t2&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//转发二</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;forward:/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t3&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//重定向</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器；</strong></p><p>重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以注意路径问题.</p><p>可以重定向到另外一个请求实现 .</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultSpringMVC2</span> &#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm2/t1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm2/t2&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//重定向</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">       <span class="comment">//return &quot;redirect:hello.do&quot;; //hello.do为另一个请求/</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据显示到前端"><a href="#数据显示到前端" class="headerlink" title="数据显示到前端"></a>数据显示到前端</h3><p><strong>第一种 : 通过ModelAndView</strong></p><p>我们前面一直都是如此 . 就不过多解释</p><p>&#x2F;&#x2F;这里是继承的Controller,所以,就需要在spring中注册bean</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest1</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ControllerTest1&quot;</span>);</span><br><span class="line">       mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二种 : 通过ModelMap</strong></p><p>ModelMap</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, ModelMap model)</span>&#123;</span><br><span class="line">   <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">   <span class="comment">//相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">   model.addAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第三种 : 通过Model</strong></p><p>Model</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/ct2/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, Model model)</span>&#123;</span><br><span class="line">   <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">   <span class="comment">//相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">   model.addAttribute(<span class="string">&quot;msg&quot;</span>,name);</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h3><p>测试步骤：</p><p>1、我们可以在首页编写一个提交的表单</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/e/t&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line"> &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line"> &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>2、后台编写对应的处理类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Encoding</span> &#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/e/t&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(Model model,String name)</span>&#123;</span><br><span class="line">       model.addAttribute(<span class="string">&quot;msg&quot;</span>,name); <span class="comment">//获取表单提交的值</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>; <span class="comment">//跳转到test页面显示输入的值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、输入中文测试，发现乱码</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328213005939.png" alt="image-20220328213005939"></p><p>不得不说，乱码问题是在我们开发中十分常见的问题，也是让我们程序猿比较头大的问题！</p><p>以前乱码问题通过过滤器解决 , 而SpringMVC给我们提供了一个过滤器 , 可以在web.xml中配置 .</p><p>修改了xml文件需要重启服务器！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是我们发现 , 有些极端情况下.这个过滤器对get的支持不好 .</p><p>处理方法 :</p><p>1、修改tomcat配置文件 ：设置编码！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">URIEncoding</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>2、自定义过滤器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 解决get和post请求 全部乱码的过滤器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericEncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">       <span class="comment">//处理response的字符编码</span></span><br><span class="line">       HttpServletResponse myResponse=(HttpServletResponse) response;</span><br><span class="line">       myResponse.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 转型为与协议相关对象</span></span><br><span class="line">       <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">       <span class="comment">// 对request包装增强</span></span><br><span class="line">       <span class="type">HttpServletRequest</span> <span class="variable">myrequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRequest</span>(httpServletRequest);</span><br><span class="line">       chain.doFilter(myrequest, response);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义request对象，HttpServletRequest的包装类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRequest</span> <span class="keyword">extends</span> <span class="title class_">HttpServletRequestWrapper</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">   <span class="comment">//是否编码的标记</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> hasEncode;</span><br><span class="line">   <span class="comment">//定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">MyRequest</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>(request);<span class="comment">// super必须写</span></span><br><span class="line">       <span class="built_in">this</span>.request = request;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 对需要增强方法 进行覆盖</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Map <span class="title function_">getParameterMap</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// 先获得请求方式</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">       <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">&quot;post&quot;</span>)) &#123;</span><br><span class="line">           <span class="comment">// post请求</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">// 处理post乱码</span></span><br><span class="line">               request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">               <span class="keyword">return</span> request.getParameterMap();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">&quot;get&quot;</span>)) &#123;</span><br><span class="line">           <span class="comment">// get请求</span></span><br><span class="line">           Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">           <span class="keyword">if</span> (!hasEncode) &#123; <span class="comment">// 确保get手动编码逻辑只运行一次</span></span><br><span class="line">               <span class="keyword">for</span> (String parameterName : parameterMap.keySet()) &#123;</span><br><span class="line">                   String[] values = parameterMap.get(parameterName);</span><br><span class="line">                   <span class="keyword">if</span> (values != <span class="literal">null</span>) &#123;</span><br><span class="line">                       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                           <span class="keyword">try</span> &#123;</span><br><span class="line">                               <span class="comment">// 处理get乱码</span></span><br><span class="line">                               values[i] = <span class="keyword">new</span> <span class="title class_">String</span>(values[i]</span><br><span class="line">                                      .getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                          &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                               e.printStackTrace();</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">               hasEncode = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">           <span class="keyword">return</span> parameterMap;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">super</span>.getParameterMap();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//取一个值</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getParameter</span><span class="params">(String name)</span> &#123;</span><br><span class="line">       Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">       String[] values = parameterMap.get(name);</span><br><span class="line">       <span class="keyword">if</span> (values == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> values[<span class="number">0</span>]; <span class="comment">// 取回参数的第一个值</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//取所有值</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">       Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">       String[] values = parameterMap.get(name);</span><br><span class="line">       <span class="keyword">return</span> values;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个也是我在网上找的一些大神写的，一般情况下，SpringMVC默认的乱码处理就已经能够很好的解决了！</p><p><strong>然后在web.xml中配置这个过滤器即可！</strong></p><p>乱码问题，需要平时多注意，在尽可能能设置编码的地方，都设置为统一编码 UTF-8！</p><h1 id="整合SSM框架"><a href="#整合SSM框架" class="headerlink" title="整合SSM框架"></a>整合SSM框架</h1><h2 id="整合SSM"><a href="#整合SSM" class="headerlink" title="整合SSM"></a>整合SSM</h2><blockquote><p>环境要求</p></blockquote><p>环境：</p><ul><li>IDEA</li><li>MySQL 5.7.19</li><li>Tomcat 9</li><li>Maven 3.6</li></ul><p> 要求：</p><ul><li>需要熟练掌握MySQL数据库，Spring，JavaWeb及MyBatis知识，简单的前端知识；</li></ul><blockquote><p>数据库环境</p></blockquote><p>创建一个存放书籍数据的数据库表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `ssmbuild`;</span><br><span class="line"></span><br><span class="line">USE `ssmbuild`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `books`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `books` (</span><br><span class="line">`bookID` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;书id&#x27;</span>,</span><br><span class="line">`bookName` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;书名&#x27;</span>,</span><br><span class="line">`bookCounts` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;数量&#x27;</span>,</span><br><span class="line">`detail` <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;描述&#x27;</span>,</span><br><span class="line">KEY `bookID` (`bookID`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> `books`(`bookID`,`bookName`,`bookCounts`,`detail`)<span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;从入门到放弃&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;MySQL&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;从删库到跑路&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;Linux&#x27;</span>,<span class="number">5</span>,<span class="string">&#x27;从进门到进牢&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>基本环境搭建</p></blockquote><p>1、新建一Maven项目！ssmbuild ， 添加web的支持</p><p>2、导入相关的pom依赖！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--Junit--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Servlet - JSP --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Mybatis--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Spring--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、Maven资源过滤设置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、建立基本结构和配置框架！</p><ul><li><p>com.kuang.pojo</p></li><li><p>com.kuang.dao</p></li><li><p>com.kuang.service</p></li><li><p>com.kuang.controller</p></li><li><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>Mybatis层编写</p></blockquote><p>1、数据库配置文件 <strong>database.properties</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=123456</span><br></pre></td></tr></table></figure><p>2、IDEA关联数据库</p><p>3、编写MyBatis的核心配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.kuang.pojo&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/kuang/dao/BookMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、编写数据库对应的实体类 com.kuang.pojo.Books</p><p>使用lombok插件！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Books</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> bookID;</span><br><span class="line">   <span class="keyword">private</span> String bookName;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> bookCounts;</span><br><span class="line">   <span class="keyword">private</span> String detail;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、编写Dao层的 Mapper接口！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//增加一个Book</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">addBook</span><span class="params">(Books book)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据id删除一个Book</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">deleteBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//更新Book</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">updateBook</span><span class="params">(Books books)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">   Books <span class="title function_">queryBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">   List&lt;Books&gt; <span class="title function_">queryAllBook</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">       <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.kuang.dao.BookMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--增加一个Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      insert into ssmbuild.books(bookName,bookCounts,detail)</span><br><span class="line">      values (#&#123;bookName&#125;, #&#123;bookCounts&#125;, #&#123;detail&#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--根据id删除一个Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBookById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">      delete from ssmbuild.books where bookID=#&#123;bookID&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--更新Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      update ssmbuild.books</span><br><span class="line">      set bookName = #&#123;bookName&#125;,bookCounts = #&#123;bookCounts&#125;,detail = #&#123;detail&#125;</span><br><span class="line">      where bookID = #&#123;bookID&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--根据id查询,返回一个Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBookById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      select * from ssmbuild.books</span><br><span class="line">      where bookID = #&#123;bookID&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--查询全部Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAllBook&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      SELECT * from ssmbuild.books</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7、编写Service层的接口和实现类</p><p>接口：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.Books;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BookService:底下需要去实现,调用dao层</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">   <span class="comment">//增加一个Book</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">addBook</span><span class="params">(Books book)</span>;</span><br><span class="line">   <span class="comment">//根据id删除一个Book</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">deleteBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">   <span class="comment">//更新Book</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">updateBook</span><span class="params">(Books books)</span>;</span><br><span class="line">   <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">   Books <span class="title function_">queryBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">   <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">   List&lt;Books&gt; <span class="title function_">queryAllBook</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuang.dao.BookMapper;</span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//调用dao层的操作，设置一个set接口，方便Spring管理</span></span><br><span class="line">   <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookMapper</span><span class="params">(BookMapper bookMapper)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.bookMapper = bookMapper;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addBook</span><span class="params">(Books book)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.addBook(book);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteBookById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.deleteBookById(id);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateBook</span><span class="params">(Books books)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.updateBook(books);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> Books <span class="title function_">queryBookById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.queryBookById(id);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> List&lt;Books&gt; <span class="title function_">queryAllBook</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.queryAllBook();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OK，到此，底层需求操作编写完毕！</strong></p><blockquote><p>Spring层</p></blockquote><p>1、配置<strong>Spring整合MyBatis</strong>，我们这里数据源使用c3p0连接池；</p><p>2、我们去编写Spring整合Mybatis的相关的配置文件；spring-dao.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置整合mybatis --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 1.关联数据库文件 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--数据库连接池</span></span><br><span class="line"><span class="comment">       dbcp 半自动化操作 不能自动连接</span></span><br><span class="line"><span class="comment">       c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.kuang.dao&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、<strong>Spring整合service层</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 扫描service相关的bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.service&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--BookServiceImpl注入到IOC容器中--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;BookServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.service.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookMapper&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！</p><blockquote><p>SpringMVC层</p></blockquote><p>1、<strong>web.xml</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--DispatcherServlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--&gt;</span>  </span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--encodingFilter--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">          org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">       <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!--Session过期时间--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、<strong>spring-mvc.xml</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">   https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.扫描web相关的bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、<strong>Spring配置整合文件，applicationContext.xml</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-service.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;spring-mvc.xml&quot;</span>/&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置文件，暂时结束！Controller 和 视图层编写</strong></p><p>1、BookController 类编写 ， 方法一：查询全部书籍</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="meta">@Qualifier(&quot;BookServiceImpl&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/allBook&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">list</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">       List&lt;Books&gt; list = bookService.queryAllBook();</span><br><span class="line">       model.addAttribute(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;allBook&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、编写首页 <strong>index.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">   &lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">       a &#123;</span><br><span class="line">           text-decoration: none;</span><br><span class="line">           color: black;</span><br><span class="line">           font-size: 18px;</span><br><span class="line">      &#125;</span><br><span class="line">       h3 &#123;</span><br><span class="line">           width: 180px;</span><br><span class="line">           height: 38px;</span><br><span class="line">           margin: 100px auto;</span><br><span class="line">           text-align: center;</span><br><span class="line">           line-height: 38px;</span><br><span class="line">           background: deepskyblue;</span><br><span class="line">           border-radius: 4px;</span><br><span class="line">      &#125;</span><br><span class="line">   &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;</span><br><span class="line">   &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/allBook&quot;</span>&gt;点击进入列表页&lt;/a&gt;</span><br><span class="line">&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>3、书籍列表页面 <strong>allbook.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;书籍列表&lt;/title&gt;</span><br><span class="line">   &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">   &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">   &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div class=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">       &lt;div class=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">           &lt;div class=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">               &lt;h1&gt;</span><br><span class="line">                   &lt;small&gt;书籍列表 —— 显示所有书籍&lt;/small&gt;</span><br><span class="line">               &lt;/h1&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">       &lt;div class=<span class="string">&quot;col-md-4 column&quot;</span>&gt;</span><br><span class="line">           &lt;a class=<span class="string">&quot;btn btn-primary&quot;</span> href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/toAddBook&quot;</span>&gt;新增&lt;/a&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div class=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">       &lt;div class=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">           &lt;table class=<span class="string">&quot;table table-hover table-striped&quot;</span>&gt;</span><br><span class="line">               &lt;thead&gt;</span><br><span class="line">               &lt;tr&gt;</span><br><span class="line">                   &lt;th&gt;书籍编号&lt;/th&gt;</span><br><span class="line">                   &lt;th&gt;书籍名字&lt;/th&gt;</span><br><span class="line">                   &lt;th&gt;书籍数量&lt;/th&gt;</span><br><span class="line">                   &lt;th&gt;书籍详情&lt;/th&gt;</span><br><span class="line">                   &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">               &lt;/tr&gt;</span><br><span class="line">               &lt;/thead&gt;</span><br><span class="line"></span><br><span class="line">               &lt;tbody&gt;</span><br><span class="line">               &lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;book&quot;</span> items=<span class="string">&quot;$&#123;requestScope.get(&#x27;list&#x27;)&#125;&quot;</span>&gt;</span><br><span class="line">                   &lt;tr&gt;</span><br><span class="line">                       &lt;td&gt;$&#123;book.getBookID()&#125;&lt;/td&gt;</span><br><span class="line">                       &lt;td&gt;$&#123;book.getBookName()&#125;&lt;/td&gt;</span><br><span class="line">                       &lt;td&gt;$&#123;book.getBookCounts()&#125;&lt;/td&gt;</span><br><span class="line">                       &lt;td&gt;$&#123;book.getDetail()&#125;&lt;/td&gt;</span><br><span class="line">                       &lt;td&gt;</span><br><span class="line">                           &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/toUpdateBook?id=$&#123;book.getBookID()&#125;&quot;</span>&gt;更改&lt;/a&gt; |</span><br><span class="line">                           &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/del/$&#123;book.getBookID()&#125;&quot;</span>&gt;删除&lt;/a&gt;</span><br><span class="line">                       &lt;/td&gt;</span><br><span class="line">                   &lt;/tr&gt;</span><br><span class="line">               &lt;/c:forEach&gt;</span><br><span class="line">               &lt;/tbody&gt;</span><br><span class="line">           &lt;/table&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>4、BookController 类编写 ， 方法二：添加书籍</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toAddBook&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toAddPaper</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;addBook&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/addBook&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addPaper</span><span class="params">(Books books)</span> &#123;</span><br><span class="line">   System.out.println(books);</span><br><span class="line">   bookService.addBook(books);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、添加书籍页面：<strong>addBook.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;新增书籍&lt;/title&gt;</span><br><span class="line">   &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">   &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">   &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div class=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">       &lt;div class=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">           &lt;div class=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">               &lt;h1&gt;</span><br><span class="line">                   &lt;small&gt;新增书籍&lt;/small&gt;</span><br><span class="line">               &lt;/h1&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/addBook&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">      书籍名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookName&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">      书籍数量：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookCounts&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">      书籍详情：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;detail&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">       &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;添加&quot;</span>&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>6、BookController 类编写 ， 方法三：修改书籍</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toUpdateBook&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toUpdateBook</span><span class="params">(Model model, <span class="type">int</span> id)</span> &#123;</span><br><span class="line">   <span class="type">Books</span> <span class="variable">books</span> <span class="operator">=</span> bookService.queryBookById(id);</span><br><span class="line">   System.out.println(books);</span><br><span class="line">   model.addAttribute(<span class="string">&quot;book&quot;</span>,books );</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;updateBook&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/updateBook&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">updateBook</span><span class="params">(Model model, Books book)</span> &#123;</span><br><span class="line">   System.out.println(book);</span><br><span class="line">   bookService.updateBook(book);</span><br><span class="line">   <span class="type">Books</span> <span class="variable">books</span> <span class="operator">=</span> bookService.queryBookById(book.getBookID());</span><br><span class="line">   model.addAttribute(<span class="string">&quot;books&quot;</span>, books);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、修改书籍页面  <strong>updateBook.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;修改信息&lt;/title&gt;</span><br><span class="line">   &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">   &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">   &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div class=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">       &lt;div class=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">           &lt;div class=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">               &lt;h1&gt;</span><br><span class="line">                   &lt;small&gt;修改信息&lt;/small&gt;</span><br><span class="line">               &lt;/h1&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/updateBook&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">       &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;bookID&quot;</span> value=<span class="string">&quot;$&#123;book.getBookID()&#125;&quot;</span>/&gt;</span><br><span class="line">      书籍名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookName&quot;</span> value=<span class="string">&quot;$&#123;book.getBookName()&#125;&quot;</span>/&gt;</span><br><span class="line">      书籍数量：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookCounts&quot;</span> value=<span class="string">&quot;$&#123;book.getBookCounts()&#125;&quot;</span>/&gt;</span><br><span class="line">      书籍详情：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;detail&quot;</span> value=<span class="string">&quot;$&#123;book.getDetail() &#125;&quot;</span>/&gt;</span><br><span class="line">       &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>8、BookController 类编写 ， 方法四：删除书籍</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/del/&#123;bookId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteBook</span><span class="params">(<span class="meta">@PathVariable(&quot;bookId&quot;)</span> <span class="type">int</span> id)</span> &#123;</span><br><span class="line">   bookService.deleteBookById(id);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置Tomcat，进行运行！</strong></p><p>到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！</p><p><strong>项目结构图</strong> </p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328213454805.png" alt="image-20220328213454805"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328213503455.png" alt="image-20220328213503455"></p><blockquote><p>小结及展望</p></blockquote><p>这个是同学们的第一个SSM整合案例，一定要烂熟于心！</p><p>SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。</p><p>或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！</p><p>我们后面还要学习一些 SpringMVC 的知识！</p><ul><li>Ajax  和  Json</li><li>文件上传和下载</li><li>拦截器</li></ul><h1 id="Json交互处理"><a href="#Json交互处理" class="headerlink" title="Json交互处理"></a>Json交互处理</h1><blockquote><p>什么是JSON？</p></blockquote><ul><li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</li><li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</li><li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li></ul><p>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键&#x2F;值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;QinJiang&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;男&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>很多人搞不清楚 JSON 和 JavaScript 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：</p><p>JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;World&#x27;</span>&#125;; <span class="comment">//这是一个对象，注意键名也是可以使用引号包裹的</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>; <span class="comment">//这是一个 JSON 字符串，本质是一个字符串</span></span><br></pre></td></tr></table></figure><p><strong>JSON 和 JavaScript 对象互转</strong></p><p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>);</span><br><span class="line"><span class="comment">//结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="attr">a</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;World&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">//结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>代码测试</strong></p><p>1、新建一个module ，springmvc-05-json ， 添加web的支持</p><p>2、在web目录下新建一个 json-1.html ， 编写测试内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">   &lt;title&gt;JSON_秦疆&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">   //编写一个js的对象</span><br><span class="line">   var user = &#123;</span><br><span class="line">       name:&quot;秦疆&quot;,</span><br><span class="line">       age:3,</span><br><span class="line">       sex:&quot;男&quot;</span><br><span class="line">  &#125;;</span><br><span class="line">   //将js对象转换成json字符串</span><br><span class="line">   var str = JSON.stringify(user);</span><br><span class="line">   console.log(str);</span><br><span class="line">   </span><br><span class="line">   //将json字符串转换为js对象</span><br><span class="line">   var user2 = JSON.parse(str);</span><br><span class="line">   console.log(user2.age,user2.name,user2.sex);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>3、在IDEA中使用浏览器打开，查看控制台输出！</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328214618508.png" alt="image-20220328214618508"></p><blockquote><p>Controller返回JSON数据</p></blockquote><p>Jackson应该是目前比较好的json解析工具了</p><p>当然工具不止这一个，比如还有阿里巴巴的 fastjson 等等。</p><p>我们这里使用Jackson，使用它需要导入它的jar包；</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置SpringMVC需要的配置</p><p>web.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>springmvc-servlet.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们随便编写一个User的实体类，然后我们去编写我们的测试Controller；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要导入lombok</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">   <span class="keyword">private</span> String sex;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们需要两个新东西，一个是@ResponseBody，一个是ObjectMapper对象，我们看下具体的用法</p><p>编写一个Controller；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/json1&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">       <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">       <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">       <span class="comment">//创建一个对象</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆1号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line">       <span class="comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span></span><br><span class="line">       <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置Tomcat ， 启动测试一下！</p><p><a href="http://localhost:8080/json1">http://localhost:8080/json1</a></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328214804085.png" alt="image-20220328214804085"></p><p>发现出现了乱码问题，我们需要设置一下他的编码格式为utf-8，以及它返回的类型；</p><p>通过@RequestMaping的produces属性来实现，修改下代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//produces:指定响应体返回类型和编码</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/json1&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span></span><br></pre></td></tr></table></figure><p>再次测试， <a href="http://localhost:8080/json1">http://localhost:8080/json1</a> ， 乱码问题OK！</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328214812309.png" alt="image-20220328214812309"></p><p>【注意：使用json记得处理乱码问题】</p><blockquote><p>代码优化</p></blockquote><p><strong>乱码统一解决</strong></p><p>上一种方法比较麻烦，如果项目中有许多请求则每一个都要添加，可以通过Spring配置统一指定，这样就不用每次都去处理了！</p><p>我们可以在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>返回json字符串统一解决</strong></p><p>在类上直接使用 <strong>@RestController</strong> ，这样子，里面所有的方法都只会返回 json 字符串了，不用再每一个都添加@ResponseBody ！我们在前后端分离开发中，一般都使用 @RestController ，十分便捷！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//produces:指定响应体返回类型和编码</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/json1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">       <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">       <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">       <span class="comment">//创建一个对象</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆1号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line">       <span class="comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span></span><br><span class="line">       <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动tomcat测试，结果都正常输出！</p><blockquote><p>测试集合输出</p></blockquote><p>增加一个新的方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/json2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">json2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">   <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">   <span class="comment">//创建一个对象</span></span><br><span class="line">   <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆1号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">   <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆2号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">   <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆3号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">   <span class="type">User</span> <span class="variable">user4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆4号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">   List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;();</span><br><span class="line">   list.add(user1);</span><br><span class="line">   list.add(user2);</span><br><span class="line">   list.add(user3);</span><br><span class="line">   list.add(user4);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> mapper.writeValueAsString(list);</span><br><span class="line">   <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果 : 十分完美，没有任何问题！</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328214841742.png"></p><blockquote><p>输出时间对象</p></blockquote><p>增加一个新的方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/json3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">json3</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line"></span><br><span class="line">   <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建时间一个对象，java.util.Date</span></span><br><span class="line">   <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">   <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> mapper.writeValueAsString(date);</span><br><span class="line">   <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果 :</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328214922179.png" alt="image-20220328214922179"></p><ul><li>默认日期格式会变成一个数字，是1970年1月1日到当前日期的毫秒数！</li><li>Jackson 默认是会把时间转成timestamps形式</li></ul><p><strong>解决方案：取消timestamps形式 ， 自定义时间格式</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/json4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">json4</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line"></span><br><span class="line">   <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//不使用时间戳的方式</span></span><br><span class="line">   mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);</span><br><span class="line">   <span class="comment">//自定义日期格式对象</span></span><br><span class="line">   <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">   <span class="comment">//指定日期格式</span></span><br><span class="line">   mapper.setDateFormat(sdf);</span><br><span class="line"></span><br><span class="line">   <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">   <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> mapper.writeValueAsString(date);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果 : 成功的输出了时间！</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328214935312.png" alt="image-20220328214935312"></p><blockquote><p>抽取为工具类</p></blockquote><p><strong>如果要经常使用的话，这样是比较麻烦的，我们可以将这些代码封装到一个工具类中；我们去编写下</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonUtils</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJson</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> getJson(object,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJson</span><span class="params">(Object object,String dateFormat)</span> &#123;</span><br><span class="line">       <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">       <span class="comment">//不使用时间差的方式</span></span><br><span class="line">       mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);</span><br><span class="line">       <span class="comment">//自定义日期格式对象</span></span><br><span class="line">       <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(dateFormat);</span><br><span class="line">       <span class="comment">//指定日期格式</span></span><br><span class="line">       mapper.setDateFormat(sdf);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> mapper.writeValueAsString(object);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用工具类，代码就更加简洁了！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/json5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">json5</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">   <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">   <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JsonUtils.getJson(date);</span><br><span class="line">   <span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大功告成！完美！</p><blockquote><p>FastJson</p></blockquote><p>fastjson.jar是阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换。实现json的转换方法很多，最后的实现结果都是一样的。</p><p>fastjson 的 pom依赖！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.60<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>fastjson 三个主要的类：</p><p><strong>JSONObject  代表 json 对象</strong> </p><ul><li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li><li>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</li></ul><p><strong>JSONArray  代表 json 对象数组</strong></p><ul><li>内部是有List接口中的方法来完成操作的。</li></ul><p><strong>JSON代表 JSONObject和JSONArray的转化</strong></p><ul><li>JSON类源码分析与使用</li><li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</li></ul><p><strong>代码测试，我们新建一个FastJsonDemo 类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsonDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//创建一个对象</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆1号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆2号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆3号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       <span class="type">User</span> <span class="variable">user4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆4号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;();</span><br><span class="line">       list.add(user1);</span><br><span class="line">       list.add(user2);</span><br><span class="line">       list.add(user3);</span><br><span class="line">       list.add(user4);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;*******Java对象 转 JSON字符串*******&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> JSON.toJSONString(list);</span><br><span class="line">       System.out.println(<span class="string">&quot;JSON.toJSONString(list)==&gt;&quot;</span>+str1);</span><br><span class="line">       <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> JSON.toJSONString(user1);</span><br><span class="line">       System.out.println(<span class="string">&quot;JSON.toJSONString(user1)==&gt;&quot;</span>+str2);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;\n****** JSON字符串 转 Java对象*******&quot;</span>);</span><br><span class="line">       User jp_user1=JSON.parseObject(str2,User.class);</span><br><span class="line">       System.out.println(<span class="string">&quot;JSON.parseObject(str2,User.class)==&gt;&quot;</span>+jp_user1);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;\n****** Java对象 转 JSON对象 ******&quot;</span>);</span><br><span class="line">       <span class="type">JSONObject</span> <span class="variable">jsonObject1</span> <span class="operator">=</span> (JSONObject) JSON.toJSON(user2);</span><br><span class="line">       System.out.println(<span class="string">&quot;(JSONObject) JSON.toJSON(user2)==&gt;&quot;</span>+jsonObject1.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;\n****** JSON对象 转 Java对象 ******&quot;</span>);</span><br><span class="line">       <span class="type">User</span> <span class="variable">to_java_user</span> <span class="operator">=</span> JSON.toJavaObject(jsonObject1, User.class);</span><br><span class="line">       System.out.println(<span class="string">&quot;JSON.toJavaObject(jsonObject1, User.class)==&gt;&quot;</span>+to_java_user);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种工具类，我们只需要掌握使用就好了，在使用的时候在根据具体的业务去找对应的实现。和以前的commons-io那种工具包一样，拿来用就好了</p><h1 id="前端Ajax研究"><a href="#前端Ajax研究" class="headerlink" title="前端Ajax研究"></a>前端Ajax研究</h1><blockquote><p>简介</p></blockquote><ul><li><p><strong>AJAX &#x3D; Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></p></li><li><p>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p></li><li><p><strong>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></p></li><li><p>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。</p></li><li><p>Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</p></li><li><p>就和国内百度的搜索框一样!</p></li><li><p>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</p></li><li><p>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</p></li><li><p>使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</p></li></ul><blockquote><p>伪造Ajax</p></blockquote><p>我们可以使用前端的一个标签来伪造一个ajax的样子。iframe标签</p><p>1、新建一个module ：sspringmvc-06-ajax ， 导入web支持！</p><p>2、编写一个 ajax-frame.html 使用 iframe 测试，感受下效果</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>kuangshen<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;currentTime&#x27;</span>).<span class="property">innerText</span> = myDate.<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">LoadPage</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">var</span> targetUrl =  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;url&#x27;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">console</span>.<span class="title function_">log</span>(targetUrl);</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;iframePosition&quot;</span>).<span class="property">src</span> = targetUrl;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>请输入要加载的地址：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;currentTime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;url&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;https://www.baidu.com/&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;LoadPage()&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h3</span>&gt;</span>加载页面位置：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;iframePosition&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;height: 500px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、使用IDEA开浏览器测试一下！</p><p><strong>利用AJAX可以做：</strong></p><ul><li>注册时，输入用户名自动检测用户是否已经存在。</li><li>登陆时，提示用户名密码错误</li><li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</li><li>….等等</li></ul><blockquote><p>jQuery.ajax</p></blockquote><p>纯JS原生实现Ajax我们不去讲解这里，直接使用jquery提供的，方便学习和使用，避免重复造轮子，有兴趣的同学可以去了解下JS原生XMLHttpRequest ！</p><p>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</p><p>jQuery 提供多个与 AJAX 有关的方法。</p><p>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</p><p>jQuery 不是生产者，而是大自然搬运工。</p><p>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jQuery.<span class="title function_">ajax</span>(...)</span><br><span class="line">      部分参数：</span><br><span class="line">            url：请求地址</span><br><span class="line">            type：请求方式，<span class="variable constant_">GET</span>、<span class="variable constant_">POST</span>（<span class="number">1.9</span><span class="number">.0</span>之后用method）</span><br><span class="line">        headers：请求头</span><br><span class="line">            data：要发送的数据</span><br><span class="line">    contentType：即将发送信息至服务器的内容编码类型(默认: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>)</span><br><span class="line">          <span class="keyword">async</span>：是否异步</span><br><span class="line">        timeout：设置请求超时时间（毫秒）</span><br><span class="line">      beforeSend：发送请求前执行的函数(全局)</span><br><span class="line">        complete：完成之后执行的回调函数(全局)</span><br><span class="line">        success：成功之后执行的回调函数(全局)</span><br><span class="line">          error：失败之后执行的回调函数(全局)</span><br><span class="line">        accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型</span><br><span class="line">        dataType：将服务器端返回的数据转换成指定类型</span><br><span class="line">          <span class="string">&quot;xml&quot;</span>: 将服务器端返回的内容转换成xml格式</span><br><span class="line">          <span class="string">&quot;text&quot;</span>: 将服务器端返回的内容转换成普通文本格式</span><br><span class="line">          <span class="string">&quot;html&quot;</span>: 将服务器端返回的内容转换成普通文本格式，在插入<span class="variable constant_">DOM</span>中时，如果包含<span class="title class_">JavaScript</span>标签，则会尝试去执行。</span><br><span class="line">        <span class="string">&quot;script&quot;</span>: 尝试将返回值当作<span class="title class_">JavaScript</span>去执行，然后再将服务器端返回的内容转换成普通文本格式</span><br><span class="line">          <span class="string">&quot;json&quot;</span>: 将服务器端返回的内容转换成相应的<span class="title class_">JavaScript</span>对象</span><br><span class="line">        <span class="string">&quot;jsonp&quot;</span>: <span class="title class_">JSON</span>P 格式使用 <span class="title class_">JSON</span>P 形式调用函数时，如 <span class="string">&quot;myurl?callback=?&quot;</span> jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</span><br></pre></td></tr></table></figure><p><strong>我们来个简单的测试，使用最原始的HttpServletResponse处理 , .最简单 , 最通用</strong></p><p>1、配置web.xml 和 springmvc的配置文件，复制上面案例的即可 【记得静态资源过滤和注解驱动配置上】</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、编写一个AjaxController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AjaxController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/a1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ajax1</span><span class="params">(String name , HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(name))&#123;</span><br><span class="line">           response.getWriter().print(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           response.getWriter().print(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、导入jquery ， 可以使用在线的CDN ， 也可以下载导入</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、编写index.jsp测试</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">   &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;%--&lt;script src=<span class="string">&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;--%&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       function <span class="title function_">a1</span><span class="params">()</span>&#123;</span><br><span class="line">           $.post(&#123;</span><br><span class="line">               url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a1&quot;</span>,</span><br><span class="line">               data:&#123;<span class="string">&#x27;name&#x27;</span>:$(<span class="string">&quot;#txtName&quot;</span>).val()&#125;,</span><br><span class="line">               success:function (data,status) &#123;</span><br><span class="line">                   alert(data);</span><br><span class="line">                   alert(status);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--onblur：失去焦点触发事件--%&gt;</span><br><span class="line">用户名:&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;txtName&quot;</span> onblur=<span class="string">&quot;a1()&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>5、启动tomcat测试！打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个ajax的请求！是后台返回给我们的结果！测试成功！</p><p><strong>Springmvc实现</strong></p><p>实体类user</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">   <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来获取一个集合对象，展示到前端页面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/a2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">ajax2</span><span class="params">()</span>&#123;</span><br><span class="line">   List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;();</span><br><span class="line">   list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆1号&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">   list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆2号&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">   list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆3号&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">   <span class="keyword">return</span> list; <span class="comment">//由于@RestController注解，将list转成json格式返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端页面</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;btn&quot;</span> value=<span class="string">&quot;获取数据&quot;</span>/&gt;</span><br><span class="line">&lt;table width=<span class="string">&quot;80%&quot;</span> align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">   &lt;tr&gt;</span><br><span class="line">       &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">       &lt;td&gt;年龄&lt;/td&gt;</span><br><span class="line">       &lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">   &lt;/tr&gt;</span><br><span class="line">   &lt;tbody id=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">   &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">   $(function () &#123;</span><br><span class="line">       $(<span class="string">&quot;#btn&quot;</span>).click(function () &#123;</span><br><span class="line">           $.post(<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a2&quot;</span>,function (data) &#123;</span><br><span class="line">               console.log(data)</span><br><span class="line">               <span class="keyword">var</span> html=<span class="string">&quot;&quot;</span>;</span><br><span class="line">               <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;data.length ; i++) &#123;</span><br><span class="line">                   html+= <span class="string">&quot;&lt;tr&gt;&quot;</span> +</span><br><span class="line">                       <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].name + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="line">                       <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].age + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="line">                       <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].sex + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="line">                       <span class="string">&quot;&lt;/tr&gt;&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">               $(<span class="string">&quot;#content&quot;</span>).html(html);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>成功实现了数据回显！可以体会一下Ajax的好处！</strong></p><blockquote><p>注册提示效果</p></blockquote><p>我们再测试一个小Demo，思考一下我们平时注册时候，输入框后面的实时提示怎么做到的；如何优化</p><p>我们写一个Controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/a3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">ajax3</span><span class="params">(String name,String pwd)</span>&#123;</span><br><span class="line">   <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">   <span class="comment">//模拟数据库中存在数据</span></span><br><span class="line">   <span class="keyword">if</span> (name!=<span class="literal">null</span>)&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(name))&#123;</span><br><span class="line">           msg = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           msg = <span class="string">&quot;用户名输入错误&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">if</span> (pwd!=<span class="literal">null</span>)&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&quot;123456&quot;</span>.equals(pwd))&#123;</span><br><span class="line">           msg = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           msg = <span class="string">&quot;密码输入有误&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">return</span> msg; <span class="comment">//由于@RestController注解，将msg转成json格式返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端页面 login.jsp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;ajax&lt;/title&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line"></span><br><span class="line">       function <span class="title function_">a1</span><span class="params">()</span>&#123;</span><br><span class="line">           $.post(&#123;</span><br><span class="line">               url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;</span>,</span><br><span class="line">               data:&#123;<span class="string">&#x27;name&#x27;</span>:$(<span class="string">&quot;#name&quot;</span>).val()&#125;,</span><br><span class="line">               success:function (data) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (data.toString()==<span class="string">&#x27;OK&#x27;</span>)&#123;</span><br><span class="line">                       $(<span class="string">&quot;#userInfo&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;green&quot;</span>);</span><br><span class="line">                  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                       $(<span class="string">&quot;#userInfo&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">                   $(<span class="string">&quot;#userInfo&quot;</span>).html(data);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">       function <span class="title function_">a2</span><span class="params">()</span>&#123;</span><br><span class="line">           $.post(&#123;</span><br><span class="line">               url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;</span>,</span><br><span class="line">               data:&#123;<span class="string">&#x27;pwd&#x27;</span>:$(<span class="string">&quot;#pwd&quot;</span>).val()&#125;,</span><br><span class="line">               success:function (data) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (data.toString()==<span class="string">&#x27;OK&#x27;</span>)&#123;</span><br><span class="line">                       $(<span class="string">&quot;#pwdInfo&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;green&quot;</span>);</span><br><span class="line">                  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                       $(<span class="string">&quot;#pwdInfo&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">                   $(<span class="string">&quot;#pwdInfo&quot;</span>).html(data);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">  用户名:&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;name&quot;</span> onblur=<span class="string">&quot;a1()&quot;</span>/&gt;</span><br><span class="line">   &lt;span id=<span class="string">&quot;userInfo&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">  密码:&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;pwd&quot;</span> onblur=<span class="string">&quot;a2()&quot;</span>/&gt;</span><br><span class="line">   &lt;span id=<span class="string">&quot;pwdInfo&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>【记得处理json乱码问题】</p><p>测试一下效果，动态请求响应，局部刷新，就是如此！</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328220342841.png" alt="image-20220328220342841"></p><blockquote><p>获取baidu接口Demo</p></blockquote><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">   &lt;title&gt;JSONP百度搜索&lt;/title&gt;</span><br><span class="line">   &lt;style&gt;</span><br><span class="line">       #q&#123;</span><br><span class="line">           width: 500px;</span><br><span class="line">           height: 30px;</span><br><span class="line">           border:1px solid #ddd;</span><br><span class="line">           line-height: 30px;</span><br><span class="line">           display: block;</span><br><span class="line">           margin: <span class="number">0</span> auto;</span><br><span class="line">           padding: <span class="number">0</span> 10px;</span><br><span class="line">           font-size: 14px;</span><br><span class="line">      &#125;</span><br><span class="line">       #ul&#123;</span><br><span class="line">           width: 520px;</span><br><span class="line">           list-style: none;</span><br><span class="line">           margin: <span class="number">0</span> auto;</span><br><span class="line">           padding: <span class="number">0</span>;</span><br><span class="line">           border:1px solid #ddd;</span><br><span class="line">           margin-top: -1px;</span><br><span class="line">           display: none;</span><br><span class="line">      &#125;</span><br><span class="line">       #ul li&#123;</span><br><span class="line">           line-height: 30px;</span><br><span class="line">           padding: <span class="number">0</span> 10px;</span><br><span class="line">      &#125;</span><br><span class="line">       #ul li:hover&#123;</span><br><span class="line">           background-color: #f60;</span><br><span class="line">           color: #fff;</span><br><span class="line">      &#125;</span><br><span class="line">   &lt;/style&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2.步骤二</span></span><br><span class="line">       <span class="comment">// 定义demo函数 (分析接口、数据)</span></span><br><span class="line">       function <span class="title function_">demo</span><span class="params">(data)</span>&#123;</span><br><span class="line">           <span class="type">var</span> <span class="variable">Ul</span> <span class="operator">=</span> document.getElementById(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">           <span class="type">var</span> <span class="variable">html</span> <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">           <span class="comment">// 如果搜索数据存在 把内容添加进去</span></span><br><span class="line">           <span class="keyword">if</span> (data.s.length) &#123;</span><br><span class="line">               <span class="comment">// 隐藏掉的ul显示出来</span></span><br><span class="line">               Ul.style.display = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">               <span class="comment">// 搜索到的数据循环追加到li里</span></span><br><span class="line">               <span class="keyword">for</span>(<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;data.s.length;i++)&#123;</span><br><span class="line">                   html += <span class="string">&#x27;&lt;li&gt;&#x27;</span>+data.s[i]+<span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">              &#125;</span><br><span class="line">               <span class="comment">// 循环的li写入ul</span></span><br><span class="line">               Ul.innerHTML = html;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 1.步骤一</span></span><br><span class="line">       window.onload = function()&#123;</span><br><span class="line">           <span class="comment">// 获取输入框和ul</span></span><br><span class="line">           <span class="type">var</span> <span class="variable">Q</span> <span class="operator">=</span> document.getElementById(<span class="string">&#x27;q&#x27;</span>);</span><br><span class="line">           <span class="type">var</span> <span class="variable">Ul</span> <span class="operator">=</span> document.getElementById(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 事件鼠标抬起时候</span></span><br><span class="line">           Q.onkeyup = function()&#123;</span><br><span class="line">               <span class="comment">// 如果输入框不等于空</span></span><br><span class="line">               <span class="keyword">if</span> (<span class="built_in">this</span>.value != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                   <span class="comment">// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆JSONPz重点☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆</span></span><br><span class="line">                   <span class="comment">// 创建标签</span></span><br><span class="line">                   <span class="type">var</span> <span class="variable">script</span> <span class="operator">=</span> document.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">                   <span class="comment">//给定要跨域的地址 赋值给src</span></span><br><span class="line">                   <span class="comment">//这里是要请求的跨域的地址 我写的是百度搜索的跨域地址</span></span><br><span class="line">                   script.src = <span class="string">&#x27;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=&#x27;</span>+<span class="built_in">this</span>.value+<span class="string">&#x27;&amp;cb=demo&#x27;</span>;</span><br><span class="line">                   <span class="comment">// 将组合好的带src的script标签追加到body里</span></span><br><span class="line">                   document.body.appendChild(script);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;q&quot;</span> /&gt;</span><br><span class="line">&lt;ul id=<span class="string">&quot;ul&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><blockquote><p>概述</p></blockquote><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。</p><p><strong>过滤器与拦截器的区别：</strong>拦截器是AOP思想的具体应用。</p><p><strong>过滤器</strong></p><ul><li>servlet规范中的一部分，任何java web工程都可以使用</li><li>在url-pattern中配置了&#x2F;*之后，可以对所有要访问的资源进行拦截</li></ul><p><strong>拦截器</strong> </p><ul><li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</li><li>拦截器只会拦截访问的控制器方法， 如果访问的是jsp&#x2F;html&#x2F;css&#x2F;image&#x2F;js是不会进行拦截的</li></ul><blockquote><p>自定义拦截器</p></blockquote><p>那如何实现拦截器呢？</p><p>想要自定义拦截器，必须实现 HandlerInterceptor 接口。</p><p>1、新建一个Moudule ， springmvc-07-Interceptor  ， 添加web支持</p><p>2、配置web.xml 和 springmvc-servlet.xml 文件</p><p>3、编写一个拦截器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//在请求处理的方法之前执行</span></span><br><span class="line">   <span class="comment">//如果返回true执行下一个拦截器</span></span><br><span class="line">   <span class="comment">//如果返回false就不执行下一个拦截器</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;------------处理前------------&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//在请求处理方法执行之后执行</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;------------处理后------------&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//在dispatcherServlet处理后执行,做清理工作.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;------------清理------------&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、在springmvc的配置文件中配置拦截器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--关于拦截器的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--/** 包括路径及其子路径--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--bean配置的就是拦截器--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.interceptor.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、编写一个Controller，接收请求</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试拦截器的控制器</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/interceptor&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">testFunction</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;控制器中的方法执行了&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、前端 index.jsp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/interceptor&quot;</span>&gt;拦截器测试&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>7、启动tomcat 测试一下！</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328221253999.png" alt="image-20220328221253999"></p><blockquote><p>验证用户是否登录 (认证用户)</p></blockquote><p><strong>实现思路</strong></p><p>1、有一个登陆页面，需要写一个controller访问页面。</p><p>2、登陆页面有一提交表单的动作。需要在controller中处理。判断用户名密码是否正确。如果正确，向session中写入用户信息。<em>返回登陆成功。</em></p><p>3、拦截用户请求，判断用户是否登陆。如果用户已经登陆。放行， 如果用户未登陆，跳转到登陆页面</p><p><strong>测试：</strong></p><p>1、编写一个登陆页面  login.jsp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;登录页面&lt;/h1&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/login&quot;</span>&gt;</span><br><span class="line">  用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">  密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;pwd&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">   &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>2、编写一个Controller处理请求</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//跳转到登陆页面</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/jumplogin&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">jumpLogin</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//跳转到成功页面</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/jumpSuccess&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">jumpSuccess</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//登陆提交</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(HttpSession session, String username, String pwd)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">// 向session记录用户身份信息</span></span><br><span class="line">       System.out.println(<span class="string">&quot;接收前端===&quot;</span>+username);</span><br><span class="line">       session.setAttribute(<span class="string">&quot;user&quot;</span>, username);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//退出登陆</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;logout&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">logout</span><span class="params">(HttpSession session)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">// session 过期</span></span><br><span class="line">       session.invalidate();</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、编写一个登陆成功的页面 success.jsp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;登录成功页面&lt;/h1&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">$&#123;user&#125;</span><br><span class="line">&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/logout&quot;</span>&gt;注销&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>4、在 index 页面上测试跳转！启动Tomcat 测试，未登录也可以进入主页！</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">   &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"> &lt;h1&gt;首页&lt;/h1&gt;</span><br><span class="line"> &lt;hr&gt;</span><br><span class="line">&lt;%--登录--%&gt;</span><br><span class="line"> &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/jumplogin&quot;</span>&gt;登录&lt;/a&gt;</span><br><span class="line"> &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/jumpSuccess&quot;</span>&gt;成功页面&lt;/a&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>5、编写用户登录拦截器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       <span class="comment">// 如果是登陆页面则放行</span></span><br><span class="line">       System.out.println(<span class="string">&quot;uri: &quot;</span> + request.getRequestURI());</span><br><span class="line">       <span class="keyword">if</span> (request.getRequestURI().contains(<span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 如果用户已登陆也放行</span></span><br><span class="line">       <span class="keyword">if</span>(session.getAttribute(<span class="string">&quot;user&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 用户没有登陆跳转到登陆页面</span></span><br><span class="line">       request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/login.jsp&quot;</span>).forward(request, response);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、在Springmvc的配置文件中注册拦截器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--关于拦截器的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;loginInterceptor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.interceptor.LoginInterceptor&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7、再次重启Tomcat测试！</p><p><strong>OK，测试登录拦截功能无误.</strong></p><h1 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a>文件上传和下载</h1><blockquote><p>准备工作</p></blockquote><p>文件上传是项目开发中最常见的功能之一 ,springMVC 可以很好的支持文件上传，但是SpringMVC上下文中默认没有装配MultipartResolver，因此默认情况下其不能处理文件上传工作。如果想使用Spring的文件上传功能，则需要在上下文中配置MultipartResolver。</p><p>前端表单要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为multipart&#x2F;form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器；</p><p><strong>对表单中的 enctype 属性做个详细的说明：</strong></p><ul><li>application&#x2F;x-www&#x3D;form-urlencoded：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的表单会将表单域中的值处理成 URL 编码方式。</li><li>multipart&#x2F;form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</li><li>text&#x2F;plain：除了把空格转换为 “+” 号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</li></ul><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">   &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>/&gt;</span><br><span class="line">   &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>一旦设置了enctype为multipart&#x2F;form-data，浏览器即会采用二进制流的方式来处理表单数据，而对于文件上传的处理则涉及在服务器端解析原始的HTTP响应。在2003年，Apache Software Foundation发布了开源的Commons FileUpload组件，其很快成为Servlet&#x2F;JSP程序员上传文件的最佳选择。</p><ul><li>Servlet3.0规范已经提供方法来处理文件上传，但这种上传需要在Servlet中完成。</li><li>而Spring MVC则提供了更简单的封装。</li><li>Spring MVC为文件上传提供了直接的支持，这种支持是用即插即用的MultipartResolver实现的。</li><li>Spring MVC使用Apache Commons FileUpload技术实现了一个MultipartResolver实现类：</li><li>CommonsMultipartResolver。因此，SpringMVC的文件上传还需要依赖Apache Commons FileUpload的组件。</li></ul><blockquote><p>文件上传</p></blockquote><p>1、导入文件上传的jar包，commons-fileupload ， Maven会自动帮我们导入他的依赖包 commons-io包；</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet-api导入高版本的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、配置bean：multipartResolver</p><p>【<strong>注意！！！这个bena的id必须为：multipartResolver ， 否则上传文件会报400的错误！在这里栽过坑,教训！</strong>】</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CommonsMultipartFile 的 常用方法：</p><ul><li><strong>String getOriginalFilename()：获取上传文件的原名</strong></li><li><strong>InputStream getInputStream()：获取文件流</strong></li><li><strong>void transferTo(File dest)：将上传文件保存到一个目录文件中</strong></li></ul><p> 我们去实际测试一下</p><p>3、编写前端页面</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/upload&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line"> &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>/&gt;</span><br><span class="line"> &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;upload&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>4、<strong>Controller</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileController</span> &#123;</span><br><span class="line">   <span class="comment">//@RequestParam(&quot;file&quot;) 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span></span><br><span class="line">   <span class="comment">//批量上传CommonsMultipartFile则为数组即可</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">fileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file , HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取文件名 : file.getOriginalFilename();</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">uploadFileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//如果文件名为空，直接回到首页！</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(uploadFileName))&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;上传文件名 : &quot;</span>+uploadFileName);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//上传路径保存设置</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">       <span class="comment">//如果路径不存在，创建一个</span></span><br><span class="line">       <span class="type">File</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">       <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">           realPath.mkdir();</span><br><span class="line">      &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;上传文件保存地址：&quot;</span>+realPath);</span><br><span class="line"></span><br><span class="line">       <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> file.getInputStream(); <span class="comment">//文件输入流</span></span><br><span class="line">       <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(realPath,uploadFileName)); <span class="comment">//文件输出流</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//读取写出</span></span><br><span class="line">       <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">       <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">       <span class="keyword">while</span> ((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">           os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">           os.flush();</span><br><span class="line">      &#125;</span><br><span class="line">       os.close();</span><br><span class="line">       is.close();</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、测试上传文件，OK！</p><p><strong>采用file.Transto 来保存上传的文件</strong></p><p>1、编写Controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 采用file.Transto 来保存上传的文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/upload2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String  <span class="title function_">fileUpload2</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//上传路径保存设置</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">   <span class="type">File</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">   <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">       realPath.mkdir();</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//上传文件地址</span></span><br><span class="line">   System.out.println(<span class="string">&quot;上传文件保存地址：&quot;</span>+realPath);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span></span><br><span class="line">   file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(realPath +<span class="string">&quot;/&quot;</span>+ file.getOriginalFilename()));</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、前端表单提交地址修改</p><p>3、访问提交测试，OK！</p><blockquote><p>文件下载</p></blockquote><p><strong>文件下载步骤：</strong></p><p>1、设置 response 响应头</p><p>2、读取文件 – InputStream</p><p>3、写出文件 – OutputStream</p><p>4、执行操作</p><p>5、关闭流 （先开后关）</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">downloads</span><span class="params">(HttpServletResponse response ,HttpServletRequest request)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">   <span class="comment">//要下载的图片地址</span></span><br><span class="line">   <span class="type">String</span>  <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">   <span class="type">String</span>  <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;基础语法.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//1、设置response 响应头</span></span><br><span class="line">   response.reset(); <span class="comment">//设置页面不缓存,清空buffer</span></span><br><span class="line">   response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>); <span class="comment">//字符编码</span></span><br><span class="line">   response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>); <span class="comment">//二进制传输数据</span></span><br><span class="line">   <span class="comment">//设置响应头</span></span><br><span class="line">   response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,</span><br><span class="line">           <span class="string">&quot;attachment;fileName=&quot;</span>+URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">   <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path,fileName);</span><br><span class="line">   <span class="comment">//2、 读取文件--输入流</span></span><br><span class="line">   InputStream input=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">   <span class="comment">//3、 写出文件--输出流</span></span><br><span class="line">   <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">   <span class="type">byte</span>[] buff =<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">   <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">   <span class="comment">//4、执行 写出操作</span></span><br><span class="line">   <span class="keyword">while</span>((index= input.read(buff))!= -<span class="number">1</span>)&#123;</span><br><span class="line">       out.write(buff, <span class="number">0</span>, index);</span><br><span class="line">       out.flush();</span><br><span class="line">  &#125;</span><br><span class="line">   out.close();</span><br><span class="line">   input.close();</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/download&quot;</span>&gt;</span>点击下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试，文件下载OK，大家可以和我们之前学习的JavaWeb原生的方式对比一下，就可以知道这个便捷多了!</p><p>拦截器及文件操作在我们开发中十分重要，一定要学会使用！</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写字小贴士</title>
      <link href="/2022/03/28/%E6%89%8B%E5%86%99%E5%AD%97%E5%B0%8F%E8%B4%B4%E5%A3%AB/"/>
      <url>/2022/03/28/%E6%89%8B%E5%86%99%E5%AD%97%E5%B0%8F%E8%B4%B4%E5%A3%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提:"></a>前提:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">左右同形，左小右大</span><br><span class="line">上下同形，上小下大</span><br><span class="line">左右等长，错位书写</span><br><span class="line">左边小时要偏上</span><br><span class="line">右边小时要下落</span><br><span class="line">点下有竖，点竖直对</span><br><span class="line">下有横竖横高竖低</span><br><span class="line">下有撇点，撇高点低</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 小贴士 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小贴士 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析分治</title>
      <link href="/2022/03/28/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5D%E6%B5%85%E6%9E%90%E5%88%86%E6%B2%BB/"/>
      <url>/2022/03/28/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5D%E6%B5%85%E6%9E%90%E5%88%86%E6%B2%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="浅析分治算法"><a href="#浅析分治算法" class="headerlink" title="浅析分治算法"></a>浅析分治算法</h2><p>来自<a href="https://baijiahao.baidu.com/s?id=1685106188743154112&wfr=spider&for=pc">传送门</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h3><p>分治算法（divide and conquer）是五大常用算法(分治算法、动态规划算法、贪心算法、回溯法、分治界限法)之一，很多人在平时学习中可能只是知道分治算法，但是可能并没有系统的学习分治算法，本篇就带你较为全面的去认识和了解分治算法。</p><p>在学习分治算法之前，问你一个问题，相信大家小时候都有存钱罐的经历，父母亲人如果给钱都会往自己的宝藏中存钱，我们每隔一段时间都会清点清点钱。但是一堆钱让你处理起来你可能觉得很复杂，因为数据相对于大脑有点庞大了，并且很容易算错，你可能会将它<strong>先分</strong>成几个小份算，然后<strong>再叠加</strong>起来计算总和就获得这堆钱的总数了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328113727920.png" alt="image-20220328113727920"></p><p>当然如果你觉得各个部分钱数量还是太大，你依然可以进行划分然后合并，我们之所以这么多是因为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">计算每个小堆钱的方式和计算最大堆钱的方式是相同的(区别在于体量上)</span><br><span class="line">然后大堆钱总和其实就是小堆钱结果之和。这样其实就有一种分治的思想。</span><br></pre></td></tr></table></figure><p>当然这些钱都是想出来的……</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328113917320.png" alt="image-20220328113917320"></p><h3 id="分治算法介绍"><a href="#分治算法介绍" class="headerlink" title="分治算法介绍"></a>分治算法介绍</h3><p><strong>分治算法是用了分治思想的一种算法，什么是分治</strong>？</p><p>分治，字面上的解释是“<strong>分而治之</strong>”，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题……直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。在计算机科学中，分治法就是运用分治思想的一种很重要的算法。分治法是很多高效算法的基础，如排序算法（快速排序，归并排序），傅立叶变换（快速傅立叶变换）等等。</p><p>将父问题分解为子问题同等方式求解，这和递归的概念很吻合，所以在分治算法通常以递归的方式实现(当然也有非递归的实现方式)。分治算法的描述从字面上也很容易理解，分、治其实还有个合并的过程：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">分(Divide)：递归解决较小的问题(到终止层或者可以解决的时候停下)</span><br><span class="line">治(Conquer)：递归求解，如果问题够小直接求解。</span><br><span class="line">合并(Combine)：将子问题的解构建父类问题</span><br></pre></td></tr></table></figure><p>一般分治算法在正文中分解为两个即以上的递归调用，并且子类问题一般是不想交的(互不影响)。当求解一个问题规模很大很难直接求解，但是规模较小的时候问题很容易求解并且这个问题并且问题满足分治算法的适用条件，那么就可以使用分治算法</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328114010265.png" alt="image-20220328114010265"></p><p>那么采用分治算法解决的问题需要 **满足那些条件(特征)**呢?</p><p>1 . 原问题规模通常比较大，不易直接解决，但问题缩小到一定程度就能较容易的解决。</p><p>2 . 问题可以分解为若干规模较小、求解方式相同(似)的子问题。且子问题之间求解是独立的互不影响。</p><p>3 . 合并问题分解的子问题可以得到问题的解。</p><p>你可能会疑惑分治算法和递归有什么关系？其实分治重要的是一种思想，注重的是问题分、治、合并的过程。而递归是一种方式(工具)，这种方式通过方法自己调用自己形成一个来回的过程，而分治可能就是利用了多次这样的来回过程。</p><p><strong>分治算法经典问题</strong></p><p>对于分治算法的经典问题，重要的是其思想，因为我们大部分借助递归去实现，所以在代码实现上大部分都是很简单，而本篇也重在讲述思想。</p><p>分治算法的经典问题，个人将它分成两大类：子问题完全独立和子问题不完全独立。</p><p>1 . <strong>子问题完全独立</strong>就是原问题的答案可完全由子问题的结果推出。</p><p>2 . <strong>子问题不完全独立，</strong>有些区间类的问题或者跨区间问题使用分治可能结果跨区间,在考虑问题的时候需要仔细借鉴下。</p><h2 id="分治实例"><a href="#分治实例" class="headerlink" title="分治实例:"></a>分治实例:</h2><h3 id="二分搜索插入"><a href="#二分搜索插入" class="headerlink" title="二分搜索插入:"></a>二分搜索插入:</h3><p>二分搜索是分治的一个实例，只不过二分搜索有着自己的特殊性</p><p>序列有序结果为一个值正常二分将一个完整的区间分成两个区间，两个区间本应单独找值然后确认结果，但是通过有序的区间可以直接确定结果在那个区间，所以分的两个区间只需要计算其中一个区间，然后继续进行一直到结束。实现方式有递归和非递归，但是非递归用的更多一些：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[<span class="number">0</span>] &gt;= target) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//剪枝</span></span><br><span class="line">    <span class="keyword">if</span> (nums[nums.length - <span class="number">1</span>] == target) <span class="keyword">return</span> nums.length - <span class="number">1</span>;<span class="comment">//剪枝</span></span><br><span class="line">    <span class="keyword">if</span> (nums[nums.length - <span class="number">1</span>] &lt; target) <span class="keyword">return</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序:"></a>快速排序:</h3><p>快排也是分治的一个实例，快排每一趟会选定一个数，将比这个数小的放左面，比这个数大的放右面，然后递归分治求解两个子区间，当然快排因为在分的时候就做了很多工作，当全部分到最底层的时候这个序列的值就是排序完的值。这是一种分而治之的体现。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328114205001.png" alt="image-20220328114205001"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quicksort</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> left;</span><br><span class="line">    <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> right; <span class="comment">//下面两句的顺序一定不能混，否则会产生数组越界！！！very important！！！</span></span><br><span class="line">    <span class="keyword">if</span> (low &gt; high)<span class="comment">//作为判断是否截止条件</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> a[low];<span class="comment">//额外空间k，取最左侧的一个作为衡量，最后要求左侧都比它小，右侧都比它大。</span></span><br><span class="line">    <span class="keyword">while</span> (low &lt; high)<span class="comment">//这一轮要求把左侧小于a[low],右侧大于a[low]。</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; a[high] &gt;= k)<span class="comment">//右侧找到第一个小于k的停止</span></span><br><span class="line">        &#123;</span><br><span class="line">            high--;</span><br><span class="line">        &#125; <span class="comment">//这样就找到第一个比它小的了</span></span><br><span class="line">        a[low] = a[high];<span class="comment">//放到low位置</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; a[low] &lt;= k)<span class="comment">//在low往右找到第一个大于k的，放到右侧a[high]位置</span></span><br><span class="line">        &#123;</span><br><span class="line">            low++;</span><br><span class="line">        &#125;</span><br><span class="line">        a[high] = a[low];</span><br><span class="line">    &#125;</span><br><span class="line">    a[low] = k;<span class="comment">//赋值然后左右递归分治求之</span></span><br><span class="line">    quicksort(a, left, low - <span class="number">1</span>);</span><br><span class="line">    quicksort(a, low + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序-逆序数"><a href="#归并排序-逆序数" class="headerlink" title="归并排序(逆序数)"></a>归并排序(逆序数)</h3><p>快排在分的时候做了很多工作，而归并就是相反，归并在分的时候按照数量均匀分，而合并时候已经是两两有序的进行合并的，因为两个有序序列O(n)级别的复杂度即可得到需要的结果。而逆序数在归并排序基础上变形同样也是分治思想求解。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328114231255.png" alt="image-20220328114231255"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergesort</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        mergesort(array, left, mid);</span><br><span class="line">        mergesort(array, mid + <span class="number">1</span>, right);</span><br><span class="line">        merge(array, left, mid, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> l, <span class="type">int</span> mid, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="comment">//将mid两边[l,r]范围的数排序并合并</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">lindex</span> <span class="operator">=</span> l;</span><br><span class="line">    <span class="type">int</span> <span class="variable">rindex</span> <span class="operator">=</span> mid + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> tmp[] = <span class="keyword">new</span> <span class="title class_">int</span>[r - l + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">tmpindex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (lindex &lt;= mid &amp;&amp; rindex &lt;= r) &#123;<span class="comment">//先左右比较合并</span></span><br><span class="line">        <span class="keyword">if</span> (array[lindex] &lt;= array[rindex]) &#123;</span><br><span class="line">            tmp[tmpindex++] = array[lindex++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp[tmpindex++] = array[rindex++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (lindex &lt;= mid)<span class="comment">//当一个越界后剩余按序列添加即可</span></span><br><span class="line">    &#123;</span><br><span class="line">        tmp[tmpindex++] = array[lindex++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (rindex &lt;= r) &#123;</span><br><span class="line">        tmp[tmpindex++] = array[rindex++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tmpindex; i++) &#123;</span><br><span class="line">        array[l + i] = tmp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LeetCode第53题最大子序列和"><a href="#LeetCode第53题最大子序列和" class="headerlink" title="LeetCode第53题最大子序列和"></a>LeetCode第53题最大子序列和</h3><p>最大子序列和的问题我们可以使用动态规划的解法，但是也可以使用分治算法来解决问题，但是最大子序列和在合并的时候并不是简单的合并，因为子序列和涉及到一个长度的问题，所以正确结果不一定全在最左侧或者最右侧，而可能出现结果的区域为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将原数组划分为左右两个数组后，原数组中拥有最大和的连续子数组的位置有三张情况。</span><br><span class="line">情况1. 原数组中拥有最大和的连续子数组的元素都在左边的子数组中。</span><br><span class="line">情况2. 原数组中拥有最大和的连续子数组的元素都在右边的子数组中。</span><br><span class="line">情况3. 原数组中拥有最大和的连续子数组的元素跨越了左右数组。</span><br><span class="line">分别求出，3中情况的最大和，取最大，就是原数组的连续子数组的最大和。</span><br></pre></td></tr></table></figure><p>用一张图可以表示为：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328171650503.png" alt="image-20220328171650503"></p><p>所以在具体考虑的时候需要将无法递归得到结果的中间那个最大值串的结果也算出来参与左侧、右侧值得比较。</p><p>力扣53. 最大子序和在实现的代码为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果子数组只有一个元素，这个元素就是子树组的最大和。</span></span><br><span class="line">        <span class="keyword">if</span> (low == high) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[low];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 求左数组的最大和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">leftMax</span> <span class="operator">=</span> getMax(nums, low, mid);</span><br><span class="line">        <span class="comment">// 求右数组的最大和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rightMax</span> <span class="operator">=</span> getMax(nums, mid + <span class="number">1</span>, high);</span><br><span class="line">        <span class="comment">// 求跨越情况的最大和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">crossMax</span> <span class="operator">=</span> getCrossMax(nums, low, mid, high);</span><br><span class="line">        <span class="comment">// 返回最大</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(Math.max(leftMax, rightMax), crossMax);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 求跨越情况的最大和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCrossMax</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> low, <span class="type">int</span> mid, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="comment">// 从中间向左走，一直累加，每次累计后都取最大值，最后得到的就是从中间向左累加可得到最大和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">leftSum</span> <span class="operator">=</span> nums[mid];</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftMax</span> <span class="operator">=</span> nums[mid];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mid - <span class="number">1</span>; i &gt;= low; i--) &#123;</span><br><span class="line">            leftSum += nums[i];</span><br><span class="line">            leftMax = Math.max(leftMax, leftSum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从中间向右走，一直累加，每次累计后都取最大值，最后得到的就是从中间向右累加可得到最大和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rightSum</span> <span class="operator">=</span> nums[mid+<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightMax</span> <span class="operator">=</span> nums[mid+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mid + <span class="number">2</span>; i &lt;= high; i++) &#123;</span><br><span class="line">            rightSum += nums[i];</span><br><span class="line">            rightMax = Math.max(rightMax, rightSum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 向左累加的最大和加上向右累加的最大和，就是跨越情况下的最大和</span></span><br><span class="line">        <span class="keyword">return</span> leftMax + rightMax;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getMax(nums, <span class="number">0</span> , nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最近点对"><a href="#最近点对" class="headerlink" title="最近点对"></a>最近点对</h3>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring</title>
      <link href="/2022/03/27/spring/"/>
      <url>/2022/03/27/spring/</url>
      
        <content type="html"><![CDATA[<h2 id="spring概述"><a href="#spring概述" class="headerlink" title="spring概述:"></a>spring概述:</h2><p>概述:就是一个轻量级的框架;可以之前看这个博客<a href="https://www.w3cschool.cn/wkspring/7jho1ict.html">传送门</a></p><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构:"></a>三层架构:</h3><ul><li><p>A 表现层  web层  MVC是表现层的一个设计模型 </p></li><li><p>B 业务层 service层</p></li><li><p>C 持久层 dao层</p></li></ul><h3 id="Spring-的优良特性"><a href="#Spring-的优良特性" class="headerlink" title="Spring 的优良特性"></a>Spring 的优良特性</h3><ul><li>非侵入式：基于Spring开发的应用中的对象可以不依赖于Spring的API</li><li>控制反转：IOC——Inversion of Control，指的是将对象的创建权交给 Spring 去创建。使用 Spring 之前，对象的创建都是由我们自己在代码中new创建。而使用 Spring 之后。对象的创建都是给了 Spring 框架。</li><li>依赖注入：DI——Dependency Injection，是指依赖的对象不需要手动调用 setXX 方法去设置，而是通过配置赋值。</li><li>面向切面编程：Aspect Oriented Programming——AOP</li><li>容器：Spring 是一个容器，因为它包含并且管理应用对象的生命周期</li><li>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用XML和Java注解组合这些对象。</li><li>一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上 Spring 自身也提供了表现层的 SpringMVC 和持久层的 Spring JDBC）</li></ul><h3 id="依赖注入（DI）"><a href="#依赖注入（DI）" class="headerlink" title="依赖注入（DI）"></a>依赖注入（DI）</h3><p>Spring 最认同的技术是控制反转的<strong>依赖注入（DI）</strong>模式。控制反转（IoC）是一个通用的概念，它可以用许多不同的方式去表达，依赖注入仅仅是控制反转的一个具体的例子。</p><p>当编写一个复杂的 Java 应用程序时，应用程序类应该尽可能的独立于其他的 Java 类来增加这些类可重用可能性，当进行单元测试时，可以使它们独立于其他类进行测试。依赖注入（或者有时被称为配线）有助于将这些类粘合在一起，并且在同一时间让它们保持独立。</p><p>到底什么是依赖注入？让我们将这两个词分开来看一看。这里将依赖关系部分转化为两个类之间的关联。例如，类 A 依赖于类 B。现在，让我们看一看第二部分，注入。所有这一切都意味着类 B 将通过 IoC 被注入到类 A 中。</p><p>依赖注入可以以向构造函数传递参数的方式发生，或者通过使用 setter 方法 post-construction。由于依赖注入是 Spring 框架的核心部分，所以我将在一个单独的章节中利用很好的例子去解释这一概念。</p><h3 id="面向切面的程序设计（AOP）："><a href="#面向切面的程序设计（AOP）：" class="headerlink" title="面向切面的程序设计（AOP）："></a>面向切面的程序设计（AOP）：</h3><p>Spring 框架的一个关键组件是<strong>面向切面的程序设计（AOP）</strong>框架。一个程序中跨越多个点的功能被称为<strong>横切关注点</strong>，这些横切关注点在概念上独立于应用程序的业务逻辑。有各种各样常见的很好的关于方面的例子，比如日志记录、声明性事务、安全性，和缓存等等。</p><p>在 OOP 中模块化的关键单元是类，而在 AOP 中模块化的关键单元是方面。AOP 帮助你将横切关注点从它们所影响的对象中分离出来，然而依赖注入帮助你将你的应用程序对象从彼此中分离出来。</p><p>Spring 框架的 AOP 模块提供了面向方面的程序设计实现，可以定义诸如方法拦截器和切入点等，从而使实现功能的代码彻底的解耦出来。使用源码级的元数据，可以用类似于 .Net 属性的方式合并行为信息到代码中。我将在一个独立的章节中讨论更多关于 <a href="https://www.w3cschool.cn/wkspring/izae1h9w.html">Spring AOP</a> 的概念。</p><h3 id="Spring-框架具有以下几个特点："><a href="#Spring-框架具有以下几个特点：" class="headerlink" title="Spring 框架具有以下几个特点："></a><strong>Spring 框架具有以下几个特点：</strong></h3><h4 id="1）方便解耦，简化开发"><a href="#1）方便解耦，简化开发" class="headerlink" title="1）方便解耦，简化开发"></a>1）方便解耦，简化开发</h4><p>Spring 就是一个大工厂，可以将所有对象的创建和依赖关系的维护交给 Spring 管理。</p><h4 id="2）方便集成各种优秀框架"><a href="#2）方便集成各种优秀框架" class="headerlink" title="2）方便集成各种优秀框架"></a>2）方便集成各种优秀框架</h4><p>Spring 不排斥各种优秀的开源框架，其内部提供了对各种优秀框架（如 Struts2、Hibernate、MyBatis 等）的直接支持。</p><h4 id="3）降低-Java-EE-API-的使用难度"><a href="#3）降低-Java-EE-API-的使用难度" class="headerlink" title="3）降低 Java EE API 的使用难度"></a>3）降低 Java EE API 的使用难度</h4><p>Spring 对 Java EE 开发中非常难用的一些 API（JDBC、JavaMail、远程调用等）都提供了封装，使这些 API 应用的难度大大降低。</p><h4 id="4）方便程序的测试"><a href="#4）方便程序的测试" class="headerlink" title="4）方便程序的测试"></a>4）方便程序的测试</h4><p>Spring 支持 JUnit4，可以通过注解方便地测试 Spring 程序。</p><h4 id="5）AOP-编程的支持"><a href="#5）AOP-编程的支持" class="headerlink" title="5）AOP 编程的支持"></a>5）AOP 编程的支持</h4><p>Spring 提供面向切面编程，可以方便地实现对程序进行权限拦截和运行监控等功能。</p><h4 id="6）声明式事务的支持"><a href="#6）声明式事务的支持" class="headerlink" title="6）声明式事务的支持"></a>6）声明式事务的支持</h4><p>只需要通过配置就可以完成对事务的管理，而无须手动编程。</p><h2 id="spring体系结构"><a href="#spring体系结构" class="headerlink" title="spring体系结构"></a>spring体系结构</h2><p>Spring 框架提供约 20 个模块，可以根据应用程序的要求来使用。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/arch1.png" alt="Spring 体系结构"></p><h3 id="核心容器"><a href="#核心容器" class="headerlink" title="核心容器"></a>核心容器</h3><p>核心容器由 <strong>spring-core，spring-beans，spring-context，spring-context-support和spring-expression</strong>（SpEL，Spring 表达式语言，Spring Expression Language）等模块组成，它们的细节如下：</p><ul><li><strong>spring-core</strong> 模块提供了框架的基本组成部分，包括 IoC 和依赖注入功能。</li><li><strong>spring-beans</strong> 模块提供 BeanFactory，工厂模式的微妙实现，它移除了编码式单例的需要，并且可以把配置和依赖从实际编码逻辑中解耦。</li><li><strong>context</strong> 模块建立在由 <strong>core</strong>和 <strong>beans</strong> 模块的基础上建立起来的，它以一种类似于 JNDI 注册的方式访问对象。Context 模块继承自 Bean 模块，并且添加了国际化（比如，使用资源束）、事件传播、资源加载和透明地创建上下文（比如，通过 Servelet 容器）等功能。Context 模块也支持 Java EE 的功能，比如 EJB、JMX 和远程调用等。<strong>ApplicationContext</strong> 接口是 Context 模块的焦点。<strong>spring-context-support</strong> 提供了对第三方集成到 Spring 上下文的支持，比如缓存（EhCache, Guava, JCache）、邮件（JavaMail）、调度（CommonJ, Quartz）、模板引擎（FreeMarker, JasperReports, Velocity）等。</li><li><strong>spring-expression</strong> 模块提供了强大的表达式语言，用于在运行时查询和操作对象图。它是 JSP2.1 规范中定义的统一表达式语言的扩展，支持 set 和 get 属性值、属性赋值、方法调用、访问数组集合及索引的内容、逻辑算术运算、命名变量、通过名字从 Spring IoC 容器检索对象，还支持列表的投影、选择以及聚合等。</li></ul><p>它们的完整依赖关系如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1540290875453691.png" alt="Spring 体系结构"></p><h3 id="数据访问-x2F-集成"><a href="#数据访问-x2F-集成" class="headerlink" title="数据访问&#x2F;集成"></a>数据访问&#x2F;集成</h3><p>数据访问&#x2F;集成层包括 JDBC，ORM，OXM，JMS 和事务处理模块，它们的细节如下：</p><p>（注：JDBC&#x3D;Java Data Base Connectivity，ORM&#x3D;Object Relational Mapping，OXM&#x3D;Object XML Mapping，JMS&#x3D;Java Message Service）</p><ul><li><strong>JDBC</strong> 模块提供了 JDBC 抽象层，它消除了冗长的 JDBC 编码和对数据库供应商特定错误代码的解析。</li><li><strong>ORM</strong> 模块提供了对流行的对象关系映射 API 的集成，包括 JPA、JDO 和 Hibernate 等。通过此模块可以让这些 ORM 框架和 spring的其它功能整合，比如前面提及的事务管理。</li><li><strong>OXM</strong> 模块提供了对 OXM 实现的支持，比如 JAXB、Castor、XML Beans、JiBX、XStream 等。</li><li><strong>JMS</strong> 模块包含生产（produce）和消费（consume）消息的功能。从 Spring 4.1 开始，集成了 spring-messaging 模块。</li><li><strong>事务</strong>模块为实现特殊接口类及所有的 POJO 支持编程式和声明式事务管理。（注：编程式事务需要自己写 beginTransaction()、commit()、rollback() 等事务管理方法，声明式事务是通过注解或配置由 spring 自动处理，编程式事务粒度更细）</li></ul><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p>Web 层由 Web，Web-MVC，Web-Socket 和 Web-Portlet 组成，它们的细节如下：</p><ul><li><strong>Web</strong> 模块提供面向 web 的基本功能和面向 web 的应用上下文，比如多部分（multipart）文件上传功能、使用 Servlet 监听器初始化 IoC 容器等。它还包括 HTTP 客户端以及 Spring 远程调用中与 web 相关的部分。</li><li><strong>Web-MVC</strong> 模块为 web 应用提供了模型视图控制（MVC）和 REST Web服务的实现。Spring 的 MVC 框架可以使领域模型代码和 web 表单完全地分离，且可以与 Spring 框架的其它所有功能进行集成。</li><li><strong>Web-Socket</strong> 模块为 WebSocket-based 提供了支持，而且在 web 应用程序中提供了客户端和服务器端之间通信的两种方式。</li><li><strong>Web-Portlet</strong> 模块提供了用于 Portlet 环境的 MVC 实现，并反映了 spring-webmvc 模块的功能。</li></ul><h3 id="Test模块"><a href="#Test模块" class="headerlink" title="Test模块"></a>Test模块</h3><p>Test 模块：Spring 支持 Junit 和 TestNG 测试框架，而且还额外提供了一些基于 Spring 的测试功能，比如在测试 Web 框架时，模拟 Http 请求的功能。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>还有其他一些重要的模块，像 <a href="https://www.w3cschool.cn/wkspring/izae1h9w.html">AOP</a>，Aspects，Instrumentation，Web 和测试模块，它们的细节如下：</p><ul><li><strong>AOP</strong> 模块提供了面向方面（切面）的编程实现，允许你定义方法拦截器和切入点对代码进行干净地解耦，从而使实现功能的代码彻底的解耦出来。使用源码级的元数据，可以用类似于.Net属性的方式合并行为信息到代码中。</li><li><strong>Aspects</strong> 模块提供了与 <strong>AspectJ</strong> 的集成，这是一个功能强大且成熟的面向切面编程（AOP）框架。</li><li><strong>Instrumentation</strong> 模块在一定的应用服务器中提供了类 instrumentation 的支持和类加载器的实现。</li><li><strong>Messaging</strong> 模块为 STOMP 提供了支持作为在应用程序中 WebSocket 子协议的使用。它也支持一个注解编程模型，它是为了选路和处理来自 WebSocket 客户端的 STOMP 信息。</li><li><strong>测试</strong>模块支持对具有 JUnit 或 TestNG 框架的 Spring 组件的测试。</li></ul><h2 id="Spring-Hello-World-实例"><a href="#Spring-Hello-World-实例" class="headerlink" title="Spring Hello World 实例"></a>Spring Hello World 实例</h2><h3 id="在idea中新建一个maven工程项目"><a href="#在idea中新建一个maven工程项目" class="headerlink" title="在idea中新建一个maven工程项目:"></a>在idea中新建一个maven工程项目:</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220326160349281.png" alt="image-20220326160349281"></p><p>maven框架的基本配置<a href="https://blog.csdn.net/swe50/article/details/109097763">传送门</a></p><p>maven的pom文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring的核心工具包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--在基础IOC功能上提供扩展服务，还提供许多企业级服务的支持，有邮件服务、 任务调度、远程访问、缓存以及多种视图层框架的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring IOC的基础实现，包含访问配置文件、创建和管理bean等 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring context的扩展支持，用于MVC方面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring表达式语言 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Java注解包提供@Resource注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构:"></a>项目结构:</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220326160417011.png" alt="image-20220326160417011"></p><p>Helloword类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.message  = message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Your Message : &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MainApp类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.feng.entity.HelloWorld;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">HelloWorld</span> <span class="variable">obj</span> <span class="operator">=</span> (HelloWorld) context.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">        obj.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于主要程序有以下两个要点需要注意：</p><ul><li>第一步是我们使用框架 API <strong>ClassPathXmlApplicationContext()</strong> 来创建应用程序的上下文。这个 API 加载 beans 的配置文件并最终基于所提供的 API，它处理创建并初始化所有的对象，即在配置文件中提到的 beans。</li><li>第二步是使用已创建的上下文的 <strong>getBean()</strong> 方法来获得所需的 bean。这个方法使用 bean 的 ID 返回一个最终可以转换为实际对象的通用对象。一旦有了对象，你就可以使用这个对象调用任何类的方法。</li></ul><p>Beans.xml配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloWorld&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.entity.HelloWorld&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello World!&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三月 26, 2022 4:00:21 下午 org.springframework.context.support.AbstractApplicationContext prepareRefresh</span><br><span class="line">信息: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@4bf558aa: startup date [Sat Mar 26 16:00:21 CST 2022]; root of context hierarchy</span><br><span class="line">三月 26, 2022 4:00:21 下午 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions</span><br><span class="line">信息: Loading XML bean definitions from class path resource [Beans.xml]</span><br><span class="line">Your Message : Hello World!</span><br></pre></td></tr></table></figure><h2 id="Spring-IoC-容器"><a href="#Spring-IoC-容器" class="headerlink" title="Spring IoC 容器"></a>Spring IoC 容器</h2><h4 id="IoC-容器"><a href="#IoC-容器" class="headerlink" title="IoC 容器"></a>IoC 容器</h4><p>Spring 容器是 Spring 框架的核心。容器将创建对象，把它们连接在一起，配置它们，并管理他们的整个生命周期从创建到销毁。Spring 容器使用依赖注入（DI）来管理组成一个应用程序的组件。这些对象被称为 Spring Beans，我们将在下一章中进行讨论。</p><p>通过阅读配置元数据提供的指令，容器知道对哪些对象进行实例化，配置和组装。配置元数据可以通过 XML，Java 注释或 Java 代码来表示。下图是 Spring 如何工作的高级视图。 Spring IoC 容器利用 Java 的 POJO 类和配置元数据来生成完全配置和可执行的系统或应用程序。</p><p><strong>IOC 容器</strong>具有依赖注入功能的容器，它可以创建对象，IOC 容器负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。通常new一个实例，控制权由程序员控制，而”控制反转”是指new实例工作不由程序员来做而是交给Spring容器来做。在Spring中<a href="https://www.w3cschool.cn/wkspring/j3181mm3.html">BeanFactory</a>是IOC容器的实际代表者。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/ioc1.jpg" alt="Spring IoC 容器"></p><p>Spring 提供了以下两种不同类型的容器。</p><table><thead><tr><th>序号</th><th>容器 &amp; 描述</th></tr></thead><tbody><tr><td>1</td><td><a href="https://www.w3cschool.cn/wkspring/j3181mm3.html">Spring BeanFactory 容器</a>它是最简单的容器，给 DI 提供了基本的支持，它用 org.springframework.beans.factory.BeanFactory 接口来定义。BeanFactory 或者相关的接口，如 BeanFactoryAware，InitializingBean，DisposableBean，在 Spring 中仍然存在具有大量的与 Spring 整合的第三方框架的反向兼容性的目的。</td></tr><tr><td>2</td><td><a href="https://www.w3cschool.cn/wkspring/yqdx1mm5.html">Spring ApplicationContext 容器</a>该容器添加了更多的企业特定的功能，例如从一个属性文件中解析文本信息的能力，发布应用程序事件给感兴趣的事件监听器的能力。该容器是由 org.springframework.context.ApplicationContext 接口定义。</td></tr></tbody></table><p>ApplicationContext 容器包括 BeanFactory 容器的所有功能，所以通常不建议使用BeanFactory。BeanFactory 仍然可以用于轻量级的应用程序，如移动设备或基于 applet 的应用程序，其中它的数据量和速度是显著。</p><h4 id="1-Spring-BeanFactory-容器"><a href="#1-Spring-BeanFactory-容器" class="headerlink" title="1)Spring BeanFactory 容器"></a>1)Spring BeanFactory 容器</h4><p>对MainApp类进行一下小修改;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.springframework.beans.factory.InitializingBean;</span><br><span class="line">import org.springframework.beans.factory.xml.XmlBeanFactory;</span><br><span class="line">import org.springframework.core.io.ClassPathResource;</span><br><span class="line">public class MainApp &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      XmlBeanFactory factory = new XmlBeanFactory</span><br><span class="line">                             (new ClassPathResource(&quot;Beans.xml&quot;));</span><br><span class="line">      HelloWorld obj = (HelloWorld) factory.getBean(&quot;helloWorld&quot;);</span><br><span class="line">      obj.getMessage();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主程序当中，我们需要注意以下两点：</p><ul><li>第一步利用框架提供的 <strong>XmlBeanFactory()</strong> API 去生成工厂 bean 以及利用 <strong>ClassPathResource()</strong> API 去加载在路径 CLASSPATH 下可用的 bean 配置文件。<strong>XmlBeanFactory()</strong> API 负责创建并初始化所有的对象，即在配置文件中提到的 bean。</li><li>第二步利用第一步生成的 bean 工厂对象的 <strong>getBean()</strong> 方法得到所需要的 bean。 这个方法通过配置文件中的 bean ID 来返回一个真正的对象，该对象最后可以用于实际的对象。一旦得到这个对象，你就可以利用这个对象来调用任何方法。</li></ul><p>正常运行结果就是:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三月 26, 2022 4:18:06 下午 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions</span><br><span class="line">信息: Loading XML bean definitions from class path resource [Beans.xml]</span><br><span class="line">Your Message : Hello World!</span><br></pre></td></tr></table></figure><h4 id="2-Spring-ApplicationContext-容器"><a href="#2-Spring-ApplicationContext-容器" class="headerlink" title="2)Spring ApplicationContext 容器"></a>2)Spring ApplicationContext 容器</h4><p>Application Context 是 BeanFactory 的子接口，也被称为 Spring 上下文。</p><p>Application Context 是 spring 中较高级的容器。和 BeanFactory 类似，它可以加载配置文件中定义的 bean，将所有的 bean 集中在一起，当有请求的时候分配 bean。 另外，它增加了企业所需要的功能，比如，从属性文件中解析文本信息和将事件传递给所指定的监听器。这个容器在 org.springframework.context.ApplicationContext interface 接口中定义。</p><p>ApplicationContext 包含 BeanFactory 所有的功能，一般情况下，相对于 BeanFactory，ApplicationContext 会更加优秀。当然，BeanFactory 仍可以在轻量级应用中使用，比如移动设备或者基于 applet 的应用程序。</p><p>最常被使用的 ApplicationContext 接口实现：</p><ul><li><strong>FileSystemXmlApplicationContext</strong>：该容器从 XML 文件中加载已被定义的 bean。在这里，你需要提供给构造器 XML 文件的完整路径。</li><li><strong>ClassPathXmlApplicationContext</strong>：该容器从 XML 文件中加载已被定义的 bean。在这里，你不需要提供 XML 文件的完整路径，只需正确配置 CLASSPATH 环境变量即可，因为，容器会从 CLASSPATH 中搜索 bean 配置文件。</li><li><strong>WebXmlApplicationContext</strong>：该容器会在一个 web 应用程序的范围内加载在 XML 文件中已被定义的 bean。</li></ul><p>我们已经在 Spring Hello World Example章节中看到过 ClassPathXmlApplicationContext 容器，并且，在基于 spring 的 web 应用程序这个独立的章节中，我们讨论了很多关于 WebXmlApplicationContext。所以，接下来，让我们看一个关于 FileSystemXmlApplicationContext 的例子。</p><p>MainApp类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span></span><br><span class="line">            (<span class="string">&quot;E:/Java/spring/src/main/resources/Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">HelloWorld</span> <span class="variable">obj</span> <span class="operator">=</span> (HelloWorld) context.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">      obj.getMessage();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常结果:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三月 26, 2022 4:22:51 下午 org.springframework.context.support.AbstractApplicationContext prepareRefresh</span><br><span class="line">信息: Refreshing org.springframework.context.support.FileSystemXmlApplicationContext@4bf558aa: startup date [Sat Mar 26 16:22:51 CST 2022]; root of context hierarchy</span><br><span class="line">三月 26, 2022 4:22:51 下午 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions</span><br><span class="line">信息: Loading XML bean definitions from file [E:\Java\spring\src\main\resources\Beans.xml]</span><br><span class="line">Your Message : Hello World!</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Spring-Bean-定义"><a href="#Spring-Bean-定义" class="headerlink" title="Spring Bean 定义"></a>Spring Bean 定义</h2><h3 id="Bean-定义"><a href="#Bean-定义" class="headerlink" title="Bean 定义"></a>Bean 定义</h3><p>被称作 bean 的对象是构成应用程序的支柱也是由 Spring IoC 容器管理的。bean 是一个被实例化，组装，并通过 Spring IoC 容器所管理的对象。这些 bean 是由用容器提供的配置元数据创建的，例如，已经在先前章节看到的，在 XML 的表单中的 定义。</p><p>bean 定义包含称为<strong>配置元数据</strong>的信息，下述容器也需要知道配置元数据：</p><ul><li>如何创建一个 bean</li><li>bean 的生命周期的详细信息</li><li>bean 的依赖关系</li></ul><p>上述所有的配置元数据转换成一组构成每个 bean 定义的下列属性。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>class</td><td>这个属性是强制性的，并且指定用来创建 bean 的 bean 类。</td></tr><tr><td>name</td><td>这个属性指定唯一的 bean 标识符。在基于 XML 的配置元数据中，你可以使用 ID 和&#x2F;或 name 属性来指定 bean 标识符。</td></tr><tr><td>scope</td><td>这个属性指定由特定的 bean 定义创建的对象的作用域，它将会在 bean 作用域的章节中进行讨论。</td></tr><tr><td>constructor-arg</td><td>它是用来注入依赖关系的，并会在接下来的章节中进行讨论。</td></tr><tr><td>properties</td><td>它是用来注入依赖关系的，并会在接下来的章节中进行讨论。</td></tr><tr><td>autowiring mode</td><td>它是用来注入依赖关系的，并会在接下来的章节中进行讨论。</td></tr><tr><td>lazy-initialization mode</td><td>延迟初始化的 bean 告诉 IoC 容器在它第一次被请求时，而不是在启动时去创建一个 bean 实例。</td></tr><tr><td>initialization 方法</td><td>在 bean 的所有必需的属性被容器设置之后，调用回调方法。它将会在 bean 的生命周期章节中进行讨论。</td></tr><tr><td>destruction 方法</td><td>当包含该 bean 的容器被销毁时，使用回调方法。它将会在 bean 的生命周期章节中进行讨论。</td></tr></tbody></table><p><strong>Bean 与 Spring 容器的关系</strong></p><p>下图表达了Bean 与 Spring 容器之间的关系：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1604037368126454.png" alt="Spring Bean"></p><h3 id="Spring-配置元数据"><a href="#Spring-配置元数据" class="headerlink" title="Spring 配置元数据"></a>Spring 配置元数据</h3><p>Spring IoC 容器完全由实际编写的配置元数据的格式解耦。有下面三个重要的方法把配置元数据提供给 Spring 容器：</p><ul><li>基于 XML 的配置文件</li><li>基于注解的配置</li><li>基于 Java 的配置</li></ul><p>提示：对于基于 XML 的配置，Spring 2.0 以后使用 Schema 的格式，使得不同类型的配置拥有了自己的命名空间，使配置文件更具扩展性。</p><p>你已经看到了如何把基于 XML 的配置元数据提供给容器，但是让我们看看另一个基于 XML 配置文件的例子，这个配置文件中有不同的 bean 定义，包括延迟初始化，初始化方法和销毁方法的：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- A simple bean definition --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- A bean definition with lazy init set on --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- A bean definition with initialization method --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- A bean definition with destruction method --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- more bean definitions go here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上述示例中：</p><p>①xmlns&#x3D;”<a href="http://www.springframework.org/schema/beans&quot;%EF%BC%8C%E9%BB%98%E8%AE%A4%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%EF%BC%9A%E5%AE%83%E6%B2%A1%E6%9C%89%E7%A9%BA%E9%97%B4%E5%90%8D%EF%BC%8C%E7%94%A8%E4%BA%8ESpring">http://www.springframework.org/schema/beans&quot;，默认命名空间：它没有空间名，用于Spring</a> Bean的定义；</p><p>②xmlns:xsi&#x3D;”<a href="http://www.w3.org/2001/XMLSchema-instance&quot;%EF%BC%8Cxsi%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%EF%BC%9A%E8%BF%99%E4%B8%AA%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%94%A8%E4%BA%8E%E4%B8%BA%E6%AF%8F%E4%B8%AA%E6%96%87%E6%A1%A3%E4%B8%AD%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E6%8C%87%E5%AE%9A%E7%9B%B8%E5%BA%94%E7%9A%84Schema%E6%A0%B7%E5%BC%8F%E6%96%87%E4%BB%B6%EF%BC%8C%E6%98%AF%E6%A0%87%E5%87%86%E7%BB%84%E7%BB%87%E5%AE%9A%E4%B9%89%E7%9A%84%E6%A0%87%E5%87%86%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E3%80%82">http://www.w3.org/2001/XMLSchema-instance&quot;，xsi命名空间：这个命名空间用于为每个文档中命名空间指定相应的Schema样式文件，是标准组织定义的标准命名空间。</a></p><p>你可以查看 <a href="https://www.w3cschool.cn/wkspring/dgte1ica.html"><strong>Spring Hello World 实例</strong></a> 来详细理解如何定义，配置和创建 Spring Beans。</p><p>关于基于注解的配置将在一个单独的章节中进行讨论。刻意把它保留在一个单独的章节，是因为我想让你在开始使用注解和 Spring 依赖注入编程之前，能掌握一些其他重要的 Spring 概念。</p><h2 id="Spring-Bean-作用域"><a href="#Spring-Bean-作用域" class="headerlink" title="Spring Bean 作用域"></a>Spring Bean 作用域</h2><h3 id="Bean-的作用域"><a href="#Bean-的作用域" class="headerlink" title="Bean 的作用域"></a>Bean 的作用域</h3><p>当在 Spring 中定义一个 bean 时，你必须声明该 bean 的作用域的选项。例如，为了强制 Spring 在每次需要时都产生一个新的 bean 实例，你应该声明 bean 的作用域的属性为 <strong>prototype</strong>。同理，如果你想让 Spring 在每次需要时都返回同一个bean实例，你应该声明 bean 的作用域的属性为 <strong>singleton</strong>。</p><p>Spring 框架支持以下五个作用域，分别为 singleton、prototype、request、session 和 global session，5种作用域说明如下所示，</p><p>注意，如果你使用 web-aware ApplicationContext 时，其中三个是可用的。  </p><table><thead><tr><th>作用域</th><th>描述</th></tr></thead><tbody><tr><td>singleton</td><td>在spring IoC容器仅存在一个Bean实例，Bean以单例方式存在，默认值</td></tr><tr><td>prototype</td><td>每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean()时，相当于执行newXxxBean()</td></tr><tr><td>request</td><td>每次HTTP请求都会创建一个新的Bean，该作用域仅适用于WebApplicationContext环境</td></tr><tr><td>session</td><td>同一个HTTP Session共享一个Bean，不同Session使用不同的Bean，仅适用于WebApplicationContext环境</td></tr><tr><td>global-session</td><td>一般用于Portlet应用环境，该作用域仅适用于WebApplicationContext环境</td></tr></tbody></table><p>本章将讨论前两个范围，当我们将讨论有关 web-aware Spring ApplicationContext 时，其余三个将被讨论。</p><p><strong>singleton作用域:</strong></p><p>例子:</p><p>MainApp.java:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">HelloWorld</span> <span class="variable">objA</span> <span class="operator">=</span> (HelloWorld) context.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">      objA.setMessage(<span class="string">&quot;I&#x27;m object A&quot;</span>);</span><br><span class="line">      objA.getMessage();</span><br><span class="line">      <span class="type">HelloWorld</span> <span class="variable">objB</span> <span class="operator">=</span> (HelloWorld) context.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">      objB.getMessage();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Beans.xml</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">    xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">    xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=<span class="string">&quot;helloWorld&quot;</span> class=<span class="string">&quot;com.tutorialspoint.HelloWorld&quot;</span> </span><br><span class="line">      scope=<span class="string">&quot;singleton&quot;</span>&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Your Message : I&#x27;m object A</span><br><span class="line">Your Message : I&#x27;m object A</span><br></pre></td></tr></table></figure><p><strong>prototype 作用域</strong></p><p>例子:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloWorld&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.HelloWorld&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Your Message : I&#x27;m object A</span><br><span class="line">Your Message : null //新建的一个bean所以还是Beans.xml文件中那样没有被赋值的样子</span><br></pre></td></tr></table></figure><h2 id="Spring-Bean-生命周期"><a href="#Spring-Bean-生命周期" class="headerlink" title="Spring Bean 生命周期"></a>Spring Bean 生命周期</h2><h3 id="Bean-的生命周期"><a href="#Bean-的生命周期" class="headerlink" title="Bean 的生命周期"></a>Bean 的生命周期</h3><p>理解 Spring bean 的生命周期很容易。当一个 bean 被实例化时，它可能需要执行一些初始化使它转换成可用状态。同样，当 bean 不再需要，并且从容器中移除时，可能需要做一些清除工作。</p><p>尽管还有一些在 Bean 实例化和销毁之间发生的活动，但是本章将只讨论两个重要的生命周期回调方法，它们在 bean 的初始化和销毁的时候是必需的。</p><p>为了定义安装和拆卸一个 bean，我们只要声明带有 <strong>init-method</strong> 和&#x2F;或 <strong>destroy-method</strong> 参数的 。init-method 属性指定一个方法，在实例化 bean 时，立即调用该方法。同样，destroy-method 指定一个方法，只有从容器中移除 bean 之后，才能调用该方法。</p><p>Bean的生命周期可以表达为：Bean的定义——Bean的初始化——Bean的使用——Bean的销毁</p><h3 id="初始化回调"><a href="#初始化回调" class="headerlink" title="初始化回调"></a>初始化回调</h3><p><em>org.springframework.beans.factory.InitializingBean</em> 接口指定一个单一的方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br></pre></td></tr></table></figure><p>因此，你可以简单地实现上述接口和初始化工作可以在 afterPropertiesSet() 方法中执行，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleBean</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// do some initialization work</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在基于 XML 的配置元数据的情况下，你可以使用 <strong>init-method</strong> 属性来指定带有 void 无参数方法的名称。例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;exampleBean&quot;</span> </span><br><span class="line">         class=<span class="string">&quot;examples.ExampleBean&quot;</span> init-method=<span class="string">&quot;init&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>下面是类的定义：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleBean</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// do some initialization work</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="销毁回调"><a href="#销毁回调" class="headerlink" title="销毁回调"></a>销毁回调</h3><p><em>org.springframework.beans.factory.DisposableBean</em> 接口指定一个单一的方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br></pre></td></tr></table></figure><p>因此，你可以简单地实现上述接口并且结束工作可以在 destroy() 方法中执行，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleBean</span> <span class="keyword">implements</span> <span class="title class_">DisposableBean</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// do some destruction work</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在基于 XML 的配置元数据的情况下，你可以使用 <strong>destroy-method</strong> 属性来指定带有 void 无参数方法的名称。例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;exampleBean&quot;</span></span><br><span class="line">         class=<span class="string">&quot;examples.ExampleBean&quot;</span> destroy-method=<span class="string">&quot;destroy&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>下面是类的定义：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleBean</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// do some destruction work</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你在非 web 应用程序环境中使用 Spring 的 IoC 容器；例如在丰富的客户端桌面环境中；那么在 JVM 中你要注册关闭 hook。这样做可以确保正常关闭，为了让所有的资源都被释放，可以在单个 beans 上调用 destroy 方法。</p><p>建议你不要使用 InitializingBean 或者 DisposableBean 的回调方法，因为 XML 配置在命名方法上提供了极大的灵活性。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>我们在适当的位置使用 Eclipse IDE，然后按照下面的步骤来创建一个 Spring 应用程序：</p><p>这里是 <strong>HelloWorld.java</strong> 的文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message  = message;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Your Message : &quot;</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Bean is going through init.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Bean will destroy now.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容。在这里，你需要注册一个在 AbstractApplicationContext 类中声明的关闭 hook 的 <strong>registerShutdownHook()</strong> 方法。它将确保正常关闭，并且调用相关的 destroy 方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.AbstractApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">AbstractApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">HelloWorld</span> <span class="variable">obj</span> <span class="operator">=</span> (HelloWorld) context.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">      obj.getMessage();</span><br><span class="line">      context.registerShutdownHook();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 init 和 destroy 方法必需的配置文件 <strong>Beans.xml</strong> 文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloWorld&quot;</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.HelloWorld&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello World!&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你创建源代码和 bean 配置文件完成后，我们就可以运行该应用程序。如果你的应用程序一切都正常，将输出以下信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Bean is going through init.</span><br><span class="line">Your Message : Hello World!</span><br><span class="line">Bean will destroy now.</span><br></pre></td></tr></table></figure><h3 id="默认的初始化和销毁方法"><a href="#默认的初始化和销毁方法" class="headerlink" title="默认的初始化和销毁方法"></a>默认的初始化和销毁方法</h3><p>如果你有太多具有相同名称的初始化或者销毁方法的 Bean，那么你不需要在每一个 bean 上声明<strong>初始化方法</strong>和<strong>销毁方法</strong>。框架使用 元素中的 <strong>default-init-method</strong> 和 <strong>default-destroy-method</strong> 属性提供了灵活地配置这种情况，如下所示：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">default-init-method</span>=<span class="string">&quot;init&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">default-destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring-Bean-后置处理器"><a href="#Spring-Bean-后置处理器" class="headerlink" title="Spring Bean 后置处理器"></a>Spring Bean 后置处理器</h2><h3 id="Spring——Bean-后置处理器"><a href="#Spring——Bean-后置处理器" class="headerlink" title="Spring——Bean 后置处理器"></a>Spring——Bean 后置处理器</h3><p>Bean 后置处理器允许在<strong>调用初始化方法前后</strong>对 Bean 进行额外的处理。</p><p><code>BeanPostProcessor </code>接口定义回调方法，你可以实现该方法来提供自己的实例化逻辑，依赖解析逻辑等。你也可以在 <code>Spring</code> 容器通过插入一个或多个 <code>BeanPostProcessor</code> 的实现来完成实例化，配置和初始化一个<code>bean</code>之后实现一些自定义逻辑回调方法。</p><p>你可以配置多个 <code>BeanPostProcessor </code>接口，通过设置 <code>BeanPostProcessor </code>实现的<code>Ordered</code>接口提供的<code> order</code> 属性来控制这些<code> BeanPostProcessor</code> 接口的执行顺序。</p><p><code>BeanPostProcessor</code> 可以对<code> bean</code>（或对象）实例进行操作，这意味着 <code>Spring IoC</code> 容器实例化一个 <code>bean</code> 实例，然后 <code>BeanPostProcessor</code> 接口进行它们的工作。</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p><code>ApplicationContext</code> 会自动检测由 <code>BeanPostProcessor</code> 接口的实现定义的 <code>bean</code>，注册这些<code> bean</code> 为后置处理器，然后通过在容器中创建<code> bean</code>，在适当的时候调用它。</p><p>在你自定义的<code> BeanPostProcessor</code> 接口实现类中，要实现以下的两个抽象方法 <code>BeanPostProcessor.postProcessBeforeInitialization(Object, String)</code> 和 <code>BeanPostProcessor.postProcessAfterInitialization(Object, String)</code> 和，注意命名要准确</p><p>否则会出现： <code>“ The type InitHelloWorld must implement the inherited abstract method BeanPostProcessor.postProcessBeforeInitialization(Object, String) ”</code>之类的错误</p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>下面的例子显示如何在 <code>ApplicationContext</code> 的上下文中编写，注册和使用 <code>BeanPostProcessor</code>。</p><p>这里是 HelloWorld.java 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String message;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message  = message;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Your Message : &quot;</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Bean is going through init.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Bean will destroy now.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是实现<code>BeanPostProcessor</code>的非常简单的例子，它在任何 <code>bean</code> 的初始化的之前和之后输入该 <code>bean</code> 的名称。你可以在初始化 <code>bean </code>的之前和之后实现更复杂的逻辑，因为你有两个访问内置 <code>bean</code> 对象的后置处理程序的方法。</p><p>这里是 InitHelloWorld.java 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitHelloWorld</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;BeforeInitialization : &quot;</span> + beanName);</span><br><span class="line">      <span class="keyword">return</span> bean;  <span class="comment">// you can return any other object as well</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;AfterInitialization : &quot;</span> + beanName);</span><br><span class="line">      <span class="keyword">return</span> bean;  <span class="comment">// you can return any other object as well</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 MainApp.java 文件的内容。在这里，你需要注册一个在 <code>AbstractApplicationContext</code> 类中声明的关闭<code> hook</code> 的 <code>registerShutdownHook() </code>方法。它将确保正常关闭，并且调用相关的 <code>destroy</code> 方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.AbstractApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">AbstractApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">HelloWorld</span> <span class="variable">obj</span> <span class="operator">=</span> (HelloWorld) context.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">      obj.getMessage();</span><br><span class="line">      context.registerShutdownHook();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <code>init</code> 和 <code>destroy</code> 方法需要的配置文件 Beans.xml 文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloWorld&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.HelloWorld&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello World!&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.InitHelloWorld&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你创建源代码和 <code>bean</code> 配置文件完成后，我们就可以运行该应用程序。如果你的应用程序一切都正常，将输出以下信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BeforeInitialization : helloWorld</span><br><span class="line">Bean is going through init.</span><br><span class="line">AfterInitialization : helloWorld</span><br><span class="line">Your Message : Hello World!</span><br><span class="line">Bean will destroy now.</span><br></pre></td></tr></table></figure><h2 id="Spring-Bean-定义继承"><a href="#Spring-Bean-定义继承" class="headerlink" title="Spring Bean 定义继承"></a>Spring Bean 定义继承</h2><p>2019-05-11 17:44 更新</p><h3 id="Bean-定义继承"><a href="#Bean-定义继承" class="headerlink" title="Bean 定义继承"></a>Bean 定义继承</h3><p>bean 定义可以包含很多的配置信息，包括构造函数的参数，属性值，容器的具体信息例如初始化方法，静态工厂方法名，等等。</p><p>子 bean 的定义继承父定义的配置数据。子定义可以根据需要重写一些值，或者添加其他值。</p><p>Spring Bean 定义的继承与 Java 类的继承无关，但是继承的概念是一样的。你可以定义一个父 bean 的定义作为模板和其他子 bean 就可以从父 bean 中继承所需的配置。</p><p>当你使用基于 XML 的配置元数据时，通过使用父属性，指定父 bean 作为该属性的值来表明子 bean 的定义。</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>下面是配置文件 <strong>Beans.xml</strong>，在该配置文件中我们定义有两个属性 <em>message1</em> 和 <em>message2</em> 的 “helloWorld” bean。然后，使用 <strong>parent</strong> 属性把 “helloIndia” bean 定义为 “helloWorld” bean 的孩子。这个子 bean 继承 <em>message2</em> 的属性，重写 <em>message1</em> 的属性，并且引入一个属性 <em>message3</em>。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloWorld&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.HelloWorld&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello World!&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello Second World!&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloIndia&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.HelloIndia&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;helloWorld&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello India!&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Namaste India!&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里是 <strong>HelloWorld.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String message1;</span><br><span class="line">   <span class="keyword">private</span> String message2;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage1</span><span class="params">(String message)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message1  = message;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage2</span><span class="params">(String message)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message2  = message;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage1</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;World Message1 : &quot;</span> + message1);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage2</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;World Message2 : &quot;</span> + message2);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是 <strong>HelloIndia.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloIndia</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String message1;</span><br><span class="line">   <span class="keyword">private</span> String message2;</span><br><span class="line">   <span class="keyword">private</span> String message3;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage1</span><span class="params">(String message)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message1  = message;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage2</span><span class="params">(String message)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message2  = message;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage3</span><span class="params">(String message)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message3  = message;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage1</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;India Message1 : &quot;</span> + message1);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage2</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;India Message2 : &quot;</span> + message2);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage3</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;India Message3 : &quot;</span> + message3);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="type">HelloWorld</span> <span class="variable">objA</span> <span class="operator">=</span> (HelloWorld) context.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line">      objA.getMessage1();</span><br><span class="line">      objA.getMessage2();</span><br><span class="line"></span><br><span class="line">      <span class="type">HelloIndia</span> <span class="variable">objB</span> <span class="operator">=</span> (HelloIndia) context.getBean(<span class="string">&quot;helloIndia&quot;</span>);</span><br><span class="line">      objB.getMessage1();</span><br><span class="line">      objB.getMessage2();</span><br><span class="line">      objB.getMessage3();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦你创建源代码和 bean 配置文件完成后，我们就可以运行该应用程序。如果你的应用程序一切都正常，将输出以下信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">World Message1 : Hello World!</span><br><span class="line">World Message2 : Hello Second World!</span><br><span class="line">India Message1 : Hello India!</span><br><span class="line">India Message2 : Hello Second World!</span><br><span class="line">India Message3 : Namaste India!</span><br></pre></td></tr></table></figure><p>在这里你可以观察到，我们创建 “helloIndia” bean 的同时并没有传递 message2，但是由于 Bean 定义的继承，所以它传递了 message2。</p><h3 id="Bean-定义模板"><a href="#Bean-定义模板" class="headerlink" title="Bean 定义模板"></a>Bean 定义模板</h3><p>你可以创建一个 Bean 定义模板，不需要花太多功夫它就可以被其他子 bean 定义使用。在定义一个 Bean 定义模板时，你不应该指定<strong>类</strong>的属性，而应该指定带 <strong>true</strong> 值的<strong>抽象</strong>属性，如下所示：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beanTeamplate&quot;</span> <span class="attr">abstract</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello World!&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello Second World!&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Namaste India!&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloIndia&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.HelloIndia&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;beanTeamplate&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello India!&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Namaste India!&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父 bean 自身不能被实例化，因为它是不完整的，而且它也被明确地标记为抽象的。当一个定义是抽象的，它仅仅作为一个纯粹的模板 bean 定义来使用的，充当子定义的父定义使用。</p><h2 id="Spring-依赖注入"><a href="#Spring-依赖注入" class="headerlink" title="Spring 依赖注入"></a>Spring 依赖注入</h2><p>2021-11-10 16:45 更新</p><p>Spring框架的核心功能之一就是通过依赖注入的方式来管理Bean之间的依赖关系。</p><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>每个基于应用程序的 java 都有几个对象，由这些对象一起工作来呈现出终端用户所看到的工作的应用程序。当编写一个复杂的 Java 应用程序时，应用程序类应该尽可能独立于其他 Java 类来增加这些类重用的可能性，并且在做单元测试时，测试独立于其他类的独立性。<code>依赖注入（或有时称为布线）</code>有助于把这些类粘合在一起，同时保持他们独立。</p><p>假设你有一个包含文本编辑器组件的应用程序，并且你想要提供拼写检查。标准代码看起来是这样的：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;  </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">TextEditor</span><span class="params">()</span> &#123;</span><br><span class="line">      spellChecker = <span class="keyword">new</span> <span class="title class_">SpellChecker</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我们所做的就是创建一个 TextEditor 和 SpellChecker 之间的依赖关系。而在控制反转IoC的场景中，我们会这样做：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">TextEditor</span><span class="params">(SpellChecker spellChecker)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.spellChecker = spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，TextEditor 不应该担心 SpellChecker 的实现。SpellChecker 将会独立实现，并且在 TextEditor 实例化的时候将提供给 TextEditor，整个过程是由 Spring 框架的控制。</p><p>在这里，我们已经从 TextEditor 中删除了全面控制，并且把它保存到其他地方（即 XML 配置文件），且依赖关系（即 SpellChecker 类）通过<strong>类构造函数</strong>被注入到 TextEditor 类中。因此，控制流通过依赖注入（DI）已经“反转”，因为你已经有效地委托依赖关系到一些外部系统。</p><p>依赖注入的<strong>第二种方法</strong>是通过 TextEditor 类的 <strong>Setter 方法</strong>，我们将创建 SpellChecker 实例，该实例将被用于调用 setter 方法来初始化 TextEditor 的属性。</p><p>因此，DI 主要有两种变体和下面的两个子章将结合实例涵盖它们：</p><table><thead><tr><th>序号</th><th>依赖注入类型 &amp; 描述</th></tr></thead><tbody><tr><td>1</td><td><a href="https://www.w3cschool.cn/wkspring/t7n41mm7.html">Constructor-based dependency injection</a>当容器调用带有多个参数的构造函数类时，实现基于构造函数的 DI，每个代表在其他类中的一个依赖关系。</td></tr><tr><td>2</td><td><a href="https://www.w3cschool.cn/wkspring/vneb1mm9.html">Setter-based dependency injection</a>基于 setter 方法的 DI 是通过在调用无参数的构造函数或无参数的静态工厂方法实例化 bean 之后容器调用 beans 的 setter 方法来实现的。</td></tr></tbody></table><p>你可以混合这两种方法，基于构造函数和基于 setter 方法的 DI，然而使用有强制性依存关系的构造函数和有可选依赖关系的 sette r是一个好的做法。</p><p>代码是 DI 原理的清洗机，当对象与它们的依赖关系被提供时，解耦效果更明显。对象不查找它的依赖关系，也不知道依赖关系的位置或类，而这一切都由 Spring 框架控制的。</p><h3 id="Spring-基于构造函数的依赖注入"><a href="#Spring-基于构造函数的依赖注入" class="headerlink" title="Spring 基于构造函数的依赖注入"></a>Spring 基于构造函数的依赖注入</h3><p>当容器调用带有一组参数的类构造函数时，基于构造函数的 DI 就完成了，其中每个参数代表一个对其他类的依赖。</p><p>接下来，我们将通过示例来理解 Spring 基于构造函数的依赖注入。</p><h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h5><p>下面的例子显示了一个类 TextEditor，只能用构造函数注入来实现依赖注入。</p><p>这是 <strong>TextEditor.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">TextEditor</span><span class="params">(SpellChecker spellChecker)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside TextEditor constructor.&quot;</span> );</span><br><span class="line">      <span class="built_in">this</span>.spellChecker = spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spellCheck</span><span class="params">()</span> &#123;</span><br><span class="line">      spellChecker.checkSpelling();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是另一个依赖类文件 <strong>SpellChecker.java</strong> 的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpellChecker</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">SpellChecker</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside SpellChecker constructor.&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkSpelling</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside checkSpelling.&quot;</span> );</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">TextEditor</span> <span class="variable">te</span> <span class="operator">=</span> (TextEditor) context.getBean(<span class="string">&quot;textEditor&quot;</span>);</span><br><span class="line">      te.spellCheck();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置文件 <strong>Beans.xml</strong> 的内容，它有基于构造函数注入的配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;textEditor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;spellChecker&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当你完成了创建源和 bean 配置文件后，让我们开始运行应用程序。如果你的应用程序运行顺利的话，那么将会输出下述所示消息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Inside SpellChecker constructor.</span><br><span class="line">Inside TextEditor constructor.</span><br><span class="line">Inside checkSpelling.</span><br></pre></td></tr></table></figure><h5 id="构造函数参数解析"><a href="#构造函数参数解析" class="headerlink" title="构造函数参数解析:"></a>构造函数参数解析:</h5><p>注释：上面这个例子里，将依赖类 SpellChecker.java注入到TextEditor.java 文件。</p><p>如此，便称为依赖注入。</p><p>如果存在不止一个参数时，当把参数传递给构造函数时，可能会存在歧义。要解决这个问题，那么构造函数的参数在 bean 定义中的顺序就是把这些参数提供给适当的构造函数的顺序就可以了。</p><p>考虑下面的类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> x.y;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Foo</span><span class="params">(Bar bar, Baz baz)</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下述配置文件工作顺利：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;foo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.Foo&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;bar&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;baz&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bar&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.Bar&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;baz&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.Baz&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>让我们再检查一下我们传递给构造函数不同类型的位置。考虑下面的类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> x.y;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Foo</span><span class="params">(<span class="type">int</span> year, String name)</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你使用<code> type</code> 属性显式的指定了构造函数参数的类型，容器也可以使用与简单类型匹配的类型。例如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;exampleBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.ExampleBean&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2001&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Zara&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后并且也是最好的传递构造函数参数的方式，使用<code> index</code> 属性来显式的指定构造函数参数的索引。下面是基于索引为 0 的例子，如下所示：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;exampleBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.ExampleBean&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2001&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Zara&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后，如果你想要向一个对象传递一个引用，你需要使用 标签的 <strong>ref</strong> 属性，如果你想要直接传递值，那么你应该使用如上所示的 <strong>value</strong> 属性。</p><h3 id="Spring-基于设值函数的依赖注入"><a href="#Spring-基于设值函数的依赖注入" class="headerlink" title="Spring 基于设值函数的依赖注入"></a>Spring 基于设值函数的依赖注入</h3><p>当容器调用一个无参的构造函数或一个无参的静态 factory 方法来初始化你的 bean 后，通过容器在你的 bean 上调用设值函数，基于设值函数的 DI 就完成了。</p><h4 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h4><p>下述例子显示了一个类 <em>TextEditor</em>，它只能使用纯粹的基于设值函数的注入来实现依赖注入。</p><p>下面是 <strong>TextEditor.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">   <span class="comment">// a setter method to inject the dependency.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSpellChecker</span><span class="params">(SpellChecker spellChecker)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside setSpellChecker.&quot;</span> );</span><br><span class="line">      <span class="built_in">this</span>.spellChecker = spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// a getter method to return spellChecker</span></span><br><span class="line">   <span class="keyword">public</span> SpellChecker <span class="title function_">getSpellChecker</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spellCheck</span><span class="params">()</span> &#123;</span><br><span class="line">      spellChecker.checkSpelling();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，你需要检查设值函数方法的名称转换。要设置一个变量 <strong>spellChecker</strong>，我们使用 <strong>setSpellChecker()</strong> 方法，该方法与 Java POJO 类非常相似。让我们创建另一个依赖类文件 <strong>SpellChecker.java</strong> 的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpellChecker</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">SpellChecker</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside SpellChecker constructor.&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkSpelling</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside checkSpelling.&quot;</span> );</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">TextEditor</span> <span class="variable">te</span> <span class="operator">=</span> (TextEditor) context.getBean(<span class="string">&quot;textEditor&quot;</span>);</span><br><span class="line">      te.spellCheck();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置文件 <strong>Beans.xml</strong> 的内容，该文件有基于设值函数注入的配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;textEditor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;spellChecker&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你应该注意定义在基于构造函数注入和基于设值函数注入中的 Beans.xml 文件的区别。唯一的区别就是在基于构造函数注入中，我们使用的是〈bean〉标签中的〈constructor-arg〉元素，而在基于设值函数的注入中，我们使用的是〈bean〉标签中的〈property〉元素。</p><p>第二个你需要注意的点是，</p><blockquote><p>如果你要把一个引用传递给一个对象，那么你需要使用 标签的 ref 属性</p></blockquote><blockquote><p>而如果你要直接传递一个值，那么你应该使用 value 属性。</p></blockquote><p>当你完成了创建源和 bean 配置文件后，让我们开始运行应用程序。如果你的应用程序运行顺利的话，那么将会输出下述所示消息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Inside SpellChecker constructor.</span><br><span class="line">Inside setSpellChecker.</span><br><span class="line">Inside checkSpelling.</span><br></pre></td></tr></table></figure><h4 id="使用-p-namespace-实现-XML-配置："><a href="#使用-p-namespace-实现-XML-配置：" class="headerlink" title="使用 p-namespace 实现 XML 配置："></a>使用 p-namespace 实现 XML 配置：</h4><p>如果你有许多的设值函数方法，那么在 XML 配置文件中使用 <strong>p-namespace</strong> 是非常方便的。让我们查看一下区别：</p><p>以带有 标签的标准 XML 配置文件为例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;john-classic&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.Person&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;John Doe&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;spouse&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jane&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;jane&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.Person&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;John Doe&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述 XML 配置文件可以使用 <strong>p-namespace</strong> 以一种更简洁的方式重写，如下所示：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;john-classic&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.Person&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:name</span>=<span class="string">&quot;John Doe&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:spouse-ref</span>=<span class="string">&quot;jane&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;jane&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.Person&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:name</span>=<span class="string">&quot;John Doe&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里，你不应该区别指定原始值和带有 p-namespace 的对象引用。**-ref** 部分表明这不是一个直接的值，而是对另一个 bean 的引用。</p><h3 id="Spring-注入内部-Beans"><a href="#Spring-注入内部-Beans" class="headerlink" title="Spring 注入内部 Beans"></a>Spring 注入内部 Beans</h3><h4 id="注入内部-Beans"><a href="#注入内部-Beans" class="headerlink" title="注入内部 Beans"></a>注入内部 Beans</h4><p>正如你所知道的 Java 内部类是在其他类的范围内被定义的，同理，<strong>inner beans</strong> 是在其他 bean 的范围内定义的 bean。因此<property />或<constructor-arg />元素中的<bean />元素称为内部bean，如下所示。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;outerBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;target&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;innerBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h4><p>这里是 <strong>TextEditor.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">   <span class="comment">// a setter method to inject the dependency.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSpellChecker</span><span class="params">(SpellChecker spellChecker)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside setSpellChecker.&quot;</span> );</span><br><span class="line">      <span class="built_in">this</span>.spellChecker = spellChecker;</span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// a getter method to return spellChecker</span></span><br><span class="line">   <span class="keyword">public</span> SpellChecker <span class="title function_">getSpellChecker</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spellCheck</span><span class="params">()</span> &#123;</span><br><span class="line">      spellChecker.checkSpelling();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是另一个依赖的类文件 <strong>SpellChecker.java</strong> 内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpellChecker</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">SpellChecker</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside SpellChecker constructor.&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkSpelling</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside checkSpelling.&quot;</span> );</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">TextEditor</span> <span class="variable">te</span> <span class="operator">=</span> (TextEditor) context.getBean(<span class="string">&quot;textEditor&quot;</span>);</span><br><span class="line">      te.spellCheck();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是使用<strong>内部 bean</strong> 为基于 setter 注入进行配置的配置文件 <strong>Beans.xml</strong> 文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean using inner bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;textEditor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;spellChecker&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你创建源代码和 bean 配置文件完成后，我们就可以运行该应用程序。如果你的应用程序一切都正常，将输出以下信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Inside SpellChecker constructor.</span><br><span class="line">Inside setSpellChecker.</span><br><span class="line">Inside checkSpelling.</span><br></pre></td></tr></table></figure><h3 id="Spring-注入集合"><a href="#Spring-注入集合" class="headerlink" title="Spring 注入集合"></a>Spring 注入集合</h3><p>2021-02-25 15:11 更新</p><h4 id="注入集合"><a href="#注入集合" class="headerlink" title="注入集合"></a>注入集合</h4><p>你已经看到了如何使用 <strong>value</strong> 属性来配置基本数据类型和在你的 bean 配置文件中使用<code>&lt;property&gt;</code>标签的 <strong>ref</strong> 属性来配置对象引用。这两种情况下处理奇异值传递给一个 bean。</p><p>现在如果你想传递多个值，如 Java Collection 类型 List、Set、Map 和 Properties，应该怎么做呢。为了处理这种情况，Spring 提供了四种类型的集合的配置元素，如下所示：</p><table><thead><tr><th align="left">元素</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><list></td><td align="left">它有助于连线，如注入一列值，允许重复。</td></tr><tr><td align="left"><set></td><td align="left">它有助于连线一组值，但不能重复。</td></tr><tr><td align="left"><map></td><td align="left">它可以用来注入名称-值对的集合，其中名称和值可以是任何类型。</td></tr><tr><td align="left"><props></td><td align="left">它可以用来注入名称-值对的集合，其中名称和值都是字符串类型。</td></tr></tbody></table><p>你可以使用<code>&lt;list&gt;</code>或<code>&lt;set&gt;</code>来连接任何 <code>java.util.Collection</code> 的实现或数组。</p><p>你会遇到两种情况（a）传递集合中直接的值（b）传递一个 bean 的引用作为集合的元素。</p><h4 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h4><p>我们在适当的位置使用 Eclipse IDE，然后按照下面的步骤来创建一个 Spring 应用程序：</p><table><thead><tr><th align="left">步骤</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">创建一个名称为 <em>SpringExample</em> 的项目，并且在创建项目的 <strong>src</strong> 文件夹中创建一个包 <em>com.tutorialspoint</em> 。</td></tr><tr><td align="left">2</td><td align="left">使用 <em>Add External JARs</em> 选项，添加所需的 Spring 库，解释见 <em>Spring Hello World Example</em> 章节。 option as explained in the chapter.</td></tr><tr><td align="left">3</td><td align="left">在 <em>com.tutorialspoint</em> 包中创建Java类<em>TextEditor</em>、<em>SpellChecker</em> 和 <em>MainApp</em>。</td></tr><tr><td align="left">4</td><td align="left">在 <strong>src</strong> 文件夹中创建 Beans 配置文件 <em>Beans.xml</em>。</td></tr><tr><td align="left">5</td><td align="left">最后一步是创建的所有Java文件和Bean配置文件的内容，并运行应用程序，解释如下所示。</td></tr></tbody></table><p>这里是 <strong>JavaCollection.java</strong> 文件的内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.tutorialspoint;</span><br><span class="line">import java.util.*;</span><br><span class="line">public class JavaCollection &#123;</span><br><span class="line">   List addressList;</span><br><span class="line">   Set  addressSet;</span><br><span class="line">   Map  addressMap;</span><br><span class="line">   Properties addressProp;</span><br><span class="line">   // a setter method to set List</span><br><span class="line">   public void setAddressList(List addressList) &#123;</span><br><span class="line">      this.addressList = addressList;</span><br><span class="line">   &#125;</span><br><span class="line">   // prints and returns all the elements of the list.</span><br><span class="line">   public List getAddressList() &#123;</span><br><span class="line">      System.out.println(&quot;List Elements :&quot;  + addressList);</span><br><span class="line">      return addressList;</span><br><span class="line">   &#125;</span><br><span class="line">   // a setter method to set Set</span><br><span class="line">   public void setAddressSet(Set addressSet) &#123;</span><br><span class="line">      this.addressSet = addressSet;</span><br><span class="line">   &#125;</span><br><span class="line">   // prints and returns all the elements of the Set.</span><br><span class="line">   public Set getAddressSet() &#123;</span><br><span class="line">      System.out.println(&quot;Set Elements :&quot;  + addressSet);</span><br><span class="line">      return addressSet;</span><br><span class="line">   &#125;</span><br><span class="line">   // a setter method to set Map</span><br><span class="line">   public void setAddressMap(Map addressMap) &#123;</span><br><span class="line">      this.addressMap = addressMap;</span><br><span class="line">   &#125;  </span><br><span class="line">   // prints and returns all the elements of the Map.</span><br><span class="line">   public Map getAddressMap() &#123;</span><br><span class="line">      System.out.println(&quot;Map Elements :&quot;  + addressMap);</span><br><span class="line">      return addressMap;</span><br><span class="line">   &#125;</span><br><span class="line">   // a setter method to set Property</span><br><span class="line">   public void setAddressProp(Properties addressProp) &#123;</span><br><span class="line">      this.addressProp = addressProp;</span><br><span class="line">   &#125; </span><br><span class="line">   // prints and returns all the elements of the Property.</span><br><span class="line">   public Properties getAddressProp() &#123;</span><br><span class="line">      System.out.println(&quot;Property Elements :&quot;  + addressProp);</span><br><span class="line">      return addressProp;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.tutorialspoint;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line">public class MainApp &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      ApplicationContext context = </span><br><span class="line">             new ClassPathXmlApplicationContext(&quot;Beans.xml&quot;);</span><br><span class="line">      JavaCollection jc=(JavaCollection)context.getBean(&quot;javaCollection&quot;);</span><br><span class="line">      jc.getAddressList();</span><br><span class="line">      jc.getAddressSet();</span><br><span class="line">      jc.getAddressMap();</span><br><span class="line">      jc.getAddressProp();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置所有类型的集合的配置文件 <strong>Beans.xml</strong> 文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- Definition for javaCollection --&gt;</span><br><span class="line">   &lt;bean id=&quot;javaCollection&quot; class=&quot;com.tutorialspoint.JavaCollection&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- results in a setAddressList(java.util.List) call --&gt;</span><br><span class="line">      &lt;property name=&quot;addressList&quot;&gt;</span><br><span class="line">         &lt;list&gt;</span><br><span class="line">            &lt;value&gt;INDIA&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;Pakistan&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;USA&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;USA&lt;/value&gt;</span><br><span class="line">         &lt;/list&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- results in a setAddressSet(java.util.Set) call --&gt;</span><br><span class="line">      &lt;property name=&quot;addressSet&quot;&gt;</span><br><span class="line">         &lt;set&gt;</span><br><span class="line">            &lt;value&gt;INDIA&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;Pakistan&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;USA&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;USA&lt;/value&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- results in a setAddressMap(java.util.Map) call --&gt;</span><br><span class="line">      &lt;property name=&quot;addressMap&quot;&gt;</span><br><span class="line">         &lt;map&gt;</span><br><span class="line">            &lt;entry key=&quot;1&quot; value=&quot;INDIA&quot;/&gt;</span><br><span class="line">            &lt;entry key=&quot;2&quot; value=&quot;Pakistan&quot;/&gt;</span><br><span class="line">            &lt;entry key=&quot;3&quot; value=&quot;USA&quot;/&gt;</span><br><span class="line">            &lt;entry key=&quot;4&quot; value=&quot;USA&quot;/&gt;</span><br><span class="line">         &lt;/map&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- results in a setAddressProp(java.util.Properties) call --&gt;</span><br><span class="line">      &lt;property name=&quot;addressProp&quot;&gt;</span><br><span class="line">         &lt;props&gt;</span><br><span class="line">            &lt;prop key=&quot;one&quot;&gt;INDIA&lt;/prop&gt;</span><br><span class="line">            &lt;prop key=&quot;two&quot;&gt;Pakistan&lt;/prop&gt;</span><br><span class="line">            &lt;prop key=&quot;three&quot;&gt;USA&lt;/prop&gt;</span><br><span class="line">            &lt;prop key=&quot;four&quot;&gt;USA&lt;/prop&gt;</span><br><span class="line">         &lt;/props&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>一旦你创建源代码和 bean 配置文件完成后，我们就可以运行该应用程序。你应该注意这里不需要配置文件。如果你的应用程序一切都正常，将输出以下信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List Elements :[INDIA, Pakistan, USA, USA]</span><br><span class="line">Set Elements :[INDIA, Pakistan, USA]</span><br><span class="line">Map Elements :&#123;1=INDIA, 2=Pakistan, 3=USA, 4=USA&#125;</span><br><span class="line">Property Elements :&#123;two=Pakistan, one=INDIA, three=USA, four=USA&#125;</span><br></pre></td></tr></table></figure><h4 id="注入-Bean-引用"><a href="#注入-Bean-引用" class="headerlink" title="注入 Bean 引用"></a>注入 Bean 引用</h4><p>下面的 Bean 定义将帮助你理解如何注入 bean 的引用作为集合的元素。甚至你可以将引用和值混合在一起，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- Bean Definition to handle references and values --&gt;</span><br><span class="line">   &lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- Passing bean reference  for java.util.List --&gt;</span><br><span class="line">      &lt;property name=&quot;addressList&quot;&gt;</span><br><span class="line">         &lt;list&gt;</span><br><span class="line">            &lt;ref bean=&quot;address1&quot;/&gt;</span><br><span class="line">            &lt;ref bean=&quot;address2&quot;/&gt;</span><br><span class="line">            &lt;value&gt;Pakistan&lt;/value&gt;</span><br><span class="line">         &lt;/list&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- Passing bean reference  for java.util.Set --&gt;</span><br><span class="line">      &lt;property name=&quot;addressSet&quot;&gt;</span><br><span class="line">         &lt;set&gt;</span><br><span class="line">            &lt;ref bean=&quot;address1&quot;/&gt;</span><br><span class="line">            &lt;ref bean=&quot;address2&quot;/&gt;</span><br><span class="line">            &lt;value&gt;Pakistan&lt;/value&gt;</span><br><span class="line">         &lt;/set&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- Passing bean reference  for java.util.Map --&gt;</span><br><span class="line">      &lt;property name=&quot;addressMap&quot;&gt;</span><br><span class="line">         &lt;map&gt;</span><br><span class="line">            &lt;entry key=&quot;one&quot; value=&quot;INDIA&quot;/&gt;</span><br><span class="line">            &lt;entry key =&quot;two&quot; value-ref=&quot;address1&quot;/&gt;</span><br><span class="line">            &lt;entry key =&quot;three&quot; value-ref=&quot;address2&quot;/&gt;</span><br><span class="line">         &lt;/map&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>为了使用上面的 bean 定义，你需要定义 setter 方法，它们应该也能够是用这种方式来处理引用。</p><h4 id="注入-null-和空字符串的值"><a href="#注入-null-和空字符串的值" class="headerlink" title="注入 null 和空字符串的值"></a>注入 null 和空字符串的值</h4><p>如果你需要传递一个空字符串作为值，那么你可以传递它，如下所示：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;exampleBean&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前面的例子相当于 Java 代码：exampleBean.setEmail(“”)。</p><p>如果你需要传递一个 NULL 值，那么你可以传递它，如下所示：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;exampleBean&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">null</span>/&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前面的例子相当于 Java 代码：exampleBean.setEmail(null)。</p><h2 id="Spring-Beans-自动装配"><a href="#Spring-Beans-自动装配" class="headerlink" title="Spring Beans 自动装配"></a>Spring Beans 自动装配</h2><h3 id="Beans-自动装配"><a href="#Beans-自动装配" class="headerlink" title="Beans 自动装配"></a>Beans 自动装配</h3><p>你已经学会如何使用<code>&lt;bean&gt;</code>元素来声明 bean 和通过使用 XML 配置文件中的<code>&lt;constructor-arg&gt;</code>和<code>&lt;property&gt;</code>元素来注入 。</p><p>Spring 容器可以在不使用<code>&lt;constructor-arg&gt;</code>和<code>&lt;property&gt;</code> 元素的情况下<strong>自动装配</strong>相互协作的 bean 之间的关系，这有助于减少编写一个大的基于 Spring 的应用程序的 XML 配置的数量。</p><p><strong>自动装配模式</strong></p><p>下列自动装配模式，它们可用于指示 Spring 容器为来使用自动装配进行依赖注入。你可以使用<code>&lt;bean&gt;</code>元素的 <strong>autowire</strong> 属性为一个 bean 定义指定自动装配模式。</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>no</td><td>这是默认的设置，它意味着没有自动装配，你应该使用显式的bean引用来连线。你不用为了连线做特殊的事。在依赖注入章节你已经看到这个了。</td></tr><tr><td><a href="https://www.w3cschool.cn/wkspring/fwdz1mmb.html">byName</a></td><td>由属性名自动装配。Spring 容器看到在 XML 配置文件中 bean 的自动装配的属性设置为 byName。然后尝试匹配，并且将它的属性与在配置文件中被定义为相同名称的 beans 的属性进行连接。</td></tr><tr><td><a href="https://www.w3cschool.cn/wkspring/8dhy1mmd.html">byType</a></td><td>由属性数据类型自动装配。Spring 容器看到在 XML 配置文件中 bean 的自动装配的属性设置为 byType。然后如果它的<strong>类型</strong>匹配配置文件中的一个确切的 bean 名称，它将尝试匹配和连接属性的类型。如果存在不止一个这样的 bean，则一个致命的异常将会被抛出。</td></tr><tr><td><a href="https://www.w3cschool.cn/wkspring/jtlb1mmf.html">constructor</a></td><td>类似于 byType，但该类型适用于构造函数参数类型。如果在容器中没有一个构造函数参数类型的 bean，则一个致命错误将会发生。</td></tr><tr><td>autodetect（3.0版本不支持）</td><td>Spring首先尝试通过 constructor 使用自动装配来连接，如果它不执行，Spring 尝试通过 byType 来自动装配。</td></tr></tbody></table><p>可以使用 <strong>byType</strong> 或者 <strong>constructor</strong> 自动装配模式来连接数组和其他类型的集合。</p><p><strong>自动装配的局限性</strong></p><p>当自动装配始终在同一个项目中使用时，它的效果最好。如果通常不使用自动装配，它可能会使开发人员混淆的使用它来连接只有一个或两个 bean 定义。不过，自动装配可以显著减少需要指定的属性或构造器参数，但你应该在使用它们之前考虑到自动装配的局限性和缺点。</p><table><thead><tr><th>限制</th><th>描述</th></tr></thead><tbody><tr><td>重写的可能性</td><td>你可以使用总是重写自动装配的 <constructor-arg>和 <property> 设置来指定依赖关系。</td></tr><tr><td>原始数据类型</td><td>你不能自动装配所谓的简单类型包括基本类型，字符串和类。</td></tr><tr><td>混乱的本质</td><td>自动装配不如显式装配精确，所以如果可能的话尽可能使用显式装配。</td></tr></tbody></table><h3 id="Spring-自动装配-byName"><a href="#Spring-自动装配-byName" class="headerlink" title="Spring 自动装配 byName"></a>Spring 自动装配 <code>byName</code></h3><p>这种模式由属性名称指定自动装配。Spring 容器看作 beans，在 XML 配置文件中 beans 的 <em>auto-wire</em> 属性设置为 <em>byName</em>。然后，它尝试将它的属性与配置文件中定义为相同名称的 beans 进行匹配和连接。如果找到匹配项，它将注入这些 beans，否则，它将抛出异常。</p><p>例如，在配置文件中，如果一个 bean 定义设置为自动装配 <em>byName</em>，并且它包含 <em>spellChecker</em> 属性（即，它有一个 <em>setSpellChecker(…)</em> 方法），那么 Spring 就会查找定义名为 <em>spellChecker</em> 的 bean，并且用它来设置这个属性。你仍然可以使用 <property> 标签连接其余的属性。下面的例子将说明这个概念。</p><p>这里是 <strong>TextEditor.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSpellChecker</span><span class="params">( SpellChecker spellChecker )</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.spellChecker = spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> SpellChecker <span class="title function_">getSpellChecker</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spellCheck</span><span class="params">()</span> &#123;</span><br><span class="line">      spellChecker.checkSpelling();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是另一个依赖类文件 <strong>SpellChecker.java</strong> 的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpellChecker</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">SpellChecker</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside SpellChecker constructor.&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkSpelling</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside checkSpelling.&quot;</span> );</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">TextEditor</span> <span class="variable">te</span> <span class="operator">=</span> (TextEditor) context.getBean(<span class="string">&quot;textEditor&quot;</span>);</span><br><span class="line">      te.spellCheck();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是在正常情况下的配置文件 <strong>Beans.xml</strong> 文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;textEditor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;spellChecker&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Generic Text Editor&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是，如果你要使用自动装配 “byName”，那么你的 XML 配置文件将成为如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;textEditor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Generic Text Editor&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你完成了创建源代码和 bean 的配置文件，我们就可以运行该应用程序。如果你的应用程序一切都正常，它将打印下面的消息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Inside SpellChecker constructor.</span><br><span class="line">Inside checkSpelling.</span><br></pre></td></tr></table></figure><h3 id="类似的-Spring-自动装配-byType"><a href="#类似的-Spring-自动装配-byType" class="headerlink" title="(类似的)Spring 自动装配 byType"></a>(类似的)Spring 自动装配 <code>byType</code></h3><p>这种模式由属性类型指定自动装配。<code>Spring</code> 容器看作 <code>beans</code>，在 <code>XML</code> 配置文件中 <code>beans</code> 的 <em><code>autowire</code></em> 属性设置为 *<code>byType</code>*。然后，如果它的 <strong><code>type</code></strong> 恰好与配置文件中 <code>beans</code> 名称中的一个相匹配，它将尝试匹配和连接它的属性。如果找到匹配项，它将注入这些 <code>beans</code>，否则，它将抛出异常。</p><p>例如，在配置文件中，如果一个 <code>bean</code> 定义设置为自动装配 *<code>byType</code>*，并且它包含 <em><code>SpellChecker</code></em> 类型的 <em><code>spellChecker</code></em> 属性，那么 <code>Spring</code> 就会查找类型为 <em><code>SpellChecker</code></em> 的 <code>bean</code>，并且用它来设置这个属性。你仍然可以使用 &lt;<code>property</code>&gt; 标签连接其余属性。下面的例子将说明这个概念，你会发现和上面的例子没有什么区别，除了 <code>XML</code> 配置文件已经被改变。</p><p>这里是 <strong><code>TextEditor.java</code></strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSpellChecker</span><span class="params">( SpellChecker spellChecker )</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.spellChecker = spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> SpellChecker <span class="title function_">getSpellChecker</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spellCheck</span><span class="params">()</span> &#123;</span><br><span class="line">      spellChecker.checkSpelling();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是另一个依赖类文件 <strong><code>SpellChecker.java</code></strong> 的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpellChecker</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">SpellChecker</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside SpellChecker constructor.&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkSpelling</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside checkSpelling.&quot;</span> );</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong><code>MainApp.java</code></strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">TextEditor</span> <span class="variable">te</span> <span class="operator">=</span> (TextEditor) context.getBean(<span class="string">&quot;textEditor&quot;</span>);</span><br><span class="line">      te.spellCheck();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是在正常情况下的配置文件 <strong><code>Beans.xml</code></strong> 文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;textEditor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;spellChecker&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Generic Text Editor&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是，如果你要使用自动装配<code> “byType”</code>，那么你的 <code>XML </code>配置文件将成为如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;textEditor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Generic Text Editor&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;SpellChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你完成了创建源代码和 <code>bean</code> 的配置文件，我们就可以运行该应用程序。如果你的应用程序一切都正常，它将打印下面的消息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Inside SpellChecker constructor.</span><br><span class="line">Inside checkSpelling.</span><br></pre></td></tr></table></figure><h3 id="Spring-由构造函数自动装配"><a href="#Spring-由构造函数自动装配" class="headerlink" title="Spring 由构造函数自动装配"></a>Spring 由构造函数自动装配</h3><p>这种模式与 <em>byType</em> 非常相似，但它应用于构造器参数。Spring 容器看作 beans，在 XML 配置文件中 beans 的 <em>autowire</em> 属性设置为 <em>constructor</em>。然后，它尝试把它的构造函数的参数与配置文件中 beans 名称中的一个进行匹配和连线。如果找到匹配项，它会注入这些 bean，否则，它会抛出异常。</p><p>例如，在配置文件中，如果一个 bean 定义设置为通过<em>构造函数</em>自动装配，而且它有一个带有 <em>SpellChecker</em> 类型的参数之一的构造函数，那么 Spring 就会查找定义名为 <em>SpellChecker</em> 的 bean，并用它来设置构造函数的参数。你仍然可以使用 <constructor-arg> 标签连接其余属性。下面的例子将说明这个概念。</p><p>这里是 <strong>TextEditor.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">TextEditor</span><span class="params">( SpellChecker spellChecker, String name )</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.spellChecker = spellChecker;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> SpellChecker <span class="title function_">getSpellChecker</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spellCheck</span><span class="params">()</span> &#123;</span><br><span class="line">      spellChecker.checkSpelling();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是另一个依赖类文件 <strong>SpellChecker.java</strong> 的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpellChecker</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">SpellChecker</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside SpellChecker constructor.&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkSpelling</span><span class="params">()</span></span><br><span class="line">   &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside checkSpelling.&quot;</span> );</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">TextEditor</span> <span class="variable">te</span> <span class="operator">=</span> (TextEditor) context.getBean(<span class="string">&quot;textEditor&quot;</span>);</span><br><span class="line">      te.spellCheck();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是在正常情况下的配置文件 <strong>Beans.xml</strong> 文件：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">    xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">    xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- Definition <span class="keyword">for</span> textEditor bean --&gt;</span><br><span class="line">   &lt;bean id=<span class="string">&quot;textEditor&quot;</span> class=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span>&gt;</span><br><span class="line">      &lt;constructor-arg  ref=<span class="string">&quot;spellChecker&quot;</span> /&gt;</span><br><span class="line">      &lt;constructor-arg  value=<span class="string">&quot;Generic Text Editor&quot;</span>/&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- Definition <span class="keyword">for</span> spellChecker bean --&gt;</span><br><span class="line">   &lt;bean id=<span class="string">&quot;spellChecker&quot;</span> class=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>但是，如果你要使用自动装配 “by constructor”，那么你的 XML 配置文件将成为如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;textEditor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">autowire</span>=<span class="string">&quot;constructor&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;Generic Text Editor&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;SpellChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你完成了创建源代码和 bean 的配置文件，我们就可以运行该应用程序。如果你的应用程序一切都正常，它将打印下面的消息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Inside SpellChecker constructor.</span><br><span class="line">Inside checkSpelling.</span><br></pre></td></tr></table></figure><h2 id="Spring-基于注解的配置"><a href="#Spring-基于注解的配置" class="headerlink" title="Spring 基于注解的配置"></a>Spring 基于注解的配置</h2><h3 id="基于注解的配置"><a href="#基于注解的配置" class="headerlink" title="基于注解的配置"></a>基于注解的配置</h3><p>从 Spring 2.5 开始就可以使用<strong>注解</strong>来配置依赖注入。而不是采用 XML 来描述一个 bean 连线，你可以使用相关类，方法或字段声明的注解，将 bean 配置移动到组件类本身。</p><p>在 XML 注入之前进行注解注入，因此后者的配置将通过两种方式的属性连线被前者重写。</p><p>注解连线在默认情况下在 Spring 容器中不打开。因此，在可以使用基于注解的连线之前，我们将需要在我们的 Spring 配置文件中启用它。所以如果你想在 Spring 应用程序中使用的任何注解，可以考虑到下面的配置文件。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- bean definitions go here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦 被配置后，你就可以开始注解你的代码，表明 Spring 应该自动连接值到属性，方法和构造函数。让我们来看看几个重要的注解，并且了解它们是如何工作的：</p><table><thead><tr><th>序号</th><th>注解 &amp; 描述</th></tr></thead><tbody><tr><td>1</td><td><a href="https://www.w3cschool.cn/wkspring/9sle1mmh.html">@Required</a>@Required 注解应用于 bean 属性的 setter 方法。</td></tr><tr><td>2</td><td><a href="https://www.w3cschool.cn/wkspring/rw2h1mmj.html">@Autowired</a>@Autowired 注解可以应用到 bean 属性的 setter 方法，非 setter 方法，构造函数和属性。</td></tr><tr><td>3</td><td><a href="https://www.w3cschool.cn/wkspring/knqr1mm2.html">@Qualifier</a>通过指定确切的将被连线的 bean，@Autowired 和 @Qualifier 注解可以用来删除混乱。</td></tr><tr><td>4</td><td><a href="https://www.w3cschool.cn/wkspring/lmsq1mm4.html">JSR-250 Annotations</a>Spring 支持 JSR-250 的基础的注解，其中包括了 @Resource，@PostConstruct 和 @PreDestroy 注解。</td></tr></tbody></table><h3 id="Spring-Required-注解"><a href="#Spring-Required-注解" class="headerlink" title="Spring @Required 注解"></a>Spring @Required 注解</h3><p><strong>@Required</strong> 注解应用于 bean 属性的 setter 方法，它表明受影响的 bean 属性在配置时必须放在 XML 配置文件中，否则容器就会抛出一个 BeanInitializationException 异常。下面显示的是一个使用 @Required 注解的示例。</p><h4 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h4><p>让我们使 Eclipse IDE 处于工作状态，请按照下列步骤创建一个 Spring 应用程序：</p><table><thead><tr><th>步骤</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>创建一个名为 <em>SpringExample</em> 的项目，并且在所创建项目的 <strong>src</strong> 文件夹下创建一个名为 <em>com.tutorialspoint</em> 的包。</td></tr><tr><td>2</td><td>使用 <em>Add External JARs</em> 选项添加所需的 Spring 库文件，就如在 <em>Spring Hello World Example</em> 章节中解释的那样。</td></tr><tr><td>3</td><td>在 <em>com.tutorialspoint</em> 包下创建 Java 类 <em>Student</em> 和 <em>MainApp</em>。</td></tr><tr><td>4</td><td>在 <strong>src</strong> 文件夹下创建 Beans 配置文件 <em>Beans.xml</em>。</td></tr><tr><td>5</td><td>最后一步是创建所有 Java 文件和 Bean 配置文件的内容，并且按如下解释的那样运行应用程序。</td></tr></tbody></table><p>下面是 <strong>Student.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Required;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Integer age;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="meta">@Required</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Required</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) context.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;Name : &quot;</span> + student.getName() );</span><br><span class="line">      System.out.println(<span class="string">&quot;Age : &quot;</span> + student.getAge() );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置文件 <strong>Beans.xml:</strong> 文件的内容：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for student bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.Student&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;Zara&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- try without passing age and check the result --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- property name=&quot;age&quot;  value=&quot;11&quot;--&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你已经完成的创建了源文件和 bean 配置文件，让我们运行一下应用程序。如果你的应用程序一切都正常的话，这将引起 <em>BeanInitializationException</em> 异常，并且会输出一下错误信息和其他日志消息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Property &#x27;age&#x27; is required for bean &#x27;student&#x27;</span><br></pre></td></tr></table></figure><p>下一步，在你按照如下所示从 “age” 属性中删除了注解，你可以尝试运行上面的示例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for student bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.Student&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;Zara&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在上面的示例将产生如下结果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Name : Zara</span><br><span class="line">Age : 11</span><br></pre></td></tr></table></figure><h3 id="Spring-Autowired-注解"><a href="#Spring-Autowired-注解" class="headerlink" title="Spring @Autowired 注解"></a>Spring @Autowired 注解</h3><p>2021-08-17 14:28 更新</p><p>使用 Spring 开发时，进行配置主要有两种方式，一是 xml 的方式，二是 java config 的方式。Spring 技术自身也在不断的发展和改变，从当前 Springboot 的火热程度来看，java config 的应用是越来越广泛了，在使用 java config 的过程当中，我们不可避免的会有各种各样的注解打交道，其中，我们使用最多的注解应该就是 @Autowired 注解了。这个注解的功能就是为我们注入一个定义好的 bean。</p><h4 id="Autowired-注解的作用到底是什么？"><a href="#Autowired-注解的作用到底是什么？" class="headerlink" title="@Autowired 注解的作用到底是什么？"></a>@Autowired 注解的作用到底是什么？</h4><p>@Autowired 这个注解我们经常在使用，现在，我想问的是，它的作用到底是什么呢?</p><p>首先，我们从所属范围来看，事实上这个注解是属于 Spring 的容器配置的一个注解，与它同属容器配置的注解还有：@Required,@Primary, @Qualifier 等等。因此 @Autowired 注解是一个用于容器 ( container ) 配置的注解。</p><p>其次，我们可以直接从字面意思来看，@autowired 注解来源于英文单词 autowire,这个单词的意思是自动装配的意思。自动装配又是什么意思？这个词语本来的意思是指的一些工业上的用机器代替人口，自动将一些需要完成的组装任务，或者别的一些任务完成。而在 Spring 的世界当中，自动装配指的就是使用将 Spring 容器中的 bean 自动的和我们需要这个 bean 的类组装在一起。</p><h4 id="Autowired-注解用法"><a href="#Autowired-注解用法" class="headerlink" title="@Autowired 注解用法"></a>@Autowired 注解用法</h4><p>在分析这个注解的实现原理之前，我们不妨先来回顾一下 @Autowired 注解的用法。</p><p>将 @Autowired 注解应用于构造函数，如以下示例所示</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CustomerPreferenceDao customerPreferenceDao;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MovieRecommender</span><span class="params">(CustomerPreferenceDao customerPreferenceDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.customerPreferenceDao = customerPreferenceDao;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 @Autowired 注解应用于 setter 方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleMovieLister</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMovieFinder</span><span class="params">(MovieFinder movieFinder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.movieFinder = movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 @Autowired 注解应用于具有任意名称和多个参数的方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> MovieCatalog movieCatalog;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> CustomerPreferenceDao customerPreferenceDao;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">(MovieCatalog movieCatalog,</span></span><br><span class="line"><span class="params">            CustomerPreferenceDao customerPreferenceDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.movieCatalog = movieCatalog;</span><br><span class="line">        <span class="built_in">this</span>.customerPreferenceDao = customerPreferenceDao;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您也可以将 @Autowired 注解应用于字段，或者将其与构造函数混合，如以下示例所示</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CustomerPreferenceDao customerPreferenceDao;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MovieCatalog movieCatalog;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MovieRecommender</span><span class="params">(CustomerPreferenceDao customerPreferenceDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.customerPreferenceDao = customerPreferenceDao;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接应用于字段是我们使用的最多的一种方式，但是使用构造方法注入从代码层面却是更加好的。除此之外，还有以下不太常见的几种方式</p><p>将 @Autowired 注解添加到需要该类型数组的字段或方法，则 Spring 会从 ApplicationContext 中搜寻符合指定类型的所有 bean，如以下示例所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MovieCatalog[] movieCatalogs;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组可以，我们可以马上举一反三，那容器也可以吗，答案是肯定的，下面是 set 以及 map 的例子：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Set&lt;MovieCatalog&gt; movieCatalogs;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMovieCatalogs</span><span class="params">(Set&lt;MovieCatalog&gt; movieCatalogs)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.movieCatalogs = movieCatalogs;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, MovieCatalog&gt; movieCatalogs;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMovieCatalogs</span><span class="params">(Map&lt;String, MovieCatalog&gt; movieCatalogs)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.movieCatalogs = movieCatalogs;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是 @Autowired 注解的主要使用方式，经常使用 Spring 的话应该对其中常用的几种不会感到陌生。</p><h3 id="Spring-Qualifier-注解"><a href="#Spring-Qualifier-注解" class="headerlink" title="Spring @Qualifier 注解"></a>Spring @Qualifier 注解</h3><p>可能会有这样一种情况，当你创建多个具有相同类型的 bean 时，并且想要用一个属性只为它们其中的一个进行装配，在这种情况下，你可以使用 <strong>@Qualifier</strong> 注解和 <strong>@Autowired</strong> 注解通过指定哪一个真正的 bean 将会被装配来消除混乱。下面显示的是使用 @Qualifier 注解的一个示例。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>让我们使 Eclipse IDE 处于工作状态，请按照下列步骤创建一个 Spring 应用程序：</p><table><thead><tr><th>步骤</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>创建一个名为 <em>SpringExample</em> 的项目，并且在所创建项目的 <strong>src</strong> 文件夹下创建一个名为 <em>com.tutorialspoint</em> 的包。</td></tr><tr><td>2</td><td>使用 <em>Add External JARs</em> 选项添加所需的 Spring 库文件，就如在 <em>Spring Hello World Example</em> 章节中解释的那样。</td></tr><tr><td>3</td><td>在 <em>com.tutorialspoint</em> 包下创建 Java 类 <em>Student</em>，<em>Profile</em> 和 <em>MainApp</em>。</td></tr><tr><td>4</td><td>在 <strong>src</strong> 文件夹下创建 Beans 配置文件 <em>Beans.xml</em>。</td></tr><tr><td>5</td><td>最后一步是创建所有 Java 文件和 Bean 配置文件的内容，并且按如下解释的那样运行应用程序。</td></tr></tbody></table><p>这里是 <strong>Student.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Integer age;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">   &#125;   </span><br><span class="line">   <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是 <strong>Profile.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Profile</span> &#123;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="meta">@Qualifier(&quot;student1&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> Student student;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Profile</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Profile constructor.&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printAge</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Age : &quot;</span> + student.getAge() );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printName</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Name : &quot;</span> + student.getName() );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">Profile</span> <span class="variable">profile</span> <span class="operator">=</span> (Profile) context.getBean(<span class="string">&quot;profile&quot;</span>);</span><br><span class="line">      profile.printAge();</span><br><span class="line">      profile.printName();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考虑下面配置文件 <strong>Beans.xml</strong> 的示例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for profile bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;profile&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.Profile&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for student1 bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.Student&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;Zara&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for student2 bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.Student&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;Nuha&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你在源文件和 bean 配置文件中完成了上面两处改变，让我们运行一下应用程序。如果你的应用程序一切都正常的话，这将会输出以下消息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Inside Profile constructor.</span><br><span class="line">Age : 11</span><br><span class="line">Name : Zara</span><br></pre></td></tr></table></figure><h3 id="Spring-JSR-250-注释"><a href="#Spring-JSR-250-注释" class="headerlink" title="Spring JSR-250 注释"></a>Spring JSR-250 注释</h3><p>Spring还使用基于 JSR-250 注释，它包括 @PostConstruct， @PreDestroy 和 @Resource 注释。因为你已经有了其他的选择，尽管这些注释并不是真正所需要的，但是关于它们仍然让我给出一个简短的介绍。</p><h4 id="PostConstruct-和-PreDestroy-注释："><a href="#PostConstruct-和-PreDestroy-注释：" class="headerlink" title="@PostConstruct 和 @PreDestroy 注释："></a>@PostConstruct 和 @PreDestroy 注释：</h4><p>为了定义一个 bean 的安装和卸载，我们使用 <strong>init-method</strong> 和&#x2F;或 <strong>destroy-method</strong> 参数简单的声明一下 。init-method 属性指定了一个方法，该方法在 bean 的实例化阶段会立即被调用。同样地，destroy-method 指定了一个方法，该方法只在一个 bean 从容器中删除之前被调用。</p><p>你可以使用 <strong>@PostConstruct</strong> 注释作为初始化回调函数的一个替代，**@PreDestroy** 注释作为销毁回调函数的一个替代，其解释如下示例所示。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>让我们使 Eclipse IDE 处于工作状态，请按照下列步骤创建一个 Spring 应用程序：</p><table><thead><tr><th>步骤</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>创建一个名为 <em>SpringExample</em> 的项目，并且在所创建项目的 <strong>src</strong> 文件夹下创建一个名为 <em>com.tutorialspoint</em> 的包。</td></tr><tr><td>2</td><td>使用 <em>Add External JARs</em> 选项添加所需的 Spring 库文件，就如在 <em>Spring Hello World Example</em> 章节中解释的那样。</td></tr><tr><td>3</td><td>在 <em>com.tutorialspoint</em> 包下创建 Java 类 <em>HelloWorld</em> 和 <em>MainApp</em>。</td></tr><tr><td>4</td><td>在 <strong>src</strong> 文件夹下创建 Beans 配置文件 <em>Beans.xml</em>。</td></tr><tr><td>5</td><td>最后一步是创建所有 Java 文件和 Bean 配置文件的内容，并且按如下解释的那样运行应用程序。</td></tr></tbody></table><p>这里是 <strong>HelloWorld.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String message;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message  = message;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Your Message : &quot;</span> + message);</span><br><span class="line">      <span class="keyword">return</span> message;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@PostConstruct</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Bean is going through init.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@PreDestroy</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Bean will destroy now.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容。这里你需要注册一个关闭钩 <strong>registerShutdownHook()</strong> 方法，该方法在 AbstractApplicationContext 类中被声明。这将确保一个完美的关闭并调用相关的销毁方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.AbstractApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">AbstractApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">                          <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">HelloWorld</span> <span class="variable">obj</span> <span class="operator">=</span> (HelloWorld) context.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">      obj.getMessage();</span><br><span class="line">      context.registerShutdownHook();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置文件 <strong>Beans.xml</strong>，该文件在初始化和销毁方法中需要使用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">    xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">    xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">    xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;context:annotation-config/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=<span class="string">&quot;helloWorld&quot;</span> </span><br><span class="line">       class=<span class="string">&quot;com.tutorialspoint.HelloWorld&quot;</span></span><br><span class="line">       init-method=<span class="string">&quot;init&quot;</span> destroy-method=<span class="string">&quot;destroy&quot;</span>&gt;</span><br><span class="line">       &lt;property name=<span class="string">&quot;message&quot;</span> value=<span class="string">&quot;Hello World!&quot;</span>/&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>一旦你在源文件和 bean 配置文件中完成了上面两处改变，让我们运行一下应用程序。如果你的应用程序一切都正常的话，这将会输出以下消息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Bean is going through init.</span><br><span class="line">Your Message : Hello World!</span><br><span class="line">Bean will destroy now.</span><br></pre></td></tr></table></figure><h3 id="Resource-注释："><a href="#Resource-注释：" class="headerlink" title="@Resource 注释："></a>@Resource 注释：</h3><p>你可以在字段中或者 setter 方法中使用 <strong>@Resource</strong> 注释，它和在 Java EE 5 中的运作是一样的。@Resource 注释使用一个 ‘name’ 属性，该属性以一个 bean 名称的形式被注入。你可以说，它遵循 <strong>by-name</strong> 自动连接语义，如下面的示例所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">   <span class="meta">@Resource(name= &quot;spellChecker&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSpellChecker</span><span class="params">( SpellChecker spellChecker )</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.spellChecker = spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> SpellChecker <span class="title function_">getSpellChecker</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spellCheck</span><span class="params">()</span>&#123;</span><br><span class="line">      spellChecker.checkSpelling();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有明确地指定一个 ‘name’，默认名称源于字段名或者 setter 方法。在字段的情况下，它使用的是字段名；在一个 setter 方法情况下，它使用的是 bean 属性名称。</p><h3 id="Spring-基于-Java-的配置"><a href="#Spring-基于-Java-的配置" class="headerlink" title="Spring 基于 Java 的配置"></a>Spring 基于 Java 的配置</h3><p>2020-09-04 16:27 更新</p><h4 id="基于-Java-的配置"><a href="#基于-Java-的配置" class="headerlink" title="基于 Java 的配置"></a>基于 Java 的配置</h4><p>到目前为止，你已经看到如何使用 XML 配置文件来配置 Spring bean。如果你熟悉使用 XML 配置，那么我会说，不需要再学习如何进行基于 Java 的配置是，因为你要达到相同的结果，可以使用其他可用的配置。</p><p>基于 Java 的配置选项，可以使你在不用配置 XML 的情况下编写大多数的 Spring，但是一些有帮助的基于 Java 的注解，解释如下：</p><h4 id="Configuration-和-Bean-注解"><a href="#Configuration-和-Bean-注解" class="headerlink" title="@Configuration 和 @Bean 注解"></a>@Configuration 和 @Bean 注解</h4><p>带有 <strong>@Configuration</strong> 的注解类表示这个类可以使用 Spring IoC 容器作为 bean 定义的来源。**@Bean** 注解告诉 Spring，一个带有 @Bean 的注解方法将返回一个对象，该对象应该被注册为在 Spring 应用程序上下文中的 bean。最简单可行的 @Configuration 类如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldConfig</span> &#123;</span><br><span class="line">   <span class="meta">@Bean</span> </span><br><span class="line">   <span class="keyword">public</span> HelloWorld <span class="title function_">helloWorld</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HelloWorld</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码将等同于下面的 XML 配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloWorld&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.HelloWorld&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里，带有 @Bean 注解的方法名称作为 bean 的 ID，它创建并返回实际的 bean。你的配置类可以声明多个 @Bean。一旦定义了配置类，你就可以使用 <em>AnnotationConfigApplicationContext</em> 来加载并把他们提供给 Spring 容器，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> </span><br><span class="line">   <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(HelloWorldConfig.class); </span><br><span class="line">   <span class="type">HelloWorld</span> <span class="variable">helloWorld</span> <span class="operator">=</span> ctx.getBean(HelloWorld.class);</span><br><span class="line">   helloWorld.setMessage(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">   helloWorld.getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以加载各种配置类，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> </span><br><span class="line">   <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line">   ctx.register(AppConfig.class, OtherConfig.class);</span><br><span class="line">   ctx.register(AdditionalConfig.class);</span><br><span class="line">   ctx.refresh();</span><br><span class="line">   <span class="type">MyService</span> <span class="variable">myService</span> <span class="operator">=</span> ctx.getBean(MyService.class);</span><br><span class="line">   myService.doStuff();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h4><p>让我们在恰当的位置使用 Eclipse IDE，然后按照下面的步骤来创建一个 Spring 应用程序：</p><table><thead><tr><th>步骤</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>创建一个名称为 <em>SpringExample</em> 的项目，并且在创建项目的 <strong>src</strong> 文件夹中创建一个包 <em>com.tutorialspoint</em>。</td></tr><tr><td>2</td><td>使用 <em>Add External JARs</em> 选项，添加所需的 Spring 库,解释见 <em>Spring Hello World Example</em> 章节。</td></tr><tr><td>3</td><td>因为你是使用基于 java 的注解，所以你还需要添加来自 Java 安装目录的 <em>CGLIB.jar</em> 和可以从 <em>asm.ow2.org</em> 中下载的 ASM.jar 库。</td></tr><tr><td>4</td><td>在 <em>com.tutorialspoint</em> 包中创建 Java 类 <em>HelloWorldConfig</em>、<em>HelloWorld</em> 和 <em>MainApp</em>。</td></tr><tr><td>5</td><td>最后一步是创建的所有 Java 文件和 Bean 配置文件的内容，并运行应用程序，解释如下所示。</td></tr></tbody></table><p>这里是 <strong>HelloWorldConfig.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldConfig</span> &#123;</span><br><span class="line">   <span class="meta">@Bean</span> </span><br><span class="line">   <span class="keyword">public</span> HelloWorld <span class="title function_">helloWorld</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HelloWorld</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是 <strong>HelloWorld.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message  = message;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Your Message : &quot;</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> </span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(HelloWorldConfig.class);</span><br><span class="line"></span><br><span class="line">      <span class="type">HelloWorld</span> <span class="variable">helloWorld</span> <span class="operator">=</span> ctx.getBean(HelloWorld.class);</span><br><span class="line"></span><br><span class="line">      helloWorld.setMessage(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">      helloWorld.getMessage();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦你完成了创建所有的源文件并添加所需的额外的库后，我们就可以运行该应用程序。你应该注意这里不需要配置文件。如果你的应用程序一切都正常，将输出以下信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Your Message : Hello World!</span><br></pre></td></tr></table></figure><h4 id="注入-Bean-的依赖性"><a href="#注入-Bean-的依赖性" class="headerlink" title="注入 Bean 的依赖性"></a>注入 Bean 的依赖性</h4><p>当 @Beans 依赖对方时，表达这种依赖性非常简单，只要有一个 bean 方法调用另一个，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Foo <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Foo</span>(bar());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Bar <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bar</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，foo Bean 通过构造函数注入来接收参考基准。现在，让我们看到一个正在执行的例子：</p><h4 id="例子-5"><a href="#例子-5" class="headerlink" title="例子:"></a>例子:</h4><p>让我们在恰当的位置使用 Eclipse IDE，然后按照下面的步骤来创建一个 Spring 应用程序：</p><table><thead><tr><th>步骤</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>创建一个名称为 <em>SpringExample</em> 的项目，并且在创建项目的 <strong>src</strong> 文件夹中创建一个包 <em>com.tutorialspoint</em>。</td></tr><tr><td>2</td><td>使用 <em>Add External JARs</em> 选项，添加所需的 Spring 库,解释见 <em>Spring Hello World Example</em> 章节。</td></tr><tr><td>3</td><td>因为你是使用基于 java 的注解，所以你还需要添加来自 Java 安装目录的 <em>CGLIB.jar</em> 和可以从 <em>asm.ow2.org</em> 中下载的 ASM.jar 库。</td></tr><tr><td>4</td><td>在 <em>com.tutorialspoint</em> 包中创建 Java 类 <em>TextEditorConfig</em>、<em>TextEditor</em>、<em>SpellChecker</em> 和 <em>MainApp</em>。</td></tr><tr><td>5</td><td>最后一步是创建的所有 Java 文件和 Bean 配置文件的内容，并运行应用程序，解释如下所示。</td></tr></tbody></table><p>这里是 <strong>TextEditorConfig.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditorConfig</span> &#123;</span><br><span class="line">   <span class="meta">@Bean</span> </span><br><span class="line">   <span class="keyword">public</span> TextEditor <span class="title function_">textEditor</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TextEditor</span>( spellChecker() );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Bean</span> </span><br><span class="line">   <span class="keyword">public</span> SpellChecker <span class="title function_">spellChecker</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpellChecker</span>( );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是 TextEditor.java 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">TextEditor</span><span class="params">(SpellChecker spellChecker)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside TextEditor constructor.&quot;</span> );</span><br><span class="line">      <span class="built_in">this</span>.spellChecker = spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spellCheck</span><span class="params">()</span>&#123;</span><br><span class="line">      spellChecker.checkSpelling();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是另一个依赖的类文件 <strong>SpellChecker.java</strong> 的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpellChecker</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">SpellChecker</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside SpellChecker constructor.&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkSpelling</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside checkSpelling.&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> </span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(TextEditorConfig.class);</span><br><span class="line"></span><br><span class="line">      <span class="type">TextEditor</span> <span class="variable">te</span> <span class="operator">=</span> ctx.getBean(TextEditor.class);</span><br><span class="line"></span><br><span class="line">      te.spellCheck();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦你完成了创建所有的源文件并添加所需的额外的库后，我们就可以运行该应用程序。你应该注意这里不需要配置文件。如果你的应用程序一切都正常，将输出以下信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Inside SpellChecker constructor.</span><br><span class="line">Inside TextEditor constructor.</span><br><span class="line">Inside checkSpelling.</span><br></pre></td></tr></table></figure><h4 id="Import-注解"><a href="#Import-注解" class="headerlink" title="@Import 注解:"></a>@Import 注解:</h4><p><strong>@import</strong> 注解允许从另一个配置类中加载 @Bean 定义。考虑 ConfigA 类，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigA</span> &#123;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> A <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">A</span>(); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以在另一个 Bean 声明中导入上述 Bean 声明，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(ConfigA.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigB</span> &#123;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> B <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">B</span>(); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，当实例化上下文时，不需要同时指定 ConfigA.class 和 ConfigB.class，只有 ConfigB 类需要提供，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> </span><br><span class="line">   <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ConfigB.class);</span><br><span class="line">   <span class="comment">// now both beans A and B will be available...</span></span><br><span class="line">   <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> ctx.getBean(A.class);</span><br><span class="line">   <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> ctx.getBean(B.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生命周期回调"><a href="#生命周期回调" class="headerlink" title="生命周期回调"></a>生命周期回调</h4><p>@Bean 注解支持指定任意的初始化和销毁的回调方法，就像在 bean 元素中 Spring 的 XML 的初始化方法和销毁方法的属性：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// initialization logic</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cleanup</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// destruction logic</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">   <span class="meta">@Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;cleanup&quot; )</span></span><br><span class="line">   <span class="keyword">public</span> Foo <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定 Bean 的范围：</p><p>默认范围是单实例，但是你可以重写带有 @Scope 注解的该方法，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Foo <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-中的事件处理"><a href="#Spring-中的事件处理" class="headerlink" title="Spring 中的事件处理"></a>Spring 中的事件处理</h3><p>你已经看到了在所有章节中 Spring 的核心是 <strong>ApplicationContext</strong>，它负责管理 beans 的完整生命周期。当加载 beans 时，ApplicationContext 发布某些类型的事件。例如，当上下文启动时，ContextStartedEvent 发布，当上下文停止时，ContextStoppedEvent 发布。</p><p>通过 ApplicationEvent 类和 ApplicationListener 接口来提供在 ApplicationContext 中处理事件。如果一个 bean 实现 ApplicationListener，那么每次 ApplicationEvent 被发布到 ApplicationContext 上，那个 bean 会被通知。</p><p>Spring 提供了以下的标准事件：</p><table><thead><tr><th>序号</th><th>Spring 内置事件 &amp; 描述</th></tr></thead><tbody><tr><td>1</td><td><strong>ContextRefreshedEvent</strong>ApplicationContext 被初始化或刷新时，该事件被发布。这也可以在 ConfigurableApplicationContext 接口中使用 refresh() 方法来发生。</td></tr><tr><td>2</td><td><strong>ContextStartedEvent</strong>当使用 ConfigurableApplicationContext 接口中的 start() 方法启动 ApplicationContext 时，该事件被发布。你可以调查你的数据库，或者你可以在接受到这个事件后重启任何停止的应用程序。</td></tr><tr><td>3</td><td><strong>ContextStoppedEvent</strong>当使用 ConfigurableApplicationContext 接口中的 stop() 方法停止 ApplicationContext 时，发布这个事件。你可以在接受到这个事件后做必要的清理的工作。</td></tr><tr><td>4</td><td><strong>ContextClosedEvent</strong>当使用 ConfigurableApplicationContext 接口中的 close() 方法关闭 ApplicationContext 时，该事件被发布。一个已关闭的上下文到达生命周期末端；它不能被刷新或重启。</td></tr><tr><td>5</td><td><strong>RequestHandledEvent</strong>这是一个 web-specific 事件，告诉所有 bean HTTP 请求已经被服务。</td></tr></tbody></table><p>由于 Spring 的事件处理是单线程的，所以如果一个事件被发布，直至并且除非所有的接收者得到的该消息，该进程被阻塞并且流程将不会继续。因此，如果事件处理被使用，在设计应用程序时应注意。</p><h4 id="监听上下文事件"><a href="#监听上下文事件" class="headerlink" title="监听上下文事件"></a>监听上下文事件</h4><p>为了监听上下文事件，一个 bean 应该实现只有一个方法 <strong>onApplicationEvent()</strong> 的 ApplicationListener 接口。因此，我们写一个例子来看看事件是如何传播的，以及如何可以用代码来执行基于某些事件所需的任务。</p><p>让我们在恰当的位置使用 Eclipse IDE，然后按照下面的步骤来创建一个 Spring 应用程序：</p><table><thead><tr><th>步骤</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>创建一个名称为 SpringExample 的项目，并且在创建项目的 <strong>src</strong> 文件夹中创建一个包 com.tutorialspoint。</td></tr><tr><td>2</td><td>使用 Add External JARs 选项，添加所需的 Spring 库，解释见 Spring Hello World Example 章节。</td></tr><tr><td>3</td><td>在 com.tutorialspoint 包中创建 Java 类 HelloWorld、CStartEventHandler、CStopEventHandler 和 MainApp。</td></tr><tr><td>4</td><td>在 <strong>src</strong> 文件夹中创建 Bean 的配置文件 Beans.xml。</td></tr><tr><td>5</td><td>最后一步是创建的所有 Java 文件和 Bean 配置文件的内容，并运行应用程序，解释如下所示。</td></tr></tbody></table><p>这里是 <strong>HelloWorld.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String message;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message  = message;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Your Message : &quot;</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>CStartEventHandler.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.ContextStartedEvent;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CStartEventHandler</span> </span><br><span class="line">   <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ContextStartedEvent&gt;&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ContextStartedEvent event)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;ContextStartedEvent Received&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>CStopEventHandler.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.ContextStoppedEvent;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CStopEventHandler</span> </span><br><span class="line">   <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ContextStoppedEvent&gt;&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ContextStoppedEvent event)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;ContextStoppedEvent Received&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Let us raise a start event.</span></span><br><span class="line">      context.start();</span><br><span class="line"></span><br><span class="line">      <span class="type">HelloWorld</span> <span class="variable">obj</span> <span class="operator">=</span> (HelloWorld) context.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line">      obj.getMessage();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Let us raise a stop event.</span></span><br><span class="line">      context.stop();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置文件 <strong>Beans.xml</strong> 文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloWorld&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.HelloWorld&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello World!&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cStartEventHandler&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.CStartEventHandler&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cStopEventHandler&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.CStopEventHandler&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你完成了创建源和 bean 的配置文件，我们就可以运行该应用程序。如果你的应用程序一切都正常，将输出以下消息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ContextStartedEvent Received</span><br><span class="line">Your Message : Hello World!</span><br><span class="line">ContextStoppedEvent Received</span><br></pre></td></tr></table></figure><h3 id="Spring-中的自定义事件"><a href="#Spring-中的自定义事件" class="headerlink" title="Spring 中的自定义事件"></a>Spring 中的自定义事件</h3><p>编写和发布自己的自定义事件有许多步骤。按照在这一章给出的说明来编写，发布和处理自定义 Spring 事件。</p><table><thead><tr><th>步骤</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>创建一个名称为 SpringExample 的项目，并且在创建项目的 <strong>src</strong> 文件夹中创建一个包 com.tutorialspoint。</td></tr><tr><td>2</td><td>使用 Add External JARs 选项，添加所需的 Spring 库，解释见 Spring Hello World Example 章节。</td></tr><tr><td>3</td><td>通过扩展 <strong>ApplicationEvent</strong>,创建一个事件类 CustomEvent。这个类必须定义一个默认的构造函数，它应该从 ApplicationEvent 类中继承的构造函数。</td></tr><tr><td>4</td><td>一旦定义事件类，你可以从任何类中发布它，假定 EventClassPublisher 实现了 ApplicationEventPublisherAware。你还需要在 XML 配置文件中声明这个类作为一个 bean，之所以容器可以识别 bean 作为事件发布者，是因为它实现了 ApplicationEventPublisherAware 接口。</td></tr><tr><td>5</td><td>发布的事件可以在一个类中被处理，假定 EventClassHandler 实现了 ApplicationListener 接口，而且实现了自定义事件的 onApplicationEvent 方法。</td></tr><tr><td>6</td><td>在 <strong>src</strong> 文件夹中创建 bean 的配置文件 Beans.xml 和 MainApp 类，它可以作为一个 Spring 应用程序来运行。</td></tr><tr><td>7</td><td>最后一步是创建的所有 Java 文件和 Bean 配置文件的内容，并运行应用程序，解释如下所示。</td></tr></tbody></table><p>这个是 <strong>CustomEvent.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.handle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomEvent</span><span class="params">(Object source)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Ladidol Event&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>CustomEventPublisher.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.handle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisherAware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomEventPublisher</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">ApplicationEventPublisherAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationEventPublisher</span></span><br><span class="line">            <span class="params">(ApplicationEventPublisher publisher)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.publisher = publisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publish</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CustomEvent</span> <span class="variable">ce</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="built_in">this</span>);</span><br><span class="line">        publisher.publishEvent(ce);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>CustomEventHandler.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.handle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomEventHandler</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;CustomEvent&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(CustomEvent event)</span> &#123;</span><br><span class="line">        System.out.println(event.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.feng.handle.CustomEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/26 15:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">CustomEventPublisher</span> <span class="variable">cvp</span> <span class="operator">=</span></span><br><span class="line">                (CustomEventPublisher) context.getBean(<span class="string">&quot;customEventPublisher&quot;</span>);</span><br><span class="line">        cvp.publish();</span><br><span class="line">        cvp.publish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置文件 <strong>Beans.xml</strong>：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;customEventHandler&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.CustomEventHandler&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;customEventPublisher&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.CustomEventPublisher&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你完成了创建源和 bean 的配置文件后，我们就可以运行该应用程序。如果你的应用程序一切都正常，将输出以下信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ladidol Event</span><br><span class="line">Ladidol Event</span><br></pre></td></tr></table></figure><h2 id="Spring-框架的-AOP"><a href="#Spring-框架的-AOP" class="headerlink" title="Spring 框架的 AOP"></a>Spring 框架的 AOP</h2><p>Spring 框架的一个关键组件是<strong>面向切面的编程</strong>(AOP)框架。面向切面的编程需要把程序逻辑分解成不同的部分称为所谓的关注点。跨一个应用程序的多个点的功能被称为<strong>横切关注点</strong>，这些横切关注点在概念上独立于应用程序的业务逻辑。在软件开发过程中有各种各样的很好的切面的例子，如日志记录、审计、声明式事务、安全性和缓存等。</p><p>在 OOP 中，关键单元模块度是类，而在 AOP 中单元模块度是切面。依赖注入帮助你对应用程序对象相互解耦合，AOP 可以帮助你从它们所影响的对象中对横切关注点解耦。AOP 像是编程语言的触发物，如 Perl，.NET，Java 或者其他语言。</p><p>Spring AOP 模块提供拦截器来拦截一个应用程序，例如，当执行一个方法时，你可以在方法执行之前或之后添加额外的功能。</p><h3 id="AOP-术语"><a href="#AOP-术语" class="headerlink" title="AOP 术语"></a>AOP 术语</h3><p>在我们开始使用 AOP 工作之前，让我们熟悉一下 AOP 概念和术语。这些术语并不特定于 Spring，而是与 AOP 有关的。</p><table><thead><tr><th>项</th><th>描述</th></tr></thead><tbody><tr><td>Aspect</td><td>一个模块具有一组提供横切需求的 APIs。例如，一个日志模块为了记录日志将被 AOP 方面调用。应用程序可以拥有任意数量的方面，这取决于需求。</td></tr><tr><td>Join point</td><td>在你的应用程序中它代表一个点，你可以在插件 AOP 方面。你也能说，它是在实际的应用程序中，其中一个操作将使用 Spring AOP 框架。</td></tr><tr><td>Advice</td><td>这是实际行动之前或之后执行的方法。这是在程序执行期间通过 Spring AOP 框架实际被调用的代码。</td></tr><tr><td>Pointcut</td><td>这是一组一个或多个连接点，通知应该被执行。你可以使用表达式或模式指定切入点正如我们将在 AOP 的例子中看到的。</td></tr><tr><td>Introduction</td><td>引用允许你添加新方法或属性到现有的类中。</td></tr><tr><td>Target object</td><td>被一个或者多个方面所通知的对象，这个对象永远是一个被代理对象。也称为被通知对象。</td></tr><tr><td>Weaving</td><td>Weaving 把方面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。这些可以在编译时，类加载时和运行时完成。</td></tr></tbody></table><h3 id="通知的类型"><a href="#通知的类型" class="headerlink" title="通知的类型"></a>通知的类型</h3><p>Spring 方面可以使用下面提到的五种通知工作：</p><table><thead><tr><th>通知</th><th>描述</th></tr></thead><tbody><tr><td>前置通知</td><td>在一个方法执行之前，执行通知。</td></tr><tr><td>后置通知</td><td>在一个方法执行之后，不考虑其结果，执行通知。</td></tr><tr><td>返回后通知</td><td>在一个方法执行之后，只有在方法成功完成时，才能执行通知。</td></tr><tr><td>抛出异常后通知</td><td>在一个方法执行之后，只有在方法退出抛出异常时，才能执行通知。</td></tr><tr><td>环绕通知</td><td>在建议方法调用之前和之后，执行通知。</td></tr></tbody></table><h3 id="实现自定义方面"><a href="#实现自定义方面" class="headerlink" title="实现自定义方面"></a>实现自定义方面</h3><p>Spring 支持 <strong>@AspectJ annotation style</strong> 的方法和<strong>基于模式</strong>的方法来实现自定义方面。这两种方法已经在下面两个子节进行了详细解释。</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3cschool.cn/wkspring/omps1mm6.html">XML Schema based</a></td><td>方面是使用常规类以及基于配置的 XML 来实现的。</td></tr><tr><td><a href="https://www.w3cschool.cn/wkspring/k4q21mm8.html">@AspectJ based</a></td><td>@AspectJ 引用一种声明方面的风格作为带有 Java 5 注释的常规 Java 类注释。</td></tr></tbody></table><h2 id="Spring-中基于-AOP-的-XML架构"><a href="#Spring-中基于-AOP-的-XML架构" class="headerlink" title="Spring 中基于 AOP 的 XML架构"></a>Spring 中基于 AOP 的 XML架构</h2><p>为了在本节的描述中使用 aop 命名空间标签，你需要导入 spring-aop j架构，如下所述：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span>    </span><br></pre></td></tr></table></figure><p>在maven中再添加两个依赖,注意不要添加spring-aop依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="声明一个-aspect"><a href="#声明一个-aspect" class="headerlink" title="声明一个 aspect"></a>声明一个 aspect</h3><p>一个 <strong>aspect</strong> 是使用 元素声明的，支持的 bean 是使用 <strong>ref</strong> 属性引用的，如下所示：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;aBean&quot;</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;aBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里，“aBean” 将被配置和依赖注入，就像前面的章节中你看到的其他的 Spring bean 一样。</p><h3 id="声明一个切入点"><a href="#声明一个切入点" class="headerlink" title="声明一个切入点"></a>声明一个切入点</h3><p>一个<strong>切入点</strong>有助于确定使用不同建议执行的感兴趣的连接点（即方法）。在处理基于配置的 XML 架构时，切入点将会按照如下所示定义：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;aBean&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;businessService&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">expression</span>=<span class="string">&quot;execution(* com.xyz.myapp.service.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">   ...</span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;aBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面的示例定义了一个名为 “businessService” 的切入点，该切入点将与 com.tutorialspoint 包下的 Student 类中的 getName() 方法相匹配：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;aBean&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;businessService&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">expression</span>=<span class="string">&quot;execution(* com.tutorialspoint.Student.getName(..))&quot;</span>/&gt;</span></span><br><span class="line">   ...</span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;aBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="声明建议"><a href="#声明建议" class="headerlink" title="声明建议"></a>声明建议</h2><p>你可以在<a href="aop:aspect">aop:aspect</a>中使用<a href="aop:{通知类型名}">aop:{通知类型名}</a>元素声明任意五种类型的通知，如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;aBean&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;businessService&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">expression</span>=<span class="string">&quot;execution(* com.xyz.myapp.service.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- a before advice definition --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;businessService&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">method</span>=<span class="string">&quot;doRequiredTask&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- an after advice definition --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;businessService&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">method</span>=<span class="string">&quot;doRequiredTask&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- an after-returning advice definition --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--The doRequiredTask method must have parameter named retVal --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;businessService&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">returning</span>=<span class="string">&quot;retVal&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">method</span>=<span class="string">&quot;doRequiredTask&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- an after-throwing advice definition --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--The doRequiredTask method must have parameter named ex --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;businessService&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">throwing</span>=<span class="string">&quot;ex&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">method</span>=<span class="string">&quot;doRequiredTask&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- an around advice definition --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;businessService&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">method</span>=<span class="string">&quot;doRequiredTask&quot;</span>/&gt;</span></span><br><span class="line">   ...</span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;aBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你可以对不同的建议使用相同的 <strong>doRequiredTask</strong> 或者不同的方法。这些方法将会作为 aspect 模块的一部分来定义。</p><h2 id="基于-AOP-的-XML-架构的示例"><a href="#基于-AOP-的-XML-架构的示例" class="headerlink" title="基于 AOP 的 XML 架构的示例"></a>基于 AOP 的 XML 架构的示例</h2><p>为了理解上面提到的基于 AOP 的 XML 架构的概念，让我们编写一个示例，可以实现几个建议。为了在我们的示例中使用几个建议，让我们使 Eclipse IDE 处于工作状态，然后按照如下步骤创建一个 Spring 应用程序：</p><p>在handle包下新建一个TimeHandler类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.handle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printTime</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间CurrentTime = &quot;</span> + System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在com.feng.entity包下新建三个类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printHelloWorld</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doPrint</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldImpl1</span> <span class="keyword">implements</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printHelloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Enter HelloWorldImpl1.printHelloWorld()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPrint</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Enter HelloWorldImpl1.doPrint()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldImpl2</span> <span class="keyword">implements</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printHelloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Enter HelloWorldImpl2.printHelloWorld()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPrint</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Enter HelloWorldImpl2.doPrint()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Beans.xml文件:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloWorldImpl1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.entity.HelloWorldImpl1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloWorldImpl2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.entity.HelloWorldImpl2&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;timeHandler&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.handle.TimeHandler&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;timeHandler&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;addAllMethod&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.feng.entity.HelloWorld.*(..))&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;printTime&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;addAllMethod&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;printTime&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;addAllMethod&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MainApp:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.feng.entity.HelloWorld;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/26 15:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HelloWorld</span> <span class="variable">hw1</span> <span class="operator">=</span> (HelloWorld) ctx.getBean(<span class="string">&quot;helloWorldImpl1&quot;</span>);</span><br><span class="line">        <span class="type">HelloWorld</span> <span class="variable">hw2</span> <span class="operator">=</span> (HelloWorld) ctx.getBean(<span class="string">&quot;helloWorldImpl2&quot;</span>);</span><br><span class="line">        hw1.printHelloWorld();</span><br><span class="line">        System.out.println();</span><br><span class="line">        hw1.doPrint();</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        hw2.printHelloWorld();</span><br><span class="line">        System.out.println();</span><br><span class="line">        hw2.doPrint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当前时间CurrentTime = 1648373011625</span><br><span class="line">Enter HelloWorldImpl1.printHelloWorld()</span><br><span class="line">当前时间CurrentTime = 1648373011625</span><br><span class="line"></span><br><span class="line">当前时间CurrentTime = 1648373011626</span><br><span class="line">Enter HelloWorldImpl1.doPrint()</span><br><span class="line">当前时间CurrentTime = 1648373011626</span><br><span class="line"></span><br><span class="line">当前时间CurrentTime = 1648373011626</span><br><span class="line">Enter HelloWorldImpl2.printHelloWorld()</span><br><span class="line">当前时间CurrentTime = 1648373011626</span><br><span class="line"></span><br><span class="line">当前时间CurrentTime = 1648373011626</span><br><span class="line">Enter HelloWorldImpl2.doPrint()</span><br><span class="line">当前时间CurrentTime = 1648373011626</span><br></pre></td></tr></table></figure><h2 id="Spring-中基于-AOP-的-AspectJ"><a href="#Spring-中基于-AOP-的-AspectJ" class="headerlink" title="Spring 中基于 AOP 的 @AspectJ"></a>Spring 中基于 AOP 的 @AspectJ</h2><p>@AspectJ 作为通过 Java 5 注释注释的普通的 Java 类，它指的是声明 aspects 的一种风格。通过在你的基于架构的 XML 配置文件中包含以下元素，@AspectJ 支持是可用的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;aop:aspectj-autoproxy/&gt;</span><br></pre></td></tr></table></figure><p>你还需要在你的应用程序的 CLASSPATH 中使用以下 AspectJ 库文件。这些库文件在一个 AspectJ 装置的 ‘lib’ 目录中是可用的，如果没有，你可以在 Internet 中下载它们。</p><ul><li>aspectjrt.jar</li><li>aspectjweaver.jar</li><li>aspectj.jar</li><li>aopalliance.jar</li></ul><h3 id="声明一个-aspect-1"><a href="#声明一个-aspect-1" class="headerlink" title="声明一个 aspect"></a>声明一个 aspect</h3><p>Aspects 类和其他任何正常的 bean 一样，除了它们将会用 @AspectJ 注释之外，它和其他类一样可能有方法和字段，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xyz;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AspectModule</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它们将在 XML 中按照如下进行配置，就和其他任何 bean 一样：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.xyz.AspectModule&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- configure properties of aspect here as normal --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="声明一个切入点-1"><a href="#声明一个切入点-1" class="headerlink" title="声明一个切入点"></a>声明一个切入点</h3><p>一个<strong>切入点</strong>有助于确定使用不同建议执行的感兴趣的连接点（即方法）。在处理基于配置的 XML 架构时，切入点的声明有两个部分：</p><ul><li>一个切入点表达式决定了我们感兴趣的哪个方法会真正被执行。</li><li>一个切入点标签包含一个名称和任意数量的参数。方法的真正内容是不相干的，并且实际上它应该是空的。</li></ul><p>下面的示例中定义了一个名为 ‘businessService’ 的切入点，该切入点将与 com.xyz.myapp.service 包下的类中可用的每一个方法相匹配：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.xyz.myapp.service.*.*(..))&quot;)</span> <span class="comment">// expression </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">businessService</span><span class="params">()</span> &#123;&#125;  <span class="comment">// signature</span></span><br></pre></td></tr></table></figure><p>下面的示例中定义了一个名为 ‘getname’ 的切入点，该切入点将与 com.tutorialspoint 包下的 Student 类中的 getName() 方法相匹配：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.tutorialspoint.Student.getName(..))&quot;)</span> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getname</span><span class="params">()</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="声明建议-1"><a href="#声明建议-1" class="headerlink" title="声明建议"></a>声明建议</h3><p>你可以使用 @{ADVICE-NAME} 注释声明五个建议中的任意一个，如下所示。这假设你已经定义了一个切入点标签方法 businessService()：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;businessService()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBeforeTask</span><span class="params">()</span>&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@After(&quot;businessService()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterTask</span><span class="params">()</span>&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@AfterReturning(pointcut = &quot;businessService()&quot;, returning=&quot;retVal&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterReturnningTask</span><span class="params">(Object retVal)</span>&#123;</span><br><span class="line">  <span class="comment">// you can intercept retVal here.</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@AfterThrowing(pointcut = &quot;businessService()&quot;, throwing=&quot;ex&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterThrowingTask</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">  <span class="comment">// you can intercept thrown exception here.</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Around(&quot;businessService()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAroundTask</span><span class="params">()</span>&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以为任意一个建议定义你的切入点内联。下面是在建议之前定义内联切入点的一个示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;execution(* com.xyz.myapp.service.*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">doBeforeTask</span><span class="params">()</span>&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于-AOP-的-AspectJ-示例"><a href="#基于-AOP-的-AspectJ-示例" class="headerlink" title="基于 AOP 的 @AspectJ 示例"></a>基于 AOP 的 @AspectJ 示例</h3><p>为了理解上面提到的关于基于 AOP 的 @AspectJ 的概念，让我们编写一个示例，可以实现几个建议。为了在我们的示例中使用几个建议，让我们使 Eclipse IDE 处于工作状态，然后按照如下步骤创建一个 Spring 应用程序：</p><table><thead><tr><th>步骤</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>创建一个名为 <em>SpringExample</em> 的项目，并且在所创建项目的 <strong>src</strong> 文件夹下创建一个名为 <em>com.tutorialspoint</em> 的包。</td></tr><tr><td>2</td><td>使用 <em>Add External JARs</em> 选项添加所需的 Spring 库文件，就如在 <em>Spring Hello World Example</em> 章节中解释的那样。</td></tr><tr><td>3</td><td>在项目中添加 Spring AOP 指定的库文件 <strong>aspectjrt.jar， aspectjweaver.jar</strong> 和 <strong>aspectj.jar</strong>。</td></tr><tr><td>4</td><td>在 <em>com.tutorialspoint</em> 包下创建 Java 类 <strong>Logging</strong>， <em>Student</em> 和 <em>MainApp</em>。</td></tr><tr><td>5</td><td>在 <strong>src</strong> 文件夹下创建 Beans 配置文件 <em>Beans.xml</em>。</td></tr><tr><td>6</td><td>最后一步是创建所有 Java 文件和 Bean 配置文件的内容，并且按如下解释的那样运行应用程序。</td></tr></tbody></table><p>这里是 <strong>Logging.java</strong> 文件的内容。这实际上是 aspect 模块的一个示例，它定义了在各个点调用的方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Logging</span> &#123;</span><br><span class="line">   <span class="comment">/** Following is the definition for a pointcut to select</span></span><br><span class="line"><span class="comment">    *  all the methods available. So advice will be called</span></span><br><span class="line"><span class="comment">    *  for all the methods.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Pointcut(&quot;execution(* com.tutorialspoint.*.*(..))&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">selectAll</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">   <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * This is the method which I would like to execute</span></span><br><span class="line"><span class="comment">    * before a selected method execution.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Before(&quot;selectAll()&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Going to setup student profile.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * This is the method which I would like to execute</span></span><br><span class="line"><span class="comment">    * after a selected method execution.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@After(&quot;selectAll()&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Student profile has been setup.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * This is the method which I would like to execute</span></span><br><span class="line"><span class="comment">    * when any method returns.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@AfterReturning(pointcut = &quot;selectAll()&quot;, returning=&quot;retVal&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningAdvice</span><span class="params">(Object retVal)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Returning:&quot;</span> + retVal.toString() );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * This is the method which I would like to execute</span></span><br><span class="line"><span class="comment">    * if there is an exception raised by any method.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@AfterThrowing(pointcut = &quot;selectAll()&quot;, throwing = &quot;ex&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AfterThrowingAdvice</span><span class="params">(IllegalArgumentException ex)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;There has been an exception: &quot;</span> + ex.toString());   </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>Student.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Integer age;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Age : &quot;</span> + age );</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Name : &quot;</span> + name );</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printThrowException</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Exception raised&quot;</span>);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) context.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">      student.getName();</span><br><span class="line">      student.getAge();     </span><br><span class="line">      student.printThrowException();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置文件 <strong>Beans.xml</strong>：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd &quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for student bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.Student&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;Zara&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>/&gt;</span>      </span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for logging aspect --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;logging&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.Logging&quot;</span>/&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你已经完成的创建了源文件和 bean 配置文件，让我们运行一下应用程序。如果你的应用程序一切都正常的话，这将会输出以下消息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Going to setup student profile.</span><br><span class="line">Name : Zara</span><br><span class="line">Student profile has been setup.</span><br><span class="line">Returning:Zara</span><br><span class="line">Going to setup student profile.</span><br><span class="line">Age : 11</span><br><span class="line">Student profile has been setup.</span><br><span class="line">Returning:11</span><br><span class="line">Going to setup student profile.</span><br><span class="line">Exception raised</span><br><span class="line">Student profile has been setup.</span><br><span class="line">There has been an exception: java.lang.IllegalArgumentException</span><br><span class="line">.....</span><br><span class="line">other exception content</span><br></pre></td></tr></table></figure><h2 id="Spring-JDBC-框架"><a href="#Spring-JDBC-框架" class="headerlink" title="Spring JDBC 框架"></a>Spring JDBC 框架</h2><p><a href="https://www.w3cschool.cn/wkspring/zjs51h9z.html">传送门</a></p><h3 id="Spring-JDBC-示例"><a href="#Spring-JDBC-示例" class="headerlink" title="Spring JDBC 示例"></a>Spring JDBC 示例</h3><p><a href="https://www.w3cschool.cn/wkspring/iuck1mma.html">传送门</a></p><h3 id="Spring-中-SQL-的存储过程"><a href="#Spring-中-SQL-的存储过程" class="headerlink" title="Spring 中 SQL 的存储过程"></a>Spring 中 SQL 的存储过程</h3><p><a href="https://www.w3cschool.cn/wkspring/3yh61mmc.html">传送门</a></p><p>详情请见w3cschool</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql数据库</title>
      <link href="/2022/03/27/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dmysql%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2022/03/27/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dmysql%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。]">  <script id="hbeData" type="hbeData" data-hmacdigest="f4918e94febdc842734c49986474a622604fc3467c5f236711d06a920ec9427b">c92271cf075fe1244ae5c161f435c003d27ecbda7ceb8b7a9afb1afb02623f7c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，博主可能还没写完，所以这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 加密文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sso单点登录</title>
      <link href="/2022/03/24/sso%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
      <url>/2022/03/24/sso%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP协议的无状态性"><a href="#HTTP协议的无状态性" class="headerlink" title="HTTP协议的无状态性"></a><strong>HTTP协议的无状态性</strong></h2><p>HTTP是无状态协议，浏览器的每一次请求，服务器都会独立处理，不与之前或之后的请求产生关联，所以，任何用户都可以通过浏览器访问服务器资源。 </p><h3 id="session和cookie机制"><a href="#session和cookie机制" class="headerlink" title="session和cookie机制"></a><strong>session和cookie机制</strong></h3><p>其实前文已经有简单的了解cookie和session了。</p><p>session是服务器级别的，cookie是浏览器级别的。</p><p><strong>session：</strong>浏览器第一次请求服务器，服务器创建一个会话，并将会话的id作为响应的一部分发送给浏览器，浏览器存储会话id，之后浏览器的每一次访问服务器都会带上会话id，服务器根据会话id就知道是不是同一个用户了。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220324220432828.png" alt="image-20220324220432828"></p><p><strong>cookie：</strong>session机制每一次浏览器访问服务器，服务器都要判断一次会话id，显然不太合适。于是浏览器来维护会话id就是cookie机制。浏览器每次访问服务器都会自动附带cookie信息。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220324224426998.png" alt="image-20220324224426998"></p><p>cookie和session机制就可以确保一个用户登录到一个系统后，之后的操作在一定时间内就不需要再次登录系统。</p><blockquote><p>以上的 session和 cookie都只适用于<strong>单系统</strong>，但是系统数量变多成为<strong>多系统</strong>时，我们总不能访问一个分支系统就登录一次吧，于是将这些子系统的域名统一到一个顶级域名中，然后将cookie域设置成顶级域名，于是各个子系统之间就可以共享cookie。</p></blockquote><h2 id="何为单点登录？"><a href="#何为单点登录？" class="headerlink" title="何为单点登录？"></a><strong>何为单点登录？</strong></h2><ul><li><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a><strong>是什么</strong></h3></li></ul><p>单点登录全称 single sign on，简称 SSO，指在多系统应用群中登录一个系统，便可在其他所有系统中得到授权而无需再次登录，包括单点登录和单点注销两部分。比如你用<strong>阿里系产品</strong>，你一旦打开浏览器登陆过<strong>淘宝网</strong>，接下来你会发现你再打开<strong>天猫</strong>，其竟然自动登录了！</p><ul><li><h3 id="从哪来"><a href="#从哪来" class="headerlink" title="从哪来"></a><strong>从哪来</strong></h3></li></ul><p>由于共享 cookie有很多局限性。例如：<strong>域名难以统一</strong>，<strong>子系统技术难以统一</strong>。所以，需要一种全新的登录方式实现多系统应用群的登录 <strong>单点登录</strong></p><h2 id="单点登录实现原理"><a href="#单点登录实现原理" class="headerlink" title="单点登录实现原理"></a><strong>单点登录实现原理</strong></h2><ul><li><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a><strong>登录</strong></h3></li></ul><p>sso需要一个独立的<strong>认证中心</strong>，只有认证中心能接受用户的用户名密码等安全信息，其他系统不提供登录入口，只接受认证中心的间接授权。间接授权通过令牌实现，sso认证中心验证用户的用户名密码没问题，创建授权令牌，在接下来的跳转过程中，授权令牌作为参数发送给各个子系统，子系统拿到令牌，即得到了授权，可以借此创建局部会话，局部会话登录方式与单系统的登录方式相同。具体过程如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220324224440940.png" alt="image-20220324224440940"></p><p>操作步骤如下：</p><ol><li>用户访问<strong>系统1</strong>的受保护资源，系统1发现用户未登录，<strong>跳转</strong>至sso认证中心，并将自己的地址作为参数</li><li>sso认证中心发现用户未登录，将用户引导至登录页面</li><li>用户输入用户名密码提交登录申请</li><li>sso认证中心校验用户信息，创建用户与sso认证中心之间的会话，称为全局会话，同时创建授权令牌</li><li>sso认证中心带着令牌跳转会最初的请求地址（系统1）</li><li>系统1拿到令牌，去sso认证中心校验令牌是否有效</li><li>sso认证中心校验令牌，返回有效，注册系统1</li><li>系统1使用该令牌创建与用户的会话，称为局部会话，返回受保护资源</li><li>用户访问系统2的受保护资源</li><li>系统2发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数</li><li>sso认证中心发现用户已登录，跳转回系统2的地址，并附上令牌</li><li>系统2拿到令牌，去sso认证中心校验令牌是否有效</li><li>sso认证中心校验令牌，返回有效，注册系统2</li><li>系统2使用该令牌创建与用户的局部会话，返回受保护资源</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
          <category> 登录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sso </tag>
            
            <tag> 登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文简单搞懂session和cookies</title>
      <link href="/2022/03/24/%E7%AE%80%E5%8D%95%E6%90%9E%E6%87%82cookie%E5%92%8Csession/"/>
      <url>/2022/03/24/%E7%AE%80%E5%8D%95%E6%90%9E%E6%87%82cookie%E5%92%8Csession/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>这里简单聊一下,cookies和session</p><h2 id="为什么需要cookie和session"><a href="#为什么需要cookie和session" class="headerlink" title="为什么需要cookie和session"></a><strong>为什么需要cookie和session</strong></h2><p>在Web发展史中，我们知道浏览器与服务器间采用的是 <code>http</code>协议，而这种协议是<strong>无状态</strong>的，所以这就导致了服务器无法知道是谁在浏览网页，但很明显，一些网页需要知道用户的状态，例如登陆，购物车等。</p><p>所以为了解决这一问题，先后出现了四种技术，分别是<strong>隐藏表单域</strong>，<strong>URL重写</strong>，<strong>cookie</strong>，<strong>session</strong>，而用的最多也是比较重要的就是cookie和session了。</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a><strong>Cookie</strong></h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a><strong>是什么</strong></h3><p><code>cookie</code>是浏览器保存在用户电脑上的一小段文本，通俗的来讲就是当一个用户通过 <code>http</code>访问到服务器时，服务器会将一些 <code>Key/Value</code>键值对返回给客户端浏览器，并给这些数据加上一些限制条件，在条件符合时这个用户下次访问这个服务器时，数据通过请求头又被完整地给带回服务器，服务器根据这些信息来判断不同的用户。</p><blockquote><p>也就是说， <code>cookie</code>是服务器传给客户端并保存在客户端的一段信息，这个 <code>Cookie</code>是有大小，数量限制的！！</p></blockquote><h3 id="Cookie的创建"><a href="#Cookie的创建" class="headerlink" title="Cookie的创建"></a><strong>Cookie的创建</strong></h3><p>当前 <code>Cookie</code>有两个版本，分别对应两种设置响应头：<code>“Set-Cookie”</code>和 <code>“Set-Cookie2”</code>。在Servlet中并不支持Set-Cookie2，所以我们来看看Set-Cookie的属性项：</p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>Cookie的名称，Cookie一旦创建，名称便不可更改</td></tr><tr><td>value</td><td>Cookie的值,键值对</td></tr><tr><td>maxAge</td><td>Cookie失效的时间，单位秒。如果为整数，则该Cookie在maxAge秒后失效。如果为负数，该Cookie为临时Cookie，关闭浏览器即失效，浏览器也不会以任何形式保存该Cookie。如果为0，表示删除该Cookie。默认为-1。</td></tr><tr><td>secure</td><td>该Cookie是否仅被使用安全协议传输。安全协议。安全协议有HTTPS，SSL等，在网络上传输数据之前先将数据加密。默认为false。</td></tr><tr><td>path</td><td>Cookie的使用路径。如果设置为“&#x2F;sessionWeb&#x2F;”，则只有contextPath为“&#x2F;sessionWeb”的程序可以访问该Cookie。如果设置为“&#x2F;”，则本域名下contextPath都可以访问该Cookie。注意最后一个字符必须为“&#x2F;”。</td></tr><tr><td>domain</td><td>可以访问该Cookie的域名。如果设置为“.google.com”，则所有以“google.com”结尾的域名都可以访问该Cookie。注意第一个字符必须为“.”。</td></tr><tr><td>comment</td><td>该Cookie的用处说明，浏览器显示Cookie信息的时候显示该说明。</td></tr><tr><td>version</td><td>Cookie使用的版本号。0表示遵循Netscape的Cookie规范，1表示遵循W3C的RFC 2109规范</td></tr></tbody></table><p>这些属性项，其他的都说的很清楚了，我们来看看<strong>Domain</strong>有什么用：</p><p>现在，我们假设这里有两个域名：</p><blockquote><p>域名A：a.b.f.com.cn 域名B：c.d.f.com.cn</p></blockquote><p>显然，域名A和域名B都是 <code>f.com.cn</code>的子域名</p><ul><li>如果我们在域名A中的Cookie的domain设置为f.com.cn，那么f.com.cn及其子域名都可以获取这个Cookie，即域名A和域名B都可以获取这个Cookie</li><li>如果域名A和域名B同时设置Cookie的doamin为f.com.cn，那么将出现覆盖的现象</li><li>如果域名A没有显式设置Cookie的domain方法，那么domain就为a.b.f.com.cn，不一样的是，这时，域名A的子域名将无法获取这个Cookie</li></ul><p>好的，现在了解完了Set-Cookie的属性项，开始创建Cookie</p><p>Web服务器通过发送一个称为Set-Cookie的http消息来创建一个Cookie：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-Cookie: value[; expires=date][; domain=domain][; path=path][; secure]</span><br></pre></td></tr></table></figure><blockquote><p>这里我们思考一个问题，当我们在服务器创建多个Cookie时，这些Cookie最终是在一个Header项中还是以独立的Header存在的呢？</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220324212645258.png" alt="image-20220324212645258">我们可以看到，构建http返回字节流时是将Header中所有的项顺序写出，而没有进行任何修改。所以可以想象在浏览器在接收http返回的数据时是分别解析每一个Header项。</p><p>接着，在客户端进行保存，如何保存呢？这里又要对Cookie进行进一步的了解</p><h3 id="Cookie的分类"><a href="#Cookie的分类" class="headerlink" title="Cookie的分类"></a><strong>Cookie的分类</strong></h3><ul><li>会话级别Cookie：所谓会话级别Cookie，就是在浏览器关闭之后Cookie就会失效。</li><li>持久级别Cookie：保存在硬盘的Cookie，只要设置了过期时间就是硬盘级别Cookie。</li></ul><p>好的，现在cookie保存在了客户端，当我们去请求一个URL时，浏览器会根据这个URL路径将符合条件的Cookie放在请求头中传给服务器。</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a><strong>Session</strong></h2><h3 id="为啥用session"><a href="#为啥用session" class="headerlink" title="为啥用session"></a>为啥用session</h3><p>Cookie是有大小限制和数量限制的，并且越来越多的Cookie代表客户端和服务器的传输量增加，可不可以每次传的时候不传所有cookie值，而只传一个唯一ID，通过这个ID直接在服务器查找用户信息呢？答案是有的，这就是我们的session。</p><h3 id="Session是基于Cookie来工作的"><a href="#Session是基于Cookie来工作的" class="headerlink" title="Session是基于Cookie来工作的"></a><strong>Session是基于Cookie来工作的</strong></h3><p>同一个客户端每次访问服务器时，只要当浏览器在第一次访问服务器时，服务器设置一个id并保存一些信息(例如登陆就保存用户信息，视具体情况)，并把这个id通过Cookie存到客户端，客户端每次和服务器交互时只传这个id，就可以实现维持浏览器和服务器的状态，而这个ID通常是NAME为JSESSIONID的一个Cookie。</p><h3 id="实际上，有四种方式让Session正常工作："><a href="#实际上，有四种方式让Session正常工作：" class="headerlink" title="实际上，有四种方式让Session正常工作："></a><strong>实际上，有四种方式让Session正常工作：</strong></h3><ul><li>通过URL传递SessionID</li><li>通过Cookie传递SessionID</li><li>通过SSL传递SessionID</li><li>通过隐藏表单传递SessionID</li></ul><p><strong>第一种情况：</strong></p><p>当浏览器不支持Cookie功能时，浏览器会将用户的SessionCookieName(默认为JSESSIONID)重写到用户请求的URL参数中。格式：&#x2F;path&#x2F;Servlet;name&#x3D;value;name2&#x3D;value2?Name3&#x3D;value3</p><p><strong>第三种情况：</strong></p><p>会根据javax.servlet.request.ssl_session属性值设置SessionID。</p><blockquote><p>注：如果客户端支持Cookie，又通过URL重写，Tomcat仍然会解析Cookie中的SessionID并覆盖URL中的SessionID</p></blockquote><h3 id="session工作原理"><a href="#session工作原理" class="headerlink" title="session工作原理"></a><strong>session工作原理</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220324212923083.png" alt="image-20220324212923083"></p><p><strong>一、创建session</strong></p><p>当客户端访问到服务器，服务器会为这个客户端通过request.getSession()方法创建一个Session，如果当前SessionID还没有对应的HttpSession对象，就创建一个新的，并添加到org.apache.catalina.Manager的sessions容器中保存，这就做到了对状态的保持。当然，这个SessionID是唯一的</p><p><strong>二、session保存</strong></p><p>由图可知，session对象已经保存在了Manager类中，StandardManager作为实现类，通过requestedSessionId从StandardManager的sessions集合中取出StandardSession对象。</p><p>我们来看看StandardManager时如何对所有StandardSession对象进行生命周期管理</p><p>当Servlet容器关闭：</p><blockquote><p>StandardManager将持久化没过期的StandardSession对象(必须调用Servlet容器中的stop和start命令，不能直接kill)</p></blockquote><p>当Servlet容器重启时：</p><blockquote><p>StandardManager初始化会重读这个文件，解析出所有session对象。</p></blockquote><p><strong>三、session的销毁</strong></p><p>这里有一个误区，也是我之前的错误理解，就是我将session的生命周期理解成一次会话，浏览器打开就创建，浏览器关闭就销毁，这样理解是错的！！</p><p>session的声明周期是从创建到超时过期</p><p>也就是说，当session创建后，浏览器关闭，会话级别的Cookie被销毁，如果没有超过设定时间，该SessionID对应的session是没有被销毁的，</p><p><strong>检查session失效</strong></p><p>检查每个Session是否失效是在Tomcat的一个后台线程完成的(backgroundProcess()方法中)；除了后台进程检验session是否失效外，调用request.getSession()也会检查该session是否过期，当然，调用这种方法如果过期的话又会重新创建一个新的session。</p><h2 id="小-结"><a href="#小-结" class="headerlink" title="小  结"></a><strong>小  结</strong></h2><h3 id="二者的异同"><a href="#二者的异同" class="headerlink" title="二者的异同"></a><strong>二者的异同</strong></h3><p>相同点(有关系的地方)：</p><ul><li>Session和Cookie都是为了让http协议又状态而存在</li><li>Session通过Cookie工作，Cookie传输的SessionID让Session知道这个客户端到底是谁</li></ul><p>不同点：</p><ul><li>Session将信息保存到服务器，Cookie将信息保存在客户端</li></ul><h3 id="现在主要的工作流程"><a href="#现在主要的工作流程" class="headerlink" title="现在主要的工作流程"></a><strong>现在主要的工作流程</strong></h3><p>当浏览器第一次访问服务器时，服务器创建Session并将SessionID通过Cookie带给浏览器保存在客户端，同时服务器根据业务逻辑保存相应的客户端信息保存在session中；客户端再访问时上传Cookie，服务器得到Cookie后获取里面的SessionID，来维持状态。</p><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果想要深入了解cookies和session&#x3D;&#x3D;&gt;<a href="https://www.cnblogs.com/l199616j/p/11195667.html#_label0">传送门</a></p><p>本文来自：<a href="https://mp.weixin.qq.com/s?__biz=MzU4ODI1MjA3NQ==&mid=2247484429&idx=1&sn=9725b000eac262cb8ad887d637e0195c&chksm=fdded2c9caa95bdfd340ae9f3ba584194be6526d0b1bbd55b64402d8babbc1a28f2b69ea1f13&scene=21#wechat_redirect">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
            <tag> session和cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划题集</title>
      <link href="/2022/03/24/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5D%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E9%9B%86/"/>
      <url>/2022/03/24/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5D%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="66fd71478c03ba5428a3152700537274c45c8a7b354c2265671873860b3a54c9"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，博主可能还没写完，所以这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> dp动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学长的面经汇总</title>
      <link href="/2022/03/24/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5D%E5%AD%A6%E9%95%BF%E7%9A%84%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB/"/>
      <url>/2022/03/24/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5D%E5%AD%A6%E9%95%BF%E7%9A%84%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="4acb215ff3babdc586cacd5e3d03ac558f1bced0cbf929dce8b71ce284e1969c">c92271cf075fe1244ae5c161f435c003a8840a878c31d67271965e5b503895f1991d18e227238b4315061b8582d45c1259524635c76b694672b7fd9ab271d43186321687473b3a040c3e0d41cba55dd3e3628f8ff6ab43ccc78690f69f55c6240124995b9b1f79903e7757d7c871f6b66a27f6e8e3166b9deaf373dcfd40d72062edff2711b6cbdae4325fae6ca37c59ad66d63e954fe11a93780737b806919ae35cd5157eba6cce67912840e469b1948bec16ef59fd31c505f08992121a210dc2dc859d9ee6424dc676c4fd9dbc9a28e1eed822cc2619596cc6b9033c4d450f46783b8d59ebc2bd88ebf8c303f79a0261b781396f378134b197a9d08100f61949591428f8de5b085e95075aba3486838a8524069419d3b8e62596b378c1ae56072e4704b96a2c9cc2f9869efcab452301d4b4d87387b73f3e1210b3d82456e15b53172576ad1bd71fc9566070089e3dfcf46254317c06d8d0aff0ba94990d70a5fb74ce4c26a69e94507cc5c04b33fbeb48af702be528824c0a6c73c1965931dbc136cacad449ae14992be63e0a30efa0fe8e1a87baca5409e83c015e1bd8c8e2ed92020cc166fc641427c23267ba6c419c6caee6b893f733ed7d17eb26738664dd283b047d0300b2c57450b683156282a36822ace3dd04dae534a28b8c6938178134bae9b46895df169ce43f21a967289cd4c0ebf0e5822099f98191d2cc374727db7f6703bfa5afb97fa1bf8659d21657cc528d404771b41482de03db06439538f1a0ea8b47ac063b63c2c8abc7e3185facc5ab0ec57be7fbdfa707e4648aead2a78875e2e4a1b10c59ba59b3ce45303054e3fb653b93dc30a45a343accc5a6247949144845d6056b3b7163dfb50476f11fc71c9bdca058b411d6a3ac0ee2fa9fff9a25a992882da7ba944ba5a9d00376d13838822ee1a88e9e02998f217964f39cd7df222c0cc52966b50d81631d997ecca9d9d667a5a74f2388a8e8c68cd3db907ff92d97acbed88c71189d0e2fcbf5dd975909b6ded6c28485fba7f799ec072b0fba46c3aa88ff04343a038a9c68dc021bc6ebaceaf4335592469b1761c14986d20de5e89d5961a751486492d2213ac2f304d6dbe16900eb7ffd10da9227d2fb50e6c9bc6bb922215cecfafef5ea4894ee9da105c91c48b2ba87d5020af21190dfb97c6526afff79e8779901ddccfbcbef3e35702e8e0f0a1bb577a897f9f747873ab61fd2177b4b43598a04eefeb9cc5e65639ca28d056d8b771c4ea39bf409a9c756ed0b781b07ae420dc2afc6deabbe38ee42d06841db706b87703e6d12bb62f081ef8d97ba08f2bb72cca6921fe6a9c7e514b6d03bddfa1ce578e6de323eeaa5b7cec378bf1a4a7673998c84a1ef71c139f751ab86a650f9aec0d6d2f5353c8dc1d2a4aa93e6df2e1aa3a4c669b7aa2dc205bdac8bab74367a5e6e06ac0ef3c534a99c64b88bd6d094e02d5a3ece0c3324f39029505cd9863979232fc6abb8b3f2f21ec959fd48906cc71e369aef38b084b9942dea463d24645a36d547e89fe9caede1516b98e7dec58c7cfbcf94384217fedb47456e9677e0fb373912c44ecd6475d8d158c3f1cc9749c4832eaa4762e2eb8782c6934694496dd76a0802f0b127864228e9cfa6b657aba8e2b974e2985e69c90119a95f26be3d42a6d568766559de4a54083472f30c1cd48080d1428d7e64e46ef07976a839dc5119f0ef851f0389c72ceec88bb18129e8f6489c1bcd4a8c670efb012e3957d19cc1dee45df974af8f1e99932f8c06d98bcdad4760c6bfde2ab582bbe08454688a71e58a55fa007eb10fa472a592ae2a840ef9a574a4e989a5c1deab1a299e15c6bd9c21c41879525e7b15945819e4fbfdb60d78a7aca10b17167d94b7f11da8f47bdf268d100117cb9029e6c4ef65981646238174437f71bf305a03977e0d07fdaa84b4a769ee5d9b9544b0a5b3c0b98024adf87db94b1f972b4077476eddc50040169234175a397dd6ec3febfd23d675</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，博主可能还没写完，所以这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 加密文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
            <tag> 大厂面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro权限管理</title>
      <link href="/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dshiro%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
      <url>/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dshiro%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。]">  <script id="hbeData" type="hbeData" data-hmacdigest="b69d367e11bc2d386571f38a8ee72c8b0bb87d27fc214c12621739d483c81bf6">c92271cf075fe1244ae5c161f435c003a8336e6a7799af7c391512984743f9963e5087349d222bd242d1fa570cf866e6374c8e11008d1e3256383cc33814f7d687313c783a70738a7e6204a4feb7f6708b1cb83ad0658a56a07c79babb500ba1871a36a112bf1882c339b2f578938418d25998982eb633f372bed1e3c41c2ef401fe16eec89c74bc853d4b6aeb460427a5bb4cc56ac9b2a1f1c42e368ca15620</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，博主可能还没写完，所以这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 加密文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity</title>
      <link href="/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5DSpringSecurity/"/>
      <url>/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5DSpringSecurity/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="f4918e94febdc842734c49986474a622604fc3467c5f236711d06a920ec9427b">c92271cf075fe1244ae5c161f435c003d27ecbda7ceb8b7a9afb1afb02623f7c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，博主可能还没写完，所以这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 加密文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sso简单实现</title>
      <link href="/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dsso%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dsso%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="f4918e94febdc842734c49986474a622604fc3467c5f236711d06a920ec9427b">c92271cf075fe1244ae5c161f435c003d27ecbda7ceb8b7a9afb1afb02623f7c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，博主可能还没写完，所以这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 加密文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅理解动态规划</title>
      <link href="/2022/03/24/%E6%B5%85%E7%90%86%E8%A7%A3%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2022/03/24/%E6%B5%85%E7%90%86%E8%A7%A3%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>传送门<a href="https://zhuanlan.zhihu.com/p/365698607">动态规划</a></p><ul><li>什么是动态规划？</li><li>动态规划的核心思想</li><li>一个例子走进动态规划</li><li>动态规划的解题套路</li><li>leetcode案例分析</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-b59d18a44f75449af26f34fd65d938cc_720w.jpg" alt="img"></p><h2 id="一、什么是动态规划？"><a href="#一、什么是动态规划？" class="headerlink" title="一、什么是动态规划？"></a>一、什么是动态规划？</h2><p>动态规划（英语：Dynamic programming，简称 DP），是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。动态规划常常适用于有重叠子问题和最优子结构性质的问题。</p><blockquote><p>★ dynamic programming is a method for solving a complex problem by breaking it down into a collection of simpler subproblems.<br>”</p></blockquote><p>以上定义来自维基百科，看定义感觉还是有点抽象。简单来说，动态规划其实就是，给定一个问题，我们把它拆成一个个子问题，直到子问题可以直接解决。然后呢，把子问题答案保存起来，以减少重复计算。再根据子问题答案反推，得出原问题解的一种方法。</p><blockquote><p>★ 一般这些子问题很相似，可以通过函数关系式递推出来。然后呢，动态规划就致力于解决每个子问题一次，减少重复计算,比如斐波那契数列就可以看做入门级的经典动态规划问题。<br>”</p></blockquote><h2 id="二、动态规划核心思想"><a href="#二、动态规划核心思想" class="headerlink" title="二、动态规划核心思想"></a>二、动态规划核心思想</h2><p>动态规划最核心的思想，就在于<strong>拆分子问题，记住过往，减少重复计算</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220325190623706.png" alt="image-20220325190623706"></p><p>我们来看下，网上比较流行的一个例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- A ： &quot;1+1+1+1+1+1+1+1 =？&quot;</span><br><span class="line">- A ： &quot;上面等式的值是多少&quot;</span><br><span class="line">- B ： 计算 &quot;8&quot;</span><br><span class="line">- A : 在上面等式的左边写上 &quot;1+&quot; 呢？</span><br><span class="line">- A : &quot;此时等式的值为多少&quot;</span><br><span class="line">- B : 很快得出答案 &quot;9&quot;</span><br><span class="line">- A : &quot;你怎么这么快就知道答案了&quot;</span><br><span class="line">- A : &quot;只要在8的基础上加1就行了&quot;</span><br><span class="line">- A : &quot;所以你不用重新计算，因为你记住了第一个等式的值为8!动态规划算法也可以说是 &#x27;记住求过的解来节省时间&#x27;&quot;</span><br></pre></td></tr></table></figure><h2 id="三、一个例子带你走进动态规划-–-青蛙跳阶问题"><a href="#三、一个例子带你走进动态规划-–-青蛙跳阶问题" class="headerlink" title="三、一个例子带你走进动态规划 – 青蛙跳阶问题"></a>三、一个例子带你走进动态规划 – 青蛙跳阶问题</h2><h3 id="1-先讲讲暴力递归（自顶向下"><a href="#1-先讲讲暴力递归（自顶向下" class="headerlink" title="1.先讲讲暴力递归（自顶向下)"></a>1.先讲讲暴力递归（自顶向下)</h3><h4 id="常规递归解法-不高效"><a href="#常规递归解法-不高效" class="headerlink" title="常规递归解法(不高效):"></a>常规递归解法(不高效):</h4><blockquote><p>leetcode原题：一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 10 级的台阶总共有多少种跳法。</p></blockquote><p>有些小伙伴第一次见这个题的时候，可能会有点蒙圈，不知道怎么解决。其实可以试想：</p><ul><li>要想跳到第10级台阶，要么是先跳到第9级，然后再跳1级台阶上去;要么是先跳到第8级，然后一次迈2级台阶上去。</li><li>同理，要想跳到第9级台阶，要么是先跳到第8级，然后再跳1级台阶上去;要么是先跳到第7级，然后一次迈2级台阶上去。</li><li>要想跳到第8级台阶，要么是先跳到第7级，然后再跳1级台阶上去;要么是先跳到第6级，然后一次迈2级台阶上去。</li></ul><p>假设跳到第n级台阶的跳数我们定义为f(n)，很显然就可以得出以下公式：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">f（10） = f（9）+f(8)</span><br><span class="line">f (9)  = f(8) + f(7)</span><br><span class="line">f (8)  = f(7) + f(6)</span><br><span class="line">...</span><br><span class="line">f(3) = f(2) + f(1)</span><br><span class="line"></span><br><span class="line">即通用公式为: f(n) = f(n-1) + f(n-2)</span><br></pre></td></tr></table></figure><p>那f(2) 或者 f(1) 等于多少呢？</p><ul><li>当只有2级台阶时，有两种跳法，第一种是直接跳两级，第二种是先跳一级，然后再跳一级。即f(2) &#x3D; 2;</li><li>当只有1级台阶时，只有一种跳法，即f（1）&#x3D; 1；</li></ul><p>因此可以用递归去解决这个问题：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numWays</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">if</span>(n == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numWays(n-<span class="number">1</span>) + numWays(n-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去leetcode提交一下，发现有问题，超出时间限制了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-11825c00527f415cbe77f057fa46ecf7_720w.jpg" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-2dc11311d9321f61c7bb8a3d9058c636_720w.jpg" alt="img"></p><ul><li>要计算原问题 f(10)，就需要先计算出子问题 f(9) 和 f(8)</li><li>然后要计算 f(9)，又要先算出子问题 f(8) 和 f(7)，以此类推。</li><li>一直到 f(2) 和 f(1），递归树才终止。</li></ul><p>我们先来看看这个递归的时间复杂度吧：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">递归时间复杂度 = 解决一个子问题时间*子问题个数</span><br></pre></td></tr></table></figure><ul><li>一个子问题时间 &#x3D; f（n-1）+f（n-2），也就是一个加法的操作，所以复杂度是 O(1)；</li><li>问题个数 &#x3D; 递归树节点的总数，递归树的总节点 &#x3D; 2^n-1，所以是复杂度O(2^n)。</li></ul><p>因此，青蛙跳阶，递归解法的时间复杂度 &#x3D; O(1) * O(2^n) &#x3D; O(2^n)，就是指数级别的，爆炸增长的，如果n比较大的话，超时很正常的了。</p><p>回过头来，你仔细观察这颗递归树，你会发现存在大量重复计算，比如f（8）被计算了两次，f（7）被重复计算了3次…所以这个递归算法低效的原因，就是<strong>存在大量的重复计算</strong>！</p><p>既然存在大量重复计算，那么我们可以先把计算好的答案存下来，即造一个备忘录，等到下次需要的话，先去备忘录查一下，如果有，就直接取就好了，备忘录没有才开始计算，那就可以省去重新重复计算的耗时啦！这就是带备忘录的解法。</p><h4 id="带备忘录的递归解法（高效）"><a href="#带备忘录的递归解法（高效）" class="headerlink" title="带备忘录的递归解法（高效）"></a>带备忘录的递归解法（高效）</h4><p>一般使用一个数组或者一个哈希map充当这个<strong>备忘录</strong>。</p><ul><li>第一步，f（10）&#x3D; f(9) + f(8)，f(9) 和f（8）都需要计算出来，然后再加到备忘录中，如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-f31e17b883d1eb45a906a83760b5e7f3_720w.jpg" alt="img"></p><ul><li>第二步， f(9) &#x3D; f（8）+ f（7），f（8）&#x3D; f（7）+ f(6), 因为 f(8) 已经在备忘录中啦，所以可以省掉，f(7),f（6）都需要计算出来，加到备忘录中~</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-5c553e02bb63d74f9f1f3b91b994f584_720w.jpg" alt="img"></p><p>第三步， f(8) &#x3D; f（7）+ f(6),发现f(8)，f(7),f（6）全部都在备忘录上了，所以都可以剪掉。</p><p><img src="https://pic4.zhimg.com/80/v2-7675d5727f4e81db7fc897051ae2cecf_720w.jpg" alt="img"></p><p>所以呢，用了备忘录递归算法，递归树变成光秃秃的树干咯，如下：</p><p><img src="https://pic2.zhimg.com/80/v2-6c180511b9a2ef31f76c225b50f7cb9d_720w.jpg" alt="img"></p><p>带<strong>备忘录</strong>的递归算法，子问题个数&#x3D;树节点数&#x3D;n，解决一个子问题还是O(1),所以带<strong>备忘录</strong>的递归算法的时间复杂度是O(n)。接下来呢，我们用带<strong>备忘录</strong>的递归算法去撸代码，解决这个青蛙跳阶问题的超时问题咯~，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">//使用哈希map，充当备忘录的作用</span></span><br><span class="line">    Map&lt;Integer, Integer&gt; tempMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numWays</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// n = 0 也算1种</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先判断有没计算过，即看看备忘录有没有</span></span><br><span class="line">        <span class="keyword">if</span> (tempMap.containsKey(n)) &#123;</span><br><span class="line">            <span class="comment">//备忘录有，即计算过，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> tempMap.get(n);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 备忘录没有，即没有计算过，执行递归计算,并且把结果保存到备忘录map中，对1000000007取余（这个是leetcode题目规定的）</span></span><br><span class="line">            tempMap.put(n, (numWays(n - <span class="number">1</span>) + numWays(n - <span class="number">2</span>)) % <span class="number">1000000007</span>);</span><br><span class="line">            <span class="keyword">return</span> tempMap.get(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去leetcode提交一下，如图，稳了：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-5e58ee59743f9c1ac5633e5fb7bdd937_720w.jpg" alt="img"></p><p>其实，还可以用动态规划解决这道题。</p><p>重点来了….用动态规划</p><h3 id="2-再来看看动态规划（自底而上）"><a href="#2-再来看看动态规划（自底而上）" class="headerlink" title="2.再来看看动态规划（自底而上）"></a>2.再来看看动态规划（自底而上）</h3><h4 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h4><p>动态规划跟带备忘录的递归解法基本思想是一致的，都是减少重复计算，时间复杂度也都是差不多。但是呢：</p><ul><li>带备忘录的递归，是从f(10)往f(1）方向延伸求解的，所以也称为<strong>自顶向下</strong>的解法。</li><li>动态规划从较小问题的解，由交叠性质，逐步决策出较大问题的解，它是从f(1)往f(10）方向，往上推求解，所以称为<strong>自底向上</strong>的解法。</li></ul><p>动态规划有几个典型特征，<strong>最优子结构、状态转移方程、边界、重叠子问题</strong>。在青蛙跳阶问题中：</p><ul><li>f(n-1)和f(n-2) 称为 f(n) 的最优子结构</li><li>f(n)&#x3D; f（n-1）+f（n-2）就称为状态转移方程</li><li>f(1) &#x3D; 1, f(2) &#x3D; 2 就是边界啦</li><li>比如f(10)&#x3D; f(9)+f(8),f(9) &#x3D; f(8) + f(7) ,f(8)就是重叠子问题。</li></ul><p>我们来看下自底向上的解法，从f(1)往f(10）方向，想想是不是直接一个for循环就可以解决啦，如下：</p><p><img src="https://pic2.zhimg.com/80/v2-ace286214f56e1f2c70ff22307ac8ea9_720w.jpg" alt="img"></p><p>带备忘录的递归解法，空间复杂度是O(n)，但是呢，仔细观察上图，可以发现，f（n）只依赖前面两个数，所以只需要两个变量a和b来存储，就可以满足需求了，因此空间复杂度是O(1)就可以啦</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-cc5e4b5d5b8bc9062f1c3256792bb5c7_720w.jpg" alt="img"></p><p>动态规划实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numWays</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            temp = (a + b)% <span class="number">1000000007</span>;</span><br><span class="line">            a = b;</span><br><span class="line">            b = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="四、动态规划的解题套路"><a href="#四、动态规划的解题套路" class="headerlink" title="四、动态规划的解题套路"></a>四、动态规划的解题套路</h2><h3 id="什么样的问题可以考虑使用动态规划解决呢？"><a href="#什么样的问题可以考虑使用动态规划解决呢？" class="headerlink" title="什么样的问题可以考虑使用动态规划解决呢？"></a><strong>什么样的问题可以考虑使用动态规划解决呢？</strong></h3><blockquote><p>★ 如果一个问题，可以把所有可能的答案穷举出来，并且穷举出来后，发现存在重叠子问题，就可以考虑使用动态规划。<br>”</p></blockquote><p>比如一些求最值的场景，如<strong>最长递增子序列、最小编辑距离、背包问题、凑零钱问题</strong>等等，都是动态规划的经典应用场景。</p><h3 id="动态规划的解题思路"><a href="#动态规划的解题思路" class="headerlink" title="动态规划的解题思路"></a><strong>动态规划的解题思路</strong></h3><p>动态规划的核心思想就是<strong>拆分子问题，记住过往，减少重复计算。</strong> 并且动态规划一般都是自底向上的，因此到这里，基于<strong>青蛙跳阶</strong>问题，我总结了一下我做动态规划的思路：</p><ul><li>穷举分析</li><li>确定边界</li><li>找出规律，确定最优子结构</li><li>写出状态转移方程</li></ul><h4 id="1-穷举分析"><a href="#1-穷举分析" class="headerlink" title="1. 穷举分析"></a><strong>1. 穷举分析</strong></h4><ul><li>当台阶数是1的时候，有一种跳法，f（1） &#x3D;1</li><li>当只有2级台阶时，有两种跳法，第一种是直接跳两级，第二种是先跳一级，然后再跳一级。即f(2) &#x3D; 2;</li><li>当台阶是3级时，想跳到第3级台阶，要么是先跳到第2级，然后再跳1级台阶上去，要么是先跳到第 1级，然后一次迈 2 级台阶上去。所以f(3) &#x3D; f(2) + f(1) &#x3D;3</li><li>当台阶是4级时，想跳到第3级台阶，要么是先跳到第3级，然后再跳1级台阶上去，要么是先跳到第 2级，然后一次迈 2 级台阶上去。所以f(4) &#x3D; f(3) + f(2) &#x3D;5</li><li>当台阶是5级时……</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-cc5e4b5d5b8bc9062f1c3256792bb5c7_720w.jpg" alt="img"></p><h4 id="2-确定边界"><a href="#2-确定边界" class="headerlink" title="2. 确定边界"></a><strong>2. 确定边界</strong></h4><p>通过穷举分析，我们发现，当台阶数是1的时候或者2的时候，可以明确知道青蛙跳法。f（1） &#x3D;1，f(2) &#x3D; 2，当台阶n&gt;&#x3D;3时，已经呈现出规律f(3) &#x3D; f(2) + f(1) &#x3D;3，因此f（1） &#x3D;1，f(2) &#x3D; 2就是青蛙跳阶的边界。</p><h4 id="3-找规律，确定最优子结构"><a href="#3-找规律，确定最优子结构" class="headerlink" title="3. 找规律，确定最优子结构"></a><strong>3. 找规律，确定最优子结构</strong></h4><p>n&gt;&#x3D;3时，已经呈现出规律 f(n) &#x3D; f(n-1) + f(n-2) ，因此，f(n-1)和f(n-2) 称为 f(n) 的最优子结构。什么是最优子结构？有这么一个解释：</p><blockquote><p>★ 一道动态规划问题，其实就是一个递推问题。假设当前决策结果是f(n),则最优子结构就是要让 f(n-k) 最优,最优子结构性质就是能让转移到n的状态是最优的,并且与后面的决策没有关系,即让后面的决策安心地使用前面的局部最优解的一种性质<br>”</p></blockquote><h4 id="4，-写出状态转移方程"><a href="#4，-写出状态转移方程" class="headerlink" title="4， 写出状态转移方程"></a><strong>4， 写出状态转移方程</strong></h4><p>通过前面3步，穷举分析，确定边界，最优子结构，我们就可以得出状态转移方程啦：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-17700257363921acdbd5718beaed8266_720w.jpg" alt="img"></p><h4 id="5-代码实现"><a href="#5-代码实现" class="headerlink" title="5. 代码实现"></a><strong>5. 代码实现</strong></h4><p>我们实现代码的时候，一般注意从底往上遍历哈，然后关注下边界情况，空间复杂度，也就差不多啦。动态规划有个框架的，大家实现的时候，可以考虑适当参考一下：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">dp[0][0][...] = 边界值</span><br><span class="line">for(状态1 ：所有状态1的值)&#123;</span><br><span class="line">    for(状态2 ：所有状态2的值)&#123;</span><br><span class="line">        for(...)&#123;</span><br><span class="line">          //状态转移方程</span><br><span class="line">          dp[状态1][状态2][...] = 求最值</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、案例分析"><a href="#五、案例分析" class="headerlink" title="五、案例分析"></a>五、案例分析</h2><h3 id="一个leetcode-案例分析"><a href="#一个leetcode-案例分析" class="headerlink" title="一个leetcode 案例分析"></a>一个leetcode 案例分析</h3><p>我们一起来分析一道经典leetcode题目吧</p><blockquote><p>★ 给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。<br>”</p></blockquote><p>示例 1：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">输入：nums = [10,9,2,5,3,7,101,18]</span><br><span class="line">输出：4</span><br><span class="line">解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,1,0,3,2,3]</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure><p>我们按照以上动态规划的解题思路，</p><ul><li>穷举分析</li><li>确定边界</li><li>找规律，确定最优子结构</li><li>状态转移方程</li></ul><h4 id="1-自底向上的穷举分析"><a href="#1-自底向上的穷举分析" class="headerlink" title="1. 自底向上的穷举分析"></a>1. 自底向上的穷举分析</h4><p>因为动态规划，核心思想包括<strong>拆分子问题，记住过往，减少重复计算。</strong> 所以我们在思考原问题：<strong>数组num[i]的最长递增子序列长度时</strong>，可以思考下<strong>相关子问题</strong>，比如原问题是否跟<strong>子问题</strong>num[i-1]的最长递增子序列长度有关呢？</p><p>这里观察规律，显然是有关系的，我们还是遵循动态规划<strong>自底向上</strong>的原则，基于示例1的数据，从数组只有一个元素开始分析。</p><ul><li>当nums只有一个元素10时，最长递增子序列是[10],长度是1.</li><li>当nums需要加入一个元素9时，最长递增子序列是[10]或者[9],长度是1。</li><li>当nums再加入一个元素2时，最长递增子序列是[10]或者[9]或者[2],长度是1。</li><li>当nums再加入一个元素5时，最长递增子序列是[2,5],长度是2。</li><li>当nums再加入一个元素3时，最长递增子序列是[2,5]或者[2,3],长度是2。</li><li>当nums再加入一个元素7时，,最长递增子序列是[2,5,7]或者[2,3,7],长度是3。</li><li>当nums再加入一个元素101时，最长递增子序列是[2,5,7,101]或者[2,3,7,101],长度是4。</li><li>当nums再加入一个元素18时，最长递增子序列是[2,5,7,101]或者[2,3,7,101]或者[2,5,7,18]或者[2,3,7,18],长度是4。</li><li>当nums再加入一个元素7时,最长递增子序列是[2,5,7,101]或者[2,3,7,101]或者[2,5,7,18]或者[2,3,7,18],长度是4.</li></ul><h4 id="2-分析找规律，拆分子问题"><a href="#2-分析找规律，拆分子问题" class="headerlink" title="2. 分析找规律，拆分子问题"></a>2. 分析找规律，拆分子问题</h4><p>通过上面分析，我们可以<strong>发现一个规律</strong>：</p><p>如果新加入一个元素nums[i], 最长递增子序列要么<strong>是以nums[i]结尾的递增子序列</strong>，要么就是<strong>nums[i-1]的最长递增子序列</strong>。看到这个，是不是很开心，nums[i]的最长递增子序列已经跟<strong>子问题</strong> nums[i-1]的最长递增子序列有关联了。</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">原问题数组nums[i]的最长递增子序列 = 子问题数组nums[i-1]的最长递增子序列/nums[i]结尾的最长递增子序列</span><br></pre></td></tr></table></figure><p>是不是感觉成功了一半呢？但是<strong>如何把nums[i]结尾的递增子序列也转化为对应的子问题</strong>呢？要是nums[i]结尾的递增子序列也跟nums[i-1]的最长递增子序列有关就好了。又或者nums[i]结尾的最长递增子序列，跟前面子问题num[j]（0&#x3D;&lt;j&lt;i）结尾的最长递增子序列有关就好了，带着这个想法，我们又回头看看穷举的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-f30ec7b249e7d8c9216f49935f5bc25d_720w.jpg" alt="img"></p><p>nums[i]的最长递增子序列，不就是<strong>从以数组num[i]每个元素结尾的最长子序列集合，取元素最多（也就是长度最长）那个嘛</strong>，所以原问题，我们转化成求出以数组nums每个元素结尾的最长子序列集合，再取<strong>最大值</strong>嘛。哈哈，想到这，我们就可以<strong>用dp[i]表示以num[i]这个数结尾的最长递增子序列的长度</strong>啦，然后再来看看其中的规律：</p><p><img src="https://pic4.zhimg.com/80/v2-abfda01a6a07fa930c6760ece8b3e47b_720w.jpg" alt="img"></p><p>其实，<strong>nums[i]结尾的自增子序列，只要找到比nums[i]小的子序列，加上nums[i]</strong> 就可以啦。显然，可能形成多种新的子序列，我们选最长那个，就是dp[i]的值啦</p><blockquote><p>★</p></blockquote><ul><li>nums[3]&#x3D;5,以<code>5</code>结尾的最长子序列就是<code>[2,5]</code>,因为从数组下标<code>0到3</code>遍历，只找到了子序列<code>[2]</code>比<code>5</code>小，所以就是<code>[2]+[5]</code>啦，即<code>dp[4]=2</code></li><li>nums[4]&#x3D;3,以<code>3</code>结尾的最长子序列就是<code>[2,3]</code>,因为从数组下标<code>0到4</code>遍历，只找到了子序列<code>[2]</code>比<code>3</code>小，所以就是<code>[2]+[3]</code>啦，即<code>dp[4]=2</code></li><li>nums[5]&#x3D;7，以<code>7</code>结尾的最长子序列就是<code>[2,5,7]</code>和<code>[2,3,7]</code>,因为从数组下标<code>0到5</code>遍历，找到<code>2,5和3</code>都比7小，所以就有<code>[2,7],[5,7],[3,7],[2,5,7]和[2,3,7]</code>这些子序列，最长子序列就是<code>[2,5,7]和[2,3,7]</code>，它俩不就是以<code>5</code>结尾和<code>3</code>结尾的最长递增子序列+[7]来的嘛！所以，<code>**dp[5]=3 =dp[3]+1=dp[4]+1**</code>。</li></ul><p>”</p><p>很显然有这个规律：一个以nums[i]结尾的数组nums</p><ul><li>如果存在j属于区间[0，i-1],并且num[i]&gt;num[j]的话，则有，dp(i) &#x3D;max(dp(j))+1，</li></ul><h4 id="3-最简单的边界情况"><a href="#3-最简单的边界情况" class="headerlink" title="3. 最简单的边界情况"></a>3. 最简单的边界情况</h4><p>当nums数组只有一个元素时，最长递增子序列的长度dp(1)&#x3D;1,当nums数组有两个元素时，dp(2) &#x3D;2或者1， 因此边界就是dp(1)&#x3D;1。</p><h4 id="4-确定最优子结构"><a href="#4-确定最优子结构" class="headerlink" title="4. 确定最优子结构"></a>4. 确定最优子结构</h4><p>从穷举分析，我们可以得出，以下的最优结构：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">dp(i) =max(dp(j))+1，存在j属于区间[0，i-1],并且num[i]&gt;num[j]。</span><br></pre></td></tr></table></figure><p><strong>max(dp(j))</strong> 就是最优子结构。</p><h4 id="5-状态转移方程"><a href="#5-状态转移方程" class="headerlink" title="5.状态转移方程"></a>5.状态转移方程</h4><p>通过前面分析，我们就可以得出状态转移方程啦：</p><p><img src="https://pic4.zhimg.com/80/v2-6a5bebb12a1c9a69e49e6e35103895f3_720w.jpg" alt="img"></p><p>所以数组num[i]的最长递增子序列就是：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">最长递增子序列 =max(dp[i])</span><br></pre></td></tr></table></figure><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="comment">//初始化就是边界情况</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//自底向上遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//从下标0到i遍历</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="comment">//找到前面比nums[i]小的数nums[j],即有dp[i]= dp[j]+1</span></span><br><span class="line">                <span class="keyword">if</span> (nums[j] &lt; nums[i]) &#123;</span><br><span class="line">                    <span class="comment">//因为会有多个小于nums[i]的数，也就是会存在多种组合了嘛，我们就取最大放到dp[i]</span></span><br><span class="line">                    dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//求出dp[i]后，dp最大那个就是nums的最长递增子序列啦</span></span><br><span class="line">            maxans = Math.max(maxans, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一个蓝桥杯上的省赛题："><a href="#一个蓝桥杯上的省赛题：" class="headerlink" title="一个蓝桥杯上的省赛题："></a>一个蓝桥杯上的省赛题：</h3><h4 id="题目-2604-蓝桥杯2021年第十二届省赛真题-砝码称重"><a href="#题目-2604-蓝桥杯2021年第十二届省赛真题-砝码称重" class="headerlink" title="题目 2604: 蓝桥杯2021年第十二届省赛真题-砝码称重"></a>题目 2604: 蓝桥杯2021年第十二届省赛真题-砝码称重</h4><p>时间限制: 1Sec 内存限制: 128MB 提交: 1797 解决: 590</p><p><strong>题目描述</strong></p><p>你有一架天平和 N 个砝码，这 N 个砝码重量依次是 W1, W2, · · · , WN。<br>请你计算一共可以称出多少种不同的重量？<br>注意砝码可以放在天平两边。</p><p><strong>输入</strong></p><p>输入的第一行包含一个整数 N。<br>第二行包含 N 个整数：W1, W2, W3, · · · , WN。</p><p><strong>输出</strong></p><p>输出一个整数代表答案。</p><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 4 6</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【样例说明】</span><br><span class="line">能称出的 10 种重量是：1、2、3、4、5、6、7、9、10、11。</span><br><span class="line">1 = 1；</span><br><span class="line">2 = 6 4 (天平一边放 6，另一边放 4)；</span><br><span class="line">3 = 4 1；</span><br><span class="line">4 = 4；</span><br><span class="line">5 = 6 1；</span><br><span class="line">6 = 6；</span><br><span class="line">7 = 1 + 6；</span><br><span class="line">9 = 4 + 6 1；</span><br><span class="line">10 = 4 + 6；</span><br><span class="line">11 = 1 + 4 + 6。</span><br></pre></td></tr></table></figure><p>【评测用例规模与约定】<br>对于 50% 的评测用例，1 ≤ N ≤ 15。<br>对于所有评测用例，1 ≤ N ≤ 100，N 个砝码总重不超过 100000。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">状态转移方程就是:</span><br><span class="line">dp[i]的全部可能=dp[i-1]+和以前的加减新组合</span><br></pre></td></tr></table></figure><p>代码实现：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> class 砝码称重 &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> N;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] W;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> COUNT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        N = scanner.nextInt();</span><br><span class="line">        W = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            sum += W[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        COUNT = sum;</span><br><span class="line">        <span class="comment">//Arrays.sort(W);</span></span><br><span class="line">        dpFaMa();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    状态转移方程就是:</span></span><br><span class="line"><span class="comment">    dp[i]的全部可能=dp[i-1]+和以前的加减新组合</span></span><br><span class="line"><span class="comment">    数组dp[i]的大小为全部砝码的总和  COUNT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dpFaMa</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[W.length][COUNT + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; W.length; i++) &#123;</span><br><span class="line">            <span class="comment">//对于dp数组的初始化  对于目标为0的配重 都置为true</span></span><br><span class="line">            <span class="comment">// 对于每一行和砝码重量相同的目标配重也置为true</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">            dp[i][W[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从第二块砝码开始递推</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">            <span class="comment">//第一列配重为0跳过</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; COUNT + <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="comment">//加当前砝码w[i]之前,就存在的;</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i - <span class="number">1</span>][j]) &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//情况一:砝码和j在一起</span></span><br><span class="line">                <span class="keyword">if</span> (W[i] + j &lt;= COUNT &amp;&amp; dp[i - <span class="number">1</span>][W[i] + j]) &#123;</span><br><span class="line">                    <span class="comment">//当前砝码和目标都放到同一边,然后有已经可以测的重量在另一侧</span></span><br><span class="line">                    <span class="comment">//还有个限制,就是当前砝码,和当前测量j之和不能超过总重,即数组的总重;</span></span><br><span class="line">                    <span class="comment">//如果有的话,当前j就能true</span></span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//情况二:砝码和j分开</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i - <span class="number">1</span>][Math.abs(j - W[i])]) &#123;</span><br><span class="line">                    <span class="comment">//j可以被当前砝码和以前的砝码组成,</span></span><br><span class="line">                    <span class="comment">//或者j加以前的砝码等于当前砝码;</span></span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= COUNT; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[N - <span class="number">1</span>][i]) &#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> dp动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spingclouds的学习</title>
      <link href="/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dspingclouds%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dspingclouds%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java后端 </tag>
            
            <tag> springclouds </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC并发</title>
      <link href="/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5DJUC%E5%B9%B6%E5%8F%91/"/>
      <url>/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5DJUC%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>可以跟着视频走:</p><p><a href="https://www.bilibili.com/video/BV1Kw411Z7dF?spm_id_from=333.999.0.0">尚硅谷传送门</a></p><p>跟着这两个博客走一下:</p><p><a href="https://juejin.cn/post/6997767449567313927">掘金传送门</a></p><p><a href="https://blog.csdn.net/weixin_47872288/article/details/119453092">csdn传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
            <tag> 并发 </tag>
            
            <tag> java后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CI配置文件.gitlab-ci.yaml详解</title>
      <link href="/2022/03/24/gitlab%E4%B8%AD%E7%9A%84ci.yaml%E6%96%87%E4%BB%B6/"/>
      <url>/2022/03/24/gitlab%E4%B8%AD%E7%9A%84ci.yaml%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="ae76a4d3e26e3ad2f9d2177e1d130b9c2dfea1465c8c1c41dea609d2b2204302">c92271cf075fe1244ae5c161f435c003a8336e6a7799af7c391512984743f996b34e677d3a3a089f9e75ebb40788c8ae401e359bb1d8970974702f4a2f7cddb6a67e0241b8751f7ae7e4145bc4653de1c11765214bc0d4365d57212d566928540bbd899e91c803fd5e9b3bd7ebf50b2e4391e590e30925f925cb04ef6e6a638283d0b94c0b52bc471b74cf1b4fb0623a854eec5577429e0629fddb9af91d53f4ebd3ee2a65268a32e26bb097620b9ee48b52d68fe662edb713194795a6f0742757e3343171b013d3389ec27f79f03af14fc73ad90cd1adfd73c49861e72b18c276df0f03b5fd56ccd0aea45ed24be93001af9ebc18a99de35509e00600c5c95a8f9caf7542c7bf4d25a13945b927efe3c7f12aa2c955995f6e7df12cfc40dd23dd6783248477bd147e20c7d17e7cd51772954c4bd07ea523495a04d40f7aebaa442aae714a98ca3659b0ebc398105171d1e2dc30ffa264bb822c9d237541f89b6a397ad5d35dbfd53c541fca4b7b6d1dd49ae17c7a78b0d32b85b43446cd6cec57b993b161c60467737275ef6655df05032737bd202c8c965363aa4ef5e9db66484cad5a1e58d81597c66ad3eceff4bb8dc82ce18bcd64d89ef25ca8a61908bff6ad06c741de31397cbf323a9f58d56fca0b60a4d6a3f6a08f7382084037902730cc0f63ab3e7c6c8eac8fd637e36142b8c9da76fffa75184b0eb24bd635d6b56c5b02b14e05bb1671a2243376a178b6d04311c1d09ea9daca51d55610f6c6a40ccb2c2d3d28ef73113dcf00ce4199c20e85b25c546e2e04baa1e1d1d4d7654a2da14b62fb3b8bd19f4a84b9b1cfb3520b869c50b52ab1ce020ee0dd33a55ca06bbbff0106bebdb89351c8750777b9a9a5bc4d013e605a3093aab88999390ec580aba2339bae2bbd312dd2440b8023fbb1d3a539d4456c6bb2ed884a48876fc045fa829cec54af1835d051869d0490cc5d3a928ae8f2f067e28951ffdfedc54081c86bf26770b18f1fc7b069f60467fe82c804063a02cfa8bea51822efdf1bd9f645a329b1d18011e870a35af0b8e01b95876a81355a5505a8ab1a1248a2d1054dc35f97ef098fb69d14ea7a46bab539551e39dd3ac3064789d1a7532f7fc0788028672452af61e584de87d7f1a2b1f16c1cd26f7dd7c438e3dbb4dad0445440eae12e27edc78763c01c3afe7c5b4a9d0cb5266717751f8664f54476c86f5ce7e54071a0c829e100f1a01bd6294eb0ad83e079664dca8aea458406d984c5b9bd10c395a48ca1f500796feab66f1afa2378b16b0d0f26a89b805c4b1f664b319d9cf016acb62a028ff6f58c56682deb3cb800c87dfb57ca2773e449c9a36ead160af5028c89543f1608e0545884f799c37102d196b2698a6a84d00c01840a2630c3f929216f51239b40e9a28c5c65170433ae493f0babbab3ca48e9f724f73dccf66b72bbb3a17cd6ee010f9657d143c9c9bf43e00f7defa2a1b2bb55e455d6b0984fd086f1c09f3ef9e869a63373ee32059d9635fc86d336ce7fc2917db93bc136387f03850bdc09789579b16d68bff83854db7e9a6830da702baa283416c9213e718ff35d734c3a10770ac7fd7a3e5b05534bab5a3cac5616b44f3be862b379c34301cfb55e8e8b4ef0e20535f3ff6fb89ae2c4c4f750ccb95ead75a0820afaac0d8cdb715c12046e98c60ba3d800070a46a934acf3cc3c0c0bb7223da0ad13bb8ad4019f054fc2b6779913dd088d80ebde1d77f164239970b2647ef37ca4ace4cb81abb2c45201eaa2f7a2eafadd554aa90b560b6b1aaa60ff4b968d9f75a6a5b153f295e955066c2d508d619d0a35782d2f4f34b3e1c67f7ba33438416ac45e72444793221e8eda26a66b0ac3b4c5e0b9d3f7e4ca5f30891544236897de1590f39865f05dd77c35d87d4ba81a1e2805aad3d93ec95fc8e51093907503865a9443592c805aeeeef838b2739011b97f0642f15e0a5078483f82f9d2c3c66ba4b9da8d1948ddf01cdf06c9718e7c2ea031a239d3af405692b0b8703fb11111765046246ffee1f01f064326570d2e2c211195e3ab5d5584216218b7143fb31d083b66cc92829ea2a75ebd8272879dbaef42b1fa80a0211f66cd8df70a5f52f8f5f664248d3a197a8f859302d006f462aea5f8b75b7956be6761b999ac2b5c6c107211e109963126eda8d6e27a809a726658c0b60f3a5a549ba7680e1cf1d9aadc082778ca68c77934a1df98e7ade37150b084008480e63cd06d15623b2b414c080ffdcf097b45f8b2b301709623dc88c0560750a8cc20604bda0555ed5400e75c2f9daa08a387c3ce789774f088992259cc57b896924ee600dc870cc81a97fcdb2215cf2d4f2c290eb303ef3613a359844df7d648646ef23c45c2b5e8e7a0f37164f5ce8b5b58ac75a9ed523bfd34f2ff48d35e749d0e9b1fbb5102873d7b99ddf39476442073701161c0b0dc329683aac6c89bd18431d090d2e5fdda7e9a6ccf1e2c5db4aa85c051c1bc74ea7ec6ec7cd49764425086cf7db0264092d30cb8f13813f6fc3e82b0d7cbdb612705cead389317de3f6fe67d3ec77de5532b0204eb6de86e0c29c87aa302f1ecd15225cc81987c32f5f47ebebb5b57735b8b06d4708465c6dcda27394fe28c3673f951ddf68a87d94dc55d37699e6386dd9b2f5cae58e3fa365e69dd895aa4d28f899dd0cab4a9ae0fa7971dd3ddfa73c3cb513f67ea052d31fe64226b5fb1862b29a9cd1d12c636210d2e96706ccac7dcf49a6ed2c1253c0722ad4c5252cfb003ed8c641cf60f57ae4e5b30eedba09f571ad51173201c7a51141cd6b2593e19dd22eeabf582012fd6adcf75a61c2905abdeaa2f54551bbf08f3fc516ca0b99c164887fb19ffcbfc273c509ec79301cc6df0599bdf87da18ac2de5cd8cda8eff43a81b2944ba3851aefbfb522960f2aa50426601f09d559c4d42037924004b36b227e73305d83ec675b49e1d2a45b825f4df261258bd8bfadbfa712079af89e97b2c7a69fb2c4a6e81566d25e7ebb524d988013dc90dc34f7703eb269ca4567d076eb4921a85a9f2a6cff9670b91cf157e8feed418c53f146ad032175abbe1a6c49de6c67d73f80dbdffadbfdac5828dcedd836e72d12539f894f1ba9fae85ca4c6b485d8f9128ac0da860193bd03c44ff28e17aa004a22597d7503112540fa07a344f729365f24044432090b0b4ab9b5d7923fa40d4d1e9724a34071c65200263eff0c05698fd6b29f96ec5c5e4b4c1d1369ddc663e9a3d8954eea05c8526dc707db0c0890814755d99b3e83d43f32c79bbbfbb843c99b36c149eb2f0d6e57ba5094d56438b19a15ed0fdedcf498ef2efea42b6e7186c341ea9d4d6b7d82a956f3c9f12c5831083948e5b6a1be5940284e21f48d60f2a1734970b743fb94b7bbaa01282ac76a9910fbaad2a86d7f822ea28c53a214d498a99af7495d9a0cc64e33efa12cb6d44c2a4056ef6e162b79b8c1475519b8b727817ddc9d424bea62ec2d8978e46ecad5831896ef0b9111a543e809f473448f4ea958fff8a7cf03f5f9da7c3ca68cee94c103755ba1f46b69bbd41a94caeae383bc667e9007df646b6b84aade7b529872a95ecd1cba723a3001810e5cb7b32db6f94da8211b1d9ece24887a3dacb3ead86a85a09f93b98aa1d36c19162d3e7f611c0da1363e662900921245ecffd5414e1e47b7323fc3ee497cb470a720d29ec05dc4cb2d53492d141e1eed7481ea34c47cb9ea0e6d7b84f5e4f1885ad16f6f8fd953faddaaef1b76569d9efd2378649639651ef7b351325028630b0cf9140ab084d5022557c350c1b84bf6646add0fa81fcd115db61c16fb3951b82f1adde4362eb40b3bbe75acdc43fd9ed245cb8480eb9e44515baa3389cf57a65ad56a52f7cb73c9492f29eb5d78462afd9babc226cd84150882fab06081eb4c7792cfeb316f026e34fd504981d5fb4b1a3ba3c451e7b5b38b6bfda7bd243d0d3bf8634aea2e8721ff379d84e4ab9a22f31f23fa9373b5b4c12a3a4effe78ee403c2806289f283e75311d6c5cf1693df99337628fb564aef6c81b7910eae3a57fff77e003abfb2a27276319a38a1655b7e03235995cce1775854a36c770288f9b81a0d3a3a737d67314b58192d9cb58161d4d588ef4c9494eec63e2c0528375810ce2c40005c3c2157051057e1e22323a7e2e8c40a0e55658581c36cfc7a2e0156f33a1c3ae43981460338a43a763081b74b3d31e72645c1c14df94cac622bdf10f5ee8bf46180235d606962d5846816e94216a5d5e4502da0509cfbe37e98fef7dba5656dbc1a9b6c31290c745f0e6e728247dbe960a8a4a7ba277f0be4f1cea9fc04bce9cd21d7d697495fbaa7eb738f37421a425044831c708d56589c95f9320d225516f4da8acaf22ed3fc1ac6105fdcac9096377d099375a18e5e941703fa810c31b1a358a822877245c7cde3dd67d9b064a596d2493321f719a1f2e28e86b7a155dca29baa0e12b874f6a4d4fce5b5137c2327d08847d49585e81d6eda7521996386f6fb97837cff19f0094f5c4cb286b49cf0227ca156c386f2ce50ce06944a36589fd2ce6fb58c59fab70234eab9570880faad3714b4c46573129792a942c77ea40a34ea03806f0e8549dd4f094ce1654f40c818b010227e7ceea04c0ebdba4081070eb59273c863a130d9e2ccce932ab47c30cc227fa7cf4a41865e4c20f57b2b562704e099f781badc842d87ec90b521dfdb8b07de288b1fb4a22d7315fe1331c2d8d1b693eafb1f16705174138f353a8c7e1f95e2ea08456f874f1519a38f40d442728c672929a225c55fdf3e39d33c726a1936849a5376a4847c65764b2053fc5f5aada53953b351725984fa196ca42a8ef150821846b68407d62e2018b284bb37028026f872d40a4f31eaaa1ba525d52344ec60c38426073b3efde164534b4ef3dd680000e67ea3439a4cb25af8a0d2276e754baf7daec35f06f4933d7acf24d768bcec7f5a6bdfd2a6bb0238ee77e5c7b276f45f828e73d6deee72d948eb40c114077a022bf7b68aeedaf80c5213e01f62ec5584de8ddaaf14f0a4024c70376d20d49d5223aa9893437a12cba398516f73036139df37d5fa8f22690a167dfbb180e8820b36c6fef0b2fd476c64a00d7cfb7af788495a0a85934bc9e5f539eb9ba5dfff8f1a1d91d5df777b127b5563cbf07425866b0311f211f2d4a52d2d8e62d97e55cf3218c9cdc2c68ad81383a32b26987f1c8d7073ef5e3583085d0629491fb96d20a7ab962eeb33d17675d578fa55244a4386ce2d1a1d0f878f9f827c29eb23596b9dc2478b9d08b19a07137d96042492cf76a7ae6c649f4792f42fd31b5f4588c29e6ba3d9de0871090c80d2355afd96a5289beeb099c13d9ee175903e5aaee15ffa2875224da9e5da2db5dc2373704dbf9bffa9a6a7ddbc07049ac88c03305fca05a74c5fc5402fb009e92090321ff047a80680d929ac05e67163a03bf9c35628c90118690123dfb9d464aaa2a96114201de5a74a4285ca0537e639458e1c65e6c14fe55caa8a8a42e4b0789aff15142f436d018f473d37a127ed431818cb204c6328be1387c1f3117a33b1ae551f0ddd7da3ef37eba130134a2e90d27fce759b8599243647391d89061425c16f150097186c62efc842b9b6300f6635d16f21dd9787f48be2465068330e2a57a0267bda829e4e982e75dbad28e9010a6ad2e2a301376cd2713ce2d485a73679262967a84a8c60882e9b6e9fc50f0954b795889056feed6059a70b218abd1ecd9817142fc5d35faa7cc1cc656e76992b8d169c816aeeb752fbeec96effea0c06962ea0f8f28b08cb4928de70fcac926221ca182545501d775cff7fb530198e03241c1389fc845cfd00eff44438ec576c11c08e0549f5253ecbf0d494d580b2a05d2784aab99bf0f1445fc3f7c1ee19813e626498d13cc102e57fc41c2101b5b365de444cb091f2b9edc388dd5c1e287be0b17a12cbc685b09e9942d9df9074a102870d2e6a931eea5b88e170a535db728bdabb4d94f65e006dc161099bd2310bf87de9871edd3f7451504b8aee6c56588666de36f87820636f13b1adb9a1b0f48b8ad878c44907741b146d8fdca075141f64a28be246069fa4512585362fcc1cd8f57b464baee52fe295a2b77b9c8c192df2c2b814029ba2dc68fb87cea6c830f8eddac167250639d4ea8515060c4ca12c10071f41f6ee1627261b432d9a72859440c56e40d2721b214060d002feaf7b2d7f2ade111000916bb9212fcbf1e17655a204abed43ea9708b6c8012aff2f89a452e1bef7615c6734215f26bbfc630430d724edb641ed37df39fa1947a1a75a40f6aa115579e77fa6951b80232575dac2fde9ce447f8f1788336a6422bc4425f96c91b8218ba0f7e02047b8e517266e67a6f09662368a7f7919cde70a8e98676a3d9cedd13d0b806b1bd5b93af47a57cfc24d6b1a50faa6b86c2b614fc56f24e932ffe484e544ef4b705b9f14b2d2e698efb5283e96af77ee6523976d465e2ff9c0f723e03d2155ec13593f5e2a5901c69b32a19e42b3ba484ed335095cf6744d9907865be6714ee731f655c927f60bacaada40b4b31a9ac6e08ef2d1bb5f01e8da500e237382106a2f989f4ee820cbbbec7758c21e5251e05d8bba0aa4fc31829970c196ada65f8482628152751b9e52a65ef3bab6cb8cc1e1fa8c062cd9387c6db8201f0f2fcf64181b326b5db2cbd548ecced2284911dad5d484d0a2de59a94500b1c69b316633752782ff58f0183145557a1ce697b27012fbb2952608c50c96144b6f5f6fab19ba13cfb03bc7fe6ecf9bb9ff14dfff7a7b56cf8065d07a6cdd7627c28628d317c52a4f94d8f64e0a071df802a2860f2c8d198260f8677a83c27f4f43c7ad7963e3163a44cd890bf2d0d4275340dbfcccd907ee52e0f9d9985332ae6d9980c1277ad7bd60c68327545f569819029a53c1bd423c2684b1e316a478fa45fc0d509d715edd7e42e8d210aa70c13cfd1a11730c00f324b7cae04050815a5ec867cbd374abffa0f3dc50b5e9ac3c9927b11071558444043550d4053514b2994cd6cda668f78229ae15ab6f1140d07a20ad1fecc9f77e0a5ba3728f770fd867f5088b3f98eca47181f6ef483148872269296c27fbbdbe701263b13634b610a647164d21e6b47448a22c6b4554c4da781a586685bcb8fa8a1780300a2e52325f45e6691e03feb6a086d12f78bfca41cd646ae0ec4764a0714ff95d59bf7049f2bce96470bc6598804cc0d6aae171be788bbcf88a498d084abcfa0ff7e844001ce3db3449d568771482eb42471c9a2458312effd2e8e4b6ae14ece69ed111d58d72024ca6e4d4047cfbc10a80e97420d662e95e4b31a2c3550bd00e87253655cec955bd114aebfbb31e4f40e2fe4be229f44e5b7baf9dbc6b3d4cd0a0f7dabb3e536cdc19f9a2766dcd055fc9ab509c35c6b14c110e0143bfc3e9fd05bde5947e428e91d428454fa8a6cbb28530ae721460cc4e7a8f6a370f22e24954321a7c220c392f80ad3d51719072775062ea55a8f40646df46fe6e1853433c7bff2b7e7e0a187eff6af91a8965b67b8e7a72bade629053619f37758b1d642d399f6ed5782108847399e856b601300b0a8b7c619d4c14dd1091f53b03935e308427b84b4a13a81c185bd5bedbade0acf5c5b61798b0c5dd28a08ab4c30df718cb1abe48a3d28815be89bbe636e65e94c1bf2520883dc562392cd86d56c50b438cf11d6aee06b38c7fe1d004f54fd205dc43b398474667f038df9f2da075609a4a04ede7493d3e4bbd5df09b4da86c8e8cca8927c9473bf93536d4567e88470598d4836ce050d843729624ba9dd3ca84d11cab7248b432b3ee6cd8ee96e0d28303e10a928dc9b98107e8f127176efd750399df89ea604102e7730ae01a4ea751483f1ae4d8948bc79bf7a1cfc93be4e0257ccf7ebb1d404b9a69f10cd9bff4a46aba5190f914108acd160734d79f387acc748059e3839f68a5aa45e02220ded0df8a63df1d286be271ffb27eb5c6f318090ded9c57e28668ad650d10cc2ed401921646c69614f789c86b5829f6a00f76f586325aa5a02e9921d8c340ccb4b29a5d39b74683522aab1be324cd22e4bb903e262d4fcbb2cacd5b953770c21fdc910e67abed5c582a8b040cef5b3ce9636f01d9ec36c2621bdd8f79ff296788e8ef670bdba25c84bba401c040c871d75fed9f85216c1352519c6fa5b0e10f4d8b1702ca1463ed2a9bbcb081cffe28be3e8849210c566fca337d95ad012bdf37e8f198a83e7693010518cc7b419ca521dd0cb6ce18267247152a642de04f1271df4ea6279bcf2b367bcef9db40e70aff861fc16dfe3f4bb10612ca90d82596880d42c66c6992dc7de2c37a684b2d936a8ddfe156bbe70f2de594075070b3f57c2a71d42e60d2bc01aee80a52dbb79b60ffa0854f67527d2919287747a573803a399a582da91f27267571d0aaec193fe0de9bf8faddf31b4650f01a7627b5a4481380609d16e35c4ec4cfaa359fc253804d1eb55cbc5768803e872b039a32357abd6bdb5c213089025757f01695cf098f73ca5cb39a439c21147194d1fa410e2dd747274e681f03237cf4f0a5e8fe961aaca9630453d3aeb16eb3fce82e9fa4aedac484345903da582fa4e8e4534b8f9ceef9710b7c1afd0b3aa0864aa5ade3f87e5b2b412c6dd7aef733730fd15b501f65793a171d6bdb5830081ad57d463dca35f1ca2b5ac7e1dfddcb0e702471eca84f0311552635dd45e1e66fb8c846510b74c441dbf6c0425a33d410ae8ce8b2690080642ddf3b134bf0053dddf783b591efb9ca5e9c39b1796e7391d1c88de1b04ac2c9eb04781e95a742270a08907e306af50e880995b804b492b348921e700c287eca7e522972f2a505173ba53f5059acb1fbe9962c17677d5c882a97b8b1131d6e053a59e3060dc243629ee461f825bec5423d0dc32c99d1c36182a40b2ceae6fe0f65a10b82a267f83b285a0227af08872e336cf629a4d4b8b571cf61102a3245ddc775fff2a065dec323b4a2801091663a4bf7717bbe535247eee2fa5d1cd2b8fe5f195dcd70a2865ada240b2bc594f9b2be602b99940f62a49a0d63baea55c90353d7cf55af7feab77fdf950c4d98ca9437769c72a40e3479b6acb70ddc8cc066054036c78ff09fed3f0137e01cd1df6f47eef579d80a2b1b26006a00d5dc0286bbf5f9e33f62d89fb29381dfbbb0536559571fe7da20ce0cc1265986067b19f1fb746d88777b3e075127719b10376e2f64dcea9cdc85db4082c490099db272ba0958a06874ffdcd1472537d5ccf1bd7b2190e5946c9966eb7473fe0c119296b6b08c458d3ff86f34efeabba7e3afbff635e174737fc2c0d7990eb2b5bee58b02350ba75eadda058755217a6e02b56a15a152f0f0292d42ccf0e64bb5348f02fe4bac291e354617c8eea3cd781e6d3d36481b0f467ac3b454ab78f67972f855119a7c03d7f053bf2834ba8c435766da477980036f597cbf1b95bba817484abd78bcf65998428126d276d844fa892b4a5478621ca189e3dc531dc6ee2fcc66e37647489a5511b2c540a1d30b62239249be9d996fdbcd2d9ab255e6dae88a7720af2fc2e8098dc2740b54cd8efd54ce582ffbafa0ba49f65feae3069443c8b031c8409c0f6c2d1525a78936b8e254b20b94a47fcc4ee6f490049e9da3366fc36f41ae9fc4b39f7903f0d841dc71a916208958577feac4b15d268da9cade8decbd559fd5ece452c6c72c292147a99dcbe135e6e0f7555df03ebcd210a28ec8bd060962dfe7203a7e7dc83f699256b24bcf7c5ac8af52f85ed82b633afeae136046b3fa14a72dea05b43f1915c9bf59118265463472da087c1758906ac7fd60a584266e600eabfe4f62d761836e602c1ff62e7831189d3c22790bb26218d19c98d767dc1f6e644b5856c3d15e57cdd2b33de0c746fa7b569c9a3aef26d1c6eb4c01db6817c4528aa596736c819f5f5b0e7edfddecd1c9000f77f6591796a8057937b7ce6f738b1c9919953af73ba00a7246d981209d94d6e0f3fd6a443f362bb8676585ec271abefc64100c189117618c72ab5f43be25f07e03bcc7b8a232fed67cb9cd4e9d26b08eb44119e0ebad3c56a77755f704ca553b59ecf5eec6d185a92ca1e658967e5b5cee980900c2dac148d355630234a3b3c796ff165b213b110ee44172ef9221c92850443055781262b04c1837cbb07345c1e3f72cc14dafe90c10ab688d12a0cf9caa06de62fc3d74d2dc029aff50df5549edf4096ba30acd79ecdb0d9c1d7d81ddeb4e5019180af2156fe53cb9aa2ea1980eaa4887394d0867996542db3f685e968cfff853f5c3a57c47ae31887b4ff41ac2f05cf6d18a6fae79d2e59d3cbd85992846b6b17d0fab10fd7e3b2c5e9a75315b42b7d66e500eb500d37bc2da822324006793d3f9c0cb32dc30c10454e28cd9c38fba7ee56e55e18d1c3bed8fb875b1876ad8517368cb52ce44d732a4d53b1f8636e98ac414fe9c66a58267d56bca3bc4ce29436b6bd78be63db3334d73546e97dbd81eaf0b5640953aaa3974b48b3d262e542eb39fbcac654820f1efaf67500f0592b28c7195a947d4794d71068ee85e2ba2c780a40deabecb4d0454d3794e9df73f792dfe211dff4b71a5d66a1bac9e3b9b698dd4d6f0b2d4ecaaeed5e411812264d2449b56b056cca6f0571a8b4a3b5827b5431d8ce67abbc755ed49a16b40b6c05cd299de32d5efa733c4016d87ae62a59d0cca0a96a346f237e137524267bafde80cc4babf91cbfb4a72d7a56b1e3510f586bdb1afc87236fbaa4a453ec30db76121bbb5d310dab90e2fd7b2cc34e5a49ebebf68d2897db3fe72c440a4cdc72e1f728f811b04e0c245da2635cef793abe107ad3724c4ffc1882004c13741fa30f688033c2a580d2e0ea80f6a59f11af428ac3475e19ddef06c504b7aef186f6c26faf9fe1b7e4dacb20ab27a8c38267752d96313383a34d075d64b92702aab5f25ac0e8ccdbbf2b52361fa5f2792f375ff6bb42915d30a2addc452dce08cfbbfede55e8a1f7fc52188669df1e4b063928169b468cbaf851adcf5a65fb1bafb3144ce8e4db1f71437664986c3f7e64162096819feadc6253628f261d185d7a3b050a9d8c11e18c27f401ae9667a01a20cd43a969106960ae499e1080c59940f9fba392022d43d9a2a79172fd3e7a39fbc4092eae2d51d278c8cddc578dfd3d7b41ae341702bbe691c136c10a5f1447f63585eaf2cb245668b9d95b83530972a0b6ae30d98883794826438bca0fdf2d05ec132e7cd3d53eb274f8cb4ea0c4ccf298ca872c0740e8cd930a9af69d8a32cc64b4f23a9f3362e5ba8f883d07fa62838089985568b8f77bcd0a4f67c04fa0f1bbae29cee5a26014ecbf2a51269d5ab6e0755577a71c676cb2b14ae3580e133d9c6c83c904c5846f398ae28d50abcc892dd47d76401b6853eccb79814d5ef62ecd7fd6f148097a624bb2f8c021636ab42184e1c996af319b9ddc94831af7aa7ff9cbbb5490c2eaefbf739c236fef6633c1a1b56c3b5969556cf6ae300136eeb962298acd8dcb933505eac5676170947b007e6b80259aa4c49032cb8543ff2186dfc1dbc17c035bda9ef369932a02fda5dd5f3d84cbd5bd7cc3f5abddc1356cff5fbca44af42a49f819f0a3404a93246a9f16d135275537150faaee2e1f8150eab9b8d6830a1ec446f52b14f86c928f37a9f9f5226ddeb9708eef0f9113e8d9d728a4dcc063f25d25c6c4b12a0b96c4b7d10c7318058db7da1936454804e8dc292ca57271f6703a2a525e00eae9efd8dfde396ab5b52df8b3c29e150eac822688c4dd832d6711831ffddcc079b55e8ae6d4d738dc363805a08ba298c1db35557d33673288151d41184f9f05589eefb07a8e682ee36cf61f73f049b3cddcd3e6eb035e1284a4d46784bc204505481dcd307768e8f9374ee87c5f05e8a7d89e2ab721be7beffc6cb231fdbe58d2e26e69c68dd2493ee271bcde9363c2189adaa25af2ded88f01ad1caa3eea365063dc906ec90d855742ffc88569870dd0e1992b7cbfc64a8d1d568c07d8be81e6f7da4a8d3728438072143fb724755382ef2a10c12809a0e96b4555c2985b8d4003e06a758b53563fd05e4f9afef322d0be49951162363945c33e189e787fac70e836d022f4ddd5d1953bf23005456fefa8be046bf6690ca8874da000470d02b8128c7d5405d0529b1067c971f37f0b456f55fa8c65bb919069cb6dba4e66515850009844c58c14a85b58c8adb3a9ea345d01116628b527a9d5dc8259f831a743303575dde518ec7e83739376d3fc9d425e01941380ef4bdaef94109e08adecf2ce71514435fb1b9d1e376720bd04bfcc57c7af613fd8bb4da28a88d9da4f5b6c296970edcfc2abb436f4d53898a626004d55cb2195546f77123244b5d08ca0997e329ba640682f9922650d90d824e2b9527fd6ff7017e51ff2a0301e17de60cb6cb2d17e797155a3841dd191f5252f11058f6164c34793245e87b70b750eb2d11fde8a2d4e2ee81237bcddabbc0b24b79526050f3653eef9ff17e964f7e693493019dc93beeadd3e4363edf2309dbba9a899efe88b26d962305e7941fc625bc0865f4189847c5aa8238d986d9a4a057cd715d903b7f8909427939e5c3123fb548329c45c9b0a972aebd552ae7efff771993d37a803637f5ade26be0703fcd659a142b762f664864aeb798eeb11a796467e8222a04d21d1de3a69907ae416f5931c5341e160413c75901e5dfe53821271eac751edfcefb48fa39d81dca30036092d8d20bb8dd5cd67f42e30df7f5488ee268922e96d33a53baff92a634a4fe807f5d667f614c66875ddbc7fc947439eb18ad06221c4ea7ff2e8245885ed8875596430ceb3d80c07c9fefe535f51971624dfbd2279923c6dbc9901aeeddd6b56a5a0afb32aab214e2be5cac300d49ae9d58e9aa754f71a46db1e80cf7626228dfe9ab7a4a5b9100567e67e5da9d95d9277e83b5881b8b8c5e8a9d9ad02690338d6cd8c447995a18fa9775de898613dbcae56146865579404f90a3762becdc02c28ee15d910e832425efd00390c117271abd956b48a05c6ae508bdf087575d919267b0126073d641538ab079e1dd3515fcf30bc0d04b15ab239e48579ec387dc95d88edc8080bda537f782d42176594dd78c3262093b8147c241850f6df075fdda6f14c0803f4893c9567f32750189aeed587a94886cadc9916dc247616d4b2711e109d7a64dd974fa974158b837fe78158a43ee9666ad0fb451c6be1030a4d51b8c893836e57851218a67319531332bf474977d2121bea5f9d79d981c78841c9d27f8da612bdac58d437a3b72c21abccf101da51ff3643833a3003bce9a592c418f3dd95f207c281684b2038ccb133e849d41f0631c13cd5b2179ee8b46aaf4c7fe9d30744c70dd684322bc2fd96573e5c33a33efb30f93d56c7e850d1121ba5e19633e4ef9c7492c8e228e7c258b24ee5f950c7a8a6932dc28a4054ea98a679afbae0d52b9d74be9f79e40b8a8fc223994567a7cb51b425760fa822b02cfe160e57ed3b8e421da57dc92d5105daedce12cffcdba7a412607771fbe610e2c9d7b8e94bc5fad981a9fd574ed06a7e4eda3b12f653e005235b148857bbc6161f70387de8fec1061c01b0924b2d6a9576e0a711ec90e664da65049a234fbe9c0407a1f32e5c7a745b0b16251cfccaa82201d458e450832a31a9b7251abe5d8b47cb73c3efa39c252c0b0b5caf5195524bd49717eeadc651c891b331763319f0dd2ed07d30d245d4d9dc7b4fb2ad51f65e0318e8209501d5e4277d491ea22269517e15e41819f5fe5d2434f57461c842d967c6485d2d1900811b24fcf1d8976b608146407bf0b4f59d8c83867f88d948af92cc8e861ca429e8e6191e80d8c8a4099ccb1e2261fa9a0dbbf854a8889bf29e9f18f85b9076ef61c8bdb64bf44abe800a1cb456f9404237b62c8c345f5a740c27f58b0563e5785081fa41ff2acc82d486b7a3f4ddf4b4b6c0e0ad511e2170c53a3e0cc882d152b5b72d52a450e16ed7495987f2cc19fa3d095634b65dd12849328f7110fd3913a156c687e9291544e992cf547caff8b5bc0f3bb5259c1118b5d9e68086c11e84ca81a884c6a0ff8b0737c6f4531ab009ff51f5ff5ed31b9c7956c14dfdd745b752d8bbcb83c090000df5ca9400ffff3c1bb77531bf48f7f06b7b8e21c18cfb5b0e19253e6373fc78d3412a9b49a16b0d50dfbf03859f0c28b5c8695341d8d6ab6cdd7194f347c8285df41686d248571831af8afe6d8a8e2e1ce750ef79327a7b5b952448dece3462e25653e488e461598591179f71f2995e940987c12bf65c58b2e851fde6b6d295fa45366c07c37531f6704eafec953076b0c034b8cb5fada89b424f1164b9c538a75ebd6c7649f0858a4472a8f2beef2f17d1ba6baaf6815a8a06c2678e575a42df5d29b0b73853c0971d0e4e04b53de7918419130b678d1494583044152ea77bb685aa3fb902913cbe62fd9195b550b8a6f847f4d25c6c0f11527f7b27d2ece031948b1cd180ae95cd0522aa9e836f2be9cbe4b119172d1c396f863bb3d4091e5abaff3a14a8650848806c3b57de2f10c4531147e77851b2c04d803eab18157aa527ab16e07f3e0c5023444b9a9ff516920a440c80561abc3dd2e129bf89799509ed838ccf84707108f1ca101ef946812457a4f6b84866e536d674557fec47f21fe173480b3934ba47d5a1b2dad0f47623f654c8ed2b50e30dc4620ad18700c858bae1ff8a067c41e2dd167c8768a9dc35ed37d25ff83dcf2269539a23dfc0c94d74b579dd13da85100f1b01837a957dcfc13acc85d6f5eff098851631115e9e2d01ba1b98ec144a5d5c9c29930f0783520cddada5b81dc0767e34972233463689ccf450ec7c158a3fa1d2a3b5a018e1fc839b292811919f798ae40dd59c03ea743e061456a34722ad9db6764ae8f22eaec13508abb151b1992fad13ac63516fb04f2778bfe07eb3b228c45dd9d163104a0bfe65f761d42bee9aa1739bfaadf931407fe42adf81249017ea4b91f48e5a2912bf8346d483cdf1b6acef4b9a92047cf1ec0663c94267a2bc25021fade0f9b3decf0d3cad390c79e24d3a2edcd89e9df6be8bdadb13f1376f32f05a9dd625a1c593367c8c9fe46e5ad54644ee71099ac1b57fbaf8c8257be1c069aea8d519224d3e59aa37eba6cd55679fe9fdae34b64e67fb2512f9156882ac083612324b7e49c8cbddf87fb1e4a43a84f3b40470e824838767c3a542f78170c8d4a9e9dc0cc2bc9bb6a85656f482b0e2d1c478c14dc7a33491df122174cb351dd44bfe5da8d1af7a1a5daa72490c0e88015724d3d06dc093ad10444ca229fbdf3ed21bcba8f965b4c8005091f445e8a50b6283618a257753b4243727b217cfbedaef8099e0b8ff963cdb3dd96e8564113f4473ecd98e9a5b26398784642eaf88f69e9ad8bd279f13605174acb2ec9768429fd29d433da8b446e898e6664439c1118135d97b8ef8754569730966156eec9cd4befc45f1a3c6e5d5386dcefa4faa6907effe408614bd08a23bad22d76c743b11abc1278eceffa65003fd0099e550277605927eb5d3705a72c65604d8b45688b3aab9e49faec56c1519419db4ffbd26448e4f7b62f1af3ba6e72247ec80c74b6a4ebcfa77fefdebee12196fe0eaf2091fabd8b9d03f9985d3416c46b13cf8511b71ddc61454715ea70e526d022072f81f94973400d32a1f56f714d1ff570a18b9317a96bc8bf88a90fe637baf6f77be4401b245198e527e2ef50233253458f2db5ce12285fb04bc3c865a68547200ea52d22c6c3543b8d53d5b521ce7c5babebd1e33ca0a5a96bba77caf0f3dc946ade9149e40bc41ed7aebe47a12a44a255370fb5e52eac71323a289760779a3b9f8b90c4fe62d0b159e6b373ba2438224c55e455f694c607095e0fa767d802ce2fb50b4971129e7c181856c7bd40bd868183d29ee89d9ba89e72f2c07e468856776627362fed84e61785837be74212df3599ed1c56ea549ce76a5d28ea1919f37eb815de88732597fbca1004619ffd5e7332db1797872db4eac7e3881241aee8180d72d986ef3058f1a5f26413a1166505982227f6ad5b07b1e9b605331de1d703534531df65d2856b670b1e629a322cbff434b330034d8422c0a6284c686364e68172a538c9f4874c32dd0105ee47cc97228af25ed717c6a227d4c3e1596ad60db7719c2ed88cc5a05f6df39e14ffa43094c3575c97e60b67069d7ff0fdd4621136cb384a0d47044a9b471a02b426dce0f1814ec11eed086a9221a28ec1d28c70fb132793e284a8f4eceea2458c9bdedcecf28d4159f3acb684c8bf01af6c2f6c182bd67a27b609a7403ab69751d98c95b1b486930c57149a64c7c58c2a322da62b3c14fd993affc455c36c8287d1e4403f76ae9440b3179c16cf2cf12df8757328af5a58b75553ed5fdfa8e1f8c87c5a7d1ee128aed7e2edb25bc614458a607ed4ae36b1456137095980138423af769ab0824fb8f7e960eeff168373198e34e49c5025957f94c6f7cc65c49582d107f4fa9c2ee8259a2c84c24e0f85be29d8537a1ee396275a990d8cb15a7dac146c79155507a030867fde02196d0a5e32b0d1a9048d7549e76e54e5d2f1a003325871b48e8145b118b8acc964aebfaae9a557d9934e6fe9f13ef7da246df07aa325b681c974f99638ac3284517e39868b855a7ffce1babcec942de04cc781f6cba18080b697bd7dc80d999ddee5ce2c4017e7646fc2df5f50279d26e9a537c38bfc7cc679457916c626a28b82817bd5e7ce38c17b73f5541a98ac8210b3433f72651cf54d62109fedec37bb9df71590b09f5de2cbdc0f18e12cc766dd31d532661973118acc56ba530fb616bb0bd368732a320708c6cc3499466a82ae59c3a4d0c524c096754372ab7477d5c13e376f1dd674e1dbc5b7e924f5cc5c1ed87415362feb0e5811ad81b8ebcc47fab5b8a75acf15debb9b3f39c91d90ce536901fe93dc6de851822cd40258a15293fda85cb6843107337ababae7567fc96471699dc0a4ae405c8c92b27cded7eb1329494a5ee8732abf4bf4dd8887370e66ed0c12c8d434eae614793699454e158772b0df1c717f5810ffa0edfa9126060147ef5959fc703d94af8a193f9e815d13654093dfbea5bddb65eefef7633d4ba33aeba2c8604e115fbd26bbb14d321c88555b517dd12a9498e72ff1a8ad6309fc67d3c9e422fe311b6949f7892291e291227e257db97d79db98d29d0a348906c02aa21fd252bc6df628e37e93fce7bbd63b6415ec638f57f4c226e56381e99d75e9cc7d34fdaa759445945a7888cd7542129aaf64bf29814a59bf501c68802e86248f9e80dcbc478f50932fe11840285a1ad88c51ce3ced7edbf568c4e8443a067549d709915ae969cf2e5dff7ccbdddf23488343a6a03a78fab60e32a09546df004c87900699ff26327130dd7828e11ca9263e2c71959e4c373cc3ff5d0240e4fef9130b1b8f1b7208f51fde77967ac86f4e3725e1956fda00af48326eb83901a96f3bd770c7cfd8e5877e0b8c2cdd092d5c6cf16a94fe3d15ce3483b72b3ce1e61024169c10b20fe7cbc0111efc8044d6d2d1e26aee375b0cbf1b688411dc7aff682e702873cd4516bc483dc8d8ba40fbd6702ee9317d0c17c753bd09e8b668759c7edcd1e8ec9ec26d4e6dbfdc57643c6453bcad2c9b3a945a5669ce5d92aa1cbef9709134f96452341d09c092c7a2fb0e684dd6967c4a774155a282bb97570bc0b2da3c4f5653ccfe713e791472c9fb61c7b3cc3489f78913ff25b51613cfa6d4ad5240bbe7a5c121254ed5a37f248320da252c20aa62b08ad3a19d27ed9c8c379ac5b425a29827967cef2edb161a0fd88d6baad4f5f22eef022d4e4d1750e4fbc9cdfaf952f22dd30781b4e6606d5d8f275c238888493c29ccb97ca6c56f6f2e876af5068b4d1b27cb2ee01b7e361baf61555de00abeb60a9a276234896d576eca56a40a46f9188fb0b39daa74e4dfc7cba8057cecab9d9919b9b80ab02db0ab3dbd3869b1a1632e2287308665755abac675f7533c03d06376990f3e742f4520e60ef423dd9ec9f54f1b2d9dadbb4cd9df1c676f1b02ae7ffea236888c9393000b9df226417f33746f86a311303238611cbff07b12fbf748ac238fe1c2ad1f192838c9841b8e49804f6b8971098ef4c68f2e99c28a9686179bbca70a146da064c96d1b115755b824b739a964d55f425f0a6e5078690c5ca711ae39d0d69c0d1ad9e99b64e8edca8eb126d585311292f554a3df6f9b8aa609c85ac66b8b756f674986c562f6b570b7081770e6b0b6496b056be49eb24d16e2308816a3f066c579f35108f47af0c4c34ac5aa405f866da5eaf5a41f4a3790203e034868e1450db7ae0fc1494b756022d4dfb2ed67073cea23a9e738b1513b0672a827b549eb5d08130c382aa824ac187986a0d5985c216348f1c9f65dd2659e51d46c4e342107eebbe4860d7a3abbc72591d055af2da6ae23c5d1abe7919de24cdc2e990d0b947f0efbd7854bef3f01dc773659411d27f6f4698cdac21c5257084138a7a2d4a2700ab70ca7a8c5799e15b4cedf2e75894eb3cae75b96b562d46201364d6d599cf9526ede7e24157b11db680ccef86120dc621c8867bf783c0a744b8abf8e8c99d9da54331e2329e3cbc7b02e0efe06a3a17ee928924a6a5506cdea8df49ff65df1ee2b19eb158e3d03b272c32f8d8d4033b69dea1eecc3deeba0e2453b87fc42de07e1dc1e287bc298f9293fe170c7afea19d4b505b477ba7db1b2448d2cf32f91b01061177ae5b88bb6d1ddac98dccfc3e4872e685e1636d8456e5497f270f96210353c2705ddf95bfdf43e53cf237f3a3860b214121364f2546ab201a5595e24ee84adeb3cb493f538cbbf9f4bdec4348b5fcaf58e2cad8c771db2723c4739cbcf2b0b31edb06c0f91909cf23139430f31af09e37cf075a8f20aaba928e2bb26ef9bbe5a0d74305244fe8e93ea2ead609f006b9764b6db8860f24f24ff2a75fdc1909f3ad9ef3b0c36069b7f0e289c40176c2484dff631f68924f823a3af24f3aeaa6ab02867f03c8053a6b22c0d30eac85afcdf7a4137fb0a818a082e0c9bdb1645f8b4f719f4159a9fc93bd07e185c3840a578631ee3dfd564fddb1e66ffbe71fd4d55570823559640438dc7971588002fc49353dd1ef7fa40309572d63f28349388f9d9d04e9735334f74785643266aa002eaaf70d72df2dd42fb4569dbefbbdb29959d9f566b56d10b557875f678118ef600678060196548ba6415432a9d4cc663061569f34c46fcef83bad76e0104cb8de8a5f2d14654db46f934885f7b983c34664fa8c144a284de89388441ec09fef02f9ed73aa5bd294f3a96cda8f5f3a837e728d6da353ba45b256571d538c96056b64ea7c5ee2778466461d096dcc07c803946c014a0e6688f3f5d86c3e0a54131d98a6e95d99801893ca514f0fbf56243a6f03f7ce8750cfab18cf883249baa7b0f5a943c8b621c7fa3a712156cf58a0bb046b9179e6b3701ac20b6a674411a16134841d8be66a16518a1f508a8668aa87d104f16053f261eab219d151c6b6de978383161afc086ba794ce8f871868a0d1aabae8a7e7f85df7fbc940c9e06524723d7b981f7186b003c5793c4243b000c5ba5e6ed9f36f9d1d80d2ae123342a1f52179b9eef53a2376d802d2e7cc88a95169d02cac0530f2374a6999125ebd2441fc15dd45ef30fca0fd99e4a6ccf0675b22c36465b8fb190576769b779cb51605d0079d18c6022b5c23526ede2188fe3676f3e2817df144a14669bc9994d0af58781b29e5cd7d74efbf810824ebd06233c3be188f7f570bb7095cd0835ec9f64186d9004eaf7ca6b4c30e0ab6918c9930729432e3955a80f6efa3423d7018b3425589e4845f16c3d3fbd8375d868499b81a4a805357a95e21f57dae278cfb32646b1a6cfa4ccba25fa502d1f6457a2abc1a71d9287fb6fa32801169b9b1c411adc05842406a3be88553dbb4e8ee568d5ec49a99c3469c26ca5b9b73ca72815723aa41d8741dee3d8819a2d4d92170d4b26c788963ff6b519dfdc4d2579a99dd0bccc55d6ec43ec66ca5634840c90ba40b8d0a3fcc80e419f95123f2317c3f1efb373975b6a60523dd488a1c6df13c5dfe6d45c2845077294e9ada8768cad3bf1106093dacd8ce25f2105ec9b8406c3d7e60e9fe4a2d67f2d2c6988f6432e177b41154e8ab5becc9bc81ea4b40074f8bf9f8e0058f82f7fda0913b1816885235f7feaaad48b60deb83486e3ed06cbf436f8fd3d3ef04177074b44ded269e2e12a0cb1f5751bf7ee0eb0fd0ab1cb8dd316ab5349a99479b1e364bf8eb75b9b78aeb55a2ce81627b979d7eadf531c99c5343baf9733d1ba0df35be6cc85d7876348e4ace04350634b4381993ad88ae5ff339d772985bcba6390d56a840179bbe8c3f7c6c903a439ab0df7c329181e718bcba0117b82dfb444de8f34cdb07192be14193bdaed0a86a0ceda8c5caa266933c5df3ff2fd8059a02334446b7579652ddc8cec073a8e2fbac376566813ba4e2e0cdfdb5710ba3229f49a691df9e37d85c1293cc27489c4870f14ef7af426f225f1eaa9320336f1261cde47727363fa551fe2bab72a091bff9336dae9bb4f9a835b975628bcdc0523c3b4da5124c24d9f3b25763fe7e1e3e932ff1b94b11d96e48e78f3e7ac6e85d949c27caac8ab6ddeed96783fa441cfa0a1a2388033dfc3f01f5af2e598ef0ab6777319447ef53e8add8f9240070a4c369f24bd64f05d4f0e5d5f81e4ba3ca5327f8b5d96207f3a98500a79696b11b314aae87ae015ce2605d69fbbc9e3d6184dc9a41d6865e38dcb363de3bc0099b72b007f70eab019d7f3d75e42b815c424b5d7a73581618eef342530f65a933b72d3274995684d6f1de5b7dd5c827f90b6edd46235857becef276121a01548f42e13b7af51d3411833d630acf75f4ad7af111bafcf66e3aa45e8e8d8c62e0e419430e3ab3ba152b6d2c8d991e0b95b4c4f05e0aeca6caa6daf27136439e8a87241e4332b6aa254502d2198330ff2ccd4a0cd452a8bb1913b8961a3eea0c3afce11032c0033b2c61c65225b200548334020a56db09c5c0586c57c24853f1acdf56abf279fd089ebeeec4f9c45c3d7210cbfeb4ebf68a424907341243e2906b0b504a28d9bfb16c2ba7e2a0b0099e78a670f6beb46bd4044ef20d1ab9ddc83865e18ef399c35be0c80902d3de226e58c7db7f9dc8b38742f1efac2d3831402cd0e7f3fa9c8d61969a96bb604683c87edc7120f403922e1ceb47406f9cbc82e7c24eedcc8cdd565bf3cca72f51d5ef55a876a71bd6629e6f5878fe712d802f356cd20fb5ffa164422a22537e0faae3b805ab4a3714bfe99587adcf8255dfb375f2bd3e94e18c94919d09aac173c101d6c7b0553b0851badbd71810eeb80bb98e5fe1139c02511babb13be643b7315c02a27a71a7f67cacc6da6d9629816a27bf09b3b3f42282c121c716a59335d76d44d681225712913340e3d91a4cb549a5aaed48639bda09dab93fc77d4e9011d78eccf1092a14f043f87cb7f668177767661f1ee924e3bd2d1efd8f3b0fdbddd62c9b5bb6d118bba03e161fee2395651fc5e37984242266c55d163c65d24f8a478e6d9b8646ffc2beed210d0efce0ab83d01aa370242f38a41083cc6a611119ce33303387ac5453739cff4bdebed596469516cf9d57c37495ce80c2615d2d7aabb6471e8c15ed568b3242941f5b7d3143f123ec0929831c491b0fa1a2304045ca7306c78ef5df7dce275607eee2f868627df374a5cc46578f2553ec041e7f97d80075b18a9a415a3e8d7c9770d2c00aa5dfe9c800d89859ae45abda68d3efc7fccc6f47678e3bb3d0495f88b9d5cc266c7975659529ec2920624f410e09805fbfaa843f606e154ca80cce59c170607a60ca1bdf632140730a3c62a75c10db10959e484bbf146df50ed7ab149c3ef0a0f0945d9cae8184a46aa943f25a817d8aac8ed96bab4ffc63eb60df84a618a3f543377cf438bf8d6ce673ad39ca46176e85f2c0aab16470a913ad10d2962b749f94972eb32b75ee93a9c002c9294551fe90870db0a4239a9ed48f08a1d71f4c0cfb5f35f336dcb81116896c44e7aa95579b66b4ab2d5929852fe64bf9f68f23df38f91892e532efa4fffad9a5f1523e1f79caf177072c96646971f702d2175d7aa0b9940204b2b6778f68ab9477b8c18e2c02ef3c1e93be2b832ea821663c79c34f6cf5ec247c86a3391146d1fff66e0cfd56bc08e2ad2bff4f0ad6dfb7a7edf280f01c50b214c4ca0126b5a70f733ee8a9a85af0213786c4e59f2a88620e1e0cac82334b47437301e836dda4b20c75eef5d242d793ab8eb9ee1ed68ea9ed3b127a8f38d2ac57acdd70863af9babe9198f56ee4173a284fc4dd8046cfcb4468a853c08362b3a48bd2a48a02ded51d72f16be5fdf89d5d3da55c0808041902bbf9a1e274feb0803d0330f596d7c73b573430e545369643054e0f7ffbaef0139bfcd50074f10e1f6d8622324420104d5d3fbb91b1144023974b01033402b04ad3e047a48b2574942bc88872118acdbf010fcce4887e13ff8b8e99b29df929846131b5db5be24360c97b2bd1b6ad97e1b1b2976958d5cc2a19f7b3ea8c8c12533246bf5644eb25f4f912081c0511b544cd57f3bc522da2a6940d81e2e486a2aac4556c13c77ad418c23ef449b9d8939b2576862a27e1a4c1b9c105c19204bc2d981d080455fa08ff23397b2632cf29d664c4799935b81a1d44c082c629e07f575e7618da7af4919a10573ed6e91bae559a20bbf1b962bcdd8b44a324309fb77abd0c9f98099818b2a3578bbf0dbc6b5c96214ad4bc097b875bf64626b5b0014aba1c3b190d0c6768b74b069930450b1d12bc7f46ca3557b304775c6fc907a835e7fdbf580997443fc45bce354791d302780c6c751b6dab71b28cf03e2cfddec117527c72d13f3ac589e9da6f8623a000b3fb8a21d3580e7f3efefa0646d05a89ad4dd8783d3f64cb80b1a07b89b4d59ad10c4a5eb4265d7b3998d64ea3d16206e9e4b437511394b449ec6ed8c10205d813eb6c56bae1c7266044e85a9b6edd1dbf51ee987eb399bfc85c929175aa381ae9826d61e550a2d328a7550c7ef92b6dc688624001bba2e93a77a306c8be38ff5efc318b05ff6c36950e009b32b2e84398d12c49a5555aee054d728ea91c978cbac457f24f1f47dc341265ca0798d5795d254d01005ae90b08fb55227e1c942d8280d09ed3010d093e58dd9077f2ebcacf7d81d8268e6252483b3121d56829af116ab4654dbbac952197e0d3f08262abebc2cd38cb9441416868cc9ccbb6b0f686c13e719579fe1d3bddfe0c1ef205e162dcbca856e410f29b83e91e5304a7217b808c443632bc3ab9dc48c2952f451d7fcf707cd2df1826938f336f8f28262ea81c48dc45aa00ac9faa81fef26915bcb04489953794d6cb3eab96604fa7e902cfaa2c85b6bfcb4ceb225ec926c6d0be641d5d32efa447ca49c9f5cedb1e3cda86c9de793532ce7488a6d456979920a9232e3a22468816a834f2843a26c6969fa762dcd8b2c30665652d7aeff0155fe82bd19f4e682d06d3cf85fb29681babb2e66be557f6b5733c48379416bd7f1c7285f37dcf550008fdbd8e645bf0013fc982425da3037c1d364472bc77a994c24213ab7da2f5a12026ad3439fab68238fe1193477ea74dccc72ad37bdce5f7669b3c91ea1643243eac6494ef4a68504f79e79e04bb563df7028af4f172c3cca3d73490ac280727f58741815dfdb7ad84b1194944bc055701bcd0120df8f7b6ce656de7c86f0bfdfd978b647ffbcb70960d8dc7a157711b2e0f863d63c33d4ee60e564ef2b458c42fd31fdbb9968eab5e1a7b417a1a2cf02d2692e01376e1495f1292284309c0dfe14c918b22408cca5b2c781632d5dcf96b0cb62c13246e9014fc87241f9d61cea666b45e839286028d1dec42fa2cb1c0123c8d76ab32c19e3fceada44ca7a9b9a7cacaaf0808c80313009288e662ec5e78ac8ec81c2c2603d38be7d33a183ccfb7ef5801ee057606c5c84352b441e231d66428acf33650c565b9c051162183556730f218381b929adf8d6dfa866e083a820099522491542d5a39fb57130382d2090efd3a3ac1d90b0022c10f49eda238d20bc0351ddf58a447ff353a665b37d92080e80559e05c12aeb6d14160c7b0a2c1a9c155abc896b217574611f0fffea938f3741206d9455f217029517e28a82d4a871ee3d967b63c5ceae0359ec2601a83d047970e7650b649184c21821e712a8c4e4426087a1b4b5c43b9f9a7c93b8dfa5d056ea8f5770ceca9ecac54b6d08d9032f05796000bdf211ca95dfb679563a0717ba29ae9fe2d5163237af213efefffdda18f9cab0c7b331e94a5118beb3e7798f61e4ed3641ebfb24f33b6f4cb7ab11b2d34c98502382edb46f7659fa269027c245b880bb892cd136c88e93bae5ad9de6cd7a46ddbfb2e6d4f79b278824958d2af9bec9e8a0295f06d3fa1133700323c25ecaf89aa0af122b865b42f3f97fb1ca84b2c91f8f8d9734b5e1a06a08489b2fe2b56a1f0671dbb4b038659fa98e3c3d6978d5bd891e3ee3ce6301e989d76b24a83360c5896776159fd1fd553dca34383e4952f8ba8266d2c994f89c85a11758867469640f1dc4a2f8980349633c71e0ddb9568b238ec35283b71dcd7fbcd890888b10b492513fce91b56650e4707df4563da18fbeda026aa6d5409dab12a6b8c07acb633e955c513b7a2d6e9ac7db22696d3b7e30ace852c003ced0ec1a1d90d091a0867a9ed9a74c78a633cc859107d0d0f59c4d894e7d2a3358e862179c3b7fa0026dce04442dfd0bd7ad4f119a9ae10dfa8bbb5e036b0583c20577d93c7d27e07e25deef4b9123afe69c39f9c0d0f22072dedd438d320a234bc68b29755a5e8a47719390551a09947cd0e2fab91e815a0e2b9e8229636795d97a619467c69d5d1588278c99722d4187702b73cf782b17a7bc298e64b146875118bd7423ef0c51c1671a4c5ba39e98d13569a21744b3c2d91255082d2d97ff492f0163a81241035aa48fc13d7ca5a119e782229a39d791a827e2aaa461e480c2964b0024e6158316a2b2c6b125e95611c8f985af11955a93aa12c940830d3f5d2cc01194ebc7314b4cf266e0ef3fb4ef118c473073b455e233bd465f4ceda90ab52628eb1525881120dd5e78b94711785f865071890a78529e31b245ad9ee0495d56dee78471c0349fe8bff4ef6300eaa97f3f1482de0380e02a0660a1ca5ce7ff250a70b8c41f59b89dd09ef17895efe93ce8d4271a9d4770fee9210664a846fd2e4f6f298db8ebe8a07a4cc3c0fa3a3ba086bb98fe51669eadb80a0c6d4e237f3aa95bb4d27c714da7d48b4881bb571ec1bbb27e1813ec997fa83786c2ff6ce7977acb3494fb344870a15ea56d4bcdfc7ec1ea8c33fbadd0bc8ec9711480509e6959f85416a6d6f9d0bf266c277ad3a1f709013c530b0ba29c1d5c1c70f9c7448b47e323bdd1bf97ce31bf56640a369419babe01e7179e4e0fc49268f30997276cb5e6346bd9138d9456cc0e0acb8825d4cfd41b17684c3becd219cf3e39019e9954ed3bb4dabc7cf2c6f606108f36d8b35136b8f62c6464aab9206513ddb7d5d3e62abca060835f42bffd6b180b26622d668b3e68a66859ac36e4d0b3e482c25a16af052bccfcf4730197e06773aefe81f20fe3225743f457d8e2d0624292d9483522d2047488e334876641841818b37427c5f07b5e5d70b0c04cd01398cccb9fd1c490bed477fb44f45c901329ba65e40ddc274ca6c9537fca7428a96d06f303c10bcf455b1b6fb13cd541bb959880edb3be90d0d71ec9f945a9f4a227981d2a99cf743fcc11af35dcb42dbadafe4658f64a4438a2cad6d9dc0ac6e9a689ec02ec11d9873fcfdaeaf47db428bfc2ac539c4636baee77ab34c391c03250665ae966f227381a04360cec59ce239ca92c67356e14c5f912e6e96a06cbdab5e5576ef437b87fafb87a528f78ca63c1014c347ca6f1bc8f651ede9381e488c7135904c4f0a54433259dd78874faa65178b21f4a0dbadb0497d2db58b9fd92fa869b0356e4bd032c2db834874279c85bc84c8dc3894f3dfe4236d37d6d395880b4db80c98e8ffc7cc21e6a24c4537e1330ff784d0c4c9d77c1b3967f7b4d79b3213d84b67cba0e51af65527895d9a03bfd1080f4c1cb77107caa34530bcc7533d34d5da1a26896e19ef9bf170ef2ed8b9f624d990237deeab3a0e6083c9b8151825d0f40db99ecd991e162cbdebb251188cba19bee0e77b4a956cf9cbe7430fe093a2e8fcd91697ea2656e4ca14e2f08d280f95b4933ed82d5f84b7a32c460bc42606509e3b5ee4a05b3800b533cc66a93fffcf9cd1b43f47d18d6bb844a4cb045dbffe9b9aaa1c62ccbc4cc80ceaecc7fa3329b17d4ca39c723aa0f9e50a3e9ad352a120d96a7e24ec415f990dd8948d9cca453b786bf5ef9b3a9db07ff956c2d231327c9d827dd2abb96895f4f4ced0c1f4cc16d12738a298b4613f07755f640e78637d889abafda3c26c3169443c6610c166c82035d9aa83622b0f0e3bd6d4cc5691fa616194b8a9348775ebdc540cd5a5960b1b767590a01cbd5452aff50c3b777aa46afb607d3cde57b2dfe1a4b317dc37214c25d939f3237d92b0fe998abd20766dc5d253ea7b4d62b0fd7b78a24a7185f11078f60084fc8c6d87c9c29c85e0e6b07a280160e5a98413223b10d0b900f335568ad4bbbe417d8404f16af817fa51ca8b609b3524527813d46d29641ec689b457497c5c29125a05a585bfb3359d3c6521b5d71c497ea5fe298d309857c7a37c41141a69780b3409c9e92ea861af81d2a793e8063e3f3e98db8d4b761309e31d738f7f62ab39c6363d99c0a37c8faae1d08f5df202ca75d8d8e9e8b70f9062c03e7ee2321d5a16e7e7df5faf3f0c589e7d1231492d1e705efb72aa3d9461ee41f685844cc74698c92aca4f96ca59b8bd510bf2a2adf75c3c5a862b7e2a252129b5b44cd28d7f32c730855b8b58f7c3e6ed96e370cb529be55638409f26b6967e1828f90d9ed2d993c9f6912b041bbfb93ef98bd8915950412c7168338eaee97d6d5540420f1de3e37568863026a17d93186c29c0571c971edac844b2fe0f071f6defc9e47c8578c71a1430b0ddd261e7b57d50720b51d129ea9ba9bb8dbbd2573d9c087c1c4cf3ad0e86ff21c2227540a1584c55a40da38d00992e266559caf5d2b88d6de3afd32f03ac2be3e0899167b0d09220d016a560af5f900933dbe14203fc93a22e384338816988af7b1372888d7db94a83569f3ada945b0fc1a7226e29fd39268e8400f4d9f04a3eff224f32695af61b1d675dcd31ee57b0c6d53379204301cf21ee6d3eb203a335110f11404696930e1eafc9</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，博主可能还没写完，所以这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 私密文章 </category>
          
          <category> gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
            <tag> CI </tag>
            
            <tag> 配置 </tag>
            
            <tag> 私密文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx学习</title>
      <link href="/2022/03/24/nginx%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/03/24/nginx%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p> <a href="https://lark-assets-prod-aliyun.oss-cn-hangzhou.aliyuncs.com/yuque/0/2021/pdf/22423156/1635859606986-cb7e317b-c3ad-4c6e-8872-7846d50cef30.pdf?OSSAccessKeyId=LTAI4GGhPJmQ4HWCmhDAn4F5&Expires=1648095724&Signature=1Ji7GOGzEc3N0fG1O/GH7S8ViXw=&response-content-disposition=attachment;filename*=UTF-8%27%27nginx%25E8%25AF%25BE%25E4%25BB%25B6v1.0.pdf#view=FitH,to&toolbar=0">nginx课堂课件</a></p><p><a href="https://lark-assets-prod-aliyun.oss-cn-hangzhou.aliyuncs.com/yuque/0/2021/pdf/22423156/1635859615340-7a4a8130-533f-4db5-8152-f253335336df.pdf?OSSAccessKeyId=LTAI4GGhPJmQ4HWCmhDAn4F5&Expires=1648095960&Signature=VZQfAeVhyf8RXu1aKYboWz3MHoQ=&response-content-disposition=attachment;filename*=UTF-8%27%27nginx%25E8%25AF%25BE%25E5%25A0%2582%25E7%25AC%2594%25E8%25AE%25B0.pdf#view=FitH,to&toolbar=0">nginx课堂笔记</a></p><p><a href="https://blog.csdn.net/xj0927/category_10548178.html">传送门</a></p><h1 id="一、Nginx简介"><a href="#一、Nginx简介" class="headerlink" title="一、Nginx简介"></a>一、Nginx简介</h1><ul><li>Nginx是什么，做什么事情</li><li>反向代理</li><li>负载均衡</li><li>动静分离</li></ul><h2 id="1-1-Nginx概述"><a href="#1-1-Nginx概述" class="headerlink" title="1.1 Nginx概述"></a>1.1 Nginx概述</h2><p>Nginx (“engine x”) 是一个<strong>高性能的 HTTP 和反向代理服务器</strong>,特点是占有<strong>内存少</strong>，<strong>并发能力强</strong>，事实上 nginx 的并发能力确实在同类型的网页服务器中表现较好。</p><h2 id="1-2-Nginx-作为-web-服务器"><a href="#1-2-Nginx-作为-web-服务器" class="headerlink" title="1.2 Nginx 作为 web 服务器"></a>1.2 Nginx 作为 web 服务器</h2><p>Nginx 可以作为静态页面的 web 服务器，同时还支持 CGI 协议的动态语言，比如 perl、php等。但是不支持 java。Java 程序只能通过与 tomcat 配合完成。Nginx 专为性能优化而开发，性能是其最重要的考量,实现上非常注重效率 ，能经受高负载的考验,有报告表明能支持高达 50,000 个并发连接数。</p><h2 id="1-3-正向代理"><a href="#1-3-正向代理" class="headerlink" title="1.3 正向代理"></a>1.3 正向代理</h2><p>如果把局域网外的 Internet 想象成一个巨大的资源库，则局域网中的客户端要访问 Internet，则需要通过代理服务器来访问，这种代理服务就称为正向代理。</p><p>在客户端（浏览器）配置代理服务器，通过代理服务器进行互联网访问。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635861095719-3ab68f46-3e0a-467c-ad41-880df6af010a.png" alt="img"></p><h2 id="1-4-反向代理"><a href="#1-4-反向代理" class="headerlink" title="1.4 反向代理"></a>1.4 反向代理</h2><p>反向代理中，客户端对代理无感知（客户端不知道进行了代理），因为客户端不需要进行任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，<strong>暴露的是代理服务器地址，隐藏了真实服务器 IP 地址</strong>。</p><p>通俗的来讲，反向代理服务器就类似于中介，请求尽管发给中介，然后中介给你反馈，至于中介是如何进行工作的，客户端不需要知道。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635861557065-e6f5d248-d805-48e1-802c-081ca3239c5d.png" alt="img"></p><h2 id="1-5-负载均衡"><a href="#1-5-负载均衡" class="headerlink" title="1.5 负载均衡"></a>1.5 负载均衡</h2><p>客户端发送多个请求到服务器，服务器处理请求，有一些可能要与数据库进行交互，服务器处理完毕后，再将结果返回给客户端。这种模式在高并发情况下，服务器会崩溃。</p><p>因此通过增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将<strong>负载分发到不同的服务器，也就是我们所说的负载均衡。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635862109006-3cb1e77d-17da-455f-941c-77973f419ed7.png" alt="img"></p><h2 id="1-6-动静分离"><a href="#1-6-动静分离" class="headerlink" title="1.6 动静分离"></a>1.6 动静分离</h2><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220324151030346.png" alt="image-20220324151030346"></p><h1 id="二、Nginx的安装-Linux"><a href="#二、Nginx的安装-Linux" class="headerlink" title="二、Nginx的安装 Linux"></a>二、Nginx的安装 Linux</h1><h2 id="2-1-进入Nginx官网，下载"><a href="#2-1-进入Nginx官网，下载" class="headerlink" title="2.1 进入Nginx官网，下载"></a>2.1 进入Nginx官网，下载</h2><p>官网：<a href="http://nginx.org/">http://nginx.org/</a></p><h2 id="2-2-安装Nginx"><a href="#2-2-安装Nginx" class="headerlink" title="2.2 安装Nginx"></a>2.2 安装Nginx</h2><p>先查看是否安装了gcc   <code>gcc -v</code></p><p>如果没有安装 执行  <code>yum -y install gcc gcc-c++</code></p><p>在安装Nginx之前需要的依赖：pcre、openssl、zlib</p><p>通过yum直接安装以上即可，执行以下命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install pcre pcre-devel openssl openssl-devel zlib zlib-devel</span><br></pre></td></tr></table></figure><p>我把Nginx的压缩包放在了  &#x2F;user&#x2F;local&#x2F;moudle 下</p><p>cd到 &#x2F;user&#x2F;local&#x2F;moudle</p><p>解压下载的Nginx压缩包 <code> tar -zxvf  nginx-1.20.1.tar.gz</code></p><p>cd到 nginx-1.20.1目录下</p><p>然后分别执行以下命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>然后Nginx就安装在了 &#x2F;user&#x2F;local&#x2F;nginx 目录下</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635907807491-6e05b71d-584f-48f5-bd6d-1c56011b7b0b.png" alt="image.png"></p><h2 id="2-3-nginx-常用的命令和配置文件"><a href="#2-3-nginx-常用的命令和配置文件" class="headerlink" title="2.3 nginx 常用的命令和配置文件"></a>2.3 nginx 常用的命令和配置文件</h2><h3 id="Nginx常用的命令"><a href="#Nginx常用的命令" class="headerlink" title="Nginx常用的命令"></a>Nginx常用的命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看nginx的版本号</span></span><br><span class="line">nginx -v</span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">nginx</span><br><span class="line"><span class="comment"># 关闭nginx</span></span><br><span class="line">nginx -s stop</span><br><span class="line"><span class="comment"># 重新加载nginx</span></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="Nginx的配置文件"><a href="#Nginx的配置文件" class="headerlink" title="Nginx的配置文件"></a>Nginx的配置文件</h2><p>我的阿里云服务器上面的nginx.conf文件中的内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user  www www;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log  /www/wwwlogs/nginx_error.log  crit;</span><br><span class="line">pid        /www/server/nginx/logs/nginx.pid;</span><br><span class="line">worker_rlimit_nofile 51200;</span><br><span class="line"></span><br><span class="line">stream &#123;</span><br><span class="line">    log_format tcp_format &#x27;$time_local|$remote_addr|$protocol|$status|$bytes_sent|$bytes_received|$session_time|$upstream_addr|$upstream_bytes_sent|$upstream_bytes_received|$upstream_connect_time&#x27;;</span><br><span class="line">  </span><br><span class="line">    access_log /www/wwwlogs/tcp-access.log tcp_format;</span><br><span class="line">    error_log /www/wwwlogs/tcp-error.log;</span><br><span class="line">    include /www/server/panel/vhost/nginx/tcp/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">events</span><br><span class="line">    &#123;</span><br><span class="line">        use epoll;</span><br><span class="line">        worker_connections 51200;</span><br><span class="line">        multi_accept on;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">    &#123;</span><br><span class="line">        include       mime.types;</span><br><span class="line">#include luawaf.conf;</span><br><span class="line"></span><br><span class="line">include proxy.conf;</span><br><span class="line"></span><br><span class="line">        default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">        server_names_hash_bucket_size 512;</span><br><span class="line">        client_header_buffer_size 32k;</span><br><span class="line">        large_client_header_buffers 4 32k;</span><br><span class="line">        client_max_body_size 50m;</span><br><span class="line"></span><br><span class="line">        sendfile   on;</span><br><span class="line">        tcp_nopush on;</span><br><span class="line"></span><br><span class="line">        keepalive_timeout 60;</span><br><span class="line"></span><br><span class="line">        tcp_nodelay on;</span><br><span class="line"></span><br><span class="line">        fastcgi_connect_timeout 300;</span><br><span class="line">        fastcgi_send_timeout 300;</span><br><span class="line">        fastcgi_read_timeout 300;</span><br><span class="line">        fastcgi_buffer_size 64k;</span><br><span class="line">        fastcgi_buffers 4 64k;</span><br><span class="line">        fastcgi_busy_buffers_size 128k;</span><br><span class="line">        fastcgi_temp_file_write_size 256k;</span><br><span class="line">fastcgi_intercept_errors on;</span><br><span class="line"></span><br><span class="line">        gzip on;</span><br><span class="line">        gzip_min_length  1k;</span><br><span class="line">        gzip_buffers     4 16k;</span><br><span class="line">        gzip_http_version 1.1;</span><br><span class="line">        gzip_comp_level 2;</span><br><span class="line">        gzip_types     text/plain application/javascript application/x-javascript text/javascript text/css application/xml;</span><br><span class="line">        gzip_vary on;</span><br><span class="line">        gzip_proxied   expired no-cache no-store private auth;</span><br><span class="line">        gzip_disable   &quot;MSIE [1-6]\.&quot;;</span><br><span class="line"></span><br><span class="line">        limit_conn_zone $binary_remote_addr zone=perip:10m;</span><br><span class="line">limit_conn_zone $server_name zone=perserver:10m;</span><br><span class="line"></span><br><span class="line">        server_tokens off;</span><br><span class="line">        access_log off;</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">        listen 888;</span><br><span class="line">        server_name phpmyadmin;</span><br><span class="line">        index index.html index.htm index.php;</span><br><span class="line">        root  /www/server/phpmyadmin;</span><br><span class="line">            location ~ /tmp/ &#123;</span><br><span class="line">                return 403;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        #error_page   404   /404.html;</span><br><span class="line">        include enable-php.conf;</span><br><span class="line"></span><br><span class="line">        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">        &#123;</span><br><span class="line">            expires      30d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ .*\.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">            expires      12h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /\.</span><br><span class="line">        &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        access_log  /www/wwwlogs/access.log;</span><br><span class="line">    &#125;</span><br><span class="line">include /www/server/panel/vhost/nginx/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Nginx的配置文件由三部分组成：</p><ul><li><p>第一部分 全局块</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">从配置文件开始到events块之间的内容，</span><br><span class="line">主要会设置一些影响nginx服务器整体运行的配置指令，</span><br><span class="line">主要包括配置运行</span><br><span class="line"><span class="bullet">*</span> Nginx服务器的用户（组），</span><br><span class="line"><span class="bullet">*</span> 允许生产的worker process数，</span><br><span class="line"><span class="bullet">*</span> 进程PID存放路径、</span><br><span class="line"><span class="bullet">*</span> 日志存放路径和</span><br><span class="line"><span class="bullet">*</span> 类似以及配置文件的引入等</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是Nginx服务器并发处理服务的关键配置</span></span><br><span class="line"><span class="comment"># worker_processes值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约</span></span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>第二部分 events块</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">enevnts块设计的指令主要影响Nginx服务器与用户的网络连接</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">worker_connections</span> <span class="number">1024</span>;   <span class="comment">#表示nginx支持最大的连接数为1024</span></span><br></pre></td></tr></table></figure></li><li><p>第三部分 http块</p></li></ul><p>这算是Nginx服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在里面</p>  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">http块包括http全局块、server块</span><br></pre></td></tr></table></figure><p>  <strong>http全局块：</strong></p><p>   http全局快配置的指令包括<strong>文件的引入</strong>、<strong>MIME-TYPE定义</strong>、<strong>日志自定义</strong>、<strong>连接超时时间</strong>、<strong>单链接请求数上限</strong>等。</p><p>  <strong>server块：</strong></p><blockquote><p>每个http块可以包括多个server块，而每个server块就相当于一个虚拟主机。</p><p>而每个server块也分为全局server块和localtion块</p></blockquote><ul><li><p>全局server块</p><p>最常见的配置是本虚拟机主机的监听配置和本虚拟机的名称和IP配置</p></li><li><p>location块</p><p>一个server块可以配置多个location块</p><p>这块的主要作用是基于Nginx服务器接收到的请求字符串（例如server_name&#x2F;uri-string），对虚拟主机名称（也可以是IP别名）之外的字符串（例如前面的&#x2F;uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方的模块配置也在这里进行。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1636094522321-ffc6642d-1d25-4d53-830e-07e99c8ddbf7.png" alt="image.png"></p><h1 id="三、nginx-配置实例-反向代理"><a href="#三、nginx-配置实例-反向代理" class="headerlink" title="三、nginx 配置实例-反向代理"></a>三、nginx 配置实例-反向代理</h1><h2 id="3-1-前置准备——tomcat安装"><a href="#3-1-前置准备——tomcat安装" class="headerlink" title="3.1 前置准备——tomcat安装"></a>3.1 前置准备——tomcat安装</h2><p>使用nginx反向代理，访问<a href="http://www.123.com/">www.123.com</a> 直接跳转到localhost:8080，再此之前需要在Linux上装tomcat。</p><ul><li>tomcat安装文件放到Linux系统中，解压</li><li>进入tomcat的bin目录，<code>./startup.sh</code> 启动tomcat服务器</li></ul><p>log文件夹下执行<code>tail -f catalina.out</code> 可以查看日志</p><p>同样，这里需要在防火墙添加远程访问窗口（我直接把防火墙关闭了，所以不需要设置）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-port=8080/tcp --permanent</span><br><span class="line">firewall-cmd –reload</span><br></pre></td></tr></table></figure><p>通过windows的浏览器访问tomcat的主页，访问成功</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635924569900-29d55075-0f68-44e4-8038-3f63ce116e45.png" alt="img"></p><h2 id="3-2-配置反向代理实例（一）"><a href="#3-2-配置反向代理实例（一）" class="headerlink" title="3.2 配置反向代理实例（一）"></a>3.2 配置反向代理实例（一）</h2><h3 id="3-2-1-访问过程分析："><a href="#3-2-1-访问过程分析：" class="headerlink" title="3.2.1 访问过程分析："></a>3.2.1 访问过程分析：</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635924846707-0b445ef9-1d06-41a6-a169-3e68a3ff4eb5.png" alt="img"></p><h3 id="3-2-2-具体操作"><a href="#3-2-2-具体操作" class="headerlink" title="3.2.2 具体操作"></a>3.2.2 具体操作</h3><h4 id="1-修改windows的hosts文件"><a href="#1-修改windows的hosts文件" class="headerlink" title="(1) 修改windows的hosts文件"></a>(1) 修改windows的hosts文件</h4><p>修改windows端host文件，使<a href="http://www.123.com跟虚拟机上的ip映射起来/">www.123.com跟虚拟机上的Ip映射起来</a></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635925030883-8400a093-d31d-45a3-a2f4-ca6d3d4f8d6e.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635925121611-fe647302-0bab-43b5-b546-aa5d427f57bf.png" alt="img"></p><p>前面的IP地址是我自己虚拟机的IP</p><h4 id="2-在nginx进行请求转发的配置（反向代理配置）"><a href="#2-在nginx进行请求转发的配置（反向代理配置）" class="headerlink" title="(2) 在nginx进行请求转发的配置（反向代理配置）"></a>(2) 在nginx进行请求转发的配置（反向代理配置）</h4><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635926048705-ba2e69fa-f442-40f1-99c6-fcbbfe2a86d9.png" alt="img"></p><p>修改完成后保存，重启nginx。</p><h3 id="3-2-3-测试"><a href="#3-2-3-测试" class="headerlink" title="3.2.3 测试"></a>3.2.3 测试</h3><p>访问<a href="http://www.123.com/">www.123.com</a></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635926260979-8bf4b5c8-4caf-4e65-8795-cc18af750cf2.png" alt="img"></p><p>测试成功！</p><h2 id="3-3-配置反向代理实例（二）"><a href="#3-3-配置反向代理实例（二）" class="headerlink" title="3.3 配置反向代理实例（二）"></a>3.3 配置反向代理实例（二）</h2><p>实现效果：使用 nginx 反向代理，根据访问的路径跳转到不同端口的服务中。</p><p>nginx 监听端口为 9001，</p><p>访问 <a href="http://127.0.0.1:9001/edu/">http://127.0.0.1:9001/edu/</a> 直接跳转到 127.0.0.1:8080</p><p>访问 <a href="http://127.0.0.1:9001/vod/">http://127.0.0.1:9001/vod/</a> 直接跳转到 127.0.0.1:8081</p><h3 id="3-3-1-准备工作"><a href="#3-3-1-准备工作" class="headerlink" title="3.3.1 准备工作"></a>3.3.1 准备工作</h3><h4 id="准备两个tomcat服务器，一个8080端口，一个8081端口"><a href="#准备两个tomcat服务器，一个8080端口，一个8081端口" class="headerlink" title="准备两个tomcat服务器，一个8080端口，一个8081端口"></a>准备两个tomcat服务器，一个8080端口，一个8081端口</h4><p>在&#x2F;usr&#x2F;local 下新建一个tomcat8081，加tomcat解压到8081中。</p><p>进入tomcat8081的conf文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635927975973-941af423-b377-48ca-8264-1e3601f35ff5.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635927978484-9482102b-5f0c-4a2f-83bd-c94ec89a581a.png" alt="img"></p><p>保存后启动tomcat8081。然后再启动8080</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635928106349-9d1e1383-9069-4e98-a413-60655e18b0af.png" alt="img"><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635928123196-3ffb4eb2-dd99-4c84-9b50-8268312e5d82.png" alt="img"></p><p>现在就有两个tomcat了。</p><h4 id="创建文件夹和测试页面"><a href="#创建文件夹和测试页面" class="headerlink" title="创建文件夹和测试页面"></a>创建文件夹和测试页面</h4><p>在8080的tomcat  &#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.5.72&#x2F;webapps 下创建&#x2F;edu文件夹</p><p>在里面创建一个a.html文件  touch a.html</p><p>写入 <h1>8080!!</h1></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635928686765-10d10489-02de-4817-8b6a-d5fbd8343226.png" alt="img"></p><p>同样，在8081的tomcat  &#x2F;webapps 下创建&#x2F;vod文件夹 将a.html 复制过来 里面改成8081</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635928867431-480bb0ee-5e47-4cb0-8db1-49f7b664a52e.png" alt="img"></p><h3 id="3-3-2-nginx-conf-反向代理配置"><a href="#3-3-2-nginx-conf-反向代理配置" class="headerlink" title="3.3.2 nginx.conf 反向代理配置"></a>3.3.2 nginx.conf 反向代理配置</h3><p>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf 下nginx.conf 文件</p><p>之前我们配置了一个server</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635929174082-166be11e-5ad5-4f71-a51a-cc651b35879f.png" alt="img"></p><p>现在我们需要新加上一个server</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635930983051-d7717f87-81ae-419b-961a-55542cb3cd15.png" alt="img"></p><p>~后面的&#x2F;edu&#x2F;跟 &#x2F;vod&#x2F;是正则表达式</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635930571772-3d405da0-d667-4263-829e-9820ddb44e2e.png" alt="img"></p><p>同样需要开放9001端口号对外访问（关闭了防火墙就略过）</p><p>firewall-cmd –add-port&#x3D;9001&#x2F;tcp –permanent</p><p>firewall-cmd –add-port&#x3D;8081&#x2F;tcp –permanent</p><p>firewall-cmd –reload</p><p>重启nginx。</p><h3 id="3-3-3-测试"><a href="#3-3-3-测试" class="headerlink" title="3.3.3 测试"></a>3.3.3 测试</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635932029972-f20d03a5-de30-4b8d-a26b-c2b8d04756d7.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635932041346-ad902c4a-ce10-4d7e-9485-ee088f3e3934.png" alt="img"></p><h1 id="四、-nginx-配置实例-负载均衡"><a href="#四、-nginx-配置实例-负载均衡" class="headerlink" title="四、 nginx 配置实例-负载均衡"></a>四、 nginx 配置实例-负载均衡</h1><p>浏览器访问<a href="http://www.123.com:9001/edu/a.html%EF%BC%8C%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%8C%E5%B0%86%E8%AF%B7%E6%B1%82%E5%B9%B3%E5%9D%87%E5%88%86%E6%91%8A%E5%88%B08080%E5%92%8C8081%E4%B8%8A">http://www.123.com:9001/edu/a.html，实现负载均衡，将请求平均分摊到8080和8081上</a></p><h2 id="4-1-准备工作"><a href="#4-1-准备工作" class="headerlink" title="4.1 准备工作"></a>4.1 准备工作</h2><p>需要准备两台tomcat服务器，一台8080，一台8081，之前已经配置过了。</p><p>在两台 tomcat 里面 webapps 目录中，创建名称是 edu 文件夹，在 edu 文件夹中创建</p><p>页面 a.html，用于测试。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22423156/1635943534388-6cfeb344-fe70-4bc5-b651-9bb319eb70e1.png" alt="img"></p><h2 id="4-2-在-nginx-的配置文件中进行负载均衡的配置"><a href="#4-2-在-nginx-的配置文件中进行负载均衡的配置" class="headerlink" title="4.2 在 nginx 的配置文件中进行负载均衡的配置"></a>4.2 在 nginx 的配置文件中进行负载均衡的配置</h2><p>在&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf 目录下将<code>nginx.conf</code>配置文件复制为<code>nginx_lb.conf</code>配置文件，用来作为负载均衡的配置文件。</p><p>对负载均衡的配置进行修改，在http块中加上如下配置：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">......</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">负载均衡集群配置 命名为myserver</span></span><br><span class="line">upstream myserver &#123;</span><br><span class="line">    server 192.168.190.131:8080;</span><br><span class="line">        server 192.168.190.131:8081;</span><br><span class="line">    &#125;</span><br><span class="line">......</span><br><span class="line">    server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">      ......</span><br><span class="line">          proxy_pass http://myserver; # 代理到我们创建的负载均衡集群上</span><br><span class="line">          ......</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635944748204-884886e9-dc77-4d18-8073-3b4b7bb2cb37.png" alt="image.png"></p><p>cd 到nginx的sbin文件下</p><p>执行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -t -c /usr/local/nginx/conf/nginx_lb.conf</span><br></pre></td></tr></table></figure><p>测试我们刚才编辑的配置文件有没有错误。 <img src="https://cdn.nlark.com/yuque/0/2021/png/22423156/1635945821599-625db282-daee-4a1f-94c1-43526067b56e.png" alt="image.png"></p><p>指定nginx以<code>nginx_lb.conf</code>配置启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -c /usr/local/nginx/conf/nginx_lb.conf</span><br></pre></td></tr></table></figure><p>测试，实现了负载均衡。</p><h2 id="4-3-nginx提供了几种不同的负载均衡策略"><a href="#4-3-nginx提供了几种不同的负载均衡策略" class="headerlink" title="4.3 nginx提供了几种不同的负载均衡策略"></a>4.3 nginx提供了几种不同的负载均衡策略</h2><h3 id="4-3-1-轮询（默认）"><a href="#4-3-1-轮询（默认）" class="headerlink" title="4.3.1 轮询（默认）"></a>4.3.1 轮询（默认）</h3><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除。</p><h3 id="4-3-2-weight"><a href="#4-3-2-weight" class="headerlink" title="4.3.2 weight"></a>4.3.2 weight</h3><p>weight 代表权,重默认为 1,权重越高被分配的客户端越多；指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upstream server_pool&#123; </span><br><span class="line">    server 192.168.5.21 weight=10; </span><br><span class="line">    server 192.168.5.22 weight=10; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-3-ip-hash"><a href="#4-3-3-ip-hash" class="headerlink" title="4.3.3 ip_hash"></a>4.3.3 ip_hash</h3><p>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upstream server_pool&#123; </span><br><span class="line">    ip_hash; </span><br><span class="line">    server 192.168.5.21:80; </span><br><span class="line">    server 192.168.5.22:80; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-4-fair"><a href="#4-3-4-fair" class="headerlink" title="4.3.4 fair"></a>4.3.4 fair</h3><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upstream server_pool&#123; </span><br><span class="line">    server 192.168.5.21:80; </span><br><span class="line">    server 192.168.5.22:80; </span><br><span class="line">    fair; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、nginx-配置实例-动静分离"><a href="#五、nginx-配置实例-动静分离" class="headerlink" title="五、nginx 配置实例-动静分离"></a>五、nginx 配置实例-动静分离</h1><h2 id="5-1-动静分离的概念"><a href="#5-1-动静分离的概念" class="headerlink" title="5.1 动静分离的概念"></a>5.1 动静分离的概念</h2><p>Nginx 动静分离简单来说就是<strong>把动态跟静态请求分开</strong>，不能理解成只是单纯的把动态页面和静态页面物理分离。严格意义上说应该是<strong>动态请求（通过tomcat查询数据库）</strong>跟<strong>静态请求（访问html文件）</strong>分开，可以理解成使用 <strong>Nginx 处理静态页面</strong>，<strong>Tomcat 处理动态页面</strong>。</p><p>动静分离从目前实现角度来讲大致分为两种：</p><ul><li>一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案；</li><li>另外一种方法就是动态跟静态文件混合在一起发布，通过 nginx 来分开。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635949438895-339d78cd-8eb5-4471-8d14-5b70dd3f3255.png" alt="image.png">通过 location 指定不同的后缀名实现不同的请求转发。通过 expires 参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。具体 Expires 定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。（如果经常更新的文件，不建议使用 Expires 来缓存)，我这里设置 3d，表示在这 3 天之内访问这个 URL，发送一个请求，<strong>比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码 304，如果有修改，则直接从服务器重新下载，返回状态码 200。</strong></p><h2 id="5-2-准备工作"><a href="#5-2-准备工作" class="headerlink" title="5.2 准备工作"></a>5.2 准备工作</h2><p>在Linux系统中准备一些静态资源，用于访问。在根目录下创建data文件夹，data文件夹下创建两个文件夹image和page分别存放图片和网页</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635950056018-95fb8b7f-1c4b-459f-a4ee-0b8c13602a22.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635950064343-c31c6c45-bb99-4426-b1b2-c6cc6100dd4c.png" alt="img"></p><h2 id="5-3-具体配置"><a href="#5-3-具体配置" class="headerlink" title="5.3 具体配置"></a>5.3 具体配置</h2><p>复制一份nginx.conf，重命名为nginx_ds.conf作为动静分离的配置文件。</p><p>修改配置文件</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635950550162-26abb624-6ba6-4f46-a972-2b0dbecc2476.png" alt="img"></p><p>然后指定以nginx_ds.conf配置文件重启nginx</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -c /usr/local/nginx/conf/nginx_ds.conf</span><br></pre></td></tr></table></figure><h2 id="5-4-测试"><a href="#5-4-测试" class="headerlink" title="5.4 测试"></a>5.4 测试</h2><p>浏览器访问<a href="http://192.168.190.131/image/01.jpg">http://192.168.190.131/image/01.jpg</a>  <a href="http://192.168.190.131/page/a.html">http://192.168.190.131/page/a.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635951078771-8cc0bd8a-e5a5-4823-b158-1d48ef0d781f.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635951115528-45bbe75a-358b-474d-968f-1fcdecb96c67.png" alt="img"></p><p>我们访问<a href="http://192.168.190.131/image/">http://192.168.190.131/image/</a>  可以看到把image文件夹下的文件列出来了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635951190235-6696a8a5-eae4-419c-9c8d-d0bfd2206b94.png" alt="img"></p><p>因为配置文件配置了 <code>autoindex on</code>  这个的意思就是列出当前文件夹中的内容，page文件夹就不行。</p><h1 id="六、集群的搭建"><a href="#六、集群的搭建" class="headerlink" title="六、集群的搭建"></a>六、集群的搭建</h1><p><a href="https://blog.csdn.net/XJ0927/article/details/109501333">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java后端 </tag>
            
            <tag> nginx </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯原题刷</title>
      <link href="/2022/03/22/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5D%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AE%AD%E7%BB%83%E9%A2%98%E9%9B%86/"/>
      <url>/2022/03/22/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5D%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AE%AD%E7%BB%83%E9%A2%98%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>回声实验室的算法路线<a href="https://git.pyhub.club/star/list/-/blob/main/AlgorithmStudyList.md">传送门</a></p><h2 id="题集"><a href="#题集" class="headerlink" title="题集:"></a>题集:</h2><h4 id="题目-2604-蓝桥杯2021年第十二届省赛真题-砝码称重"><a href="#题目-2604-蓝桥杯2021年第十二届省赛真题-砝码称重" class="headerlink" title="题目 2604: 蓝桥杯2021年第十二届省赛真题-砝码称重"></a>题目 2604: 蓝桥杯2021年第十二届省赛真题-砝码称重</h4><p><strong>题目描述</strong></p><p>你有一架天平和 N 个砝码，这 N 个砝码重量依次是 W1, W2, · · · , WN。<br>请你计算一共可以称出多少种不同的重量？<br>注意砝码可以放在天平两边。</p><p><strong>输入</strong></p><p>输入的第一行包含一个整数 N。<br>第二行包含 N 个整数：W1, W2, W3, · · · , WN。</p><p><strong>输出</strong></p><p>输出一个整数代表答案。</p><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 4 6</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【样例说明】</span><br><span class="line">能称出的 10 种重量是：1、2、3、4、5、6、7、9、10、11。</span><br><span class="line">1 = 1；</span><br><span class="line">2 = 6 4 (天平一边放 6，另一边放 4)；</span><br><span class="line">3 = 4 1；</span><br><span class="line">4 = 4；</span><br><span class="line">5 = 6 1；</span><br><span class="line">6 = 6；</span><br><span class="line">7 = 1 + 6；</span><br><span class="line">9 = 4 + 6 1；</span><br><span class="line">10 = 4 + 6；</span><br><span class="line">11 = 1 + 4 + 6。</span><br></pre></td></tr></table></figure><p>【评测用例规模与约定】<br>对于 50% 的评测用例，1 ≤ N ≤ 15。<br>对于所有评测用例，1 ≤ N ≤ 100，N 个砝码总重不超过 100000。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> class 砝码称重 &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> N;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] W;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> COUNT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        N = scanner.nextInt();</span><br><span class="line">        W = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            sum += W[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        COUNT = sum;</span><br><span class="line">        <span class="comment">//Arrays.sort(W);</span></span><br><span class="line">        dpFaMa();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    最优子结构就是:</span></span><br><span class="line"><span class="comment">    dp[i]的全部可能=dp[i-1]+和以前的加减新组合</span></span><br><span class="line"><span class="comment">    数组dp[i]的大小为全部砝码的总和  COUNT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dpFaMa</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[W.length][COUNT + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; W.length; i++) &#123;</span><br><span class="line">            <span class="comment">//对于dp数组的初始化  对于目标为0的配重 都置为true</span></span><br><span class="line">            <span class="comment">// 对于每一行和砝码重量相同的目标配重也置为true</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">            dp[i][W[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从第二块砝码开始递推</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">            <span class="comment">//第一列配重为0跳过</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; COUNT + <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="comment">//加当前砝码w[i]之前,就存在的;</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i - <span class="number">1</span>][j]) &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//情况一:砝码和j在一起</span></span><br><span class="line">                <span class="keyword">if</span> (W[i] + j &lt;= COUNT &amp;&amp; dp[i - <span class="number">1</span>][W[i] + j]) &#123;</span><br><span class="line">                    <span class="comment">//当前砝码和目标都放到同一边,然后有已经可以测的重量在另一侧</span></span><br><span class="line">                    <span class="comment">//还有个限制,就是当前砝码,和当前测量j之和不能超过总重,即数组的总重;</span></span><br><span class="line">                    <span class="comment">//如果有的话,当前j就能true</span></span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//情况二:砝码和j分开</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i - <span class="number">1</span>][Math.abs(j - W[i])]) &#123;</span><br><span class="line">                    <span class="comment">//j可以被当前砝码和以前的砝码组成,</span></span><br><span class="line">                    <span class="comment">//或者j加以前的砝码等于当前砝码;</span></span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= COUNT; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[N - <span class="number">1</span>][i]) &#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语语法框架学习</title>
      <link href="/2022/03/22/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/03/22/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="简单句simple-sentences"><a href="#简单句simple-sentences" class="headerlink" title="简单句simple sentences:"></a>简单句simple sentences:</h1><p>什么+怎么样<br>主语(subject)+谓语(predicate)<br>人或物+动作:发生了什么事(广义动作:语法上的动词Verb)</p><h2 id="动作分类-动词"><a href="#动作分类-动词" class="headerlink" title="动作分类(动词)"></a>动作分类(动词)</h2><p>1.可以独立完成的动作:不及物动词Intransitive Verbs(没有承受者的动词)<br>Papa Rabbit <strong>sleeps</strong>.<br>主语+(不及物)动词<br>2.有一个<strong>动作</strong>的承受者:单及物动词Transitive Verbs(没有承受者就没有实际意义)<br>Papa Rabbit <strong>likes</strong> you.<br>主语+(及物)动词+宾语<br>3.有<strong>两个</strong>动作承受者<br>Papa Rabbit <strong>teach</strong> you English.<br>主语+(双及物)动词+间接宾语+直接宾语<br>4.只有一个动作承受者(不同于2):复杂及物动词<br>Papa Rabbit <strong>considers</strong> you smart.<br>主语+(复杂及物)动词+宾语+(宾语)补语<br>5.把这个词后面的信息赋予给前面的词:联系动词(系动词)<br>Papa Rabbit <strong>is</strong> tall.<br>Papa Rabbit <strong>looks</strong> tall.<br>Papa Rabbit <strong>smell</strong> nice.<br>主语+(系)动词+(主语)补语</p><h2 id="句子成分"><a href="#句子成分" class="headerlink" title="句子成分"></a>句子成分</h2><p>1.主语 Subject<br>2.谓语动词(谓语) Predicate Verb<br>3.宾语 Object<br>4.宾语补语 Object Complement<br>5.主语补语(表语) Subject Complement<br>6.定语 Arrributive<br><strong>The little white</strong> rabbit ate <strong>a large</strong> carrot.<br>前者是rabbit的定语,后者是carrot的定语.<br>7.状语Adverbial<br>The rabbit ate <strong>quickly</strong>.<br>quickly是ate的状语.<br>8.同位语Appositive<br>Papa Rabbit ,an English teacher, eats a carrot. 用来再说一遍主语</p><h1 id="简单句的组合"><a href="#简单句的组合" class="headerlink" title="简单句的组合"></a>简单句的组合</h1><h2 id="复合句-Compound-Sentence"><a href="#复合句-Compound-Sentence" class="headerlink" title="复合句 Compound Sentence"></a>复合句 Compound Sentence</h2><h2 id="复杂句-Complex-Sentence"><a href="#复杂句-Complex-Sentence" class="headerlink" title="复杂句 Complex Sentence"></a>复杂句 Complex Sentence</h2><p>主句Main Clause +从句Subordinate Clause<br>1.名词性从句<br>主语从句:修改一个简单句,充当另一个句子的主句<br>宾语从句:修改一个简单句,充当另一个句子的宾语 主语表语从句<br>同位语从句</p><p>2.定语从句<br>3.状语从句</p><h1 id="词类"><a href="#词类" class="headerlink" title="词类"></a>词类</h1><p>1.名词 Nouns<br>2.冠词 Articles<br>3.代词 Pronouns<br>4.形容词 Adjectives<br>5.数词 Numerals<br>6.副词 Adverbs<br>7.介词 Prepostions<br>8.叹词 Interjections<br>9.连词 Conjunctions<br>10.动词</p><p>句子成分和词类不是同一种概念</p><h1 id="谓语动词"><a href="#谓语动词" class="headerlink" title="谓语动词"></a>谓语动词</h1><p>特点:<br>1.表示动作的时间 现在.过去.将来.过去将来<br>2.表示动作的状态 一般.完成.进行时.完成进行时<br>3.表示动作的假设,感情等 如:<br>if I were a rabbit … 虚拟语气<br>i ate a carrot and …. 陈述语气<br>eat this carrot and … 祈使语气 合称<strong>时态</strong> : 4*4&#x3D;16种时态</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1ce3bf51359c4b90b32b52607de8b65d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门</title>
      <link href="/2022/03/21/Docker%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/21/Docker%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p><strong>1.前提知识:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">springboot,springclouds,</span><br><span class="line">git push pull,</span><br><span class="line">redis </span><br><span class="line">nginx </span><br><span class="line">mysql</span><br><span class="line">linux centos ubuntu</span><br></pre></td></tr></table></figure><h2 id="Docker-一篇入门"><a href="#Docker-一篇入门" class="headerlink" title="Docker 一篇入门"></a>Docker 一篇入门</h2><p>这里有阮一峰老师的docker简介<a href="https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html">传送门</a></p><p>这里有个语雀大佬的笔记<a href="https://www.yuque.com/mrlinxi/pxvr4g/polyyw">传送门</a></p><p><a href="https://mp.weixin.qq.com/s/YlcvlUQ-xkz25PuYkeEQqw">后序也可以参考这个文章</a></p><h2 id="一、Docker-简介"><a href="#一、Docker-简介" class="headerlink" title="一、Docker 简介"></a>一、Docker 简介</h2><h3 id="1、基本概述"><a href="#1、基本概述" class="headerlink" title="1、基本概述"></a>1、基本概述</h3><p>Docker是世界领先的软件容器平台。</p><p>Docker是基于Go语言实现的云开源项目。</p><p>Docker的主要目标是“<strong>Build，Ship and Run Any App,Anywhere</strong>”。</p><p>通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到<strong>“一次封装，到处运行”</strong>。</p><p>因为虚拟机模拟的就是带操作系统和环境的，其资源占用多、冗余步骤多、启动慢等不足，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。<strong>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。</strong>有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。</p><p>Docker 在Linux 容器技术的基础上发展过来的。将应用运行在 Docker 容器上面，而 Docker 容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。只需要一次配置好环境，换到不同的机器上就可以一键部署好，大大简化了操作。这样是顺应了 DevOps 开发运维理念。</p><p>针对集群环境，可以快速部署安装。</p><p>Docker是不携带操作系统的，所有Docker的应用就非常的轻巧。另外在调用宿主机的CPU、磁盘等这些资源的时候，拿内存举例，虚拟机时利用Htpervisor去虚拟化内存，整个调用过程时<strong>虚拟化内存-&gt;虚拟物理内存-&gt;真正物理内存</strong>,但是Docker是利用Docker Engine去调用宿主机的资源，这个过程是<strong>虚拟内存-&gt;物理内存</strong>。</p><h2 id="二、Docker-安装"><a href="#二、Docker-安装" class="headerlink" title="二、Docker 安装"></a>二、Docker 安装</h2><h3 id="1、环境检查"><a href="#1、环境检查" class="headerlink" title="1、环境检查"></a>1、环境检查</h3><p>CentOS Docker 安装<br>Docker支持以下的CentOS版本：<br>CentOS 7 (64-bit)<br>CentOS 6.5 (64-bit) 或更高的版本</p><p>前提条件<br>目前，CentOS 仅发行版本中的内核支持 Docker。<br>Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。<br>Docker 运行在 CentOS-6.5 或更高的版本的 CentOS 上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。</p><p>Linux 检查内核版本命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uname</span> -a</span><br><span class="line"><span class="built_in">cat</span> /proc/version</span><br><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure><p>笔者的服务器linux内核版本为:</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Linux version 3.10.0-1160.11.1.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) ) #1 SMP Fri Dec 18 16:34:56 UTC 2020</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZ2vc5bu6hb90ck1lw0pdtZ ~]<span class="comment"># lsb_release -a</span></span><br><span class="line">LSB Version::core-4.1-amd64:core-4.1-noarch</span><br><span class="line">Distributor ID:CentOS</span><br><span class="line">Description:CentOS Linux release 7.9.2009 (Core)</span><br><span class="line">Release:7.9.2009</span><br><span class="line">Codename:Core</span><br></pre></td></tr></table></figure><p>如果命令 <code>lsb_release -a</code>提示<code>command not found</code>则需要安装<code>yum install redhat-lsb -y</code>。</p><h3 id="2、基本组成"><a href="#2、基本组成" class="headerlink" title="2、基本组成"></a>2、基本组成</h3><p>docker主机(Host)：安装了Docker程序的机器，Docker直接安装在操作系统（windows &#x2F; linux）上；<br>docker客户端(Client)：连接docker主机进行操作；<br><strong>docker仓库(Registry)：</strong>用来保存各种打包好的软件镜像；<br><strong>docker镜像(Images)：</strong>软件打包好的镜像；放在docker仓库中；<br><strong>docker容器(Container)：</strong>镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用。</p><p>架构图：</p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/docketVSvmware.jpg" alt="img"></h3><h3 id="3、安装步骤"><a href="#3、安装步骤" class="headerlink" title="3、安装步骤"></a>3、安装步骤</h3><p>官方文档也有安装步骤：<a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></p><p><strong>Centos 6.8 安装Docker：</strong></p><p>（1）环境准备</p><p>Docker使用EPEL发布，RHEL系的OS首先要确保已经持有EPEL仓库，否则先检查OS的版本，然后安装相应的EPEL包。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure><p>（2）安装docker</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y docker-io</span><br></pre></td></tr></table></figure><p>（3）配置文件</p><p>安装后的配置文件：&#x2F;etc&#x2F;sysconfig&#x2F;docker</p><p>（4）启停操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service docker start</span><br><span class="line">service docker stop</span><br></pre></td></tr></table></figure><p>（5）验证</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p><strong>Centos 7 安装Docker：</strong></p><p>（1）环境检查</p><p>版本确认：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/redhat-release</span><br></pre></td></tr></table></figure><p>联网检查</p><p>（2）gcc环境安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure><p>（3）旧版卸载</p><p>可参考官网操作，新机器可省略此操作。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><p>（4）安装依赖包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>（5）修改镜像仓库</p><p>主要是为了优化下载速度</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>（6）更新yum包索引</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><p>（7）安装Docker CE</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure><p>（8）启停操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><p>（9）测试验证</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p>（10）配置镜像加速</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">systemctl daemon-reload  <span class="comment"># 重新加载</span></span><br><span class="line">systemctl restart docker <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure><p><code>daemon.json</code> 内容：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">#网易云</span><br><span class="line">&#123;&quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;] &#125;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line"> #阿里云</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://｛自已的编码｝.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不注册就是用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;, &quot;http://hub-mirror.c.163.com&quot;,&quot;https://docker.mirrors.ustc.edu.cn&quot;] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（11）卸载docker</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line">yum -y remove docker-ce</span><br><span class="line"><span class="built_in">rm</span> -rf /var/lib/docker</span><br></pre></td></tr></table></figure><p>关于阿里云或网易云镜像加速</p><p>注册阿里云账户，登录阿里云开发者平台，获取加速器地址，配置参考第（10）步。</p><p>（12）更多命令</p><p> （A） ：<a href="https://docs.docker.com/engine/reference/commandline/docker/">Docker 官方文档</a></p><p> （B）：参考每一个镜像的文档。</p><h3 id="4-测试运行hello-world"><a href="#4-测试运行hello-world" class="headerlink" title="4.测试运行hello-world"></a>4.测试运行hello-world</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323171124370.png" alt="image-20220323171124370"></p><p>run干了什么：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638188169013-68f7d053-b6a9-4795-ae3a-e61f4a38deae.png" alt="image.png"></p><h2 id="三、Docker-原理"><a href="#三、Docker-原理" class="headerlink" title="三、Docker 原理"></a>三、Docker 原理</h2><h3 id="docker是怎么工作的"><a href="#docker是怎么工作的" class="headerlink" title="docker是怎么工作的"></a>docker是怎么工作的</h3><p>Docker是一个Client-Server结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。 <strong>容器，是一个运行时环境，就是我们前面说到的集装箱。</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22423156/1638188268502-e7e8cdf3-cc93-446f-a18a-7a827d2dd55c.png" alt="image.png"></p><h3 id="为什么Docker比VM快"><a href="#为什么Docker比VM快" class="headerlink" title="为什么Docker比VM快"></a>为什么Docker比VM快</h3><p>(1)docker有着比虚拟机更少的抽象层。由亍docker不需要Hypervisor实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</p><p>(2)docker利用的是宿主机的内核,而不需要Guest OS。因此,当新建一个容器时,docker不需要和虚拟机一样重新加载一个操作系统内核。仍而避免引寻、加载操作系统内核返个比较费时费资源的过程,当新建一个虚拟机时,虚拟机软件需要加载Guest OS,返个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了返个过程,因此新建一个docker容器只需要几秒钟。</p><p>docker和vm的对比表:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323171737029.png" alt="image-20220323171737029"></p><h2 id="四、Docker常用命令"><a href="#四、Docker常用命令" class="headerlink" title="四、Docker常用命令"></a>四、Docker常用命令</h2><h3 id="4-1帮助命令"><a href="#4-1帮助命令" class="headerlink" title="4.1帮助命令"></a>4.1帮助命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker version：详细版本信息    </span><br><span class="line">docker -v：简略版本信息</span><br><span class="line">docker info：对docker镜像、容器、宿主机情况等描述</span><br><span class="line">docker --help：类似于Linux的man，列举所有命令及其含义解释。</span><br></pre></td></tr></table></figure><h3 id="4-2-镜像命令"><a href="#4-2-镜像命令" class="headerlink" title="4.2 镜像命令"></a>4.2 镜像命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images [OPTIONS] [ARGS]：列出本地主机上的镜像</span><br><span class="line">OPTIONS说明：可以通过docker iamges --<span class="built_in">help</span>查看OPTIONS</span><br><span class="line">● -a ：a表示all，列出本地所有的镜像（含中间映像层）</span><br><span class="line">● -q ：只显示镜像ID。</span><br><span class="line">● --digests ：显示镜像的摘要信息</span><br><span class="line">● --no-trunc：:显示完整的镜像信息</span><br><span class="line">ARGS说明：可以直接写镜像名，比如centos，mysql等等，就是直接查对应的镜像信息。</span><br><span class="line"></span><br><span class="line">docker search [OPTIONS] 某个个xxx镜像名字：查镜像</span><br><span class="line">OPTIONS说明： 可以通过docker search --<span class="built_in">help</span>查看OPTIONS</span><br><span class="line">● --no-trunc : 显示完整的镜像描述</span><br><span class="line">● --<span class="built_in">limit</span> int : 显示最多int条信息。</span><br><span class="line"></span><br><span class="line">docker pull 某个个xxx镜像名字[:TAG]：下载镜像</span><br><span class="line">不写版本号默认下载最新版</span><br><span class="line"></span><br><span class="line">docker rmi 某个个xxx镜像ID：删除镜像</span><br></pre></td></tr></table></figure><p>我们尝试删除一下hello-world</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZ2vc5bu6hb90ck1lw0pdtZ ~]<span class="comment"># docker rmi feb5d9fea6a5</span></span><br><span class="line">Error response from daemon: conflict: unable to delete feb5d9fea6a5 (must be forced) - image is being used by stopped container 4cb79a86d213</span><br><span class="line">[root@iZ2vc5bu6hb90ck1lw0pdtZ ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><p>报错了，因为我们正在使用hello-world需要加-f强制删除<code>docker rmi -f hello-world</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">● 删除单个：docker rmi -f 镜像ID/镜像名[:TAG]</span><br><span class="line">● 删除多个：docker rmi -f 镜像名1:TAG 镜像名2:TAG</span><br><span class="line">● 删除全部：docker rmi -f $(docker images -qa)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZ2vc5bu6hb90ck1lw0pdtZ ~]<span class="comment"># docker rmi -f feb5d9fea6a5</span></span><br><span class="line">Untagged: hello-world:latest</span><br><span class="line">Untagged: hello-world@sha256:bfea6278a0a267fad2634554f4f0c6f31981eea41c553fdf5a83e95a41d40c38</span><br><span class="line">Deleted: sha256:feb5d9fea6a5e9606aa995e879d862b825965ba48de054caab5ef356dc6b3412</span><br></pre></td></tr></table></figure><h3 id="4-3容器命令"><a href="#4-3容器命令" class="headerlink" title="4.3容器命令"></a>4.3容器命令</h3><h4 id="1下载镜像，新建并启动容器"><a href="#1下载镜像，新建并启动容器" class="headerlink" title="1下载镜像，新建并启动容器"></a>1<strong>下载镜像，新建并启动容器</strong></h4><p>有镜像才能创建容器，这是根本前提(下载一个CentOS镜像演示) <code>docker pull centos</code></p><p>一个小插曲：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error response from daemon: pull access denied for centors, repository does not exist or may require &#x27;docker login&#x27;: denied: requested access to the resource is denied</span><br></pre></td></tr></table></figure><p>这是docker pull centos写错了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323173645773.png" alt="image-20220323173645773"></p><p>我们继续。。。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323173752024.png" alt="image-20220323173752024"></p><p>一个centos只有231M。<br>新建并启动容器，</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run [options] imageID/imageName[:TAG] [<span class="built_in">command</span>] [arg..]</span><br><span class="line">options说明：</span><br><span class="line">●--name=<span class="string">&quot;容器新名字&quot;</span>: 为容器指定一个名称；</span><br><span class="line">●-d: 后台运行容器，并返回容器ID，也即启动守护式容器；</span><br><span class="line">●-i：<span class="string">&quot;以交互模式运行容器，通常与 -t 同时使用；</span></span><br><span class="line"><span class="string">●-t：&quot;</span>为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class="line">●-P: 随机端口映射；</span><br><span class="line">●-p: 指定端口映射，有以下四种格式</span><br><span class="line">○ip:hostPort:containerPort</span><br><span class="line">○ip::containerPort</span><br><span class="line">○<span class="string">&quot;hostPort:containerPort</span></span><br><span class="line"><span class="string">○containerPort</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323174025226.png" alt="image-20220323174025226"></p><p>现在我们进入了，centos容器。（-i -t可以合在一起写成-it）</p><h4 id="2列出当前所有正在运行的容器"><a href="#2列出当前所有正在运行的容器" class="headerlink" title="2列出当前所有正在运行的容器"></a>2<strong>列出当前所有正在运行的容器</strong></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps [OPTIONS]</span><br><span class="line">OPTIONS说明：</span><br><span class="line">●-a :列出当前所有正在运行的容器+历史上运行过的</span><br><span class="line">●-l :显示最近创建的容器。</span><br><span class="line">●-n：显示最近n个创建的容器。</span><br><span class="line">●-q :静默模式，只显示容器编号。</span><br><span class="line">●--no-trunc :不截断输出。</span><br></pre></td></tr></table></figure><p>在刚刚centos容器启动的情况下新打开一个终端窗口<br><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323174522574.png" alt="image-20220323174522574"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323174510415.png" alt="image-20220323174510415"></p><p>可以看到正在运行的容器ID，跟我们启动的centos容器一致。这表示我们通过docker在centos上运行了一个centos容器。</p><h4 id="3退出容器"><a href="#3退出容器" class="headerlink" title="3退出容器"></a>3退出容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">exit</span>：容器<span class="string">&quot;停止退出；</span></span><br><span class="line"><span class="string">ctrl+d：容器&quot;</span>停止退出</span><br><span class="line"></span><br><span class="line">ctrl+P+Q：容器<span class="string">&quot;不停止退出</span></span><br></pre></td></tr></table></figure><p>先exit退出我们运行的centos容器实例。然后，我们以centosByDocker为名字，生成一个centos的容器实例：</p><p><code>docker run -it --name centosByDocker centos</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323175241367.png" alt="image-20220323175241367"></p><p>然后按ctrl+P+Q，（按了之后还要按一下回车）回到我们的宿主机：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323175353435.png" alt="image-20220323175353435"></p><p>然后执行<code>docker ps</code>可以看到容器<strong>没有关闭</strong>。说明都没有停止推出容器</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323175541956.png" alt="image-20220323175541956"></p><h4 id="4启动容器（start-与-run区分开）-amp-重启容器（restart）"><a href="#4启动容器（start-与-run区分开）-amp-重启容器（restart）" class="headerlink" title="4启动容器（start 与 run区分开） &amp; 重启容器（restart）"></a>4<strong>启动容器（start 与 run区分开） &amp; 重启容器（restart）</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start是启动已有容器，docker run是新建并启动容器，这里需要区分开。</span><br><span class="line">启动容器：docker start 容器ID/容器Names即可启动容器。</span><br><span class="line">重启容器：docker restart 容器ID/容器Names</span><br></pre></td></tr></table></figure><p>这些好像都能不能进去</p><h4 id="5回到已经退出的但是仍然在运行的容器"><a href="#5回到已经退出的但是仍然在运行的容器" class="headerlink" title="5回到已经退出的但是仍然在运行的容器"></a>5回到已经退出的但是仍然在运行的容器</h4><p><code>docker attach 容器ID、容器Names</code>能重新进到正在运行的容器中</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323180948856.png" alt="image-20220323180948856"></p><p><code>docker exec -it 容器ID bashShell</code></p><p>这个命令不同于上面的命令，进入到了指定id的容器内部并将【bashshell命令】执行结果返回到宿主机上</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323181244914.png" alt="image-20220323181244914"></p><p><code>nsenter</code>命令[传送门](<a href="https://www.cnblogs.com/xhyan/p/6593075.html">Docker容器进入的4种方式 - 純黑色 - 博客园 (cnblogs.com)</a>)</p><h4 id="6停止容器-amp-强制停止容器"><a href="#6停止容器-amp-强制停止容器" class="headerlink" title="6停止容器 &amp; 强制停止容器"></a><strong>6停止容器 &amp; 强制停止容器</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">停止容器：`docker stop 容器ID/容器name`</span><br><span class="line">强制停止容器：`docker kill 容器ID/容器name`</span><br></pre></td></tr></table></figure><p>停止容器</p><h4 id="7删除已停止的容器"><a href="#7删除已停止的容器" class="headerlink" title="7删除已停止的容器"></a><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323180047806.png" alt="image-20220323180047806">7删除已停止的容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器ID：删除之前需要停止容器。</span><br><span class="line">docker rm -f 容器ID：强制删除，容器运行时可以直接删除。</span><br><span class="line">一次性删除多个容器：</span><br><span class="line">●docker rm -f $(docker ps -a -q)</span><br><span class="line">●docker ps -a -q | xargs docker rm</span><br><span class="line">●docker rm 容器ID1 容器ID2 ..</span><br></pre></td></tr></table></figure><p><font color='red'> 注：删除的时候不需要吧容器ID写全，写两位就可以，删除前请核对，防止误删。 </font></p><h4 id="8重要容器命令"><a href="#8重要容器命令" class="headerlink" title="8重要容器命令"></a>8重要容器命令</h4><p><strong>1. 启动守护式容器</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令：docker run -d 镜像名[:TAG]/镜像ID</span><br><span class="line">（后台启动）启动守护容器centos：docker run -d --name centosde centos</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323182922704.png" alt="image-20220323182922704"></p><p><strong>问题：</strong>然后docker ps进行查看, 会发现容器已经退出，并没有处于运行状态。</p><p>如果在运行的话，会发现，其实已经运行于后台了,应该可以通过docker ps -a显示</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323182956301.png" alt="image-20220323182956301"></p><p><strong>很重要的要说明的一点:</strong> </p><p>Docker容器后台运行，就必须有一个前台进程。</p><p>容器运行的命令如果不是那些一直挂起的命令（比如运行top，tail），就是会自动退出的。<br>这个是docker的机制问题,比如你的web容器,我们以nginx为例，正常情况下,我们配置启动服务只需要启动相应的service即可。例如service nginx start但是,这样做，nginx为后台进程模式运行，就导致docker前台没有运行的应用,，这样的容器后台启动后,会立即自杀因为他觉得他没事可做了。所以，最佳的解决方案是,将你要运行的程序以前台进程的形式运行。</p><p><strong>2. 查看容器日志</strong> </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">命令：docker logs -f -t --tail 数字 容器ID </span><br><span class="line">●-t：表示加入时间戳</span><br><span class="line">●-f：表示跟随最新的日志打印</span><br><span class="line">●--tail 数字：表示显示最后多少条</span><br></pre></td></tr></table></figure><p>后台运行centos，循环打印一句话：<code>docker run -d centos /bin/sh -c &quot;while true;do echo hello ladidol world;sleep 2;done&quot;</code></p><p>这个能显示到docker ps中我是没想到的</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323185149116.png" alt="image-20220323185149116"></p><p>查询一下容器日志：<code>docker logs -f -t --tail 10 容器ID/容器NAME</code></p><p>这里加了-f会不停的追加，如果不加就只会打印–tail指定数目的记录。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323185342763.png" alt="image-20220323185342763"></p><p>ctrl+ z 推出查看容器日志</p><p><strong>3. 查看容器内的进程 &amp; 查看容器内部细节</strong><br>查看容器内进程命令：<code>docker top 容器ID/容器名</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323185721124.png" alt="image-20220323185721124"></p><p><strong>4. 进入正在运行的容器并以命令行交互</strong><br>docker run -it centos 创建并启动一个centos容器，然后ctrl+p+q退出容器但不关闭。<br>那么如何再次进入这个容器呢？<br>●使用<code>docker attach </code>容器ID&#x2F;容器name命令即可再次进入容器。<br>●使用<code>docker exec -it </code>容器ID&#x2F;容器name &#x2F;bin&#x2F;bash</p><p>前面有讲到：</p><p><code>docker attach 容器ID、容器Names</code>能重新进到正在运行的容器中</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323180948856.png" alt="image-20220323180948856"></p><p><code>docker exec -it 容器ID bashShell</code></p><p>这个命令不同于上面的命令，进入到了指定id的容器内部并将【bashshell命令】执行结果返回到宿主机上</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323181244914.png" alt="image-20220323181244914"></p><p>exec与attach的区别：<br>attach 直接进入容器启动命令的终端，不会启动新的进程；<br>exec 是在容器中打开新的终端，并且可以启动新的进程；<br>通过exec进入的容器，使用exit退出时，容器不会关闭。</p><p><strong>关于-i -t 与 -it的区别：</strong>i是创建标准io接口，t是伪造tty终端；如果光一个i的话，虽然也可以输入命令得到输出，但结果很不友好，自己可以试试；如果光一个t，就只有一个tty，你输入什么都没有反应，因为你没有开放对应的输入接口；正确的应该是-it，开放接口并创建伪tty。</p><p><strong>5. 从容器内拷贝文件到主机上</strong><br>命令：<code>docker cp </code> 容器ID:容器内路径 目的主机路径</p><h3 id="4-3总结"><a href="#4-3总结" class="headerlink" title="4.3总结"></a>4.3总结</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638248364830-ec5bca6d-ba97-4138-adb0-e5e0800b1a40.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">attach    Attach to a running container                 # 当前 shell 下 attach 连接指定运行镜像</span><br><span class="line">build     Build an image from a Dockerfile              # 通过 Dockerfile 定制镜像</span><br><span class="line">commit    Create a new image from a container changes   # 提交当前容器为新的镜像</span><br><span class="line">cp        Copy files/folders from the containers filesystem to the host path   #从容器中拷贝指定文件或者目录到宿主机中</span><br><span class="line">create    Create a new container                        # 创建一个新的容器，同 run，但不启动容器</span><br><span class="line">diff      Inspect changes on a container&#x27;s filesystem   # 查看 docker 容器变化</span><br><span class="line">events    Get real time events from the server          # 从 docker 服务获取容器实时事件</span><br><span class="line">exec      Run a command in an existing container        # 在已存在的容器上运行命令</span><br><span class="line">export    Stream the contents of a container as a tar archive   # 导出容器的内容流作为一个 tar 归档文件[对应 import ]</span><br><span class="line">history   Show the history of an image                  # 展示一个镜像形成历史</span><br><span class="line">images    List images                                   # 列出系统当前镜像</span><br><span class="line">import    Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]</span><br><span class="line">info      Display system-wide information               # 显示系统相关信息</span><br><span class="line">inspect   Return low-level information on a container   # 查看容器详细信息</span><br><span class="line">kill      Kill a running container                      # kill 指定 docker 容器</span><br><span class="line">load      Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save]</span><br><span class="line">login     Register or Login to the docker registry server    # 注册或者登陆一个 docker 源服务器</span><br><span class="line">logout    Log out from a Docker registry server          # 从当前 Docker registry 退出</span><br><span class="line">logs      Fetch the logs of a container                 # 输出当前容器日志信息</span><br><span class="line">port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT    # 查看映射端口对应的容器内部源端口</span><br><span class="line">pause     Pause all processes within a container        # 暂停容器</span><br><span class="line">ps        List containers                               # 列出容器列表</span><br><span class="line">pull      Pull an image or a repository from the docker registry server   # 从docker镜像源服务器拉取指定镜像或者库镜像</span><br><span class="line">push      Push an image or a repository to the docker registry server    # 推送指定镜像或者库镜像至docker源服务器</span><br><span class="line">restart   Restart a running container                   # 重启运行的容器</span><br><span class="line">rm        Remove one or more containers                 # 移除一个或者多个容器</span><br><span class="line">rmi       Remove one or more images             # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span><br><span class="line">run       Run a command in a new container              # 创建一个新的容器并运行一个命令</span><br><span class="line">save      Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 load]</span><br><span class="line">search    Search for an image on the Docker Hub         # 在 docker hub 中搜索镜像</span><br><span class="line">start     Start a stopped containers                    # 启动容器</span><br><span class="line">stop      Stop a running containers                     # 停止容器</span><br><span class="line">tag       Tag an image into a repository                # 给源中镜像打标签</span><br><span class="line">top       Lookup the running processes of a container   # 查看容器中运行的进程信息</span><br><span class="line">unpause   Unpause a paused container                    # 取消暂停容器</span><br><span class="line">version   Show the docker version information           # 查看 docker 版本号</span><br><span class="line">wait      Block until a container stops, then print its exit code   # 截取容</span><br></pre></td></tr></table></figure><h2 id="五、Dockers镜像"><a href="#五、Dockers镜像" class="headerlink" title="五、Dockers镜像"></a>五、Dockers镜像</h2><h3 id="5-1-镜像是什么-amp-镜像的特点"><a href="#5-1-镜像是什么-amp-镜像的特点" class="headerlink" title="5.1 镜像是什么 &amp; 镜像的特点"></a>5.1 镜像是什么 &amp; 镜像的特点</h3><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p><p> <strong>1. UnionFS（联合文件系统）</strong> </p><p>UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p><p> <strong>2.  Docker镜像加载原理</strong> </p><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统称为UnionFS。</p><p>bootfs(boot file system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux&#x2F;Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs (root file system) ，在bootfs之上。包含的就是典型 Linux 系统中的 &#x2F;dev, &#x2F;proc, &#x2F;bin, &#x2F;etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638248743091-a2137397-2cc7-42ed-9625-dc30893165ca.png" alt="image.png"></p><p>思考：平时我们安装进虚拟机的CentOS都是好几个G，为什么docker这里才200M？？<br>对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的linux发行版, bootfs基本是一致的, rootfs会有差别, 因此不同的发行版可以公用bootfs。</p><p><strong>3. 镜像分层</strong><br>我们在pull镜像的时候，可以看到docker的镜像好像是一层一层的在下载。<br>拿tomcat为例，一个单独的tomcat一般只有100多M，但是docker拉取的镜像有400多M，这是为什么？<br>因为tomcat的运行不仅仅只需要tomcat，还需要java、centos等等依赖，所以docker的tomcat镜像中会包含有java、centos等等，所以会很大。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638249258111-da897ffa-ddbd-4d28-b025-c5a090f6f4bb.png" alt="image.png"></p><p><strong>为什么镜像要采用这种分层结构？</strong><br>最大的一个好处就是 <strong>- 共享资源。</strong><br>比如：有多个镜像都从相同的 base 镜像构建而来，那么宿主机只需在磁盘上保存一份base镜像，同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p><p><strong>4.镜像的特点</strong></p><p>Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。</p><h3 id="5-2-Docker镜像commit操作补充"><a href="#5-2-Docker镜像commit操作补充" class="headerlink" title="5.2 Docker镜像commit操作补充"></a><strong>5.2 Docker镜像commit操作补充</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit 提交容器副本使之成为一个新的镜像</span><br><span class="line">docker commit -m=“提交的描述信息” -a=“作者” 容器ID 要创建的目标镜像名:[标签名]</span><br></pre></td></tr></table></figure><p> <strong>案例演示</strong><br> <strong>① 拉取tomcat镜像并运行</strong><br>从Hub上下载tomcat镜像到本地并成功运行：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里将host的8888端口映射到容器的8080端口</span></span><br><span class="line">docker run -it -p 8888:8080 tomcat</span><br></pre></td></tr></table></figure><p> 我这里虚拟机没有GUI，所以需要通过windows的浏览器来访问tomcat，先看看防火墙是否开启以及是否开放了8888端口的访问权限。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-port=8888/tcp</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>然后访问还是404。搜了一圈，解决办法：<a href="https://blog.csdn.net/qq_40891009/article/details/103898876">Docker方式启动tomcat,访问首页出现404错误</a><br>是因为docker的tomcat中&#x2F;usr&#x2F;local&#x2F;tomcat下的webapps文件夹是空的，而原本应该在webapps文件夹下的内容都在旁边的webapps.dist文件夹中。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入正在运行的容器目录</span></span><br><span class="line">docer exec -it tomcat容器ID /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将webapps.dist命名为webapps即可，在此之前可以吧webapps重命名成别的名字</span></span><br><span class="line">mv webapps webapps2</span><br><span class="line">mv webapps.dist webapps</span><br></pre></td></tr></table></figure><p>访问成功：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638257655855-7f203155-75fd-48ec-8c66-969df3b1a8cb.png" alt="image.png"></p><p>退出（停止）tomcat：ctrl+c。</p><p>如果使用docker run -it -P tomcat命令：随机分配一个端口号，映射给8080</p><p> ② 使用commit提交我们修改过的tomcat<br><code>docker commit -m &quot;rename webapps.dist to webapps&quot; -a &quot;mrlinxi&quot; 85fc7f7c0182 mrlinxi/tomcat:0.1</code></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22423156/1638263596661-0b994177-b1fd-4d2f-8852-1d8808e8930d.png" alt="image.png"></p><p>新建并运行一个我们自己修改过的tomcat容器</p><p><code>docker run -it -p 3333:8080 mrlinxi/tomcat:0.1 </code>  注意版本号不要掉了不然docker会到仓库中找latest版本的mrlinxi&#x2F;tomcat，显然是找不到的。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638272125196-1db0e1c9-e510-41bd-835b-2c0e03ada7ae.png" alt="image.png"></p><p>访问成功</p><p> ③ 后台运行-d </p><p><code>docker run -d -p 8888:8080 mrlinxi/tomcat:0.1 </code>  后台启动tomcat。</p><p>可以通过<code>docker attach 容器ID</code> 或者<code>docker exec -it 容器ID</code>进入交互页面。</p><h2 id="六、Docker容器数据卷"><a href="#六、Docker容器数据卷" class="headerlink" title="六、Docker容器数据卷"></a>六、Docker容器数据卷</h2><h3 id="6-1-容器数据卷简述"><a href="#6-1-容器数据卷简述" class="headerlink" title="6.1 容器数据卷简述"></a><strong>6.1 容器数据卷简述</strong></h3><p>先来看看Docker的理念：</p><p>●将运用与运行的环境打包形成容器运行 ，运行可以伴随着容器，但是我们对数据的要求希望是持久化的</p><p>●容器之间希望有可能共享数据</p><p>Docker容器产生的数据，如果不通过docker commit生成新的镜像，使得数据做为镜像的一部分保存下来，那么当容器删除后，数据自然也就没有了。为了能保存数据在docker中我们使用卷。</p><p>一句话：有点类似我们Redis里面的rdb和aof文件。</p><p>卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或共享数据的特性：卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷。</p><p>特点：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1数据卷可在容器之间共享或重用数据</span><br><span class="line"></span><br><span class="line">2卷中的更改可以直接生效</span><br><span class="line"></span><br><span class="line">3数据卷中的更改不会包含在镜像的更新中</span><br><span class="line"></span><br><span class="line">4数据卷的生命周期一直持续到没有容器使用它为止</span><br><span class="line"></span><br><span class="line">5容器卷也可以完成主机到容器、容器到主机的数据共享（类似于 docker cp）</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-2-容器数据卷案例"><a href="#6-2-容器数据卷案例" class="headerlink" title="6.2 容器数据卷案例"></a>6.2 容器数据卷案例</h3><ol><li><h4 id="命令添加"><a href="#命令添加" class="headerlink" title="命令添加"></a>命令添加</h4></li></ol><p>命令：docker run -it -v &#x2F;宿主机绝对路径目录:&#x2F;容器内目录  镜像名</p><p>添加之前：</p><p>前者为容器内，后者为宿主机；</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323200254912.png" alt="image-20220323200254912"></p><p>执行</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it -v /myDataVolume:/dataVolumeContainer centos</span><br></pre></td></tr></table></figure><p>可以看到两边都生成了对应的文件夹：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323200831549.png" alt="image-20220323200831549"></p><p>备注：Docker挂载主机目录Docker访问出现cannot open directory .: Permission denied</p><p>解决办法：在挂载目录后多加一个–privileged&#x3D;true参数即可</p><p>检查是否挂载成功：<code>docker inspect 容器ID</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323201328553.png" alt="image-20220323201328553"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323201339368.png" alt="image-20220323201339368"></p><p>已经成功了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638276849687-1d2ac968-80a4-4fc5-97f6-2610fac0d50e.png" alt="image.png">可以看到实现了宿主机跟容器之间的双向同步</p><p>② 容器停止退出后，主机修改后数据是否同步<br>容器先停止退出、主机修改host.txt、容器重启进入、查看主机修改过的host.log</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638277144504-440a8e3b-68a9-407b-82d2-5c17da524f0d.png" alt="image.png"></p><p><strong>③ 命令（带权限）</strong></p><p>带权限的命令：</p><p><code>docker run -it -v /宿主机绝对路径目录:/容器内目录:ro 镜像名</code><br>ro表示read only只读。</p><p>执行：<code>docker run -it -v /myDataVolume:/dataVolumeContainer:ro centos</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638278104965-502de020-2f94-46c8-8a43-8fa5064de443.png" alt="image.png"><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638278136092-718bc608-09ad-4fd1-bdee-7d7cfa30b009.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638278242942-ba82d0ba-0b90-44f1-b339-5f67702ca552.png" alt="image.png"></p><ol start="2"><li>DockerFile添加</li></ol><p>具体描述放到后面讲，这里先使用。</p><p><strong>主机根目录下新建mydocker文件夹并进入</strong>：<code>mkdir mydocker</code></p><p><strong>可在Dockerfile中使用</strong></p><p><strong>VOLUME指令来给镜像添加一个或多个数据卷</strong>：</p><p><code>VOLUME[&quot;/dataVolumeContainer&quot;,&quot;/dataVolumeContainer2&quot;,&quot;/dataVolumeContainer3&quot;]</code></p><p><strong>说明</strong>：</p><p>出于可移植和分享的考虑，用-v 主机目录:容器目录这种方法不能够直接在Dockerfile中实现。</p><p>由于宿主机目录是依赖于特定宿主机的，并不能够保证在所有的宿主机上都存在这样的特定目录。</p><p><strong>File构建：</strong><br>创建一个文件Dockerfile，然后添加以下内容：<br><code>vim Dockerfile</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">volume <span class="built_in">test</span></span></span><br><span class="line">FROM centos   </span><br><span class="line">VOLUME [&quot;/dataVolumeContainer1&quot;,&quot;/dataVolumeContainer2&quot;]</span><br><span class="line">CMD echo &quot;finished,--------success1&quot;</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323202205652.png" alt="image-20220323202205652"></p><p>build后生成镜像：获得一个新的镜像<br><code>docker build -f /mydocker/Dockerfile -t mrlinxi/centos .</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323202220708.png" alt="image-20220323202220708"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323202253780.png" alt="image-20220323202253780"></p><p>run我们设置好的容器：<br><code>docker run -it 27ffb21c539d /bin/bash</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323202458563.png" alt="image-20220323202458563"></p><p>可以看到容器内已经创建好了卷地址。</p><p><strong>通过上述步骤，容器内的卷目录地址已经知道，对应的主机目录地址哪？？</strong></p><p>通过<code>docker inspect 容器ID</code>查看：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638280759530-2b3ce964-ca52-49f4-a35b-3e3f99893544.png" alt="image.png"></p><h3 id="6-3-数据卷容器"><a href="#6-3-数据卷容器" class="headerlink" title="6.3 数据卷容器"></a>6.3 数据卷容器</h3><ol><li><strong>总体介绍</strong></li></ol><p>命名的容器挂载数据卷，其它容器通过挂载这个(父容器)实现数据共享，挂载数据卷的容器，称之为数据卷容器。实际上就是通过父容器传递数据卷的配置，通过传递数据卷的配置，将不同容器挂载到宿主机的相同目录下，从而实现各容器之间的数据传递。</p><p>以上一步新建的镜像mrlinxi&#x2F;centos为模板并运行容器dc01&#x2F;dc02&#x2F;dc03，他们已经具有容器卷&#x2F;dataVolumeContainer1和&#x2F;dataVolumeContainer2</p><ol start="2"><li><strong>容器间传递共享(–volumes-from)</strong></li></ol><p>先启动一个父容器dc01，在dataVolumeContainer2中新增内容</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name dc01 mrlinxi/centos</span><br><span class="line">cd dataVolumeContainer2</span><br><span class="line">touch doc1.txt</span><br><span class="line"></span><br><span class="line">然后ctrl+p+q退出</span><br></pre></td></tr></table></figure><p>dc02&#x2F;dc03继承自dc01，通过–volumes-from继承<br><code>docker run -it --name dc02 --volumes-from dc01 mrlinxi/centos</code><br>然后在dc02和dc03的dataVolumeContainer2中分别添加各自的内容</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name dc02 --volumes-from dc01 mrlinxi/centos</span><br><span class="line">cd dataVolumeContainer2</span><br><span class="line">touch doc2.txt</span><br><span class="line"></span><br><span class="line">docker run -it --name dc03 --volumes-from dc01 mrlinxi/centos</span><br><span class="line">cd dataVolumeContainer2</span><br><span class="line">touch doc3.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638325961173-0a0bfecb-ef9a-48ed-9753-5fb6d76c2ce2.png" alt="image.png"></p><p>回到dc01可以看到02&#x2F;03各自添加的都能共享了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638326029145-e9bbfb14-3537-4197-85ef-3fcec6f7a1d8.png" alt="image.png"></p><p>同理，dc02跟dc03里面都有其他容器的数据<img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638326179150-1b3890a3-61c0-4c35-aff9-a726cf11647f.png" alt="image.png"></p><p>删除dc01，dc02修改后dc03可否访问</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638326385031-9f225650-e7a4-45c3-bc8b-667c8a995f43.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638326404754-e815bf7c-19f5-422e-90b3-979e9d2ae71f.png" alt="image.png"></p><p>删除dc01后，dc02和dc03之间的数据共享并不受影响。</p><p><strong>结论</strong>：容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止</p><h2 id="七-DockerFile解析"><a href="#七-DockerFile解析" class="headerlink" title="七. DockerFile解析"></a>七. DockerFile解析</h2><h3 id="7-1-DockerFile简介"><a href="#7-1-DockerFile简介" class="headerlink" title="7.1 DockerFile简介"></a>7.1 DockerFile简介</h3><p>Dockerfile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本。<br>构建三步骤：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">●编写Dockerfile文件：必须符合file规范</span><br><span class="line">●docker build：docker build -f /mydocker/Dockerfile -t mrlinxi/centos . 通过docker build获得一个自定义的镜像</span><br><span class="line">●docker run</span><br></pre></td></tr></table></figure><p>文件长什么样？下面就是我们使用的centos的Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> centos-7-x86_64-docker.tar.xz /</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.schema-version=<span class="string">&quot;1.0&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.name=<span class="string">&quot;CentOS Base Image&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.vendor=<span class="string">&quot;CentOS&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.license=<span class="string">&quot;GPLv2&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.build-date=<span class="string">&quot;20201113&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.opencontainers.image.title=<span class="string">&quot;CentOS Base Image&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.opencontainers.image.vendor=<span class="string">&quot;CentOS&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.opencontainers.image.licenses=<span class="string">&quot;GPL-2.0-only&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.opencontainers.image.created=<span class="string">&quot;2020-11-13 00:00:00+00:00&quot;</span></span></span><br><span class="line"><span class="comment"># default cmd</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="7-2-DockerFile构建过程解析"><a href="#7-2-DockerFile构建过程解析" class="headerlink" title="7.2 DockerFile构建过程解析"></a>7.2 DockerFile构建过程解析</h3><p>Dockerfile内容基础知识：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 每条保留字指令都必须为大写字母且后面要跟随至少一个参数</span><br><span class="line">- 指令按照从上到下，顺序执行</span><br><span class="line">- \#表示注释</span><br><span class="line">- 每条指令都会创建一个新的镜像层，并对镜像进行提交</span><br></pre></td></tr></table></figure><p>Docker执行Dockerfile的大致流程：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- （1）docker从基础镜像运行一个容器</span><br><span class="line">- （2）执行一条指令并对容器作出修改</span><br><span class="line">- （3）执行类似docker commit的操作提交一个新的镜像层</span><br><span class="line">- （4）docker再基于刚提交的镜像运行一个新容器</span><br><span class="line">- （5）执行dockerfile中的下一条指令直到所有指令都执行完成</span><br></pre></td></tr></table></figure><p>总结：</p><p>从应用软件的角度来看，Dockerfile、Docker镜像与Docker容器分别代表软件的三个不同阶段，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- Dockerfile是软件的原材料</span><br><span class="line">- Docker镜像是软件的交付品</span><br><span class="line">- Docker容器则可以认为是软件的运行态。</span><br></pre></td></tr></table></figure><p>Dockerfile面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可，合力充当Docker体系的基石。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638329841397-6503d73a-3107-4e68-85b5-5d2f690e19fb.png" alt="img"></p><ol><li>Dockerfile，需要定义一个Dockerfile，Dockerfile定义了进程需要的一切东西。Dockerfile涉及的内容包括执行代码或者是<strong>文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程</strong>(当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制)等等;</li><li>Docker镜像，在用Dockerfile定义一个文件之后，docker build时会产生一个Docker镜像，当运行 Docker镜像时，会真正开始提供服务;</li><li>Docker容器，容器是直接提供服务的。</li></ol><h3 id="7-3-DockerFile体系结构-保留字指令"><a href="#7-3-DockerFile体系结构-保留字指令" class="headerlink" title="7.3 DockerFile体系结构(保留字指令)"></a>7.3 DockerFile体系结构(保留字指令)</h3><p><strong>FROM</strong>：基础镜像，当前新镜像是基于哪个镜像的。基于什么镜像进行修改；<br><strong>MAINTAINER</strong>：镜像维护者的姓名和邮箱地址；<br><strong>RUN</strong>：容器构建时需要运行的命令；<br><strong>EXPOSE</strong>：当前容器对外暴露出的端口；<br><strong>WORKDIR</strong>：指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点，没写默认根目录<code>/</code>；<br><strong>ENV</strong>：用来在构建镜像过程中设置环境变量；<br>例如：<code>ENV MY_PATH /usr/mytest</code> 这个环境变量可以在后续的任何RUN指令中使用，这就如同在命令前面指定了环境变量前缀一样；也可以在其它指令中直接使用这些环境变量。<br>比如：<code>WORKDIR $MY_PATH</code><br><strong>ADD</strong>：将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包；<br><strong>COPY</strong>：类似ADD，拷贝文件和目录到镜像中。将从构建上下文目录中 &lt;源路径&gt; 的文件&#x2F;目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置；  <code>COPY src dest</code>   <code>COPY [&quot;src&quot;, &quot;dest&quot;]</code><br><strong>ADD</strong>跟<strong>COPY</strong>的区别在于ADD在复制后会自动解压缩和处理URL，而COPY仅仅进行复制。<br><strong>VOLUME</strong>：容器数据卷，用于数据保存和持久化工作；<br><strong>CMD</strong>：指定一个容器启动时要运行的命令；Dockerfile 中可以有多个 CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数替换（后面案例会具体说明）；<br><strong>ENTRYPOINT</strong>：指定一个容器启动时要运行的命令；ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数；<br><strong>CMD</strong>与<strong>ENTRYPOINT</strong>的区别是CMD存在多个时只有最后一个生效以及CMD会被docker run之后的参数替换；而ENTRYPOINT是追加命令。<br><strong>ONBUILD</strong>：当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发<br><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638330806027-f7d631f5-99cd-4831-aea3-e9367ddf9d84.png" alt="img"></p><p>.gitlab-ci.yml文件中的</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一些变量, 下面各阶段会使用</span></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">server_ip:</span> <span class="number">106.12</span><span class="number">.167</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">jar_name:</span> <span class="string">core-1.0-SNAPSHOT.jar</span></span><br><span class="line">  <span class="attr">java_path:</span> <span class="string">/usr/local/jdk/jdk1.8.0_321/bin</span></span><br><span class="line">  <span class="attr">TAG:</span> <span class="string">official-website:v1.0</span>  <span class="comment"># 镜像名称</span></span><br><span class="line">  <span class="attr">CONTAINER_NAME:</span> <span class="string">official-website-home</span></span><br><span class="line">  <span class="attr">PORT:</span> <span class="number">8999</span></span><br><span class="line">  <span class="attr">DOCKER_DRIVER:</span> <span class="string">overlay2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义执行的各个阶段及顺序</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 maven 镜像打包项目</span></span><br><span class="line"><span class="attr">maven-build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">maven:3.5.0-jdk-8</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">package</span> <span class="string">-B</span> <span class="string">-Dmaven.test.skip=true</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">m2-repo</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.m2/repository</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">core/target/$jar_name</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">build-master:</span> <span class="comment"># 定义的 Jobs 之一，用于构建 Docker 镜像。负责执行 deploy 这一流程。具体执行 build 和 run。</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">rmi</span> <span class="string">-f</span> <span class="string">$TAG</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">$TAG</span> <span class="string">.</span> <span class="comment"># 构件镜像</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">rm</span> <span class="string">-f</span> <span class="string">$CONTAINER_NAME</span> <span class="string">||</span> <span class="literal">true</span> <span class="comment"># 删除容器</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">--restart=always</span> <span class="string">--name</span> <span class="string">$CONTAINER_NAME</span> <span class="string">--net=host</span> <span class="string">$TAG</span> <span class="comment"># 运行容器</span></span><br><span class="line">  <span class="attr">only:</span> <span class="comment"># 指定哪些branch的push commit会触发执行该job，本例子指定只有master才会执行deploy这个job</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里是gitlab上面项目的dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/tmp&quot;</span>,<span class="string">&quot;/log&quot;</span>]</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./core/target/core-1.0-SNAPSHOT.jar core-1.0-SNAPSHOT.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8999</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;-Xmx400m&quot;</span>,<span class="string">&quot;./core-1.0-SNAPSHOT.jar&quot;</span>,<span class="string">&quot;&amp;&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="7-4-案例"><a href="#7-4-案例" class="headerlink" title="7.4 案例"></a>7.4 案例</h3><h4 id="1-Base镜像-scratch"><a href="#1-Base镜像-scratch" class="headerlink" title="1. Base镜像(scratch)"></a>1. Base镜像(scratch)</h4><p>Docker Hub 中 99% 的镜像都是通过在 base 镜像中安装和配置需要的软件构建出来的。</p><h4 id="2-自定义镜像mycentos"><a href="#2-自定义镜像mycentos" class="headerlink" title="2. 自定义镜像mycentos"></a>2. 自定义镜像mycentos</h4><p>Hub默认CentOS镜像什么情况：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638339665774-80743dc3-bd3f-4781-bd49-68edecce815a.png" alt="img"></p><p>自定义mycentos目的使我们自己的镜像具备如下：</p><p>登陆后的默认路径、vim编辑器、查看网络配置ifconfig支持</p><p>① 编写自定义镜像的Dockerfile</p><p>我们在宿主机的<code>/mydocker</code>文件夹下，新建一个Dockerfile：<code>vim Dockerfile2</code>，写入下面的内容</p><p>这是.gitlab-ci.yml文件中的东西</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一些变量, 下面各阶段会使用</span></span><br><span class="line">variables:</span><br><span class="line">  server_ip: <span class="number">106.12</span>.<span class="number">167.1</span></span><br><span class="line">  jar_name: core-<span class="number">1.0</span>-SNAPSHOT.jar</span><br><span class="line">  java_path: /usr/local/jdk/jdk1.<span class="number">8.0</span>_321/bin</span><br><span class="line">  TAG: official-website:v1.<span class="number">0</span>  <span class="comment"># 镜像名称</span></span><br><span class="line">  CONTAINER_NAME: official-website-home</span><br><span class="line">  PORT: <span class="number">8999</span></span><br><span class="line">  DOCKER_DRIVER: overlay2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义执行的各个阶段及顺序</span></span><br><span class="line">stages:</span><br><span class="line">  - build</span><br><span class="line">  - deploy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 maven 镜像打包项目</span></span><br><span class="line">maven-build:</span><br><span class="line">  stage: build</span><br><span class="line">  image: maven:<span class="number">3.5</span>.<span class="number">0</span>-jdk-<span class="number">8</span></span><br><span class="line">  script:</span><br><span class="line">    - mvn package -B -Dmaven.test.skip=true</span><br><span class="line">  cache:</span><br><span class="line">    key: m2-repo</span><br><span class="line">    paths:</span><br><span class="line">      - .m2/repository</span><br><span class="line">  artifacts:</span><br><span class="line">    paths:</span><br><span class="line">      - core/target/$jar_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">build-master: <span class="comment"># 定义的 Jobs 之一，用于构建 Docker 镜像。负责执行 deploy 这一流程。具体执行 build 和 run。</span></span><br><span class="line">  stage: deploy</span><br><span class="line">  script:</span><br><span class="line">    - docker rmi -f $TAG</span><br><span class="line">    - docker build -t $TAG . <span class="comment"># 构件镜像</span></span><br><span class="line">    - docker rm -f $CONTAINER_NAME || true <span class="comment"># 删除容器</span></span><br><span class="line">    - docker <span class="keyword">run</span><span class="language-bash"> -d --restart=always --name <span class="variable">$CONTAINER_NAME</span> --net=host <span class="variable">$TAG</span> <span class="comment"># 运行容器</span></span></span><br><span class="line">  only: <span class="comment"># 指定哪些branch的push commit会触发执行该job，本例子指定只有master才会执行deploy这个job</span></span><br><span class="line">    - master</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>② 构建自定义镜像——docker build</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f /mydocker/Dockerfile2 -t mycentos:0.1 .</span><br></pre></td></tr></table></figure><p>build语句最后面一个<code>.</code>表示当前目录。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638342897692-120c3467-e33e-45a7-b872-f384e5ea9e2d.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638342983932-5d1acdd1-4c9e-4181-b4ea-b7f569d245dc.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638342971620-02108df8-58de-4c01-b98b-fb160e364e7d.png" alt="img"></p><h4 id="③-运行自定义镜像——docker-run"><a href="#③-运行自定义镜像——docker-run" class="headerlink" title="③ 运行自定义镜像——docker run"></a>③ 运行自定义镜像——docker run</h4><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638343174481-5f9a3806-9c45-4b0f-9dc2-463a9ebc1a23.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it mycentos:0.1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638343199833-59ddfef7-fdbf-4eb8-a0dd-15e3eb71572d.png" alt="img"></p><p>默认目录是&#x2F;usr&#x2F;locl，可以看到我们自己的新镜像已经支持vim&#x2F;ifconfig命令，拓展成功。</p><h4 id="④-列出镜像的变更历史"><a href="#④-列出镜像的变更历史" class="headerlink" title="④ 列出镜像的变更历史"></a>④ 列出镜像的变更历史</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker history 镜像名</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638343381128-8ce9fb4b-13ca-44ce-81a0-d33fcd71fd56.png" alt="img"></p><h4 id="3-CMD-x2F-ENTRYPOINT-镜像案例"><a href="#3-CMD-x2F-ENTRYPOINT-镜像案例" class="headerlink" title="3. CMD&#x2F;ENTRYPOINT 镜像案例"></a>3. CMD&#x2F;ENTRYPOINT 镜像案例</h4><p>CMD&#x2F;ENTRYPOINT都是指定一个容器启动时要运行的命令</p><h5 id="①-CMD镜像案例"><a href="#①-CMD镜像案例" class="headerlink" title="① CMD镜像案例"></a>① CMD镜像案例</h5><p>Dockerfile 中可以有多个 CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数替换。</p><p>这里以tomcat为例，tomcat的dockerfile最后一句是<img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638343671342-f35165d2-de7f-4432-83da-c923ee3dff59.png" alt="img"></p><p>正常我们启动tomcat的命令是：<code>docker run -it -p 主机端口:8080 tomcat</code> </p><p>现在我们执行这样一句命令：<code>docker run -it -p 8888:8080 tomcat ls -l</code></p><p>这样就相当于在tomcat的dockerfile后面又加了一句<code>CMD ls -l</code>，因此会覆盖掉之前的语句。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638343887509-4f0065c1-f5e1-46c5-9c20-df16d1955d1d.png" alt="img"></p><p>此时tomcat并没有运行，只是查看了默认路径下的文件。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638343953044-f74142c5-8327-4893-9634-e0fc4de40da7.png" alt="img"></p><h5 id="②-ENTRYPOINT镜像案例"><a href="#②-ENTRYPOINT镜像案例" class="headerlink" title="② ENTRYPOINT镜像案例"></a>② ENTRYPOINT镜像案例</h5><p>docker run 之后的参数会被当做参数传递给 ENTRYPOINT，之后形成新的命令组合。</p><p><strong>制作CMD版可以查询IP信息的容器：</strong></p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install -y curl</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-s&quot;</span>, <span class="string">&quot;https://ip.cn&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>crul命令解释：curl命令可以用来执行下载、发送各种HTTP请求，指定HTTP头部等操作。curl是将下载文件输出到stdout。</p><p>使用命令：curl <a href="http://www.baidu.com,执行后,www.baidu.com的html就会显示在屏幕上了.这是最简单的使用方法.用这个命令获得了http//curl.haxx.se%E6%8C%87%E5%90%91%E7%9A%84%E9%A1%B5%E9%9D%A2%EF%BC%8C%E5%90%8C%E6%A0%B7%EF%BC%8C%E5%A6%82%E6%9E%9C%E8%BF%99%E9%87%8C%E7%9A%84URL%E6%8C%87%E5%90%91%E7%9A%84%E6%98%AF%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E6%88%96%E8%80%85%E4%B8%80%E5%B9%85%E5%9B%BE%E9%83%BD%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%88%B0%E6%9C%AC%E5%9C%B0%E3%80%82%E5%A6%82%E6%9E%9C%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%98%AFHTML%E6%96%87%E6%A1%A3%EF%BC%8C%E9%82%A3%E4%B9%88%E7%BC%BA%E7%9C%81%E7%9A%84%E5%B0%86%E5%8F%AA%E6%98%BE%E7%A4%BA%E6%96%87%E4%BB%B6%E5%A4%B4%E9%83%A8%EF%BC%8C%E5%8D%B3HTML%E6%96%87%E6%A1%A3%E7%9A%84header%E3%80%82%E8%A6%81%E5%85%A8%E9%83%A8%E6%98%BE%E7%A4%BA%EF%BC%8C%E8%AF%B7%E5%8A%A0%E5%8F%82%E6%95%B0">http://www.baidu.com，执行后，www.baidu.com的html就会显示在屏幕上了。这是最简单的使用方法。用这个命令获得了http://curl.haxx.se指向的页面，同样，如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地。如果下载的是HTML文档，那么缺省的将只显示文件头部，即HTML文档的header。要全部显示，请加参数</a> -i</p><p>构建镜像：<code>docker build -f /mydocker/Dockerfile3 -t myip .</code></p><p>创建并启动容器：<code>docker run myip</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638345202928-05625f38-4bba-48cb-b1a7-3b4f89b034ff.png" alt="img"></p><p>现在返回的是网页的html文件。</p><p><strong>如果我们希望显示 HTTP 头信息</strong>，就需要加上 <code>-i</code> 参数：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638345312728-f6526519-cf9d-4471-a24e-02ac072f8bd1.png" alt="img"></p><p>加上<code>-i</code>后报错了。我们可以看到可执行文件找不到的报错，executable file not found。</p><p>之前我们说过，跟在镜像名后面的是 command，运行时会替换 CMD 的默认值。因此这里的 -i 替换了原来的 CMD，而不是添加在原来的 curl -s <a href="https://ip.cn/">https://ip.cn</a> 后面。而 -i 根本不是命令，所以自然找不到。那么如果我们希望加入 -i 这参数，我们就必须重新完整的输入这个命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run myip curl -s https://ip.cn -i</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638345446853-45d8a908-b0f9-4829-9dc4-26d36ff5642d.png" alt="img"></p><p>为了解决上述问题，<strong>制作ENTROYPOINT版查询IP信息的容器</strong>。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install -y curl</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-s&quot;</span>, <span class="string">&quot;http://ip.cn&quot;</span> ]</span></span><br><span class="line">docker build -f /mydocker/Dockerfile4 -t myip2</span><br><span class="line">docker <span class="keyword">run</span><span class="language-bash"> myip2 -i</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638345830872-e6ea7ad8-5414-4531-b40e-8ac0525ec186.png" alt="img"></p><p>现在只用追加一个<code>-i</code>即可打印请求头跟html文件。</p><h5 id="③-ONBUILD案例"><a href="#③-ONBUILD案例" class="headerlink" title="③ ONBUILD案例"></a>③ ONBUILD案例</h5><p>直接在Dockerfile4上修改，追加一句<code>ONBUILD RUN echo &quot;father onbuild-----------10086&quot;</code></p><p>然后使用Dockerfile4构建镜像：<code>docker build -f /mydocker/Dockerfile4 -t myip_father .</code></p><p>复制Dockerfile3命名为Dockerfile5，修改Dockerfile5，直接继承自Dockerfile4：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> myip_father</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install -y curl</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-s&quot;</span>, <span class="string">&quot;https://ip.cn&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>使用Dockerfile5构建镜像：<code>docker build -f /mydocker/Dockerfile5 -t myip_son .</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638346429961-5fa21a69-6fc1-4116-9153-5a772ed513d4.png" alt="img"></p><h3 id="7-5-自定义镜像Tomcat9"><a href="#7-5-自定义镜像Tomcat9" class="headerlink" title="7.5 自定义镜像Tomcat9"></a>7.5 自定义镜像Tomcat9</h3><h4 id="1-创建目录"><a href="#1-创建目录" class="headerlink" title="1. 创建目录"></a>1. 创建目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /mydocker/tomcat9</span><br></pre></td></tr></table></figure><p>在该目录下新建touch.txt文件</p><h4 id="2-将jdk和tomcat安装的压缩包拷贝进上述目录"><a href="#2-将jdk和tomcat安装的压缩包拷贝进上述目录" class="headerlink" title="2. 将jdk和tomcat安装的压缩包拷贝进上述目录"></a>2. 将jdk和tomcat安装的压缩包拷贝进上述目录</h4><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638349761007-70a682ef-bec4-47b8-afc1-a7f46998d9af.png" alt="img"></p><h4 id="3-在tomcat9目录下新建Dockerfile文件"><a href="#3-在tomcat9目录下新建Dockerfile文件" class="headerlink" title="3. 在tomcat9目录下新建Dockerfile文件"></a>3. 在tomcat9目录下新建Dockerfile文件</h4><p><strong>注意一下</strong>，Dockerfile文件里面涉及到<strong>jdk跟tomcat版本</strong>的地方<strong>一定要确定跟你放在tomcat9文件夹下的一致</strong>（别复制粘贴了就是build，到时候run运行不出来）</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span>         centos</span><br><span class="line"><span class="keyword">MAINTAINER</span>    mrzhme&lt;mrzhme@vip.qq.com&gt;</span><br><span class="line"><span class="comment">#把宿主机当前上下文的c.txt拷贝到容器/usr/local/路径下</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> c.txt /usr/local/cincontainer.txt</span></span><br><span class="line"><span class="comment">#把java与tomcat添加到容器中</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> jdk-8u301-linux-x64.tar.gz /usr/local/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> apache-tomcat-9.0.55.tar.gz /usr/local/</span></span><br><span class="line"><span class="comment">#安装vim编辑器</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install vim</span></span><br><span class="line"><span class="comment">#设置工作访问时候的WORKDIR路径，登录落脚点</span></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="comment">#配置java与tomcat环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/jdk1.<span class="number">8.0</span>_301</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"><span class="keyword">ENV</span> CATALINA_HOME /usr/local/apache-tomcat-<span class="number">9.0</span>.<span class="number">55</span></span><br><span class="line"><span class="keyword">ENV</span> CATALINA_BASE /usr/local/apache-tomcat-<span class="number">9.0</span>.<span class="number">55</span></span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"><span class="comment">#容器运行时监听的端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span>  <span class="number">8080</span></span><br><span class="line"><span class="comment">#启动时运行tomcat</span></span><br><span class="line"><span class="comment"># ENTRYPOINT [&quot;/usr/local/apache-tomcat-9.0.55/bin/startup.sh&quot; ]</span></span><br><span class="line"><span class="comment"># CMD [&quot;/usr/local/apache-tomcat-9.0.55/bin/catalina.sh&quot;,&quot;run&quot;]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /usr/local/apache-tomcat-9.0.55/bin/startup.sh &amp;&amp; <span class="built_in">tail</span> -F /usr/local/apache-tomcat-9.0.55/bin/logs/catalina.out</span></span><br></pre></td></tr></table></figure><h4 id="4-构建镜像：docker-build-t-mrlinxitomcat9"><a href="#4-构建镜像：docker-build-t-mrlinxitomcat9" class="headerlink" title="4. 构建镜像：docker build -t mrlinxitomcat9 ."></a>4. 构建镜像：<code>docker build -t mrlinxitomcat9 .</code></h4><p><strong>注意：</strong>这里为什么没有加 -f 和Dockerfile的路径？Dockerfile的标准文件名就是Dockerfile，当当前目录下用于构建镜像的Dockerfile的文件名是标准文件名时，可以省略-f+路径。这时Docker会直接读取当前目录下名为Dockerfile的文件进行镜像的构建。</p><h4 id="5-创建容器并启动"><a href="#5-创建容器并启动" class="headerlink" title="5. 创建容器并启动"></a>5. 创建容器并启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8888:8080 --name myt9 -v /mydocker/tomcat9/test:/usr/local/apache-tomcat-9.0.55/webapps/test -v /mydocker/tomcat9/tomcat9logs/:/usr/local/apache-tomcat-9.0.55/logs --privileged=true mrlinxitomcat9</span><br></pre></td></tr></table></figure><h4 id="6-测试"><a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试</h4><p>记得防火墙开放对应的端口（直接关闭防火墙也可以，但是不推荐）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-port=8888/tcp</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638356524487-9744cde1-e0f5-4dd6-bd3f-8bdc55c6249a.png" alt="img">访问成功。</p><h4 id="7-结合前述的容器卷将测试的web服务test发布"><a href="#7-结合前述的容器卷将测试的web服务test发布" class="headerlink" title="7. 结合前述的容器卷将测试的web服务test发布"></a>7. 结合前述的容器卷将测试的web服务test发布</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /mydocker/tomcat9/test</span><br><span class="line">mkdir WEB-INF  </span><br></pre></td></tr></table></figure><p>在test目录下创建a.jsp文件，在WEB-INF下创建web.xml文件</p><p>web.xml：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>test<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>a.jsp：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    -----------welcome------------</span><br><span class="line">    &lt;%=&quot;i am in docker tomcat self &quot;%&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &lt;% System.out.println(&quot;=============docker tomcat self&quot;);%&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>宿主机创建的文件已经同步过去了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638357904149-61440767-ec7e-4d2f-98e5-52f6283ad049.png" alt="img"></p><p>重启一下容器：<code>docker restart myt9</code>，访问我们刚才发布的test</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638358027262-c2776092-7632-40f8-9486-2a698fe1ae60.png" alt="img"></p><h3 id="7-6-总结"><a href="#7-6-总结" class="headerlink" title="7.6 总结"></a>7.6 总结</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638358194475-8fae9e61-e779-4b62-a12a-432c276b9466.png" alt="img"></p><h2 id="八、Docker常用安装"><a href="#八、Docker常用安装" class="headerlink" title="八、Docker常用安装"></a>八、Docker常用安装</h2><h3 id="8-1-总体步骤"><a href="#8-1-总体步骤" class="headerlink" title="8.1 总体步骤"></a>8.1 总体步骤</h3><p>搜索镜像-&gt;拉取镜像-&gt;查看镜像-&gt;启动镜像-&gt;停止容器-&gt;移除容器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search xxx` -&gt; `docker pull xxx:TAG` -&gt; `docker images xxx` -&gt; `docker run [-itd -p port:port] [--name yyy] xxx:TAG` -&gt; `docker stop 容器ID/yyy` -&gt; `docker rm [-f] yyy</span><br></pre></td></tr></table></figure><h3 id="8-2-安装mysql"><a href="#8-2-安装mysql" class="headerlink" title="8.2 安装mysql"></a>8.2 安装mysql</h3><h4 id="mysql5-7"><a href="#mysql5-7" class="headerlink" title="mysql5.7"></a>mysql5.7</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line">docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=10086 \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure><p>命令说明：</p><p>-p 12345:3306：将主机的3306端口映射到docker容器的3306端口。</p><p>–name mysql：运行服务名字</p><p>-v &#x2F;mydata&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql ：将主机&#x2F;mydata&#x2F;mysql&#x2F;conf目录，挂载到容器的&#x2F;etc&#x2F;mysql目录</p><p>-v &#x2F;mydata&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql：将主机的&#x2F;mydata&#x2F;mysql&#x2F;data目录，挂载到容器的&#x2F;var&#x2F;lib&#x2F;mysql目录</p><p>-v &#x2F;mydata&#x2F;mysql&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql：将主机的&#x2F;mydata&#x2F;mysql&#x2F;log目录，挂载到容器的&#x2F;var&#x2F;log&#x2F;mysql目录</p><p>-e MYSQL_ROOT_PASSWORD&#x3D;10086：初始化 root 用户的密码。</p><p>-d mysql:5.7 : 后台程序运行mysql5.7</p><p>使用windows上的sqlyog进行远程连接：</p><p>记得关闭宿主机防火墙或者开启3306端口</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看防火墙信息，看哪些端口可以访问</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者开启3306端口访问（推荐）</span></span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=3306/tcp</span><br><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638456614470-3fdeeed3-c09b-4f91-ab48-ad906e106adf.png" alt="img"></p><h4 id="mysql8"><a href="#mysql8" class="headerlink" title="mysql8"></a>mysql8</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:8.0.22</span><br><span class="line"></span><br><span class="line">docker run -p 3333:3306 --name mysql8 \</span><br><span class="line">-v /mydata/mysql8/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql8/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql8/conf:/etc/mysql \</span><br><span class="line">-v /mydata/mysql8/mysql-files:/var/lib/mysql-files \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=10086 \</span><br><span class="line">-d mysql:8.0.22</span><br></pre></td></tr></table></figure><p>mysql8 需要多加一个<code>-v /mydata/mysql8/mysql-files:/var/lib/mysql-files</code> 不然启动报错。我们尝试使用windows上的sqlyog远程连接docker启动的mysql8容器，发现报错</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638456847352-cf34e758-fd52-448c-bead-723e5ff170a5.png" alt="img"></p><p>这是因为mysql8默认使用caching_sha2_password加密方式，而sqlyog不支持，所以需要修改加密规则为mysql_native_password</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过/bin/bash 进入mysql8容器</span></span><br><span class="line">docker exec -it mysql8 /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登陆数据库</span></span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>随后我们需要查看是否有不受ip限制的用户，以及修改加密方式</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 切换到mysql数据库</span><br><span class="line">use mysql</span><br><span class="line"></span><br><span class="line"># 查看<span class="keyword">user</span>表中的用户和host信息</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>, host <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638500559346-3608511d-01fd-4333-9827-ac6af6ea4119.png" alt="img"></p><p>可以看到，root已经有一个%，现在修改root@%的加密规则（如果你想新建一个不受访问ip限制的用户也可以mysql高级篇有详细记录：<a href="https://www.yuque.com/mrlinxi/pxvr4g/rigw3d#hKp7S">远程访问授权</a>)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 修改<span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>用户的密码规则和密码</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;10086&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 设置密码永不过期</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;10086&#x27;</span> PASSWORD EXPIRE NEVER;</span><br><span class="line"></span><br><span class="line">#刷新权限</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>再次测试远程连接：</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22423156/1638500835658-c77b71e1-32af-488e-9820-284cd73cc9a1.png" alt="img"> 连接成功！</p><h4 id="使用docker对mysql容器中的数据进行备份"><a href="#使用docker对mysql容器中的数据进行备份" class="headerlink" title="使用docker对mysql容器中的数据进行备份"></a>使用docker对mysql容器中的数据进行备份</h4><p>将docker mysql容器中的所有数据库导出到宿主机的&#x2F;mydata&#x2F;mysql8&#x2F;all-databases.sql文件中</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec myql服务容器ID sh -c &#x27; exec mysqldump --all-databases -uroot -p&quot;10086&quot; &#x27; &gt; /mydata/mysql8/all-databases.sql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果使用UTF-16编码 用--result-file= 替换&gt;</span></span><br><span class="line">docker exec myql服务容器ID sh -c &#x27; exec mysqldump --all-databases -uroot -p&quot;10086&quot; &#x27; --result-file=/mydata/mysql8/all-databases.sql</span><br></pre></td></tr></table></figure><p>mysqldump是mysql自带的逻辑备份工具。命令格式：<a href="https://dev.mysql.com/doc/refman/8.0/en/mysqldump.html">官网mysqldump</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump [选项] 数据库名 [表名] &gt; /路径/filename.sql</span><br><span class="line">mysqldump [选项] --数据库名 [选项 表名] &gt; /路径/filename.sql</span><br><span class="line">mysqldump [选项] --all-databases [选项] &gt; /路径/filename.sql</span><br></pre></td></tr></table></figure><p>常用选项说明：</p><table><thead><tr><th>参数名</th><th>缩写</th><th>含义</th></tr></thead><tbody><tr><td>–host</td><td>-h</td><td>服务器IP地址</td></tr><tr><td>–port</td><td>-P</td><td>服务器端口号</td></tr><tr><td>–user</td><td>-u</td><td>mysql用户名</td></tr><tr><td>–password</td><td>-p</td><td>mysql密码</td></tr><tr><td>–database</td><td></td><td>指定要备份的数据库</td></tr><tr><td>–all-databases</td><td></td><td>备份mysql上的所有数据库</td></tr><tr><td>–compact</td><td></td><td>压缩模式，产生更少的输出</td></tr><tr><td>–comments</td><td></td><td>添加注释信息</td></tr></tbody></table><h3 id="8-3-安装redis"><a href="#8-3-安装redis" class="headerlink" title="8.3 安装redis"></a>8.3 安装redis</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br><span class="line"></span><br><span class="line">docker run -p 6379:6379 -v /mydata/redis/data:/data -v /mydata/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf  -d redis redis-server /usr/local/etc/redis/redis.conf --appendonly yes</span><br></pre></td></tr></table></figure><p>–appendonly yes 表示使用AOF进行持久化 （redis默认使用rdb进行持久化）</p><p>redis.conf是个文件夹，不是个文件 (小声BB：这个redis.conf文件夹是不是太容易引起歧义了？还有redis-server启动的时候，后面跟的那串不是指定的配置文件的路径吗，讲道理redis.conf应该就是个配置文件才对)；</p><p>在主机&#x2F;mydata&#x2F;redis&#x2F;conf&#x2F;redis.conf目录下新建redis.conf文件</p><p><code>vim /mydata/redis/conf/redis.conf</code>  <a href="https://www.yuque.com/attachments/yuque/0/2021/txt/22423156/1638542972834-f404cbca-6492-4a41-adcd-b6ff934282d3.txt">📎redis.conf.txt</a></p><p>测试redis-cli连接：<code>docker exec -it redis容器ID redis-cli</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638543060470-c9d2ae73-1dcf-40d9-8e07-c0f758b27352.png" alt="img"></p><p>测试生成持久化文件：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638543142322-5e0e0c2d-e57d-4801-b432-bf22bf018a99.png" alt="img"></p><h2 id="九、本地镜像发布到阿里云"><a href="#九、本地镜像发布到阿里云" class="headerlink" title="九、本地镜像发布到阿里云"></a>九、本地镜像发布到阿里云</h2><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638543174016-789c3bbe-217b-49d8-a3bf-7be236507bcc.png" alt="img"></p><h3 id="8-1-镜像的生成方法"><a href="#8-1-镜像的生成方法" class="headerlink" title="8.1 镜像的生成方法"></a>8.1 镜像的生成方法</h3><ul><li><p>前面讲过的DockerFile</p></li><li><p>从容器创建一个新的镜像：<code>docker commit [OPTIONS] 容器ID [REPOSITORY[:TAG]]</code></p></li><li><ul><li>OPTIONS选项说明：-a：提交的镜像作者、-m：提交时的说明文字</li></ul></li></ul><p>我们之前自己做了一个包含vim和ifconfig的centos——mycentos:0.1，现在我们把它更新到0.2，并生成一个0.2的镜像。</p><p>先看看mycentos:0.1有没有容器<code>docker ps -a</code>，没有就创建一个容器，<code>docker run -itd mycentos:0.1</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit -a mrlinxi -m &quot;new contos 0.2 from 0.1&quot; 容器ID mycentos:0.2</span><br></pre></td></tr></table></figure><p>这样就得到了mycentos:0.2的镜像</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638579150604-5e5e175b-d5de-4522-9a56-ff3e68d41028.png" alt="img"></p><h3 id="9-2-将本地镜像推送到阿里云"><a href="#9-2-将本地镜像推送到阿里云" class="headerlink" title="9.2 将本地镜像推送到阿里云"></a>9.2 将本地镜像推送到阿里云</h3><p>登陆阿里云，进入控制台</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22423156/1638579895193-548577ed-ca9a-42f2-a6fc-f9c04f6d4691.png" alt="img"></p><p>左上角菜单，点开搜索容器镜像服务：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638579944641-1dc91178-ba82-429f-8595-865c7455e682.png" alt="img"></p><p>实例列表—&gt;个人&#x2F;企业(要钱) 没有的需要创建一下，创建需要设置一个repository密码</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638580071904-e7a62348-3712-4a7d-bc0e-bcebcc8f4304.png" alt="img"></p><p>然后创建一个镜像仓库</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638580295659-6237e091-42d6-4894-a24e-2c41785ee3a4.png" alt="img"></p><p>然后下一步，选择本地仓库创建：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638580339243-c4662f2d-9894-419a-926c-d09d413d7f44.png" alt="img"></p><p>创建好仓库后，会有相应的操作指南：</p><p>aliyun给的操作指南:</p><h4 id="1-登录阿里云Docker-Registry"><a href="#1-登录阿里云Docker-Registry" class="headerlink" title="1. 登录阿里云Docker Registry"></a>1. 登录阿里云Docker Registry</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker login --username=兴趣使然的小小 registry.cn-chengdu.aliyuncs.com</span><br></pre></td></tr></table></figure><p>用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。</p><p>您可以在访问凭证页面修改凭证密码。</p><h4 id="2-从Registry中拉取镜像"><a href="#2-从Registry中拉取镜像" class="headerlink" title="2. 从Registry中拉取镜像"></a>2. 从Registry中拉取镜像</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker pull registry.cn-chengdu.aliyuncs.com/mrilinxi/mycentos:[镜像版本号]</span><br></pre></td></tr></table></figure><h4 id="3-将镜像推送到Registry"><a href="#3-将镜像推送到Registry" class="headerlink" title="3. 将镜像推送到Registry"></a>3. 将镜像推送到Registry</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker login --username=兴趣使然的小小 registry.cn-chengdu.aliyuncs.com$ docker tag [ImageId] registry.cn-chengdu.aliyuncs.com/mrilinxi/mycentos:[镜像版本号]$ docker push registry.cn-chengdu.aliyuncs.com/mrilinxi/mycentos:[镜像版本号]</span><br></pre></td></tr></table></figure><p>请根据实际镜像信息替换示例中的[ImageId]和[镜像版本号]参数。</p><h4 id="4-选择合适的镜像仓库地址"><a href="#4-选择合适的镜像仓库地址" class="headerlink" title="4. 选择合适的镜像仓库地址"></a>4. 选择合适的镜像仓库地址</h4><p>从ECS推送镜像时，可以选择使用镜像仓库内网地址。推送速度将得到提升并且将不会损耗您的公网流量。</p><p>如果您使用的机器位于VPC网络，请使用 registry-vpc.cn-chengdu.aliyuncs.com 作为Registry的域名登录。</p><h4 id="5-示例"><a href="#5-示例" class="headerlink" title="5. 示例"></a>5. 示例</h4><p>使用”docker tag”命令重命名镜像，并将它通过专有网络地址推送至Registry。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker imagesREPOSITORY                                                         TAG                 IMAGE ID            CREATED             VIRTUAL SIZEregistry.aliyuncs.com/acs/agent                                    0.7-dfb6816         37bb9c63c8b2        7 days ago          37.89 MB$ docker tag 37bb9c63c8b2 registry-vpc.cn-chengdu.aliyuncs.com/acs/agent:0.7-dfb6816</span><br></pre></td></tr></table></figure><p>使用 “docker push” 命令将该镜像推送至远程。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker push registry-vpc.cn-chengdu.aliyuncs.com/acs/agent:0.7-dfb6816</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638580567240-fcf9ded7-0175-4bb3-8205-0cfb9e359538.png" alt="img"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登陆仓库 首次登陆需要输入之前我们设置的仓库密码</span></span><br><span class="line">docker login --username=阿里云账户 registry.cn-hangzhou.aliyuncs.com</span><br><span class="line"></span><br><span class="line">docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/mrlinxi/mycentos:[镜像版本号]</span><br><span class="line">docker push registry.cn-hangzhou.aliyuncs.com/mrlinxi/mycentos:[镜像版本号]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638580765715-1f3cb6d4-173b-446e-bab4-b1a9b28731e1.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638581159286-1ad8f8a9-b24a-44b2-8a05-9ee291206f5d.png" alt="img"></p><p>提交后，本地也会有一份提交的镜像。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638600211757-8aec55a4-687f-497e-ae7d-811c7b639412.png" alt="img"></p><p>我们尝试从阿里云拉取我们刚才push的镜像。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除本地提交的镜像</span></span><br><span class="line">docker rmi -f registry.cn-hangzhou.aliyuncs.com/mrlinxi/mycentos:0.2.1</span><br><span class="line"></span><br><span class="line">dokcer pull registry.cn-hangzhou.aliyuncs.com/mrlinxi/mycentos:0.2.1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638600388706-ddeb4535-dc1e-4dcc-9d5b-24193a91e127.png" alt="img"></p><h2 id="十、Docker-Compose"><a href="#十、Docker-Compose" class="headerlink" title="十、Docker Compose"></a>十、Docker Compose</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><code>Compose</code>项目是Docker官方的开源项目，负责实现对Docker容器集群的快速编排。从功能上看，跟<code>OpenStack</code>中的<code>Heat</code>十分相似。</p><p><code>Compose</code>定位是[定义和运行多个<code>Dockerfile</code>模板文件]，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要更多应用容器来相互配合完成某个项目的情况。例如要实现一个Web项目，除了Web服务器本身，往往还需要再加上后端的数据服务容器，甚至还需要负载容器等。</p><p><code>Compose</code>恰好满足了这样的需求。它允许用户通过一个单独的<code>docker-compose.yml</code>模板文件(YAML格式)来定义一组相关联的应用容器为一个项目</p><p><code>Compose</code>中有两个重要的概念：</p><ul><li>服务(<code>service</code>)：一个应用的容器，实际上可以包括若干运行相同镜像实例。</li><li>项目(<code>project</code>)：由一组关联的应用容器组成的完整业务单元，在<code>docker-compose.yml</code>文件中定义。</li></ul><p><code>Compose</code>的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷的生命周期管理</p><p><code>Compose</code>项目由Python编写，实现上调用了Docker服务器提供的API来对容器进行管理。因此，只要所操纵的平台支持Docker API，就可以在其上利用<code>Compose</code>来进行编排项目</p><h4 id="Docker-Compose安装"><a href="#Docker-Compose安装" class="headerlink" title="Docker-Compose安装"></a>Docker-Compose安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64 &gt; /usr/local/bin/docker-compose <span class="comment">#下载docker-compose</span></span><br><span class="line">docker-compose --version <span class="comment">#查看docker-compose是否安装成功复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h4 id="Docker-Compose的入门"><a href="#Docker-Compose的入门" class="headerlink" title="Docker-Compose的入门"></a>Docker-Compose的入门</h4><ol><li><p>创建一个docker-compose.yml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> docker-compose.yml复制复制失败复制成功</span><br></pre></td></tr></table></figure></li><li><p>在配置文件中定义一个项目中存在哪些服务</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">webapp:</span>  <span class="comment">#服务名全局唯一</span></span><br><span class="line">        <span class="attr">image:</span> <span class="comment">#镜像名:tag</span></span><br><span class="line">        <span class="attr">ports:</span>  <span class="comment">#端口映射</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">            <span class="string">复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><p>3.通过docker-compose运行一组容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up    <span class="comment">#前台运行</span></span><br><span class="line">docker-compose up -d   <span class="comment">#后台运行复制复制失败复制成功</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="Docker-Compose命令模板指令"><a href="#Docker-Compose命令模板指令" class="headerlink" title="Docker-Compose命令模板指令"></a>Docker-Compose命令模板指令</h4><p>模板文件默认是使用<code>Compose</code>的核心，涉及到的指令关键字也比较多，默认的模板文件名称为<code>docker-compose.yml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">webapp:</span>  <span class="comment">#服务名全局唯一</span></span><br><span class="line">        <span class="attr">image:</span> <span class="comment">#镜像名:tag</span></span><br><span class="line">        <span class="attr">ports:</span>  <span class="comment">#端口映射(建议引号括起来)</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><p>注意每个服务都必须通过<code>image</code>指令指定镜像或<code>build</code>指令（需要Dockerfile）等来自动构建生成镜像</p><p>如果使用<code>build</code>指令，在Dockerfile中设置的选项（例如：<code>CMD</code>,<code>EXPOSE</code>,<code>VOLUME</code>,<code>ENV</code>等）将会自动被获取，无需在<code>docker-compose.yml</code>中重复设置。</p><h5 id="imgae"><a href="#imgae" class="headerlink" title="imgae"></a>imgae</h5><p>指定为镜像名称或镜像ID。如果镜像本地不存在，<code>Compose</code>将会尝试手动拉起这个镜像</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">ubuntu</span>        <span class="comment">#默认为最新版本</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">镜像名:版本号</span>    </span><br><span class="line"><span class="attr">image:</span> <span class="string">摘要复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h5 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h5><p>暴露端口信息。</p><p>使用宿主端口：容器端口（HOST：CONTAINER）格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ports:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;8000&quot;</span><span class="string">:&quot;8001&quot;复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><p>主要：当使用<code>HOST:CONTAINER</code>格式来映射端口时，如你使用的容器端口小于60并且没有放到引号里面，可能会得到错误的结果，因为<code>YAML</code>会自动解析xx:yy这种数字格式为60进制，为避免出现这种问题，建议采用引号包括起来的字符串格式</p><h5 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h5><p>数据卷所挂载路径设置，可以设置为宿主机路径(<code>HOST</code>:<code>CONTAINER</code>)或者数据卷的名称(<code>VOLUME</code>:<code>CONTAINER</code>)，并且可以设置访问模式(<code>HOST</code>:<code>CONTAINER:ro</code>)。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cache/:/tmp/cache</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">~/configs:/etc/configs/:ro复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><p>如果路径为数据卷名称，必须在文件中配置数据卷。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.2&#x27;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">    <span class="attr">tomcat:</span></span><br><span class="line">        <span class="attr">tomcat:</span> <span class="string">tomcat:8.0</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">        <span class="attr">voulumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">tomcatwebapps:/usr/local/tomcat/webapps</span></span><br><span class="line"><span class="attr">volumes:</span> <span class="comment">#声明上面容器使用的卷名</span></span><br><span class="line">    <span class="attr">tomcatwebapps:</span> <span class="comment">#使用的卷名</span></span><br><span class="line">        <span class="attr">external:</span>  <span class="comment">#使用自定义的卷名 </span></span><br><span class="line">            <span class="literal">true</span>    <span class="comment">#true确定使用指定卷名    注意：一旦使用外部自定义卷名，需要手动创建数据卷复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h5 id="networks"><a href="#networks" class="headerlink" title="networks"></a>networks</h5><p>配置容器连接的网络</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.2&#x27;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">    <span class="attr">tomcat01:</span></span><br><span class="line">        <span class="attr">tomcat:</span> <span class="string">tomcat:8.0</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">        <span class="attr">voulumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">tomcatwebapps01:/usr/local/tomcat/webapps</span></span><br><span class="line">        <span class="attr">networks:</span>    <span class="comment">#代表当前服务使用哪个网络桥</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">hello</span></span><br><span class="line">    <span class="attr">tomcat02:</span></span><br><span class="line">        <span class="attr">tomcat:</span> <span class="string">tomcat:8.0</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;8081:8080&quot;</span></span><br><span class="line">        <span class="attr">voulumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">tomcatwebapps01:/usr/local/tomcat/webapps</span></span><br><span class="line">        <span class="attr">networks:</span>    <span class="comment">#代表当前服务使用哪个网络桥</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">volumes:</span> <span class="comment">#声明上面容器使用的卷名</span></span><br><span class="line">    <span class="attr">tomcatwebapps01:</span> <span class="comment">#使用的卷名</span></span><br><span class="line">        <span class="attr">external:</span>  <span class="comment">#使用自定义的卷名 </span></span><br><span class="line">            <span class="literal">false</span>    <span class="comment">#true确定使用指定卷名    注意：一旦使用外部自定义卷名，需要手动创建数据卷</span></span><br><span class="line">    <span class="attr">tomcatwebapps02:</span></span><br><span class="line"><span class="attr">networks:</span> <span class="comment">#定义服务用到桥</span></span><br><span class="line">    <span class="attr">hello:</span> <span class="comment">#上面服务用到网桥名称，默认为bridge</span></span><br><span class="line">        <span class="attr">external:</span> </span><br><span class="line">            <span class="literal">true</span>    <span class="comment">#使用外部指定网桥    注意：网桥必须存在复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h5 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a>container_name</h5><p>指定容器名。默认将会使用<code>项目名称_服务名称_序号</code>这样子的格式</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">container_name:</span> <span class="string">docker-web-container复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：指定容器后，该服务无法进行扩展，因为Docker不允许多个容器具有相同的名称</p></blockquote><h5 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h5><p>设置环境变量，你可以使用数组或字典两种格式</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span> </span><br><span class="line">    <span class="attr">RACK_ENV:</span> <span class="string">development</span></span><br><span class="line">    <span class="attr">SESSION_SECRET:</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">RACK_ENV=development</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SESSION_SECRET复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><p>如果变量名称或者值中用到<code>true</code>|<code>false</code>,<code>yes</code>|<code>no</code>等表达<strong>布尔</strong>含义的词汇，最好放到引号里，避免YAML自动内容为对应的布尔语义</p><h5 id="command"><a href="#command" class="headerlink" title="command"></a>command</h5><p>覆盖容器启动后执行的命令</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">command:</span> <span class="string">echo</span> <span class="string">&quot;hello world&quot;</span><span class="string">复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h5 id="env-file"><a href="#env-file" class="headerlink" title="env_file"></a>env_file</h5><p>从文件中获取环境变量，可以单独的文件路径或列表</p><p>如果通过<code>docker-compose -f FILE</code>方式来指定Compose模板文件，则<code>env_file</code>中变量的路径会基于模板文件路径</p><p>如果有变量名称与<code>environment</code>指令冲突，则按照惯例，以后者为准</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">env_file:</span> <span class="string">.env</span></span><br><span class="line"><span class="attr">env_file:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">./common.env</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./apps/web.env</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/opt/secrets.env复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><p>环境变量文件中的每一行必须符合格式，支持<code>#</code>开头的注释行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Common.env: Set development enviroment</span><br><span class="line">PROG_ENV=development复制复制失败复制成功</span><br></pre></td></tr></table></figure><h5 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a>depends_on</h5><p>解决容器的依赖，启动先后问题。下面的例子中会先启动<code>redis db</code>再启动<code>web</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">    <span class="attr">web:</span> </span><br><span class="line">        <span class="attr">build:</span> </span><br><span class="line">        <span class="attr">depends_on:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">db</span>    <span class="comment">#服务名</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">redis</span>    <span class="comment">#服务名</span></span><br><span class="line">    <span class="attr">redis:</span> </span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">db:</span> </span><br><span class="line">        <span class="attr">image:</span> <span class="string">postgres复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>web</code>服务不会等待<code>redis db</code>[完全启动]之后才启动</p></blockquote><h5 id="healthcheck"><a href="#healthcheck" class="headerlink" title="healthcheck"></a>healthcheck</h5><p>通过命令检查容器是否健康运行</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">healthcheck:</span> </span><br><span class="line">    <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>,<span class="string">&quot;curl&quot;</span>,<span class="string">&quot;-f&quot;</span>,<span class="string">&quot;http://localhost&quot;</span>]</span><br><span class="line">    <span class="attr">interval:</span> <span class="string">1m30s</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">retries:</span> <span class="number">3</span><span class="string">复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h5 id="sysctls"><a href="#sysctls" class="headerlink" title="sysctls"></a><a href="https://docs.hwawy.cn/#/Docker/?id=sysctls">sysctls</a></h5><p>配置容器内核参数</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sysctls:</span></span><br><span class="line">    <span class="attr">net.core.somaxconn:</span> <span class="number">1024</span></span><br><span class="line">    <span class="attr">net.ipv4.tcp_syncookies:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">sysctls:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">net.core.somaxconn=1024</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">net.ipv4.tcp_syncookies=0复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h5 id="ulimits"><a href="#ulimits" class="headerlink" title="ulimits"></a>ulimits</h5><p>指定容器的ulimits限制数</p><p>例如，指定最大进程数为65535，指定文件句柄数位2000(软限制，应用可以随时修改，不能操作限制)和40000（系统硬件限制，只能root用户提高）</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ulimits:</span></span><br><span class="line">    <span class="attr">nproc:</span> <span class="number">65535</span></span><br><span class="line">    <span class="attr">nofile:</span> </span><br><span class="line">        <span class="attr">soft:</span> <span class="number">20000</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">40000</span><span class="string">复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h5 id="build"><a href="#build" class="headerlink" title="build"></a>build</h5><p>用来将指定的Dockerfile打包成镜像，然后再运行该镜像</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span> </span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">        <span class="attr">build:</span>    <span class="comment">#用来指定Dockerfile所在目录，先根据build中的Dockerfile自动构建镜像，自动运行容器</span></span><br><span class="line">            <span class="attr">context:</span> <span class="comment">#指定上下文目录dockerfile所在的目录</span></span><br><span class="line">            <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span> <span class="comment">#dockerfile构建文件名字</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">容器名</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;8080:9091&quot;</span></span><br><span class="line">        <span class="attr">network:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">hello</span></span><br><span class="line">        <span class="attr">depends_on:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">tomcat01复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h4 id="Docker-Compose中的常用命令"><a href="#Docker-Compose中的常用命令" class="headerlink" title="Docker-Compose中的常用命令"></a>Docker-Compose中的常用命令</h4><h5 id="命令对象与格式"><a href="#命令对象与格式" class="headerlink" title="命令对象与格式"></a>命令对象与格式</h5><p>对于<code>Compose</code>来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务和容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会收到命令影响</p><p>执行<code>docker-compose [COMMAND] --help</code> 或者<code>docker-compose help [COMMAND]</code>可以查看具体是某个命令的使用格式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose [-f=&lt;args&gt;...] [options] [COMMAND] [ARGS...]复制复制失败复制成功</span><br></pre></td></tr></table></figure><h5 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h5><ul><li><code>-f</code> ,<code>--file FILE</code>指定使用的Compose模板文件，默认为docker-compose.yml，可以多次指定</li><li><code>-p</code>,’–project-name NAME’指定项目名称，默认使用所在目录作为项目名</li><li><code>--x-networking</code>使用Docker的可插拔网络后端特性</li><li><code>--verbose</code>输出更多调试信息</li><li><code>-v,--version</code>打印版本并退出</li></ul><h5 id="命令使用说明"><a href="#命令使用说明" class="headerlink" title="命令使用说明"></a>命令使用说明</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">up</span><br></pre></td></tr></table></figure><p>格式为<code>docker-compose up [option] [SERVICE...]</code></p><ul><li>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并管理服务相关容器的一系列操作</li><li>链接的服务都将自动启动，除非已经处于运行状态</li><li>大部分时候可以通过该命令来启动一个项目</li><li>默认情况，<code>docker-compose up</code>启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便的进行调试</li><li>当通过<code>Ctrl -C</code> 停止命令时，所有容器将会停止</li><li>如果通过<code>docker-compose up</code>，将会在后台启动并运行所有的容器，一般推荐生产环境下使用该选项</li><li>默认情况下，如果服务容器已经存在，<code>docker-compose up</code>将会尝试停止该容器，然后重新创建（保持使用<code>volumes-from</code>挂载的卷），以保证新启动的服务匹配<code>docker-compose.yml</code>文件的最新内容</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dwon</span><br></pre></td></tr></table></figure><ul><li>此命令将会停止<code>up</code>命令启动的容器，并移除网络</li></ul><p><code>exec</code><strong>只能通过服务ID进入</strong></p><ul><li>进入指定容器</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps</span><br></pre></td></tr></table></figure><ul><li>格式为<code>docker-compose ps [options][SERVICE...]</code></li><li>列出选项中目前的所有容器</li><li>选项<ul><li><code>-q</code> 只打印容器的ID信息</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">restart</span><br></pre></td></tr></table></figure><ul><li>格式为<code>docker-compose rm [OPTION][SERVICE]</code></li><li>重启项目中的服务</li><li>选项：<ul><li><code>-t,--timeout TIMEOUT</code>指定重启前停止容器的操作（默认为10秒）</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm</span><br></pre></td></tr></table></figure><ul><li>格式为<code>docker-compose rm [OPTION][SERVICE]</code></li><li>删除所有（停止状态）服务容器，推荐先执行<code>docker-compose stop</code>来停止容器</li><li>选项：<ul><li><code>-f,--force</code>强制直接删除，包括非停止状态的容器，一般尽量不要使用该选项</li><li><code>-v</code>删除容器所挂在的数据卷</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">statr</span><br></pre></td></tr></table></figure><ul><li>格式为<code>docker-compose start [SERVICE...]</code></li><li>启动已经存在的服务容器</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stop</span><br></pre></td></tr></table></figure><ul><li>格式为<code>docker-compose stop [options][SERVICE...]</code></li><li>停止已经处于运行状态的容器，但不删除它。通过<code>docker-compose start</code>可以再次启动这些容器</li><li>选项：<ul><li><code>-t,--timeout TIMEOUT</code>停止容器时候的超时（默认为10秒）</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><ul><li>查看各个服务容器内运行的进度</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unpause</span><br></pre></td></tr></table></figure><ul><li>格式为docker-compose unpause [SEVICE..]</li><li>恢复处于暂停状态的容器</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logs</span><br></pre></td></tr></table></figure><ul><li>查看服务日志</li></ul><p><a href="https://www.yuque.com/mrlinxi/pxvr4g/polyyw#fV3l8">借鉴链接1</a><br><a href="https://docs.hwawy.cn/#/Docker/">借鉴链接2</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>restful接口设计规范</title>
      <link href="/2022/03/21/restful/"/>
      <url>/2022/03/21/restful/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>本文学习 RESTful API 设计相关的一些原则和规范。</p><p>少量的API在使用时不知不觉，但是当后续API不断增加了，需求变动也会导致API版本的变化。主要是为了可以进行规范化开发，并非是只能使用该规范，其他做法亦可，只是作为前人大佬已经在实践中进行总结整理。学习好的编程设计规范总是便捷有利的。</p><h2 id="二、常见规范"><a href="#二、常见规范" class="headerlink" title="二、常见规范"></a>二、常见规范</h2><h3 id="1、协议和域名"><a href="#1、协议和域名" class="headerlink" title="1、协议和域名"></a>1、协议和域名</h3><p>API通讯使用http协议，如果能使用https尽量使用https。</p><p>尽量使用独立域名，</p><p><a href="https://ladfeng.top/">https://ladfeng.top</a></p><p><a href="http://ladfeng.top/">http://ladfeng.top</a></p><p>如果不能使用可以以api 打头区分访问</p><p><a href="https://ladfeng.top/api">https://ladfeng.top/api</a></p><h3 id="2、版本变化"><a href="#2、版本变化" class="headerlink" title="2、版本变化"></a>2、版本变化</h3><p>常见的三种版本方式：</p><ol><li>在uri中放版本信息：<code>GET /v1/users/1</code></li><li>Accept Header：<code>Accept: application/json+v1</code></li><li>自定义 Header：<code>X-Api-Version: 1</code></li></ol><p>推荐用第一种，虽然没有那么优雅，最明显最方便。</p><h3 id="3、URI资源"><a href="#3、URI资源" class="headerlink" title="3、URI资源"></a>3、URI资源</h3><h3 id="3、URI资源-1"><a href="#3、URI资源-1" class="headerlink" title="3、URI资源"></a>3、URI资源</h3><h4 id="（1）URI概念"><a href="#（1）URI概念" class="headerlink" title="（1）URI概念"></a>（1）URI概念</h4><p>URI 表示资源，资源一般对应服务器端领域模型中的实体类。<br>URI规范</p><ul><li>不用大写;</li><li>用中杠<code>-</code>而不用下杠<code>_</code>;</li><li>参数列表要encode;</li><li>URI中的名词表示资源集合，使用复数形式;</li><li>避免层级过深</li><li>带上版本号</li></ul><h4 id="（2）资源路径"><a href="#（2）资源路径" class="headerlink" title="（2）资源路径"></a>（2）资源路径</h4><p><strong>资源集合：</strong></p><p>所有动物园</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/zoos/　　　　</span><br></pre></td></tr></table></figure><p>id为1的动物园内的所有动物</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">/zoos/1/animals</span><br></pre></td></tr></table></figure><p><strong>单个资源：</strong></p><p>比如：id为1的动物园</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">/zoos/1      </span><br></pre></td></tr></table></figure><p>id为1,2,3的动物园</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">/zoos/1;2;3   </span><br></pre></td></tr></table></figure><p><strong>层级过深资源：</strong></p><p>过深的导航容易导致url膨胀，不易维护，如 <code>GET /zoos/1/areas/3/animals/4</code>，尽量使用查询参数代替路径中的实体导航，如<code>GET /animals?zoo=1&amp;area=3</code>;</p><h3 id="4、操作类型"><a href="#4、操作类型" class="headerlink" title="4、操作类型"></a>4、操作类型</h3><p>对于资源的具体操作类型，由HTTP动词表示。</p><p>常用的HTTP动词有下面五个。</p><table><thead><tr><th align="left">HTTP动作</th><th align="left">含义</th><th align="left">对应的SQL操作</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">从服务器取出资源（一项或多项）</td><td align="left">SELECT</td></tr><tr><td align="left">POST</td><td align="left">在服务器新建一个资源。</td><td align="left">CREATE</td></tr><tr><td align="left">PUT</td><td align="left">在服务器更新资源（客户端提供改变后的完整资源）</td><td align="left">UPDATE</td></tr><tr><td align="left">PATCH</td><td align="left">在服务器更新资源（客户端提供改变的属性）</td><td align="left">UPDATE</td></tr><tr><td align="left">DELETE</td><td align="left">从服务器删除资源。</td><td align="left">DELETE</td></tr><tr><td align="left">HEAD</td><td align="left">获取资源的元数据。</td><td align="left"></td></tr><tr><td align="left">OPTIONS</td><td align="left">获取信息，关于资源的哪些属性是客户端可以改变的。</td><td align="left"></td></tr></tbody></table><p>示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">GET /zoos：列出所有动物园</span><br><span class="line">POST /zoos：新建一个动物园</span><br><span class="line">GET /zoos/ID：获取某个指定动物园的信息</span><br><span class="line">PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</span><br><span class="line">PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</span><br><span class="line">DELETE /zoos/ID：删除某个动物园</span><br><span class="line">GET /zoos/ID/animals：列出某个指定动物园的所有动物</span><br><span class="line">DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</span><br></pre></td></tr></table></figure><h3 id="5、条件过滤"><a href="#5、条件过滤" class="headerlink" title="5、条件过滤"></a>5、条件过滤</h3><p>记录数量很多，不能全返回，需要对数据进行过滤。API应该提供参数，过滤返回结果。</p><p>下面是一些常见的参数（分页条件、查询条件）</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">?limit=10：指定返回记录的数量</span><br><span class="line">?offset=10：指定返回记录的开始位置。</span><br><span class="line">?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</span><br><span class="line">?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br><span class="line">?animal_type_id=1：指定筛选条件</span><br></pre></td></tr></table></figure><p>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET &#x2F;zoo&#x2F;ID&#x2F;animals 与 GET &#x2F;animals?zoo_id&#x3D;ID 的含义是相同的。</p><h3 id="6、状态码"><a href="#6、状态码" class="headerlink" title="6、状态码"></a>6、状态码</h3><h4 id="（1）常规状态码"><a href="#（1）常规状态码" class="headerlink" title="（1）常规状态码"></a>（1）常规状态码</h4><p>常规的状态主要是参考 HTTP 状态码。</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</span><br><span class="line">201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</span><br><span class="line">202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</span><br><span class="line">204 NO CONTENT - [DELETE]：用户删除数据成功。</span><br><span class="line">400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</span><br><span class="line">401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</span><br><span class="line">403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</span><br><span class="line">404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</span><br><span class="line">406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</span><br><span class="line">410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</span><br><span class="line">422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</span><br><span class="line">500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</span><br></pre></td></tr></table></figure><p><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">HTTP状态码</a></p><h4 id="（2）业务类状态码"><a href="#（2）业务类状态码" class="headerlink" title="（2）业务类状态码"></a>（2）业务类状态码</h4><p>系统较多的时候，将系统码也带上，使用数字的定义也可以参考HTTP进行设计。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">业务系统码+四位数字</span><br></pre></td></tr></table></figure><p>具体的可以根据需求来。</p><h4 id="（3）错误与异常"><a href="#（3）错误与异常" class="headerlink" title="（3）错误与异常"></a>（3）错误与异常</h4><p>发生错误或异常时：</p><ol><li><p>不响应2xx开头的状态码，客户端可能会缓存成功的http请求；</p></li><li><p>正确设置http状态码，遵循HTTP协议规范；</p></li><li><p>Response body 需要提供的信息</p><ol><li><p>错误的代码，方便定位日志，排查问题；</p></li><li><p>直接正面的描述错误的文本。</p></li></ol></li></ol><p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p><table><thead><tr><th align="left">状态码</th><th align="left">场景</th></tr></thead><tbody><tr><td align="left">400</td><td align="left">参数校验失败</td></tr><tr><td align="left">401</td><td align="left">未验证的用户，未登录</td></tr><tr><td align="left">403</td><td align="left">无权限</td></tr><tr><td align="left">404</td><td align="left">资源不存在</td></tr><tr><td align="left">500</td><td align="left">非业务类异常</td></tr></tbody></table><p>业务类异常，一般自定义Exception，见词知义。</p><p>常规异常：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;failed&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">400</span>，</span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;参数xxx校验失败&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>业务类异常：系统名为ABCD</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;failed&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span>ABCD2001，</span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XXX数据已经过期。&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="（4）正常返回"><a href="#（4）正常返回" class="headerlink" title="（4）正常返回"></a>（4）正常返回</h4><p>正常返回，减少数据层级。</p><p>判断操作成功失败的标记 和操作的单个数据</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span>，</span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;操作成功&quot;</span>，</span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;zhangxiaocai&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>msg可选。</p><p>分页查询</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;paging&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;limit&quot;</span><span class="punctuation">:</span><span class="number">10</span><span class="punctuation">,</span><span class="attr">&quot;offset&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;total&quot;</span><span class="punctuation">:</span><span class="number">119</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>...<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>操作与响应</p><table><thead><tr><th align="left">HTTP操作</th><th align="left">响应格式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">状态标记+集合、单个对象</td></tr><tr><td align="left">POST</td><td align="left">状态标记+新增成功的对象</td></tr><tr><td align="left">PUT&#x2F;PATCH</td><td align="left">状态标记+更新成功的对象</td></tr><tr><td align="left">DELETE</td><td align="left">状态标记</td></tr></tbody></table><h4 id="（5）异步任务"><a href="#（5）异步任务" class="headerlink" title="（5）异步任务"></a>（5）异步任务</h4><p>对耗时的异步任务，服务器端接受客户端传递的参数后，应返回创建成功的任务资源，其中包含了任务的执行状态。客户端可以轮训该任务获得最新的执行进度。</p><p>比如常见信息：</p><p>任务ID，任务执行状态，发起人。<br>请求：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">GET /task/3    </span><br></pre></td></tr></table></figure><p>返回：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;taskId&quot;</span><span class="punctuation">:</span><span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;createBy&quot;</span><span class="punctuation">:</span><span class="string">&quot;Anonymous&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;success&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;taskId&quot;</span><span class="punctuation">:</span><span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;createBy&quot;</span><span class="punctuation">:</span><span class="string">&quot;Anonymous&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;running&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>批量请求：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">POST /batchTasks/1;2;3;</span><br></pre></td></tr></table></figure><p>批量返回：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;taskId&quot;</span><span class="punctuation">:</span><span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;createBy&quot;</span><span class="punctuation">:</span><span class="string">&quot;Anonymous&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;success&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>...<span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;from&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;to&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;info&quot;</span><span class="punctuation">:</span><span class="string">&quot;Runing 50 %&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>...<span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>如果任务的执行状态包括较多信息，可以把“执行状态”抽象成组合资源，客户端查询该状态资源了解任务的执行情况。</p><p>提交：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /task/3/status</span><br></pre></td></tr></table></figure><p>返回：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;progress&quot;</span><span class="punctuation">:</span><span class="string">&quot;50%&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span><span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span><span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fail&quot;</span><span class="punctuation">:</span><span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="7、Hypermedia-API"><a href="#7、Hypermedia-API" class="headerlink" title="7、Hypermedia API"></a>7、Hypermedia API</h3><p>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p><p>比如，当用户向api.doname.com的根目录发出请求，会得到这样一个文档。</p><blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;link&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;rel&quot;</span><span class="punctuation">:</span>   <span class="string">&quot;collection https://www.example.com/zoos&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span>  <span class="string">&quot;https://api.example.com/zoos&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;List of zoos&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span>  <span class="string">&quot;application/vnd.yourformat+json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></blockquote><p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。</p><p>Hypermedia API的设计被称为<a href="http://en.wikipedia.org/wiki/HATEOAS">HATEOAS</a>。Github的API就是这种设计，访问<a href="https://api.github.com/">api.github.com</a>会得到一个所有可用API的网址列表。</p><blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;current_user_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/user&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;authorizations_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/authorizations&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></blockquote><p>从上面可以看到，如果想获取当前用户的信息，应该去访问<a href="https://api.github.com/user">api.github.com&#x2F;user</a>，然后就得到了下面结果。</p><blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Requires authentication&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;documentation_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://developer.github.com/v3&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></blockquote><p>上面代码表示，服务器给出了提示信息，以及文档的网址。</p><h3 id="8、数据格式"><a href="#8、数据格式" class="headerlink" title="8、数据格式"></a>8、数据格式</h3><p>JSON 或 XML 按要求使用即可。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> restful </tag>
            
            <tag> 项目规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>restful在后端的体现</title>
      <link href="/2022/03/21/restful%E5%9C%A8%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%BD%93%E7%8E%B0/"/>
      <url>/2022/03/21/restful%E5%9C%A8%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%BD%93%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>之前寒假做互联网+项目的时候,看到组长的后端api接口写得那叫一个优雅;</p><p>在分布式、微服务盛行的今天，绝大部分项目都采用的微服务框架，前后端分离方式。题外话：前后端的工作职责越来越明确，现在的前端都称之为大前端，技术栈以及生态圈都已经非常成熟；以前后端人员瞧不起前端人员，那现在后端人员要重新认识一下前端，前端已经很成体系了。</p><h2 id="现代系统架构"><a href="#现代系统架构" class="headerlink" title="现代系统架构:"></a>现代系统架构:</h2><p><strong>一般系统的大致整体架构图如下：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/a3a46ff2ff174c29b71da687f72abbdb~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp"></p><h2 id="接口交互"><a href="#接口交互" class="headerlink" title="接口交互"></a><strong>接口交互</strong></h2><p>前端和后端进行交互，前端按照约定请求URL路径，并传入相关参数，后端服务器接收请求，进行业务处理，返回数据给前端。</p><p>针对URL路径的restful风格，以及传入参数的公共请求头的要求（如：app_version,api_version,device等），老顾这里就不介绍了，小伙伴们可以自行去了解，也比较简单。</p><p>着重介绍一下后端服务器如何实现把数据返回给前端？</p><h3 id="返回格式"><a href="#返回格式" class="headerlink" title="返回格式"></a><strong>返回格式</strong></h3><p>后端返回给前端我们一般用JSON体方式，定义如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    #返回状态码</span><br><span class="line">    code<span class="punctuation">:</span>integer<span class="punctuation">,</span>       </span><br><span class="line">    #返回信息描述</span><br><span class="line">    message<span class="punctuation">:</span>string<span class="punctuation">,</span></span><br><span class="line">    #返回值</span><br><span class="line">    data<span class="punctuation">:</span>object</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="CODE状态码"><a href="#CODE状态码" class="headerlink" title="CODE状态码"></a><strong>CODE状态码</strong></h3><p>code返回状态码，一般小伙伴们是在开发的时候需要什么，就添加什么。<br>如接口要返回用户权限异常，我们加一个状态码为101吧，下一次又要加一个数据参数异常，就加一个102的状态码。这样虽然能够照常满足业务，但状态码太凌乱了</p><p>我们应该可以参考HTTP请求返回的状态码，下面是常见的HTTP状态码<a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">传送门</a>：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</span><br><span class="line">201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</span><br><span class="line">202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</span><br><span class="line">204 NO CONTENT - [DELETE]：用户删除数据成功。</span><br><span class="line">400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</span><br><span class="line">401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</span><br><span class="line">403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</span><br><span class="line">404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</span><br><span class="line">406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</span><br><span class="line">410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</span><br><span class="line">422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</span><br><span class="line">500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</span><br></pre></td></tr></table></figure><table><thead><tr><th>分类</th><th>区间</th><th>分类描述</th></tr></thead><tbody><tr><td>100</td><td>100~199</td><td>信息，服务器收到请求，需要请求者这执行操作</td></tr><tr><td>200</td><td>200~299</td><td>成功，操作被成功接受并处理</td></tr><tr><td>300</td><td>300~399</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td>400</td><td>400~499</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td>500</td><td>500~599</td><td>服务器的错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><p>规定:</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">#1表示成功</span><br><span class="line">#1001～1999 区间表示参数错误</span><br><span class="line">#2001～2999 区间表示用户错误</span><br><span class="line">#3001～3999 区间表示接口异常</span><br></pre></td></tr></table></figure><p>这样前端开发人员在得到返回值后，根据状态码就可以知道，大概什么错误，再根据message相关的信息描述，可以快速定位。</p><h3 id="Message"><a href="#Message" class="headerlink" title="Message"></a><strong>Message</strong></h3><p>这个字段相对理解比较简单，就是发生错误时，如何友好的进行提示。一般的设计是和code状态码一起设计，如</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 规定:</span></span><br><span class="line"><span class="comment"> * #1表示成功</span></span><br><span class="line"><span class="comment"> * #1001～1999 区间表示参数错误</span></span><br><span class="line"><span class="comment"> * #2001～2999 区间表示用户错误</span></span><br><span class="line"><span class="comment"> * #3001～3999 区间表示接口异常</span></span><br><span class="line"><span class="comment"> * 统一错误枚举类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 成功 */</span></span><br><span class="line">    SUCCESS(<span class="number">200</span>, <span class="string">&quot;成功&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 默认失败 */</span></span><br><span class="line">    COMMON_FAIL(<span class="number">999</span>, <span class="string">&quot;失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    CUSTOM_FAIL(<span class="number">9999</span>, <span class="string">&quot;自定义错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 参数错误：1000～1999 */</span></span><br><span class="line">    PARAM_NOT_VALID(<span class="number">1001</span>, <span class="string">&quot;参数无效&quot;</span>),</span><br><span class="line">    PARAM_IS_BLANK(<span class="number">1002</span>, <span class="string">&quot;参数为空&quot;</span>),</span><br><span class="line">    PARAM_TYPE_ERROR(<span class="number">1003</span>, <span class="string">&quot;参数类型错误&quot;</span>),</span><br><span class="line">    PARAM_NOT_COMPLETE(<span class="number">1004</span>, <span class="string">&quot;参数缺失&quot;</span>),</span><br><span class="line">    FAIL_COPY_PROPERTIES(<span class="number">1076</span>, <span class="string">&quot;创建对象失败或拷贝对象属性失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 微信小程序登录 */</span></span><br><span class="line">    WEI_XIN_CODE_ERROR(<span class="number">3001</span>, <span class="string">&quot;携带code向小程序请求失败&quot;</span>),</span><br><span class="line">    WEI_XIN_SKEY_VALID(<span class="number">3002</span>, <span class="string">&quot;skey无效&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 用户错误 */</span></span><br><span class="line">    USER_NOT_LOGIN(<span class="number">2001</span>, <span class="string">&quot;用户未登录&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_EXPIRED(<span class="number">2002</span>, <span class="string">&quot;账号已过期&quot;</span>),</span><br><span class="line">    USER_CREDENTIALS_ERROR(<span class="number">2003</span>, <span class="string">&quot;密码错误&quot;</span>),</span><br><span class="line">    USER_CREDENTIALS_EXPIRED(<span class="number">2004</span>, <span class="string">&quot;密码过期&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_DISABLE(<span class="number">2005</span>, <span class="string">&quot;账号不可用&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_LOCKED(<span class="number">2006</span>, <span class="string">&quot;账号被锁定&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_NOT_EXIST(<span class="number">2007</span>, <span class="string">&quot;账号不存在&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_ALREADY_EXIST(<span class="number">2008</span>, <span class="string">&quot;账号已存在&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_USE_BY_OTHERS(<span class="number">2009</span>, <span class="string">&quot;账号下线&quot;</span>),</span><br><span class="line">    USER_IS_EMPTY(<span class="number">2010</span>, <span class="string">&quot;用户为空&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Token错误*/</span></span><br><span class="line">    TOKEN_EXPIRED(<span class="number">4001</span>, <span class="string">&quot;登陆信息过期&quot;</span>),</span><br><span class="line">    TOKEN_ERROR(<span class="number">4002</span>, <span class="string">&quot;信息被更改,请重新登陆&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 业务错误 */</span></span><br><span class="line">    NO_PERMISSION(<span class="number">5001</span>, <span class="string">&quot;没有权限&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*订单错误*/</span></span><br><span class="line">    EXISTED_ORDER(<span class="number">6001</span>, <span class="string">&quot;该商品的订单已存在，请支付或取消后再重新下单&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*商品错误*/</span></span><br><span class="line">    EXISTED_GOOD(<span class="number">7001</span>, <span class="string">&quot;已存在该商品&quot;</span>),</span><br><span class="line">    EXISTED_GOOD_INCART(<span class="number">7002</span>,<span class="string">&quot;购物车中已经存在该商品&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*招投标错误*/</span></span><br><span class="line">    EXISTED_SUBMISSION(<span class="number">8001</span>,<span class="string">&quot;已经存在该投标了&quot;</span>),</span><br><span class="line">    EXISTED_INVITATION(<span class="number">8002</span>,<span class="string">&quot;已经存在该招标了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ResultCode(Integer code, String message) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResultCode <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResultCode <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据code获取message</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 状态码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMessageByCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (ResultCode ele : values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ele.getCode().equals(code)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ele.getMessage();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>状态码和信息就会一一对应，比较好维护。</p><h3 id="DATA"><a href="#DATA" class="headerlink" title="DATA"></a>DATA</h3><p>返回数据体，JSON格式，根据不同的业务又不同的JSON体。<br>我们要设计一个返回体类Result</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonResult</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Boolean succeed;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : ResultCode.COMMON_FAIL.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : ResultCode.COMMON_FAIL.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed, ResultCode resultEnum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getCode() : resultEnum.getCode());</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getMessage() : resultEnum.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : ResultCode.COMMON_FAIL.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : ResultCode.COMMON_FAIL.getMessage();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed, ResultCode resultEnum, T data)</span> &#123;</span><br><span class="line">        <span class="comment">//如多成功true,就走成功的code和message,否者就看传进来的resultEnum</span></span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getCode() : resultEnum.getCode());</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getMessage() : resultEnum.getMessage());</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getSucceed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> succeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSucceed</span><span class="params">(Boolean succeed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CommonResult&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;succeed=&quot;</span> + succeed +</span><br><span class="line">                <span class="string">&quot;, code=&quot;</span> + code +</span><br><span class="line">                <span class="string">&quot;, message=&#x27;&quot;</span> + message + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, data=&quot;</span> + data +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层Controller"><a href="#控制层Controller" class="headerlink" title="控制层Controller"></a><strong>控制层Controller</strong></h2><p>我们会在controller层处理业务请求，并返回给前端，以下面的材料查询为例:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/details/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult&lt;GoodDetailInfoVO&gt; <span class="title function_">getDetailsByGoodId</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">    <span class="type">GoodDetailInfoVO</span> <span class="variable">goodDetailInfoVO</span> <span class="operator">=</span> goodService.getGoodDetailById(id);</span><br><span class="line">    CommonResult&lt;GoodDetailInfoVO&gt;  result = <span class="keyword">new</span> <span class="title class_">CommonResult</span>&lt;&gt;(<span class="literal">true</span>,ResultCode.SUCCESS,goodDetailInfoVO);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果加上结果封装类ResultUtil类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; CommonResult&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">true</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title function_">fail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title function_">fail</span><span class="params">(ResultCode resultEnum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">false</span>, resultEnum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>材料查询就可以变成这样(更加简洁了):</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/detail/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult&lt;GoodDetailInfoVO&gt; <span class="title function_">getDetailByGoodId</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ResultUtil.success(goodService.getGoodDetailById(id));</span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>代码比较简洁了，也美观了。</p><p>到这里一般都满足日常开发的需求了如果还需要更简洁的话,可以参考以下内容:</p><h2 id="优雅优化"><a href="#优雅优化" class="headerlink" title="优雅优化"></a><strong>优雅优化</strong></h2><p>上面我们看到在Result类中增加了静态方法，使得业务处理代码简洁了。但小伙伴们有没有发现这样有几个问题：</p><p>1、每个方法的返回都是Result封装对象，没有业务含义</p><p>2、在业务代码中，成功的时候我们调用Result.success，异常错误调用Result.failure。是不是很多余</p><p>3、上面的代码，判断id是否为null，其实我们可以使用hibernate validate做校验，没有必要在方法体中做判断。</p><p>我们最好的方式直接返回真实业务对象，最好不要改变之前的业务方式，如下图</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-f9e0a277cbd0e5eca01a3969fc11d1d7_720w.jpg" alt="img"></p><p><strong>实现方案</strong></p><p>小伙伴们怎么去实现是不是有点思路，在这个过程中，我们需要做几个事情</p><ul><li>1、定义一个注解@ResponseResult，表示这个接口返回的值需要包装一下</li><li>2、拦截请求，判断此请求是否需要被@ResponseResult注解</li><li>3、核心步骤就是实现接口ResponseBodyAdvice和@ControllerAdvice，判断是否需要包装返回值，如果需要，就把Controller接口的返回值进行重写。</li></ul><p><strong>注解类</strong></p><p>用来标记方法的返回值，是否需要包装</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220322171452303.png" alt="image-20220322171452303"></p><p><strong>拦截器</strong></p><p>拦截请求，是否此请求返回的值需要包装，其实就是运行的时候，解析@ResponseResult注解</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-353b2bd7d82a4f301e402964eb63fbd6_720w.jpg" alt="img"></p><p>此代码核心思想，就是获取此请求，是否需要返回值包装，设置一个属性标记。</p><p><strong>重写返回体</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-a586efcf09669c7090807e0859fbeb40_720w.jpg" alt="img"></p><p>上面代码就是判断是否需要返回值包装，如果需要就直接包装。这里我们只处理了正常成功的包装，如果方法体报异常怎么办？处理异常也比较简单，只要判断body是否为异常类。</p><p><img src="https://pic3.zhimg.com/80/v2-bd9890ec7d4dc0de08ea46b485faf05e_720w.jpg" alt="img"></p><p>怎么做全局的异常处理，篇幅原因，这里就不做介绍了，只要思路理清楚了，自行改造就行。</p><p><strong>重写Controller</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-113c72e7ce1f6cb0744029e67b17ff76_720w.jpg" alt="img"></p><p>在控制器类上或者方法体上加上@ResponseResult注解，这样就ok了，简单吧。到此返回的设计思路完成，是不是又简洁，又优雅。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个方案还有没有别的优化空间，当然是有的。如：每次请求都要反射一下，获取请求的方法是否需要包装，其实可以做个缓存，不需要每次都需要解析。当然整体思路了解，小伙伴们就可以在此基础上面自行扩展。谢谢！！！</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> restful </tag>
            
            <tag> 项目规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea快捷键</title>
      <link href="/2022/03/21/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/03/21/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="Ctrl-Alt-O"><a href="#Ctrl-Alt-O" class="headerlink" title="Ctrl + Alt + O"></a>Ctrl + Alt + O</h3><p>功能：清理不需要的导入</p><h3 id="Ctrl-F12"><a href="#Ctrl-F12" class="headerlink" title="Ctrl+F12"></a>Ctrl+F12</h3><p>功能：查看当前类中的所有成员：方法、属性、内部类<br>亮点：直接显示所有成员的列表，支持搜索功能快速定位到某个成员的位置上。</p><p>搜索类中某个成员位置，直接输入关键字就会匹配出当前类中所有符合的成员。</p><p>选择查询结果直接定位到跳转到代码位置。</p><h3 id="Alt-7"><a href="#Alt-7" class="headerlink" title="Alt+7"></a>Alt+7</h3><p>功能：显示当前类的所有成员：方法、属性<br>亮点：显示当前类的继承关系，同时支持搜索功能快速定位到某个成员的位置上</p><h3 id="Ctrl-Shift-F"><a href="#Ctrl-Shift-F" class="headerlink" title="Ctrl+Shift+F"></a>Ctrl+Shift+F</h3><p>功能：在整个项目中搜索匹配符合关键词的位置</p><h3 id="Shift-Shift"><a href="#Shift-Shift" class="headerlink" title="Shift + Shift"></a>Shift + Shift</h3><p>在整个项目中搜索匹配符合关键词的位置<br>亮点：Symbols支持模糊查询只要记住几个字母就能查询出位置</p><h3 id="Ctrl-e"><a href="#Ctrl-e" class="headerlink" title="Ctrl+e"></a>Ctrl+e</h3><p>功能：查看最近操作的文件</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot快速入门</title>
      <link href="/2022/03/21/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dspringboot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/21/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dspringboot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><p>对spingboot的复习;</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速入门 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis(plus)找不到xml文件的坑</title>
      <link href="/2022/03/21/mybatis(plus)%E6%89%BE%E4%B8%8D%E5%88%B0xml%E6%96%87%E4%BB%B6%E7%9A%84%E5%9D%91/"/>
      <url>/2022/03/21/mybatis(plus)%E6%89%BE%E4%B8%8D%E5%88%B0xml%E6%96%87%E4%BB%B6%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-plus-找不到xml文件的坑"><a href="#Mybatis-plus-找不到xml文件的坑" class="headerlink" title="Mybatis(plus)找不到xml文件的坑"></a>Mybatis(plus)找不到xml文件的坑</h1><p>如图，启动SpringBoot项目时报错，</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220321132310967.png" alt="image-20220321132310967"></p><p>image</p><p>解决思路：</p><p>第一步：检查常规配置项是否正确，例如包名，命名空间名，xml中方法名和dao中方法名是否一致等…</p><p>第二步：确认使用的是Mybatis还是MybatisPlus,两者使用的配置项是不同的（这是我遇到的问题）</p><p><strong>properties文件:</strong></p><p>MybatisPlus引的包是<strong>mybatis-plus-boot-starter</strong>，对应的配置项是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mybatis-plus.mapper-locations=classpath:mapper/*.xml</span><br></pre></td></tr></table></figure><p>Mybatis对应的配置项是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mybatis.mapper-locations=classpath:mapper/*.xml</span><br></pre></td></tr></table></figure><p><strong>yaml文件:</strong></p><p>MybatisPlus对应的配置项是</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:com/feng/mapper/xml/*.xml</span></span><br></pre></td></tr></table></figure><p>第三部：检查xml文件是放在resource目录下单独的目录中还是和dao接口类放在一起，如果放在一起的话，需要在pom.xml中的build中增加</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--引入静态文件--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--引入mapper对应的xml文件--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小东西 </tag>
            
            <tag> mybatis </tag>
            
            <tag> mybatis-plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jwt的加密原理</title>
      <link href="/2022/03/20/jwt%E7%9A%84%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86,%E5%92%8Ctoken%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/03/20/jwt%E7%9A%84%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86,%E5%92%8Ctoken%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="1-两种token认证方式"><a href="#1-两种token认证方式" class="headerlink" title="1. 两种token认证方式"></a>1. 两种token认证方式</h2><p><strong>传统的token认证</strong></p><p>用户登录，服务端给前端返回token，并将token保存在服务端。<br>以后用户再来访问时，需要携带token，服务端获取token后再去数据库获取token做校验。</p><p><strong>JWT的token认证</strong></p><p>用户登录，服务端给用户返回一个token（服务端不保存）<br>以后用户再来访问时，需要携带token，服务端获取token做校验</p><p><strong>两种认证方式对比：</strong><br><strong>jwt相对于传统的token认证，无需将token保存在服务端。</strong></p><p>因为HTTP request 本身是stateless的，所以要不在server端使用session来判断，要不就用JWT，也就是bearer token，包含的有效期信息，以及user 信息来进行状态判断是否接受HTTP的request（比如用户是否已经登录），来避免存储session，以及服务器集群之间还要实现session同步的麻烦，现在只要定义一个secret_key就行。</p><p>每当用户想要访问受保护的路由或资源时，用户代理应该发送 JWT，通常在<strong>Authorization</strong>标头中使用<strong>Bearer</strong>模式。标头的内容应如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure><p><strong>JOSN Web Token</strong>(jwt)包含头部（header），载荷（claim set), 和签名(signature)。可以在载荷中存放预定义的元数据，只要是JOSON格式就可以了。</p><h2 id="2-jwt的token加密解密过程"><a href="#2-jwt的token加密解密过程" class="headerlink" title="2. jwt的token加密解密过程"></a>2. jwt的token加密解密过程</h2><p><strong>2.1 生成token</strong></p><p>用户登录成功后，使用jwt创建一个token，并返回给用户，token格式如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Base64URL(header)//第一段header</span><br><span class="line">.base64UrlEncode(payload)//第二段payload</span><br><span class="line">.HMACSHA256(Base64URL(header).base64UrlEncode(payload),secret)//第三段verify signature</span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiJ9//第一段</span><br><span class="line">.eyJvcGVuSWQiOiJvam5NVjVKQ3htdTI1Zjl6ai1SYU5xN0JiZTJvIiwianRpIjoidG9rZW5JZCIsImlhdCI6MTY0NDEzNDI5MywiZXhwIjoxNjQ0MTM2OTIwfQ//第二段</span><br><span class="line">.MRx_xPGNa9lzDGj4nrcdENCA2OgIp4En0TL_GH-_0BI//第三段</span><br></pre></td></tr></table></figure><p>注意：jwt生成的token是由三段字符串拼接而成，使用 . 连接起来</p><p><strong>1.token的第一段字符串：由下面的json数据通过base64（可逆）加密算法得到。</strong></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span>   <span class="comment">//第三段字符串的不可逆加密类型HS256</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span>   <span class="comment">//token类型JWT</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>2.token的第二段字符串：是由下面的payload信息通过base64（可逆）加密算法得到</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// payload信息 为自定义值，一般不放敏感信息</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,   <span class="comment">//用户id</span></span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>,<span class="comment">//用户名</span></span><br><span class="line">  <span class="string">&quot;exp&quot;</span>: <span class="number">1516239022</span>,<span class="comment">//token过期时间</span></span><br><span class="line">  <span class="string">&quot;openId&quot;</span>: <span class="string">&quot;fasdkhgflksdhfgsdkjlf&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.token的第三段字符串构成：<br>1)先将第一段和第二段的密文拼接起来<br>2)对拼接起来的密文字符串和自定义的盐进行 上边指定的HS256加密<br>3)对HS256加密后的密文再做base64加密</strong></p><p>注意：第一、二部分可以通过<code>Base64</code>解密得到，但第三部分不可以！</p><p>生成token代码如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 创建JWT</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(Map&lt;String, Object&gt; claims, Long time)</span> &#123;</span><br><span class="line">      <span class="comment">//指定签名的时候使用的签名算法，也就是header那部分，jjwt已经将这部分内容封装好了。</span></span><br><span class="line">      <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line">      <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">      <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">      <span class="comment">//生成JWT的时间</span></span><br><span class="line">      <span class="type">long</span> <span class="variable">nowMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">      <span class="comment">//下面就是在为payload添加各种标准声明和私有声明了</span></span><br><span class="line">      <span class="comment">//这里其实就是new一个JwtBuilder，设置jwt的body</span></span><br><span class="line">      <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">              <span class="comment">//如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的</span></span><br><span class="line">              .setClaims(claims)</span><br><span class="line">              <span class="comment">//设置jti(JWT ID)：是JWT的唯一标识，根据业务需要，这个可以设置为一个不重复的值，主要用来作为一次性token,从而回避重放攻击。</span></span><br><span class="line">              .setId(jwtId)</span><br><span class="line">              <span class="comment">//iat: jwt的签发时间</span></span><br><span class="line">              .setIssuedAt(now)</span><br><span class="line">              <span class="comment">//设置签名使用的签名算法和签名使用的秘钥</span></span><br><span class="line">              .signWith(signatureAlgorithm, secretKey);</span><br><span class="line">      <span class="keyword">if</span> (time &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> nowMillis + time;</span><br><span class="line">          <span class="type">Date</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line">          <span class="comment">//设置过期时间</span></span><br><span class="line">          builder.setExpiration(exp);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> builder.compact();</span><br><span class="line">      <span class="comment">//然后返回token</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.2 验证（解密）token</strong></p><p>当用户再来访问时，需要携带token，后端需要对token进行校验</p><ul><li>①：获取token</li><li>②：对token进行切割成三部分</li><li>③：对第二段字符串进行base64解密，检测token是否超时？</li><li>④：对第一二段字符串拼接，再次进行HS256加密，得到密文字符串</li><li>⑤：对token的第三段HS256加密</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证jwt</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">verifyJwt</span><span class="params">(String token)</span> &#123;</span><br><span class="line">    <span class="comment">//签名秘钥，和生成的签名的秘钥一模一样</span></span><br><span class="line">    <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> generalKey();</span><br><span class="line">    Claims claims;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        claims = Jwts.parser()  <span class="comment">//得到DefaultJwtParser</span></span><br><span class="line">                .setSigningKey(key)         <span class="comment">//设置签名的秘钥</span></span><br><span class="line">                .parseClaimsJws(token).getBody();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        claims = <span class="literal">null</span>;</span><br><span class="line">    &#125;<span class="comment">//设置需要解析的jwt</span></span><br><span class="line">    <span class="keyword">return</span> claims;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ps : token一旦生成，在过期时间内永久有效，即使项目重启！想要失效token必须等待过期，或者重置盐值！</p><h2 id="3-token登出、改密后失效"><a href="#3-token登出、改密后失效" class="headerlink" title="3. token登出、改密后失效"></a>3. token登出、改密后失效</h2><p>使用jwt时，一般修改密码或退出登录时，需要把正在使用的token做失效处理，防止别的客户端使用失效token访问信息。</p><ul><li><strong>方案一</strong>：在每次修改密码或者退出登录后，修改一下自定义的盐值。当进行下次访问时，会根据自定义盐值验证<code>token</code>，修改了自定义盐值，自然访问不通过。</li><li><strong>方案二</strong>：利用数据库，存放一个修改或者登出的时间，在创建<code>token</code>时，标注上创建时间。如果这个创建时间小于修改或登出的时间，就表示它是修改或者登出之前的<code>token</code>，为过期<code>token</code>(有点不是很懂,好像就是判断token是否过期)</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据userId和openid生成token</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String openId)</span> &#123;</span><br><span class="line">       Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       map.put(<span class="string">&quot;openId&quot;</span>, openId);</span><br><span class="line">       <span class="keyword">return</span> createJWT(map, tokenExpiredTime);<span class="comment">//直接调用上面的createJWT方法</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * token是否过期,就是拿到</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  true：过期</span></span><br><span class="line"><span class="comment">    * lastLoginDate 数据库记录的最后一次登出时间</span></span><br><span class="line"><span class="comment">    * issueDate token 创建时间</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isTokenExpired</span><span class="params">(Date expiration,Date lastLoginDate,Date issueDate)</span> &#123;</span><br><span class="line">       <span class="comment">//token创建时间小于数据库记录的最后一次登出时间 过期</span></span><br><span class="line">       <span class="keyword">if</span>(lastLoginDate == <span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> expiration.before(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> issueDate.before(lastLoginDate);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拦截器的判断:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(jwtUtils.isTokenExpired(claims.getExpiration(),user.getLoginDate(),claims.getIssuedAt()))&#123;</span><br><span class="line">           <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> ResultGenerator.genFailResult(ResultCode.UNAUTHORIZED,<span class="string">&quot;token失效,请重新登录&quot;</span>);</span><br><span class="line">           SendMsgUtil.sendJsonMessage(response,result);</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-token的自动续期、一定时间内无操作掉线"><a href="#4-token的自动续期、一定时间内无操作掉线" class="headerlink" title="4. token的自动续期、一定时间内无操作掉线"></a>4. token的自动续期、一定时间内无操作掉线</h2><p><strong>场景</strong>：用户登陆后，token的过期时间为30分钟，如果在这30分钟内没有操作，则重新登录，如果30分钟内有操作，就给token自动续一个新的时间。避免用户正在操作时掉线重登！</p><p><strong>实现①：在jwt生成token时先不设置过期时间，过期时间的操作放在redis中。</strong>()这一次官网项目好像就有这个)</p><ul><li>①：在登陆时，把用户信息（或者token）放进redis，并设置过期时间</li><li>②：如果30分钟内用户有操作，前端带着token来访问，过滤器解析token得到用户信息，去redis中验证用户信息，验证成功则在redis中增加过期时间，验证失败，返回token错误。实现了token时间的自动更新。</li><li>③：如果30分钟内用户无操作，redis中的用户信息已过期，此时再进行操作，token解析出的用户信息在redis中验证失败，则重新登录。实现了一定时间内无操作掉线！</li></ul><p><strong>实现②：使用access_token、refresh_token 解决</strong></p><ul><li><p>登录获取token(包括访问令牌<code>access_token</code>，刷新令牌<code>refresh_token</code>），其中access_token设置过期时间为5分钟，refresh_token设置过期时间为30分钟。不能同时过期</p></li><li><p>前端保存<code>access_token</code>和<code>refresh_token</code>，每次请求带着<code>access_token</code>去访问服务器资源</p></li><li><p>服务器校验<code>access_token</code>有效性，通过解析<code>access_token</code>看是否能解析出用户信息。如果用户信息为<code>null</code>，说明<code>token</code>无效，返回<code>401</code>，让用户重新登录</p></li><li><p>服务器端校验<code>access_token</code>是否过期</p></li><li><p>如果<code>access_token</code>没有过期，则token正常，继续执行业务逻辑</p><ul><li><p>如果<code>access_token</code>过期，计算 过期后到当前的时间大小 是否在<code>refresh_token</code>过期时间之内（是否大于<code>30 - 5 - 5 = 20</code>分钟，为什么不是<code>30 - 5 = 25</code>分钟呢？主要是想对正在请求的用户token做一个缓存，保证在最后五分钟内，新、老token都有效！防止正在进行的请求token突然失效！），</p><ul><li>如果大于<code>refresh_token</code>的过期时间，则表示用户长时间无操作，token真正过期了，返回401，让用户重新登录</li></ul></li><li><p>如果小于<code>refresh_token</code>的过期时间，则继续让该<code>access_token</code>访问业务，但返回给前端标识，提示token已过期，让前端带着<code>refresh_token</code>去服务器获取新的<code>access_token</code>，并保存在前端，后续使用新的<code>access_token</code>去访问！</p></li></ul></li></ul><h2 id="5-JWT工具类"><a href="#5-JWT工具类" class="headerlink" title="5.JWT工具类"></a>5.JWT工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.io.BaseEncoding;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtBuilder;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> tokenExpiredTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String jwtId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String jwtSecret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建JWT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(Map&lt;String, Object&gt; claims, Long time)</span> &#123;</span><br><span class="line">        <span class="comment">//指定签名的时候使用的签名算法，也就是header那部分，jjwt已经将这部分内容封装好了。</span></span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="comment">//生成JWT的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">nowMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//下面就是在为payload添加各种标准声明和私有声明了</span></span><br><span class="line">        <span class="comment">//这里其实就是new一个JwtBuilder，设置jwt的body</span></span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                <span class="comment">//如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的</span></span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                <span class="comment">//设置jti(JWT ID)：是JWT的唯一标识，根据业务需要，这个可以设置为一个不重复的值，主要用来作为一次性token,从而回避重放攻击。</span></span><br><span class="line">                .setId(jwtId)</span><br><span class="line">                <span class="comment">//iat: jwt的签发时间</span></span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                <span class="comment">//设置签名使用的签名算法和签名使用的秘钥</span></span><br><span class="line">                .signWith(signatureAlgorithm, secretKey);</span><br><span class="line">        <span class="keyword">if</span> (time &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> nowMillis + time;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line">            <span class="comment">//设置过期时间</span></span><br><span class="line">            builder.setExpiration(exp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证jwt</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">verifyJwt</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="comment">//签名秘钥，和生成的签名的秘钥一模一样</span></span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        Claims claims;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims = Jwts.parser()  <span class="comment">//得到DefaultJwtParser</span></span><br><span class="line">                    .setSigningKey(key)         <span class="comment">//设置签名的秘钥</span></span><br><span class="line">                    .parseClaimsJws(token).getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            claims = <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="comment">//设置需要解析的jwt</span></span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由字符串生成加密key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SecretKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title function_">generalKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">stringKey</span> <span class="operator">=</span> jwtSecret;</span><br><span class="line">        <span class="type">byte</span>[] encodedKey = BaseEncoding.base64().decode(stringKey);</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(encodedKey, <span class="number">0</span>, encodedKey.length, <span class="string">&quot;HmacSHA256&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据userId和openid生成token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String openId)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;openId&quot;</span>, openId);</span><br><span class="line">        <span class="keyword">return</span> createJWT(map, tokenExpiredTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.token-expired-time&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTokenExpiredTime</span><span class="params">(<span class="type">long</span> tokenExpiredTime)</span> &#123;</span><br><span class="line">        JwtUtils.tokenExpiredTime = tokenExpiredTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJwtId</span><span class="params">(String jwtId)</span> &#123;</span><br><span class="line">        JwtUtils.jwtId = jwtId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.secret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJwtSecret</span><span class="params">(String jwtSecret)</span> &#123;</span><br><span class="line">        JwtUtils.jwtSecret = jwtSecret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getTokenExpiredTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tokenExpiredTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJwtId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jwtId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJwtSecret</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jwtSecret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-整合springboot"><a href="#6-整合springboot" class="headerlink" title="6.整合springboot"></a>6.整合springboot</h2><p><strong>搭建springboot+mybatis-plus+jwt环境</strong></p><p><strong>引入依赖:</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--解决生成JWT时base64加密错误--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>31.0.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--引入jwt--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--引入lombok--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入druid--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.feng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springbootmybatisplus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>yaml中的配置信息:</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8989</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">nihao123</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">initialSize:</span> <span class="number">10</span>   <span class="comment">#初始化连接个数</span></span><br><span class="line">      <span class="attr">minIdle:</span> <span class="number">10</span>       <span class="comment">#最小空闲连接个数</span></span><br><span class="line">      <span class="attr">maxActive:</span> <span class="number">100</span>    <span class="comment">#最大连接个数</span></span><br><span class="line">      <span class="attr">maxWait:</span> <span class="number">60000</span>    <span class="comment">#获取连接时最大等待时间，单位毫秒。</span></span><br><span class="line">      <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span>  <span class="comment">#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class="line">      <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">30000</span>     <span class="comment">#配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class="line">      <span class="attr">validationQuery:</span> <span class="string">select</span> <span class="string">&#x27;x&#x27;</span> <span class="comment">#用来检测连接是否有效的sql，要求是一个查询语句。</span></span><br><span class="line">      <span class="attr">testWhileIdle:</span> <span class="literal">true</span>       <span class="comment">#建议配置为true，不影响性能，并且保证安全性。如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span></span><br><span class="line">      <span class="attr">testOnBorrow:</span> <span class="literal">true</span>        <span class="comment">#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</span></span><br><span class="line">      <span class="attr">testOnReturn:</span> <span class="literal">false</span>       <span class="comment">#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</span></span><br><span class="line">      <span class="attr">poolPreparedStatements:</span> <span class="literal">false</span> <span class="comment">#是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</span></span><br><span class="line">      <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">-1</span> <span class="comment">#要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall</span> <span class="comment">#通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat，日志用的filter:log4j，防御sql注入的filter:wall</span></span><br><span class="line">      <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span> <span class="comment"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span></span><br><span class="line">      <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">false</span> <span class="comment"># 合并多个DruidDataSource的监控数据</span></span><br><span class="line"><span class="attr">jwt:</span></span><br><span class="line">  <span class="comment">#设置token的过期时间，单位为秒</span></span><br><span class="line">  <span class="attr">token-expired-time:</span> <span class="number">36000</span> <span class="comment">#10小时</span></span><br><span class="line">  <span class="comment">#设置token的id</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">tokenId</span></span><br><span class="line">  <span class="comment">#设置密钥</span></span><br><span class="line">  <span class="attr">secret:</span> <span class="string">aPbOBbnH4gnZBzIYEY7mxWNu49kYljNPMeva9Fjrwwqzw0bFlO0kPXZTCGaVcw0j</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:com/feng/mapper/xml/*.xml</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>创建一个简单的数据表</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">80</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户密码&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>记得插入账号和密码信息</p><p><strong>entity类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/21 11:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain=true)</span><span class="comment">//这是干啥用的哦</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>service里面的</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    User <span class="title function_">login</span><span class="params">(User user)</span>;<span class="comment">//登录接口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.SUPPORTS)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">login</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">userDB</span> <span class="operator">=</span> userMapper.login(user);</span><br><span class="line">        <span class="keyword">if</span>(userDB!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> userDB;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;登录失败~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>mapper里面:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    User <span class="title function_">login</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml文件中</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.feng.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里就写的简单点了毕竟不是重点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.feng.entity.User&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.feng.entity.User&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from user</span><br><span class="line">        where name = #&#123;name&#125;</span><br><span class="line">          and password = #&#123;password&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>controller类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 登录判断,得到一个token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: ladidol</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2022/3/21 13:40 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: [user]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span>: java.util.Map&lt;java.lang.String,java.lang.Object&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        Map&lt;String,Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        log.info(<span class="string">&quot;用户名: [&#123;&#125;]&quot;</span>, user.getName());</span><br><span class="line">        log.info(<span class="string">&quot;密码: [&#123;&#125;]&quot;</span>, user.getPassword());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">userDB</span> <span class="operator">=</span> userService.login(user);</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">//用来存放payload</span></span><br><span class="line">            map.put(<span class="string">&quot;id&quot;</span>,userDB.getId());</span><br><span class="line">            map.put(<span class="string">&quot;username&quot;</span>, userDB.getName());</span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtils.createJWT(map,<span class="number">10000000L</span>);</span><br><span class="line">            result.put(<span class="string">&quot;state&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">            result.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;登录成功!!!&quot;</span>);</span><br><span class="line">            result.put(<span class="string">&quot;token&quot;</span>,token); <span class="comment">//成功返回token信息</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            result.put(<span class="string">&quot;state&quot;</span>,<span class="string">&quot;false&quot;</span>);</span><br><span class="line">            result.put(<span class="string">&quot;msg&quot;</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 再次判断token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: ladidol</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2022/3/21 13:40 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: [token]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span>: java.util.Map&lt;java.lang.String,java.lang.Object&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">test</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JwtUtils.verifyJwt(token);</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;验证通过~~~&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException e) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Token已经过期!!!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureVerificationException e)&#123;</span><br><span class="line">            map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;签名错误!!!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlgorithmMismatchException e)&#123;</span><br><span class="line">            map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;加密算法不匹配!!!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;无效token~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加拦截器:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">  Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    JWTUtils.verify(token);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (TokenExpiredException e) &#123;</span><br><span class="line">    map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Token已经过期!!!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SignatureVerificationException e)&#123;</span><br><span class="line">    map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;签名错误!!!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (AlgorithmMismatchException e)&#123;</span><br><span class="line">    map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;加密算法不匹配!!!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;无效token~~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(map);</span><br><span class="line">  response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">  response.getWriter().println(json);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">JwtTokenInterceptor</span>()).</span><br><span class="line">          excludePathPatterns(<span class="string">&quot;/user/**&quot;</span>)</span><br><span class="line">          .addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可以在postman里面测试:</strong></p><p>登录接口:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220321135050610.png" alt="image-20220321135050610"></p><p>测试接口:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220321134257642.png" alt="image-20220321134257642"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> jwt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jwt </tag>
            
            <tag> 加密原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git注意事项</title>
      <link href="/2022/03/20/git%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2022/03/20/git%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="1、gitHub-提交"><a href="#1、gitHub-提交" class="headerlink" title="1、gitHub 提交"></a>1、gitHub 提交</h3><p>（1）创建本地的新仓库然后提交：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# springboot-batch-demo project&quot;</span> &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin  https://&lt;your_token&gt;@github.com/ladidol/springboot-batch-demo.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>（2）提交一个已经本地已经存在的仓库：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin  https://&lt;your_token&gt;@github.com/ladidol/springboot-batch-demo.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>…</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 注意事项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java算法小知识点</title>
      <link href="/2022/03/20/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5Djava%E7%AE%97%E6%B3%95%E5%B0%8F%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/03/20/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5Djava%E7%AE%97%E6%B3%95%E5%B0%8F%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><p>回声实验室的算法路线<a href="https://git.pyhub.club/star/list/-/blob/main/AlgorithmStudyList.md">传送门</a></p><p>这里主要是一些小小知识点,希望以后能不断完善并总结更系统更有条理的…</p><h1 id="片段"><a href="#片段" class="headerlink" title="片段:"></a>片段:</h1><h2 id="java的一个快速输入"><a href="#java的一个快速输入" class="headerlink" title="java的一个快速输入:"></a>java的一个快速输入:</h2><p><strong>通过BufferedReader来实现(一般就用这个就行):</strong></p><p>&#x2F;&#x2F;注意要引入这个**java.io.***包<br>&#x2F;&#x2F;同时还有异常要抛出</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//基本输入</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Integer.parseInt(br.readLine());</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        String[] tmp = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">a</span> <span class="operator">=</span> Long.parseLong(tmp[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">long</span> <span class="variable">b</span> <span class="operator">=</span> Long.parseLong(tmp[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日期差简单运算"><a href="#日期差简单运算" class="headerlink" title="日期差简单运算:"></a>日期差简单运算:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/20 15:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> class 日期处理 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//基本输入</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        <span class="comment">//通过SimpleDateFormat来解析设置日期格式:</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd hh:mm&quot;</span>);</span><br><span class="line">        <span class="comment">/*天数差*/</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">fromDate</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;2022-03-20 12:00&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">toDate</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;2090-03-20 12:00&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">from</span> <span class="operator">=</span> fromDate.getTime();</span><br><span class="line">        <span class="type">long</span> <span class="variable">to</span> <span class="operator">=</span> toDate.getTime();</span><br><span class="line">        <span class="type">int</span> <span class="variable">days</span> <span class="operator">=</span> (<span class="type">int</span>) ((to - from)/(<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;两个时间之间的天数差为: &quot;</span> + days);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简单的类的排序"><a href="#简单的类的排序" class="headerlink" title="简单的类的排序:"></a>简单的类的排序:</h2><p><strong>通过新建一个实现了Comparable的类:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt; &#123;</span><br><span class="line">        <span class="comment">//注意static</span></span><br><span class="line">        String name;</span><br><span class="line">        Integer totalFenShu;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, Integer totalFenShu)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.totalFenShu = totalFenShu;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">            <span class="comment">//一定重写compareTo这个方法</span></span><br><span class="line">            <span class="keyword">return</span> totalFenShu.compareTo(o.totalFenShu);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, totalFenShu=&quot;</span> + totalFenShu +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//基本输入</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Integer.parseInt(br.readLine());</span><br><span class="line"></span><br><span class="line">        Student[] students = <span class="keyword">new</span> <span class="title class_">Student</span>[n];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            String[] tmp = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> tmp[<span class="number">0</span>];</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">totalFenShu</span> <span class="operator">=</span> Integer.parseInt(tmp[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">            students[i] = <span class="keyword">new</span> <span class="title class_">Student</span>(name,totalFenShu);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用Arrays.sort()对数组进行排序</span></span><br><span class="line">        Arrays.sort(students);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Student i: students) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">feng 123</span><br><span class="line">xiao 122</span><br><span class="line">qiang 112</span><br><span class="line">quan 1166</span><br><span class="line">Student&#123;name=&#x27;qiang&#x27;, totalFenShu=112&#125;</span><br><span class="line">Student&#123;name=&#x27;xiao&#x27;, totalFenShu=122&#125;</span><br><span class="line">Student&#123;name=&#x27;feng&#x27;, totalFenShu=123&#125;</span><br><span class="line">Student&#123;name=&#x27;quan&#x27;, totalFenShu=1166&#125;</span><br></pre></td></tr></table></figure><h2 id="常用进制转换"><a href="#常用进制转换" class="headerlink" title="常用进制转换:"></a>常用进制转换:</h2><p><strong>十进制转十六进制:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer.toHexString(shu)<span class="comment">//shu是十进制int型</span></span><br></pre></td></tr></table></figure><p><strong>十六进制转十进制</strong>:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Long.parseLong(hex,<span class="number">16</span>)<span class="comment">//这个hex是String字符串类型</span></span><br></pre></td></tr></table></figure><h2 id="最大公约数的寻找"><a href="#最大公约数的寻找" class="headerlink" title="最大公约数的寻找:"></a>最大公约数的寻找:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">gongYueShu</span><span class="params">(<span class="type">int</span> A, <span class="type">int</span> B)</span>&#123;</span><br><span class="line">    <span class="type">return</span> <span class="variable">B</span> <span class="operator">=</span>= <span class="number">0</span>? A: gongYueShu(B, A % B);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找:"></a>二分查找:</h2><p>目标值小了就去左侧找,大了就去右侧找</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">indexOfMid</span> <span class="operator">=</span> (right - left) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> arr[indexOfMid];</span><br><span class="line">        <span class="keyword">if</span> (target &gt; mid)&#123;</span><br><span class="line">            <span class="comment">//从右侧找,就要把左边界给缩小;</span></span><br><span class="line">            left = indexOfMid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target &lt; mid)&#123;</span><br><span class="line">            <span class="comment">//从左侧找,就要把右边界给缩小;</span></span><br><span class="line">            right = indexOfMid - <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//说明找到了,那就返回坐标;</span></span><br><span class="line">            <span class="keyword">return</span> indexOfMid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="java中有一种大数"><a href="#java中有一种大数" class="headerlink" title="java中有一种大数:"></a>java中有一种大数:</h2><p><strong>BigInteger</strong></p><p>例题题目:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">求两个超大数的最大公因数</span><br><span class="line">输入:</span><br><span class="line">12 16</span><br><span class="line">输出:</span><br><span class="line">4</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        String[] tmp = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(tmp[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(tmp[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(yueFen(a,b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BigInteger <span class="title function_">yueFen</span><span class="params">(BigInteger a, BigInteger b)</span> &#123;</span><br><span class="line">        <span class="comment">//注意,这里return b==0 ? a : yueFeng(b, a.mod(b));</span></span><br><span class="line">        <span class="comment">//注意等于用b.equals(BigInteger.ZERO)</span></span><br><span class="line">        <span class="keyword">return</span> b.equals(BigInteger.ZERO) ? a : yueFen(b,a.mod(b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora和PicGo的结合</title>
      <link href="/2022/03/20/typora%E5%92%8Cpicgo%E7%9A%84%E7%BB%93%E5%90%88/"/>
      <url>/2022/03/20/typora%E5%92%8Cpicgo%E7%9A%84%E7%BB%93%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/%E5%A4%87%E7%94%A814.png" alt="备用14"></p><p>图床上传软件picgo的一些简单配置<a href="https://blog.csdn.net/yefcion/article/details/88412025">传送门</a></p><p>结合详情请看这个博客<a href="https://blog.csdn.net/bruce_6/article/details/104821531?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_paycolumn_v3&utm_relevant_index=1">传送门</a></p><p>这个也是一个<a href="https://blog.csdn.net/u011291916/article/details/119194338">传送门</a></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>作为图床的仓库最好<strong>不能超过 1G</strong>，因为仓库超过 1G 后会有人工审核仓库内容。一旦发现用于图床可能会被删库也可能会被封号！！！所以建议在 1G 之前就换个仓库</li><li>仓库是<strong>公开</strong>的，所以图片放上去要注意隐私问题，特别是单位的一些涉密资料</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 小东西 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PageResult类的使用</title>
      <link href="/2022/03/17/PageResult%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/03/17/PageResult%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 一般返回全部东西的话就要用到page页面,</span><br><span class="line">* 然后一般返回普通的page(import com.baomidou.mybatisplus.extension.plugins.pagination.Page</span><br><span class="line">* 其中要新建一个页面的到页面的大小,页面页数</span><br></pre></td></tr></table></figure><p>PageResult类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cuit.epoch.util.result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Pymjl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/1/21 22:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageResult</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt;, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">3720998571176536865L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; records = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一共有多少条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> totalElements;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> currentPage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一页数据最多有多少条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> pageSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一共有多少页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> totalPages;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页数有多少条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> numberOfElements;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法，只用把原来的page类放进来即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 查出来的分页对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageResult</span><span class="params">(Page&lt;T&gt; page)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.records = page.getRecords();</span><br><span class="line">        <span class="built_in">this</span>.totalElements = page.getTotal();</span><br><span class="line">        <span class="built_in">this</span>.currentPage = page.getCurrent();</span><br><span class="line">        <span class="built_in">this</span>.pageSize = page.getSize();</span><br><span class="line">        <span class="built_in">this</span>.numberOfElements = page.getRecords().size();</span><br><span class="line">        <span class="built_in">this</span>.totalPages = page.getPages();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有前一页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPrevious</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getCurrentPage() &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有下一页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getCurrentPage() + <span class="number">1</span> &lt; getTotalPages();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取总的页数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> long</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getTotalPages</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.totalPages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前页的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List&lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;T&gt; <span class="title function_">getRecords</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableList(records);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> records 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRecords</span><span class="params">(List&lt;T&gt; records)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.records = records;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasRecords</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getNumberOfElements() &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单页大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getPageSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置单页大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageSize</span><span class="params">(Long pageSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pageSize = pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取全部元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getTotalElements</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> totalElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置全部元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotalElements</span><span class="params">(<span class="type">long</span> totalElements)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.totalElements = totalElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前页号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getCurrentPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置当前页号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCurrentPage</span><span class="params">(Long currentPage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.currentPage = currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单页元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumberOfElements</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> numberOfElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置单页元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNumberOfElements</span><span class="params">(<span class="type">int</span> numberOfElements)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.numberOfElements = numberOfElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getRecords().iterator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PrizeService:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PrizeService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Prize&gt; &#123;</span><br><span class="line">    Page&lt;Prize&gt; <span class="title function_">getPrizeByEverything</span><span class="params">(Integer currentPage, Integer pageSize, PrizeUpdateDTO PrizeUpdateDTO)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PrizeServiceImpl:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/17 21:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrizeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;PrizeMapper, Prize&gt; <span class="keyword">implements</span> <span class="title class_">PrizeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    PrizeMapper prizeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    通过奖项的一些属性筛选,查询,通过分页返回</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Page&lt;Prize&gt; <span class="title function_">getPrizeByEverything</span><span class="params">(Integer currentPage, Integer pageSize, PrizeUpdateDTO prizeUpdateDTO)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Prize&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;需要查询的班级为:&quot;</span> + prizeUpdateDTO.getClbum());</span><br><span class="line">        queryWrapper</span><br><span class="line">                .like(Strings.isNotBlank(prizeUpdateDTO.getPrizeName()),Prize::getPrizeName,prizeUpdateDTO.getPrizeName())</span><br><span class="line">                .like(Strings.isNotBlank(prizeUpdateDTO.getPrizeWinner()),Prize::getPrizeWinner,prizeUpdateDTO.getPrizeWinner())</span><br><span class="line">                .like(Strings.isNotBlank(prizeUpdateDTO.getClbum()),Prize::getClbum,prizeUpdateDTO.getClbum())</span><br><span class="line">                .like(Strings.isNotBlank(prizeUpdateDTO.getGrade()),Prize::getGrade,prizeUpdateDTO.getGrade())</span><br><span class="line">                .like(Strings.isNotBlank(prizeUpdateDTO.getProfession()),Prize::getProfession,prizeUpdateDTO.getProfession())</span><br><span class="line">                .like(Strings.isNotBlank(prizeUpdateDTO.getPrizeName()),Prize::getPrizeName,prizeUpdateDTO.getPrizeName());</span><br><span class="line">        <span class="keyword">if</span> (prizeUpdateDTO.getPrizeTime() != <span class="literal">null</span>)&#123;</span><br><span class="line">            queryWrapper.like(Prize::getPrizeTime,prizeUpdateDTO.getPrizeTime());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Page&lt;Prize&gt; prizePage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(currentPage, pageSize);</span><br><span class="line">        prizeMapper.selectPage(prizePage,queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> prizePage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PrizeController:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: todo 异常拦截</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/17 20:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/prizes&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrizeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    PrizeService prizeService</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 通过分类筛选,你想要怎么筛选都可以,你直接传一个prize对象给我就行</span></span><br><span class="line"><span class="comment">     * 这里的prizeUpdateDTO没有将json中的class识别转换成clbum,一个小bug,是因为,没有加<span class="doctag">@requestBody</span>这个注解,这里是直接从require参数中取值,不是json中取值,<span class="doctag">@Json</span>就没有很大的作用,可以新建一个类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: ladidol</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2022/3/18 11:28</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span>:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/searchByEverything&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;PageResult&lt;Prize&gt;&gt; <span class="title function_">getPrizesByEverything</span><span class="params">(<span class="meta">@RequestParam(&quot;currentPage&quot;)</span>Integer currentPage, <span class="meta">@RequestParam(&quot;pageSize&quot;)</span>Integer pageSize, PrizeUpdateDTO prizeUpdateDTO)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="keyword">new</span> <span class="title class_">PageResult</span>&lt;&gt;(prizeService.getPrizeByEverything(currentPage, pageSize, prizeUpdateDTO)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>PrizeUpdateDTO:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/17 21:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrizeUpdateDTO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;奖项id不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;奖项者不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String prizeWinner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;奖项名字不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String prizeName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;奖项时间不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date prizeTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;奖项文件不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;专业不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String profession;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;年级不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String grade;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;班级不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;class&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String clbum;<span class="comment">//班级</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>apifox上查询结果:</p><p>例一:</p><p>途中是对奖项名字prizeName带有”奖项”和奖项专业profession带有计算机的进行的筛选返回</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220318124622466.png" alt="image-20220318124622466"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220318124600563.png" alt="image-20220318124600563"></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;records&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小小1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;奖项11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小小2&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;奖项11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:17&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:17&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小小3&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;奖项11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:22&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:22&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小小4&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;奖项11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:29&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:29&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;succeed&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;totalElements&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;currentPage&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pageSize&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;totalPages&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;numberOfElements&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;succeed&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>例二:直接查询全部奖项</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220318124910533.png" alt="image-20220318124910533"></p><p>结果:</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;records&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小李&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;蓝桥杯一等奖省&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-09 20:42:25&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 15:09:34&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 15:09:36&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;202&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小钱&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;奖项1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;电子信息&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 15:17:39&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 15:17:42&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;208&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小金&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获奖1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 20:42:31&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;大气&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;19级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 16:35:24&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 16:35:24&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;191&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小彭&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获奖3&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 20:42:36&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;区块链&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;18级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 16:42:22&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 16:42:22&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;181&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小刚&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获奖7&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 20:42:41&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;资环&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;17级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 17:46:13&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 17:46:13&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;176&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李华&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获奖8&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 20:42:44&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;资环&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;19级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 17:54:23&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 17:54:23&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;194&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小小&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获奖9&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 20:42:47&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;外国语&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;21级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 21:55:14&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 21:55:14&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;212&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小强&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;项11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:26:15&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:26:15&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小小1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;奖项11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小小2&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;奖项11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:17&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:17&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;succeed&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;totalElements&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;currentPage&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pageSize&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;totalPages&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;numberOfElements&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;succeed&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(未完成)JavaScript学习</title>
      <link href="/2022/03/17/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5DJavaScript%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/17/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5DJavaScript%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><p><strong>JavaScript</strong>是一种属于网络的脚本语言，有它自身的基本数据类型、表达式和算术运算符及程序的基本程序框架，已经被广泛用于Web应用开发。</p><p>更重要的是JavaScript同HTML5一样具有<strong>跨平台性</strong>。</p><p><strong>简单</strong>是JavaScript的又一大优点。</p><p>随着服务器的强壮，引擎如V8和框架如Node.js的发展，及其事件驱动及异步IO等特性，<strong>JavaScript</strong>也逐渐被用来编写服务器端程序</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> web前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(未完成)CSS学习</title>
      <link href="/2022/03/17/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dcss%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/17/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dcss%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><h2 id="一、CSS简介"><a href="#一、CSS简介" class="headerlink" title="一、CSS简介"></a>一、CSS简介</h2><p><strong>CSS即层叠样式表</strong>（Cascading StyleSheet），</p><p>层叠样式表可以有效地对游戏场景、网站页面、微信小程序和各种基于H5的应用软件进行布局，对字体、颜色、背景和其它效果实现更加精确的控制</p><p><strong>HTML、CSS和JavaScript的关系如下：</strong></p><p>“HTML是网页的结构，CSS是网页的外观，而JavaScript是页面的行为。”</p><h2 id="二、内容"><a href="#二、内容" class="headerlink" title="二、内容"></a>二、内容</h2><h3 id="1-css的引入方式"><a href="#1-css的引入方式" class="headerlink" title="1.css的引入方式"></a>1.css的引入方式</h3><p>在HTML中引入CSS共有3种方式：</p><p>（1）外部样式表； （2）内部样式表； （3）内联样式表；</p><p>下面我们详细为大家介绍这3种CSS引入方式。</p><p>一、CSS的3种引用方式</p><p><strong>1、外部样式表</strong>(解耦合)</p><p>外部样式表是<strong>最理想的CSS引用方式，</strong>在实际开发当中，为了提升网站的性能和维护性，一般都是使用外部样式表。所谓的“外部样式表”，就是把CSS代码和HTML代码都单独放在不同文件中，然后<strong>在HTML文档中使用link标签来引用CSS样式表</strong>。 当样式需要被应用到多个页面时，外部样式表是最理想的选择。使用样式表，你就可以通过更改一个CSS文件来改变整个网站的外观。 外部样式表在单独文件中定义，并且在标签对中使用link标签来引用。 举例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在HTML页面中引用文件名为index的css文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;index.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong>：外部样式表都是在head标签内使用link标签来引用的。</p><p><strong>2、内部样式表</strong></p><p>内部样式，指的就是把CSS代码和HTML代码放在同一个文件中，其中CSS代码放在标签对是放在标签对内的。 举例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这是内部样式表，CSS样式在style标签中定义--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:Red;&#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器预览效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220317112626183.png" alt="image-20220317112626183"></p><p>说明：</p><p>对于内部样式表，CSS样式在<style>标签内定义，而<style>标签必须放在<head>标签内。</p><p><strong>3.内联样式表</strong></p><p>内联样式表，也是把CSS代码和HTML代码放在同一个文件中，但是跟内部样式表不同，CSS样式不是在<style></style>标签对中定义，而是在标签的style属性中定义。</p><p>举例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:Red; &quot;</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:Red; &quot;</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:Red; &quot;</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器预览效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220317113125557.png" alt="image-20220317113125557"></p><h3 id="2-元素的id和class"><a href="#2-元素的id和class" class="headerlink" title="2.元素的id和class"></a>2.元素的id和class</h3><p>id和class是HTML元素中两个最基本的公共属性。</p><p><strong>一、元素的id属性</strong></p><p>id属性被赋予了标识页面元素的唯一身份。如果一个页面出现了多个相同id属性取值，<a href="http://www.lvyestudy.com/les_cj/cj_2.2.aspx">CSS选择器</a>或者JavaScript就会因为无法分辨要控制的元素而最终报错。</p><p>举例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/css_reset.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>上面HTML代码是错误的，因为在同一个HTML页面中，不允许出现两个相同的id。不过要注意一下，在不同页面是可以出现相同id的元素。</p><p><strong>二、元素的class属性</strong></p><p>class，顾名思义，就是“类”。它采用的思想跟其他C、Java等编程语言的“类”相似。我们可以为同一个页面的相同元素或者不同元素设置相同的class，然后使得相同的class具有相同的CSS样式。</p><p>如果你要为两个元素或者两个以上元素定义相同的样式，建议使用class属性。</p><p>举例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/css_reset.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>这段HTML代码是正确的，因为在同一个HTML页面中，允许相同的元素或者不同的元素设置相同的class属性，以便我们可以统一对具有相同的class属性的元素定义相同的CSS样式。</p><p><strong>id和class就像你的身份证号和姓名，身份证号是全国唯一的，id号也就是唯一的，class（类名）就是姓名，两个人的姓名就有可能一样。</strong></p><p>此外，需要注意一下：</p><ul><li>（1）一个标签可以同时定义多个class；</li><li>（2）id也可以写成name，区别在于name是HTML中的标准，而id是XHTML中的标准，现在网页的标准都是使用id，所以大家尽量不要用name属性；</li></ul><h3 id="3、CSS选择器"><a href="#3、CSS选择器" class="headerlink" title="3、CSS选择器"></a>3、CSS<a href="https://so.csdn.net/so/search?q=%E9%80%89%E6%8B%A9%E5%99%A8&spm=1001.2101.3001.7020">选择器</a></h3><p>我们先看一段代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>什么叫CSS选择器？<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>ladidol<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>ladfeng<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器预览效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220317114045000.png" alt="image-20220317114045000"></p><p>如果我们只想要第二个div文本颜色为红色，怎么办呢？我们必须通过一种方式来“选中”第二个div（因为其他的div不能选中），然后把它的CSS属性颜色color改为红色，这样才行。像这种把某一个你想要的标签选中的方式就是所谓的“选择器”，也就是说选择器就是一种选择元素的方式。</p><p><strong>选择器</strong></p><p>选择器，说白了就是用一种方式把你想要的那一个标签选中！把它选中了，你才能操作这个标签的CSS样式。这样够简单了吧。CSS有很多把你所需要的标签选中的方式，这些不同的方式就是不同的选择器。</p><p>选择器的不同，在于它选择方式不同，但是他们的目的都是相同的，那就是把你需要的标签选中，然后让你定义该标签的CSS样式。当然，你也有可能会用某一种选择器代替另一种选择器，这仅仅是由于选择方式不一样罢了，目的还是一样的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器</span><br><span class="line">&#123;</span><br><span class="line">  样式属性1:取值1;</span><br><span class="line">  样式属性2:取值2;</span><br><span class="line">  ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一、基本选择器</strong></p><p><strong>1、元素选择器</strong></p><p>元素选择器，就是“选中”相同的元素，然后对相同的元素设置同一个CSS样式。</p><p>语法：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220317114426383.png" alt="image-20220317114426383"></p><p>举例:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;<span class="attribute">color</span>:red;&#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>ladidol<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>ladidol<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>ladidol<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>ladidol<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220317114702486.png" alt="image-20220317114702486"></p><p>分析：</p><p>选中了div元素为红色</p><p><strong>2、id选择器</strong></p><p>我们可以为元素设置一个id，然后针对这个id的元素进行CSS样式操作。注意，在同一个页面中，不允许出现两个相同的id，这个就像没有哪两个人的身份证号是相同的道理一样。</p><p>语法：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220317130614161.png" alt="image-20220317130614161"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> web前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-plus快速入门</title>
      <link href="/2022/03/16/Mybatis-plus%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/16/Mybatis-plus%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><p>官网文档也有入门介绍，如果有耐心和一定基础的小伙伴可以直接看官网<a href="https://baomidou.com/">传送门</a></p><h2 id="准备依赖"><a href="#准备依赖" class="headerlink" title="准备依赖"></a>准备依赖</h2><p>1.mybatis-plus依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.mysql驱动JDBC依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.mysql驱动、JDBC和其他springboot依赖可以在IDEA中构建springboot项目时选择添加，这里就不加概述。</p><h2 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h2><p>创建user表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> mybatis_plus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE mybatis_plus;</span><br><span class="line"></span><br><span class="line">USE mybatis_plus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">    id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    create_time DATETIME COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time DATETIME COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="初始化工程"><a href="#初始化工程" class="headerlink" title="初始化工程"></a>初始化工程</h2><p>用IDEA初始化一个springboot项目</p><h2 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h2><p>在resource目录下的配置文件里配置自己的数据源，建议在application.yml中配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">nihao123</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?useSSL=true&amp;useUnicode=true&amp;characterEcoding=utf-8</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>注意，我这里使用的mysql驱动是8+，在url中还需要配置时区，因为我在mysql配置文件中设置了默认时区，所以这里我没有配置时区。如果没有设置时区请加上serverTimezone&#x3D;Asia&#x2F;Shanghai.</p><p>另外，如果mysql驱动用的5+版本则应这样driver-class-name: com.mysql.jdbc.Driver配置驱动。</p><p>下面的mybatis-plus配置是开启日志，因为我没有导入其他的日志依赖，所以用的是自带的日志</p><h2 id="创建User实体类"><a href="#创建User实体类" class="headerlink" title="创建User实体类"></a>创建User实体类</h2><p>在pojo包下创建User对象，这里我引入了Lombok，用Lombok给对象创建构造器以及getter和setter</p><p>注意：若之前在IDEA中并未使用过Lombok，请先在IDEA中安装Lombok插件，Lombok</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ToString</span> <span class="comment">//重写toString方法</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">//创建有参构造</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//创建getter和setter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">//创建无参构造，用了创建有参构造的注解是默认没有无参构造的，需要手动创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span> <span class="comment">//主键注解，具体参考官方文档，注意使用AUTO创建表时请把主键设置为自增</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span><span class="comment">//字段注解，具体参考官方文档</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的@TableField后面会讲到,可以先暂时跳过</p><h2 id="配置Mybatis-Plus"><a href="#配置Mybatis-Plus" class="headerlink" title="配置Mybatis-Plus"></a>配置Mybatis-Plus</h2><p>在main&#x2F;src目录下创建mapper文件夹，在mapper文件夹下创建UserMapper这个接口，让这个接口继承BaseMapper ,注意泛型里面是要操作的实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis_plus.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.mybatis_plus.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Repository</span></span><br><span class="line"><span class="meta">@Mapper</span><span class="comment">//一般就是用这个注解了</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"><span class="comment">//这里可以自己写sql，用法和mybatis一样。现在暂时不写，仅测试mybatis-plus的实现类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后还要在springboot启动类上添加扫描注解，扫描这个mapper</p><p>注意：扫描包名千万别写错了，否则后面的代码全部白写</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis_plus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@MapperScan(&quot;com.mybatis_plus.Mapper&quot;)如果mapper层注释为repository就加一个这个注解</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在spring boot测试类里面编写测试类</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>查询所有用户</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis_plus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mybatis_plus.Mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.mybatis_plus.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);<span class="comment">//这里的参数是一个条件构造器wrapper,这里先暂时不讲，后面会讲到</span></span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，得到结果(因为开启了日志，所以在控制台看到了sql这个执行过程,因为我之前测试过，所以表里的数据有些不一样)</p><p>控制台输出:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::                (v2.6.4)</span><br><span class="line"></span><br><span class="line">2022-03-12 14:27:54.068  INFO 9548 --- [           main] com.feng.MybatisplusApplicationTests     : Starting MybatisplusApplicationTests using Java 1.8.0_202 on SmallWolfberry with PID 9548 (started by 冯小强 in E:\Java\springboot\mybatisplus)</span><br><span class="line">2022-03-12 14:27:54.069  INFO 9548 --- [           main] com.feng.MybatisplusApplicationTests     : No active profile set, falling back to 1 default profile: &quot;default&quot;</span><br><span class="line">Logging initialized using &#x27;class org.apache.ibatis.logging.stdout.StdOutImpl&#x27; adapter.</span><br><span class="line">Property &#x27;mapperLocations&#x27; was not specified.</span><br><span class="line"> _ _   |_  _ _|_. ___ _ |    _ </span><br><span class="line">| | |\/|_)(_| | |_\  |_)||_|_\ </span><br><span class="line">     /               |         </span><br><span class="line">                        3.4.3 </span><br><span class="line">This primary key of &quot;id&quot; is primitive !不建议如此请使用包装类 in Class: &quot;com.feng.entity.User&quot;</span><br><span class="line">2022-03-12 14:27:56.229  INFO 9548 --- [           main] com.feng.MybatisplusApplicationTests     : Started MybatisplusApplicationTests in 2.544 seconds (JVM running for 3.685)</span><br><span class="line"></span><br><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@350a94ce] was not registered for synchronization because synchronization is not active</span><br><span class="line">2022-03-12 14:27:56.449  INFO 9548 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...</span><br><span class="line">2022-03-12 14:27:57.551  INFO 9548 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.</span><br><span class="line">JDBC Connection [HikariProxyConnection@488422671 wrapping com.mysql.cj.jdbc.ConnectionImpl@6fa13e6] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: SELECT id,name,age,email,create_time,update_time FROM user</span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==    Columns: id, name, age, email, create_time, update_time</span><br><span class="line">&lt;==        Row: 1, Jone, 18, test1@baomidou.com, null, null</span><br><span class="line">&lt;==        Row: 2, Jack, 20, test2@baomidou.com, null, null</span><br><span class="line">&lt;==        Row: 3, Tom, 28, test3@baomidou.com, null, null</span><br><span class="line">&lt;==        Row: 4, Sandy, 21, test4@baomidou.com, null, null</span><br><span class="line">&lt;==        Row: 5, Billie, 24, test5@baomidou.com, null, null</span><br><span class="line">&lt;==      Total: 5</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@350a94ce]</span><br><span class="line">User(id=1, name=Jone, age=18, email=test1@baomidou.com, createTime=null, updateTime=null)</span><br><span class="line">User(id=2, name=Jack, age=20, email=test2@baomidou.com, createTime=null, updateTime=null)</span><br><span class="line">User(id=3, name=Tom, age=28, email=test3@baomidou.com, createTime=null, updateTime=null)</span><br><span class="line">User(id=4, name=Sandy, age=21, email=test4@baomidou.com, createTime=null, updateTime=null)</span><br><span class="line">User(id=5, name=Billie, age=24, email=test5@baomidou.com, createTime=null, updateTime=null)</span><br><span class="line"></span><br><span class="line">2022-03-12 14:27:57.631  INFO 9548 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...</span><br><span class="line">2022-03-12 14:27:57.633  INFO 9548 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>除此之外，除了selectList（）方法以外，mybatis-plus还带有很多其他的查询方法方法，在此不一一演示</p><p>，读者可以自行探索</p><h2 id="使用Service层来调用服务"><a href="#使用Service层来调用服务" class="headerlink" title="使用Service层来调用服务:"></a>使用Service层来调用服务:</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作:"></a>准备工作:</h3><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-fo0xsDA4-1647069309210)(E:&#x2F;myblog&#x2F;source&#x2F;images&#x2F;mybatis-plus%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B&#x2F;image-20220312150929158.png)]</p><p>新建一个UserService类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.feng.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/12 14:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    Boolean <span class="title function_">saveUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新建一个UserServiceImpl实现类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.feng.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.feng.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.feng.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/12 14:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt;   <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">saveUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">                .eq(User::getId, <span class="number">6</span>)</span><br><span class="line">                .eq(User::getName, <span class="string">&quot;ladidol&quot;</span>)</span><br><span class="line">                .eq(User::getEmail, <span class="string">&quot;599426945@qq.com&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">oldUser</span> <span class="operator">=</span> baseMapper.selectOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(oldUser)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">User</span> <span class="variable">newUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        newUser.setAge(<span class="number">20</span>);</span><br><span class="line">        newUser.setName(<span class="string">&quot;ladidol&quot;</span>);</span><br><span class="line">        newUser.setEmail(<span class="string">&quot;ladidol@outlook.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> baseMapper.insert(newUser) &gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试类中新添加方法:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.feng.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.feng.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MybatisplusApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BaseMapper&lt;User&gt; baseMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = baseMapper.selectList(<span class="literal">null</span>);<span class="comment">//这里的参数是一个条件构造器wrapper,这里先暂时不讲，后面会讲到</span></span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        userService.saveUser();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::                (v2.6.4)</span><br><span class="line"></span><br><span class="line">2022-03-12 15:06:39.024  INFO 14752 --- [           main] com.feng.MybatisplusApplicationTests     : Starting MybatisplusApplicationTests using Java 1.8.0_202 on SmallWolfberry with PID 14752 (started by 冯小强 in E:\Java\springboot\mybatisplus)</span><br><span class="line">2022-03-12 15:06:39.025  INFO 14752 --- [           main] com.feng.MybatisplusApplicationTests     : No active profile set, falling back to 1 default profile: &quot;default&quot;</span><br><span class="line">Logging initialized using &#x27;class org.apache.ibatis.logging.stdout.StdOutImpl&#x27; adapter.</span><br><span class="line">Property &#x27;mapperLocations&#x27; was not specified.</span><br><span class="line"> _ _   |_  _ _|_. ___ _ |    _ </span><br><span class="line">| | |\/|_)(_| | |_\  |_)||_|_\ </span><br><span class="line">     /               |         </span><br><span class="line">                        3.4.3 </span><br><span class="line">2022-03-12 15:06:41.136  INFO 14752 --- [           main] com.feng.MybatisplusApplicationTests     : Started MybatisplusApplicationTests in 2.669 seconds (JVM running for 3.816)</span><br><span class="line"></span><br><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@790a251b] was not registered for synchronization because synchronization is not active</span><br><span class="line">2022-03-12 15:06:41.387  INFO 14752 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...</span><br><span class="line">2022-03-12 15:06:42.509  INFO 14752 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.</span><br><span class="line">JDBC Connection [HikariProxyConnection@1134011961 wrapping com.mysql.cj.jdbc.ConnectionImpl@24841372] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: SELECT id,name,age,email,create_time,update_time FROM user WHERE (id = ? AND name = ? AND email = ?)</span><br><span class="line">==&gt; Parameters: 6(Integer), ladidol(String), 599426945@qq.com(String)</span><br><span class="line">&lt;==      Total: 0</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@790a251b]</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@47406941] was not registered for synchronization because synchronization is not active</span><br><span class="line">JDBC Connection [HikariProxyConnection@1643565953 wrapping com.mysql.cj.jdbc.ConnectionImpl@24841372] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: INSERT INTO user ( name, age, email, create_time, update_time ) VALUES ( ?, ?, ?, ?, ? )</span><br><span class="line">==&gt; Parameters: ladidol(String), 20(Integer), ladidol@outlook.com(String), null, null</span><br><span class="line">&lt;==    Updates: 1</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@47406941]</span><br><span class="line"></span><br><span class="line">2022-03-12 15:06:42.596  INFO 14752 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...</span><br><span class="line">2022-03-12 15:06:42.599  INFO 14752 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.</span><br></pre></td></tr></table></figure><h1 id="代码自动生成器"><a href="#代码自动生成器" class="headerlink" title="代码自动生成器"></a>代码自动生成器</h1><p>mybatis-plus可以通过代码自动生成代码</p><p>需要导入如下依赖:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写运行程序代码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.*;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 演示例子，执行 main 方法控制台输入模块表名回车自动生成对应项目目录中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 需要构建一个 代码自动生成器 对象</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line"><span class="comment">// 配置策略</span></span><br><span class="line"><span class="comment">// 1、全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">projectPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);<span class="comment">//用户当前的目录,可以根据需求改</span></span><br><span class="line">        gc.setOutputDir(projectPath+<span class="string">&quot;/src/main/java&quot;</span>);<span class="comment">//配置输出路径</span></span><br><span class="line">        gc.setAuthor(<span class="string">&quot;Ladidol&quot;</span>);<span class="comment">//配置作者</span></span><br><span class="line">        gc.setOpen(<span class="literal">false</span>);</span><br><span class="line">        gc.setFileOverride(<span class="literal">false</span>); <span class="comment">// 是否覆盖</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>); <span class="comment">// 去Service的I前缀</span></span><br><span class="line">        gc.setIdType(IdType.AUTO);</span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        gc.setSwagger2(<span class="literal">true</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"><span class="comment">//2、设置数据源</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis_plus?useSSL=true&amp;useUnicode=true&amp;characterEcoding=utf-8&quot;</span>);<span class="comment">//配置数据库url</span></span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);<span class="comment">//用户</span></span><br><span class="line">        dsc.setPassword(<span class="string">&quot;nihao123&quot;</span>);<span class="comment">//密码</span></span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"><span class="comment">//3、包的配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        pc.setModuleName(<span class="string">&quot;feng&quot;</span>);<span class="comment">//需要将auto生成的代码放在的那一个包下面</span></span><br><span class="line">        pc.setParent(<span class="string">&quot;com&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"><span class="comment">//4、策略配置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        strategy.setInclude(<span class="string">&quot;user&quot;</span>);<span class="comment">//映射表名，这里也可以添加多个表</span></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setEntityLombokModel(<span class="literal">true</span>); <span class="comment">// 自动lombok；</span></span><br><span class="line">        strategy.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);<span class="comment">//配置逻辑删除</span></span><br><span class="line"><span class="comment">// 自动填充配置</span></span><br><span class="line">        <span class="type">TableFill</span> <span class="variable">createTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFill</span>(<span class="string">&quot;create_time&quot;</span>, FieldFill.INSERT);</span><br><span class="line">        <span class="type">TableFill</span> <span class="variable">updateTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFill</span>(<span class="string">&quot;update_time&quot;</span>, FieldFill.INSERT_UPDATE);</span><br><span class="line">        ArrayList&lt;TableFill&gt; tableFills = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        tableFills.add(createTime);</span><br><span class="line">        tableFills.add(updateTime);</span><br><span class="line">        strategy.setTableFillList(tableFills);</span><br><span class="line"><span class="comment">// 乐观锁</span></span><br><span class="line">        strategy.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">        strategy.setRestControllerStyle(<span class="literal">true</span>);</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="literal">true</span>); <span class="comment">//   localhost:8080/hello_id_2</span></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        mpg.execute(); <span class="comment">//执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行这个方法就会得到生成的代码了！</p><p>注意配置自己的数据库，另外，映射表名时注意对应自己表里面的字段。</p><h1 id="小知识点补充"><a href="#小知识点补充" class="headerlink" title="小知识点补充:"></a>小知识点补充:</h1><p><strong>对于实体类有@Accessor(chain&#x3D;true)这个注解，一个小小知识点的补充：</strong></p><p>一、来源<br>@Accessors注解是来自这个包下—&gt;lombok.experimental</p><p>二、功能介绍<br>@Accessors 注解用来配置lombok如何产生和显示get和set的方法,@Accessors(chain &#x3D; true)加上参数以后就可以开启链式编程.</p><p>传统set方法赋值(臃肿、占空间)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person.setName(<span class="string">&quot;wang&quot;</span>);</span><br><span class="line">person.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">person.setEmail(<span class="string">&quot;123@qq.com&quot;</span>);</span><br><span class="line">person.setDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">person.setAddr(<span class="string">&quot;山东&quot;</span>);</span><br></pre></td></tr></table></figure><p>加上@Accessors(chain &#x3D; true)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person.setName(<span class="string">&quot;wang&quot;</span>).setSex(<span class="string">&quot;男&quot;</span>).setEmail(<span class="string">&quot;123@qq.com&quot;</span>).setDate(<span class="keyword">new</span> <span class="title class_">Date</span>()).setAddr(<span class="string">&quot;山东&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------或者向下面这样,不太推荐-------------</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>().setName(<span class="string">&quot;wang&quot;</span>).setSex(<span class="string">&quot;男&quot;</span>).setEmail(<span class="string">&quot;123@qq.com&quot;</span>)</span><br><span class="line">.setDate(<span class="keyword">new</span> <span class="title class_">Date</span>()).setAddr(<span class="string">&quot;山东&quot;</span>);</span><br></pre></td></tr></table></figure><p>三、总结<br>这样一来解决了开发中字段一百个要set一百行的情况,一个注解,非常好用,大力推荐!!!</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速入门 </tag>
            
            <tag> Mybatis-plus </tag>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用拦截器</title>
      <link href="/2022/03/16/%E5%B8%B8%E7%94%A8%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
      <url>/2022/03/16/%E5%B8%B8%E7%94%A8%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>拦截器的在springboot中的一点小认识:<a href="https://blog.csdn.net/qq_40771567/article/details/115097428">传送门</a></p><p>interceptor中编写我们的拦截器,</p><p>在config中注册我们的拦截器</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/20210322204340530.png" alt="img"></p><h2 id="Mybatis-plus自动填充配置"><a href="#Mybatis-plus自动填充配置" class="headerlink" title="Mybatis-plus自动填充配置:"></a>Mybatis-plus自动填充配置:</h2><p><strong>MyMetaObjectHandler类:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;lastVisitedTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;finishedTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;lastVisitedTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理:"></a>全局异常处理:</h2><p><strong>AppException类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.util.result.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AppException</span><span class="params">(ResultCode resultCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = resultCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = resultCode.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>全局异常处理类:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.util.result.CommonResult;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.util.result.ResultCode;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.util.result.ResultUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">error</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        log.error(e.getMessage());</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.fail(ResultCode.COMMON_FAIL.setMessage(e.getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(AppException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">error</span><span class="params">(AppException e)</span> &#123;</span><br><span class="line">        log.error(e.getMessage());</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.fail(ResultCode.CUSTOM_FAIL.setCode(e.getCode()).setMessage(e.getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="登录拦截"><a href="#登录拦截" class="headerlink" title="登录拦截:"></a>登录拦截:</h2><p><strong>jwt验证实例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.ExpiredJwtException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.entity.user.OpenIdAndSessionKey;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.entity.user.User;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.handler.exception.AppException;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.mapper.user.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.util.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.util.RedisService;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.util.result.ResultCode;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RedisService redisService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(header) &amp;&amp; header.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//获取token</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> header.substring(<span class="number">7</span>);</span><br><span class="line">            log.info(<span class="string">&quot;开始验证token==&gt; &quot;</span> + token);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//验证token</span></span><br><span class="line">                <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtils.verifyJwt(token);</span><br><span class="line">                <span class="comment">//根据token从redis中获取openId和sessionKey</span></span><br><span class="line">                <span class="type">OpenIdAndSessionKey</span> <span class="variable">openIdAndSessionKey</span> <span class="operator">=</span> (OpenIdAndSessionKey) redisService.get(token);</span><br><span class="line">                <span class="comment">//将用户的openId和sessionKey放入request作用域中</span></span><br><span class="line">                request.setAttribute(<span class="string">&quot;openId&quot;</span>, openIdAndSessionKey.getOpenId());</span><br><span class="line">                log.info(<span class="string">&quot;用户的openId==&gt; &quot;</span> + openIdAndSessionKey.getOpenId());</span><br><span class="line">                request.setAttribute(<span class="string">&quot;sessionKey&quot;</span>, openIdAndSessionKey.getSessionKey());</span><br><span class="line">                log.info(<span class="string">&quot;用户的sessionKey==&gt; &quot;</span> + openIdAndSessionKey.getSessionKey());</span><br><span class="line">                <span class="comment">//从redis中获取用户信息</span></span><br><span class="line">                log.info(<span class="string">&quot;开始从redis中获取用户信息&quot;</span>);</span><br><span class="line">                user = (User) redisService.get(openIdAndSessionKey.getOpenId());</span><br><span class="line">                <span class="comment">//如果redis中数据为空，从数据库中获取</span></span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isEmpty(user)) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;从redis中获取用户信息失败，开始从数据库中获取用户信息&quot;</span>);</span><br><span class="line">                    LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">                            .eq(User::getOpenId, openIdAndSessionKey.getOpenId());</span><br><span class="line">                    user = userMapper.selectOne(wrapper);</span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.isEmpty(user)) &#123;</span><br><span class="line">                        log.warn(<span class="string">&quot;用户首次登录，redis和数据库中均无该用户信息，request域中user值为null&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//将用户信息保存在request中,key=user</span></span><br><span class="line">                request.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AppException</span>(ResultCode.TOKEN_EXPIRED);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AppException</span>(ResultCode.TOKEN_ERROR);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AppException</span>(ResultCode.USER_NOT_LOGIN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> handler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html学习</title>
      <link href="/2022/03/16/html%E5%AD%A6%E4%B9%A02/"/>
      <url>/2022/03/16/html%E5%AD%A6%E4%B9%A02/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-HTML5概述"><a href="#第一章-HTML5概述" class="headerlink" title="第一章 HTML5概述"></a>第一章 <a href="https://so.csdn.net/so/search?q=HTML5&spm=1001.2101.3001.7020">HTML5</a>概述</h1><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220327152229756.png" alt="image-20220327152229756"></p><h2 id="1-1、什么是HTML"><a href="#1-1、什么是HTML" class="headerlink" title="1.1、什么是HTML"></a>1.1、什么是HTML</h2><p>HTML（<strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage，超文本标记语言）是用来描述网页的一种语言，它不是一种编程语言，而是一种<strong>标记</strong>语言。</p><h2 id="1-2、什么是HTML5"><a href="#1-2、什么是HTML5" class="headerlink" title="1.2、什么是HTML5"></a>1.2、什么是HTML5</h2><p>HTML5是构建Web内容的一种语言描述方式，HTML5是互联网的下一代标准，是构建以及呈现互联网内容的一种语言方式，被认为是互联网的核心技术之一。HTML产生于1990年，1997年HTML4成为互联网标准，并广泛应用于互联网应用的开发。</p><p>HTML5是Web中核心语言HTML的规范，用户使用任何手段进行网页浏览时看到的内容原本都是HTML格式的，在浏览器中通过一些技术处理将其转换成为了可识别的信息，HTML5在从前HTML4.01的基础上进行了一定的改进。</p><h2 id="1-3、本文重要说明"><a href="#1-3、本文重要说明" class="headerlink" title="1.3、本文重要说明"></a>1.3、本文重要说明</h2><p>由于HTML5只是在HTML的基础上进行了新增或者废弃一些标签或者特性，本文默认均为HTML5语法，被废弃的部分就不再提起，HTML一般用于描述网页的结构，所以一些样式和脚本方面的标签和属性以及关于JavaScript部分的特性也不再提及，重点在于梳理常用标签体系。</p><h2 id="1-4、浏览器的版本"><a href="#1-4、浏览器的版本" class="headerlink" title="1.4、浏览器的版本"></a>1.4、浏览器的版本</h2><p>现今浏览器的许多新功能都是从HTML5标准中发展而来的。目前常用的浏览器有IE、火狐、谷歌、Safari和Opera等等，通过对这些主流web浏览器的发展策略调查，发现它们都支持HTML5上采取了措施。</p><p><strong>（1）IE浏览器</strong></p><p>2010年3月16日，微软MIX10技术大会上宣布其推出的IE9浏览器已经支持HTML5。同时还声称，随后将会更多的支持HTML新标准和CSS3新特性。</p><p><strong>（2）FireFox浏览器</strong></p><p>2010年7月，Mozilla基金会发布了即将推出的Firefox4浏览器的第一个早期测试版，该版本中Firefox浏览器中进行了大幅改进，包括新的HTML5语法分析器，以及支持更多的HTML5语法分析器，以及支持更多的HTML5形式的控制等。从官方文档来看，Firefox4对HTML5是完全级别的支持。目前，包括在线视频，在线音频在内的多种应用都已经在版本中实现。</p><p><strong>（3）Google浏览器</strong></p><p>2010年2月19日，谷歌Gears项目经理通过微博宣布，谷歌将放弃对Gears浏览器插件项目的支持，以重点开发HTML5项目。据费特表示，目前在谷歌看来，Gears应用用于HTML5的诸多创新非常相似，并且谷歌一直积极发展HTML5项目。因此只要谷歌不断以加强网络标准的应用功能为工作重点，那么为Gears增加新功能就无太大意义了。另外，Gears面临的需求也在日益下降，这也是谷歌做出吊证的重要原因。</p><p><strong>（4）Safari浏览器</strong></p><p>2010年6月7日，苹果在开发者发布会公布Safari5，这款浏览器支持10个以上的HTML5新技术，包括全屏幕播放、HTML5视频、HTML5地理位置、HTML5切片元素、HTML5的可拖动属性、HTML5的形式验证、HTML5的Ruby、HTML5的Ajaxl.ishi和WebSocket字幕。</p><p><strong>（5）Opera浏览器</strong></p><p>2010年5月5日，Opera软件公司首席技术官，号称“CSS之父”的Hakon Wium Lie认为，HTML5和CSS3，将会是全球互联网发展的未来趋势，包括目前Opera在内的诸多浏览器厂商，纷纷研发HTML5的相关产品，web未来属于HTML5。</p><p>综上所述，目前这些浏览器纷纷朝着HTML5的方向迈进，HTML5的时代即将来临</p><h1 id="第二章-HTML5语法"><a href="#第二章-HTML5语法" class="headerlink" title="第二章 HTML5语法"></a>第二章 HTML5语法</h1><h2 id="2-1、基本结构"><a href="#2-1、基本结构" class="headerlink" title="2.1、基本结构"></a>2.1、基本结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2、语法规范"><a href="#2-2、语法规范" class="headerlink" title="2.2、语法规范"></a>2.2、语法规范</h2><ul><li>HTML中不区分大小写，但是我们一般都使用小写</li><li>HTML中的注释不能嵌套</li><li>HTML标签必须结构完整，要么成对出现，要么自结束标签</li><li>HTML标签可以嵌套，但是不能交叉嵌套</li><li>HTML标签中的属性必须有值，且值必须加引号(双引号单引号都可以)</li></ul><h2 id="2-3、标签规范"><a href="#2-3、标签规范" class="headerlink" title="2.3、标签规范"></a>2.3、标签规范</h2><p>单标签:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;标签名 [属性名=属性值,...]&gt;</span><br></pre></td></tr></table></figure><p>成对标签:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;标签名 [属性名=属性值,...]&gt;&lt;/标签名&gt;</span><br></pre></td></tr></table></figure><h1 id="第三章-HTML5标签"><a href="#第三章-HTML5标签" class="headerlink" title="第三章 HTML5标签"></a>第三章 HTML5标签</h1><h2 id="3-1、标题标签"><a href="#3-1、标题标签" class="headerlink" title="3.1、标题标签"></a>3.1、标题标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>这是五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>这是六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2、段落标签"><a href="#3-2、段落标签" class="headerlink" title="3.2、段落标签"></a>3.2、段落标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-3、链接标签"><a href="#3-3、链接标签" class="headerlink" title="3.3、链接标签"></a>3.3、链接标签</h2><p><strong>使用示例：</strong></p><p><a href="https://www.ladidol.top">不要点开呀!点了你就后悔的！</a></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.c&quot;</span>&gt;</span>不要点开呀!点了你就后悔的！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>常见属性：</strong></p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>href</td><td>URL</td><td>规定链接的目标 URL。</td></tr><tr><td>target</td><td>_blank   _parent    _self _top framename</td><td>规定在何处打开目标 URL。 仅在 href 属性存在时使用。就好比是新建窗口打开</td></tr></tbody></table><h2 id="3-4、图像标签"><a href="#3-4、图像标签" class="headerlink" title="3.4、图像标签"></a>3.4、图像标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;百度LOGO&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-5、表格标签"><a href="#3-5、表格标签" class="headerlink" title="3.5、表格标签"></a>3.5、表格标签</h2><table border="1px" cellpadding="10px" cellspacing="0px">    <tr><!--一行的开始-->        <th>表头一</th>        <th>表头二</th>        <th>表头三</th>        <th>表头四</th>    </tr>    <tr><!--新一行的开始-->        <td>单元格一</td>        <td>单元格二</td>        <td>单元格三</td>        <td>单元格四</td>    </tr></table><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;10px&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--一行的开始--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头一<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头二<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头三<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头四<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--新一行的开始--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格一<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格二<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-6、列表标签"><a href="#3-6、列表标签" class="headerlink" title="3.6、列表标签"></a>3.6、列表标签</h2><p><strong>无序列表：</strong></p><ul>    <li>列表项</li>    <li>列表项</li>    <li>列表项</li>    <li>列表项</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>有序列表：</strong></p><ol>    <li>列表项</li>    <li>列表项</li>    <li>列表项</li>    <li>列表项</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>自定义列表：</strong></p><dl>    <dt>+</dt><dd>列表项</dd>    <dt>+</dt><dd>列表项</dd>    <dt>+</dt><dd>列表项</dd></dl><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>+<span class="tag">&lt;/<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">dd</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>+<span class="tag">&lt;/<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">dd</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>+<span class="tag">&lt;/<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">dd</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-7、分组标签"><a href="#3-7、分组标签" class="headerlink" title="3.7、分组标签"></a>3.7、分组标签</h2><p>1.1 HTML 区块元素</p><p>大多数 HTML 元素被定义为块级元素或内联元素。<br>块级元素在浏览器显示时，通常会以新行来开始（和结束）。<br>实例: <code>&lt;h1&gt;</code>, <code>&lt;p&gt;</code>,<code>&lt;ul&gt;</code>, <code>&lt;table&gt;</code>,<code>&lt;div&gt;</code></p><p>1.2 HTML 内联元素</p><p>内联元素在显示时通常不会以新行开始。<br>实例: <code>&lt;b&gt;</code>, <code>&lt;td&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code>,<code>&lt;span&gt;</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>具体内容,可以储存其他html元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>具体内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例子:</p><p>这是一些文本。</p><div style="color:#0000FF">  <h3>这是一个在 div 元素中的标题。</h3>  <p>这是一个在 div 元素中的文本。</p></div><p>这是一些文本。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一些文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:#0000FF&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是一个在 div 元素中的标题。<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个在 div 元素中的文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一些文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例子:</p><p>我的母亲有     <span style="color:blue;font-weight:bold">蓝色</span>     的眼睛，我的父亲有     <span style="color:darkolivegreen;font-weight:bold">碧绿色</span>     的眼睛。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的母亲有 </span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:blue;font-weight:bold&quot;</span>&gt;</span>蓝色<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">    的眼睛，我的父亲有 </span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:darkolivegreen;font-weight:bold&quot;</span>&gt;</span>碧绿色<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">    的眼睛。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-8、页面结构分析"><a href="#3-8、页面结构分析" class="headerlink" title="3.8、页面结构分析"></a>3.8、页面结构分析</h2><p><strong>常见标签：</strong>(主要是为了让结构清晰)</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">| 标签         | 描述                                               |</span><br><span class="line">| ------------ | -------------------------------------------------- |</span><br><span class="line">| <span class="tag">&lt;<span class="name">header</span>&gt;</span>     | 规定文档或节的页眉。                               |</span><br><span class="line">| <span class="tag">&lt;<span class="name">footer</span>&gt;</span>     | 定义文档或节的页脚。                               |</span><br><span class="line">| <span class="tag">&lt;<span class="name">main</span>&gt;</span>       | 规定文档的主内容。                                 |</span><br><span class="line">| <span class="tag">&lt;<span class="name">section</span>&gt;</span>    | 定义文档的节。                                     |</span><br><span class="line">| <span class="tag">&lt;<span class="name">article</span>&gt;</span>    | 定义文档的文章。                                   |</span><br><span class="line">| <span class="tag">&lt;<span class="name">aside</span>&gt;</span>      | 定义页面内容以外的内容。                           |</span><br><span class="line">| <span class="tag">&lt;<span class="name">nav</span>&gt;</span>        | 定义导航链接。                                     |</span><br><span class="line">| <span class="tag">&lt;<span class="name">mark</span>&gt;</span>       | 定义重要的或强调的文本。                           |</span><br><span class="line">| <span class="tag">&lt;<span class="name">figure</span>&gt;</span>     | 规定自包含内容，比如图示、图表、照片、代码清单等。 |</span><br><span class="line">| <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span> | 定义 <span class="tag">&lt;<span class="name">figure</span>&gt;</span> 元素的标题。                         |</span><br><span class="line">| <span class="tag">&lt;<span class="name">details</span>&gt;</span>    | 定义用户能够查看或隐藏的额外细节。                 |</span><br><span class="line">| <span class="tag">&lt;<span class="name">summary</span>&gt;</span>    | 定义 <span class="tag">&lt;<span class="name">details</span>&gt;</span> 元素的可见标题。                    |</span><br><span class="line">| <span class="tag">&lt;<span class="name">time</span>&gt;</span>       | 定义日期/时间。                                    |</span><br></pre></td></tr></table></figure><p><strong>基本布局：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220327153642906.png" alt="image-20220327153642906"></p><p>eg.</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页头部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页主题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页脚步<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-9、表单标签"><a href="#3-9、表单标签" class="headerlink" title="3.9、表单标签"></a>3.9、表单标签</h2><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220327153659695.png" alt="image-20220327153659695"></p><p><strong>常见标签：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">| 标签       | 描述                                           |</span><br><span class="line">| ---------- | ---------------------------------------------- |</span><br><span class="line">| <span class="tag">&lt;<span class="name">form</span>&gt;</span>     | 定义供用户输入的表单。                         |</span><br><span class="line">| <span class="tag">&lt;<span class="name">input</span>&gt;</span>    | 定义输入域。                                   |</span><br><span class="line">| <span class="tag">&lt;<span class="name">label</span>&gt;</span>    | 定义了 <span class="tag">&lt;<span class="name">input</span>&gt;</span> 元素的标签，一般为输入标题。    |</span><br><span class="line">| <span class="tag">&lt;<span class="name">textarea</span>&gt;</span> | 定义文本域 (一个多行的输入控件)。              |</span><br><span class="line">| <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span> | 定义了一组相关的表单元素，并使用外框包含起来。 |</span><br><span class="line">| <span class="tag">&lt;<span class="name">legend</span>&gt;</span>   | 定义了 <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span> 元素的标题。                 |</span><br><span class="line">| <span class="tag">&lt;<span class="name">select</span>&gt;</span>   | 定义了下拉选项列表。                           |</span><br><span class="line">| <span class="tag">&lt;<span class="name">optgroup</span>&gt;</span> | 定义选项组。                                   |</span><br><span class="line">| <span class="tag">&lt;<span class="name">option</span>&gt;</span>   | 定义下拉列表中的选项。                         |</span><br><span class="line">| <span class="tag">&lt;<span class="name">button</span>&gt;</span>   | 定义一个点击按钮。                             |</span><br><span class="line">| <span class="tag">&lt;<span class="name">datalist</span>&gt;</span> | 指定一个预先定义的输入控件选项列表。           |</span><br><span class="line">| <span class="tag">&lt;<span class="name">keygen</span>&gt;</span>   | 定义了表单的密钥对生成器字段。                 |</span><br><span class="line">| <span class="tag">&lt;<span class="name">output</span>&gt;</span>   | 定义一个计算结果。                      </span><br></pre></td></tr></table></figure><p><strong>案例演示：</strong></p><p>1、form、input、label演示</p><!--表单formaction 表示提交奥德地方,可以是网站,可以是一个请求地址method post和get方法来请求--><form action="" method="get">       <!--浏览器通过get方法或者post方法来请求    get可能暴露一些,post先对安全一些-->    <p>        <label for="username">账户：</label>        <input type="text" name="username" id="username">    </p>    <p>        <label for="password">密码：</label>        <input type="password" name="password" id="password">    </p>    <p><input type="submit">        <input type="reset">    </p></form><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--表单form</span></span><br><span class="line"><span class="comment">action 表示提交奥德地方,可以是网站,可以是一个请求地址</span></span><br><span class="line"><span class="comment">method post和get方法来请求--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--浏览器通过get方法或者post方法来请求</span></span><br><span class="line"><span class="comment">    get可能暴露一些,post先对安全一些--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>账户：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、textarea演示</p><form action="" method="post">    <textarea name="mycontext" cols="30" rows="10"></textarea>    <!--就是提交按钮-->    <input type="submit"></form><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;mycontext&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--就是提交按钮--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、fieldset、legend、select、optgroup、option演示</p><form action="" method="post">    <fieldset>        <legend>请选择你的爱好：</legend>            <select name="myhobby" id="myhobby">        <optgroup label="运动">            <option value="篮球">篮球</option>            <option value="足球">足球</option>        </optgroup>        <optgroup label="电子">            <option value="看电影">看电影</option>            <option value="看电视">看电视</option>        </optgroup>    </select></fieldset></form><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>请选择你的爱好：<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;myhobby&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myhobby&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;运动&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span>&gt;</span>足球<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;电子&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;看电影&quot;</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;看电视&quot;</span>&gt;</span>看电视<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、datalist演示</p><form action="" method="post">    <input list="browsers">    <datalist id="browsers">        <option value="Internet Explorer">        <option value="Firefox">        <option value="Chrome">        <option value="Opera">        <option value="Safari">    </datalist></form><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">list</span>=<span class="string">&quot;browsers&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;browsers&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Internet Explorer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Firefox&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Chrome&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Opera&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Safari&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、单选框演示</p><form action="" method="post">    <input type="radio" name="sex" id="male" value="male" checked>    <label for="male">Male</label>    <input type="radio" name="sex" id="female" value="female"><label for="female">female</label></form><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span>female<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6、复选框演示</p><form action="" method="post">    <input type="checkbox" name="vehicle" id="bike" value="bike">    <label for="bike">I have a bike</label>    <input type="checkbox" name="vehicle" id="car" value="car">    <label for="car">I have a car</label></form><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vehicle&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bike&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;bike&quot;</span>&gt;</span>I have a bike<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vehicle&quot;</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">value</span>=<span class="string">&quot;car&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;car&quot;</span>&gt;</span>I have a car<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-10、框架标签"><a href="#3-10、框架标签" class="headerlink" title="3.10、框架标签"></a>3.10、框架标签</h2><iframe src="https://www.bilibili.com" frameborder="0" width="500px" height="500px"></iframe><!--就是类似一个新建标签页,然后内置与当前页面--><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220327153810058.png" alt="image-20220327153810058"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://www.bilibili.com&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--就是类似一个新建标签页,然后内置与当前页面--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-11、音频标签"><a href="#3-11、音频标签" class="headerlink" title="3.11、音频标签"></a>3.11、音频标签</h2><audio controls>    <source src="horse.ogg" type="audio/ogg">    <source src="horse.mp3" type="audio/mpeg">    您的浏览器不支持 Audio 标签。</audio><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;horse.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;horse.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class="line">    您的浏览器不支持 Audio 标签。</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-12、视频标签"><a href="#3-12、视频标签" class="headerlink" title="3.12、视频标签"></a>3.12、视频标签</h2><video width="320" height="240" controls>  <source src="movie.mp4" type="video/mp4">  <source src="movie.ogg" type="video/ogg">    您的浏览器不支持 Video 标签。</video><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;320&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span></span><br><span class="line">    您的浏览器不支持 Video 标签。</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-13、其它标签"><a href="#3-13、其它标签" class="headerlink" title="3.13、其它标签"></a>3.13、其它标签</h2><p>每一个加了个换行符来更好演示一下</p><p>效果如下:</p><p>水平线：<hr><br>换行：<br><br><b>粗体文本</b><br><code>计算机代码</code><br><em>强调文本</em><br><i>斜体文本</i><br><kbd>键盘输入</kbd></p><pre>预格式化文本</pre><p><small>更小的文本</small><br><strong>重要的文本</strong><br><abbr>缩写词或者首字母缩略词</abbr></p><address>联系信息</address><bdo>文字方向</bdo><blockquote>从另一个源引用的部分</blockquote><cite>工作的名称</cite><del>删除的文本</del><ins>插入的文本</ins><sub>下标文本</sub><sup>上标文本</sup><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">水平线：<span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">换行：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体文本<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>计算机代码<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>强调文本<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体文本<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>键盘输入<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>预格式化文本<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>更小的文本<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>重要的文本<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">abbr</span>&gt;</span>缩写词或者首字母缩略词<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span>联系信息<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bdo</span>&gt;</span>文字方向<span class="tag">&lt;/<span class="name">bdo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>从另一个源引用的部分<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cite</span>&gt;</span>工作的名称<span class="tag">&lt;/<span class="name">cite</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除的文本<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>插入的文本<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>下标文本<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>上标文本<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-14、头部标签"><a href="#3-14、头部标签" class="headerlink" title="3.14、头部标签"></a>3.14、头部标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">| 标签     | 描述                                 |</span><br><span class="line">| -------- | ------------------------------------ |</span><br><span class="line">| <span class="tag">&lt;<span class="name">head</span>&gt;</span>   | 定义了文档的信息。                   |</span><br><span class="line">| <span class="tag">&lt;<span class="name">title</span>&gt;</span>  | 定义了文档的标题。                   |</span><br><span class="line">| <span class="tag">&lt;<span class="name">base</span>&gt;</span>   | 定义了页面链接标签的默认链接地址。   |</span><br><span class="line">| <span class="tag">&lt;<span class="name">link</span>&gt;</span>   | 定义了一个文档和外部资源之间的关系。 |</span><br><span class="line">| <span class="tag">&lt;<span class="name">meta</span>&gt;</span>   | 定义了HTML文档中的元数据。           |</span><br><span class="line">| <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"> | 定义了客户端的脚本文件。             |</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">| <span class="tag">&lt;<span class="name">style</span>&gt;</span>  | 定义了HTML文档的样式文件。           |</span></span></span><br></pre></td></tr></table></figure><h2 id="部分小结"><a href="#部分小结" class="headerlink" title="部分小结:"></a>部分小结:</h2><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220327153854097.png" alt="image-20220327153854097"></p><h1 id="第四章-HTML5属性"><a href="#第四章-HTML5属性" class="headerlink" title="第四章 HTML5属性"></a>第四章 HTML5属性</h1><h2 id="4-1、属性概述"><a href="#4-1、属性概述" class="headerlink" title="4.1、属性概述"></a>4.1、属性概述</h2><p>HTML标签可以设置属性，属性总是以名称&#x2F;值对的形式出现，比如：name&#x3D;“value”，它的主要作用是控制或修饰标签。</p><h2 id="4-2、通用属性"><a href="#4-2、通用属性" class="headerlink" title="4.2、通用属性"></a>4.2、通用属性</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>accesskey</td><td>设置访问元素的键盘快捷键。</td></tr><tr><td>class</td><td>规定元素的类名（classname）。</td></tr><tr><td>contenteditable</td><td>规定是否可编辑元素的内容。</td></tr><tr><td>contextmenu</td><td>指定一个元素的上下文菜单。当用户右击该元素，出现上下文菜单。</td></tr><tr><td>data-*</td><td>用于存储页面的自定义数据。</td></tr><tr><td>dir</td><td>设置元素中内容的文本方向。</td></tr><tr><td>draggable</td><td>指定某个元素是否可以拖动。</td></tr><tr><td>dropzone</td><td>指定是否将数据复制，移动，或链接，或删除。</td></tr><tr><td>hidden</td><td>hidden 属性规定对元素进行隐藏。</td></tr><tr><td>id</td><td>规定元素的唯一 id。</td></tr><tr><td>lang</td><td>设置元素中内容的语言代码。</td></tr><tr><td>spellcheck</td><td>检测元素是否拼写错误。</td></tr><tr><td>style</td><td>规定元素的行内样式（inline style）。</td></tr><tr><td>tabindex</td><td>设置元素的 Tab 键控制次序。</td></tr><tr><td>title</td><td>规定元素的额外信息（可在工具提示中显示）。</td></tr><tr><td>translate</td><td>指定是否一个元素的值在页面载入时是否需要翻译。</td></tr></tbody></table><h1 id="第五章-HTML5事件-好像用的少"><a href="#第五章-HTML5事件-好像用的少" class="headerlink" title="第五章 HTML5事件(好像用的少)"></a>第五章 HTML5事件(好像用的少)</h1><h2 id="5-1、事件概述"><a href="#5-1、事件概述" class="headerlink" title="5.1、事件概述"></a>5.1、事件概述</h2><p>HTML事件可以触发浏览器中的行为，比方说当用户点击某个 HTML 元素时启动一段 JavaScript。</p><h2 id="5-2、窗口事件"><a href="#5-2、窗口事件" class="headerlink" title="5.2、窗口事件"></a>5.2、窗口事件</h2><p>由窗口触发该事件 (同样适用于 <body> 标签)：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>onafterprint</td><td>script</td><td>在打印文档之后运行脚本。</td></tr><tr><td>onbeforeprint</td><td>script</td><td>在文档打印之前运行脚本。</td></tr><tr><td>onbeforeonload</td><td>script</td><td>在文档加载之前运行脚本。</td></tr><tr><td>onblur</td><td>script</td><td>当窗口失去焦点时运行脚本。</td></tr><tr><td>onerror</td><td>script</td><td>当错误发生时运行脚本。</td></tr><tr><td>onfocus</td><td>script</td><td>当窗口获得焦点时运行脚本。</td></tr><tr><td>onhashchange</td><td>script</td><td>当文档改变时运行脚本。</td></tr><tr><td>onload</td><td>script</td><td>当文档加载时运行脚本。</td></tr><tr><td>onmessage</td><td>script</td><td>当触发消息时运行脚本。</td></tr><tr><td>onoffline</td><td>script</td><td>当文档离线时运行脚本。</td></tr><tr><td>ononline</td><td>script</td><td>当文档上线时运行脚本。</td></tr><tr><td>onpagehide</td><td>script</td><td>当窗口隐藏时运行脚本。</td></tr><tr><td>onpageshow</td><td>script</td><td>当窗口可见时运行脚本。</td></tr><tr><td>onpopstate</td><td>script</td><td>当窗口历史记录改变时运行脚本。</td></tr><tr><td>onredo</td><td>script</td><td>当文档执行再执行操作（redo）时运行脚本。</td></tr><tr><td>onresize</td><td>script</td><td>当调整窗口大小时运行脚本。</td></tr><tr><td>onstorage</td><td>script</td><td>当 Web Storage 区域更新时（存储空间中的数据发生变化时）运行脚本。</td></tr><tr><td>onundo</td><td>script</td><td>当文档执行撤销时运行脚本。</td></tr><tr><td>onunload</td><td>script</td><td>当用户离开文档时运行脚本。</td></tr></tbody></table><h2 id="5-3、表单事件"><a href="#5-3、表单事件" class="headerlink" title="5.3、表单事件"></a>5.3、表单事件</h2><p>表单事件在HTML表单中触发 (适用于所有 HTML 元素，但该HTML元素需在form表单内)：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>onblur</td><td>script</td><td>当元素失去焦点时运行脚本。</td></tr><tr><td>onchange</td><td>script</td><td>当元素改变时运行脚本。</td></tr><tr><td>oncontextmenu</td><td>script</td><td>当触发上下文菜单时运行脚本。</td></tr><tr><td>onfocus</td><td>script</td><td>当元素获得焦点时运行脚本。</td></tr><tr><td>onformchange</td><td>script</td><td>当表单改变时运行脚本。</td></tr><tr><td>onforminput</td><td>script</td><td>当表单获得用户输入时运行脚本。</td></tr><tr><td>oninput</td><td>script</td><td>当元素获得用户输入时运行脚本。</td></tr><tr><td>oninvalid</td><td>script</td><td>当元素无效时运行脚本。</td></tr><tr><td>onselect</td><td>script</td><td>当选取元素时运行脚本。</td></tr><tr><td>onsubmit</td><td>script</td><td>当提交表单时运行脚本。</td></tr></tbody></table><h2 id="5-4、键盘事件"><a href="#5-4、键盘事件" class="headerlink" title="5.4、键盘事件"></a>5.4、键盘事件</h2><p>通过键盘触发事件，类似用户的行为：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>onkeydown</td><td>script</td><td>当按下按键时运行脚本。</td></tr><tr><td>onkeypress</td><td>script</td><td>当按下并松开按键时运行脚本。</td></tr><tr><td>onkeyup</td><td>script</td><td>当松开按键时运行脚本。</td></tr></tbody></table><h2 id="5-5、鼠标事件"><a href="#5-5、鼠标事件" class="headerlink" title="5.5、鼠标事件"></a>5.5、鼠标事件</h2><p>通过鼠标触发事件，类似用户的行为：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>onclick</td><td>script</td><td>当单击鼠标时运行脚本</td></tr><tr><td>ondblclick</td><td>script</td><td>当双击鼠标时运行脚本</td></tr><tr><td>ondrag</td><td>script</td><td>当拖动元素时运行脚本</td></tr><tr><td>ondragend</td><td>script</td><td>当拖动操作结束时运行脚本</td></tr><tr><td>ondragenter</td><td>script</td><td>当元素被拖动至有效的拖放目标时运行脚本</td></tr><tr><td>ondragleave</td><td>script</td><td>当元素离开有效拖放目标时运行脚本</td></tr><tr><td>ondragover</td><td>script</td><td>当元素被拖动至有效拖放目标上方时运行脚本</td></tr><tr><td>ondragstart</td><td>script</td><td>当拖动操作开始时运行脚本</td></tr><tr><td>ondrop</td><td>script</td><td>当被拖动元素正在被拖放时运行脚本</td></tr><tr><td>onmousedown</td><td>script</td><td>当按下鼠标按钮时运行脚本</td></tr><tr><td>onmousemove</td><td>script</td><td>当鼠标指针移动时运行脚本</td></tr><tr><td>onmouseout</td><td>script</td><td>当鼠标指针移出元素时运行脚本</td></tr><tr><td>onmouseover</td><td>script</td><td>当鼠标指针移至元素之上时运行脚本</td></tr><tr><td>onmouseup</td><td>script</td><td>当松开鼠标按钮时运行脚本</td></tr><tr><td>onmousewheel</td><td>script</td><td>当转动鼠标滚轮时运行脚本</td></tr><tr><td>onscroll</td><td>script</td><td>当滚动元素的滚动条时运行脚本</td></tr></tbody></table><h2 id="5-6、媒体事件"><a href="#5-6、媒体事件" class="headerlink" title="5.6、媒体事件"></a>5.6、媒体事件</h2><p>通过视频（videos），图像（images）或音频（audio） 触发该事件，多应用于HTML媒体元素比如：<embed>，<object>，<img>，<audio>和<video>。</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>onabort</td><td>script</td><td>当发生中止事件时运行脚本。</td></tr><tr><td>oncanplay</td><td>script</td><td>当媒介能够开始播放但可能因缓冲而需要停止时运行脚本。</td></tr><tr><td>oncanplaythrough</td><td>script</td><td>当媒介能够无需因缓冲而停止即可播放至结尾时运行脚本。</td></tr><tr><td>ondurationchange</td><td>script</td><td>当媒介长度改变时运行脚本。</td></tr><tr><td>onemptied</td><td>script</td><td>当媒介资源元素突然为空时（网络错误、加载错误等）运行脚本。</td></tr><tr><td>onended</td><td>script</td><td>当媒介已抵达结尾时运行脚本。</td></tr><tr><td>onerror</td><td>script</td><td>当在元素加载期间发生错误时运行脚本。</td></tr><tr><td>onloadeddata</td><td>script</td><td>当加载媒介数据时运行脚本。</td></tr><tr><td>onloadedmetadata</td><td>script</td><td>当媒介元素的持续时间以及其他媒介数据已加载时运行脚本。</td></tr><tr><td>onloadstart</td><td>script</td><td>当浏览器开始加载媒介数据时运行脚本。</td></tr><tr><td>onpause</td><td>script</td><td>当媒介数据暂停时运行脚本。</td></tr><tr><td>onplay</td><td>script</td><td>当媒介数据将要开始播放时运行脚本。</td></tr><tr><td>onplaying</td><td>script</td><td>当媒介数据已开始播放时运行脚本。</td></tr><tr><td>onprogress</td><td>script</td><td>当浏览器正在取媒介数据时运行脚本。</td></tr><tr><td>onratechange</td><td>script</td><td>当媒介数据的播放速率改变时运行脚本。</td></tr><tr><td>onreadystatechange</td><td>script</td><td>当就绪状态（ready-state）改变时运行脚本。</td></tr><tr><td>onseeked</td><td>script</td><td>当媒介元素的定位属性不再为真且定位已结束时运行脚本。</td></tr><tr><td>onseeking</td><td>script</td><td>当媒介元素的定位属性为真且定位已开始时运行脚本。</td></tr><tr><td>onstalled</td><td>script</td><td>当取回媒介数据过程中（延迟）存在错误时运行脚本。</td></tr><tr><td>onsuspend</td><td>script</td><td>当浏览器已在取媒介数据但在取回整个媒介文件之前停止时运行脚本。</td></tr><tr><td>ontimeupdate</td><td>script</td><td>当媒介改变其播放位置时运行脚本。</td></tr><tr><td>onvolumechange</td><td>script</td><td>当媒介改变音量亦或当音量被设置为静音时运行脚本。</td></tr><tr><td>onwaiting</td><td>script</td><td>当媒介已停止播放但打算继续播放时运行脚本。</td></tr></tbody></table><h2 id="5-7、其它事件"><a href="#5-7、其它事件" class="headerlink" title="5.7、其它事件"></a>5.7、其它事件</h2><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>onshow</td><td>script</td><td>当 <menu> 元素在上下文显示时触发。</td></tr><tr><td>ontoggle</td><td>script</td><td>当用户打开或关闭 <details> 元素时触发。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> web前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>common-utils</title>
      <link href="/2022/03/16/common-utils/"/>
      <url>/2022/03/16/common-utils/</url>
      
        <content type="html"><![CDATA[<p>做前后端项目中,为了方便对接,前后端会有相应的规范,这些类一般都是常用的</p><h2 id="CommonResult类"><a href="#CommonResult类" class="headerlink" title="CommonResult类:"></a>CommonResult类:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.utils.result;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonResult</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Boolean succeed;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : ResultCode.COMMON_FAIL.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : ResultCode.COMMON_FAIL.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed, ResultCode resultEnum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getCode() : resultEnum.getCode());</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getMessage() : resultEnum.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : ResultCode.COMMON_FAIL.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : ResultCode.COMMON_FAIL.getMessage();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed, ResultCode resultEnum, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getCode() : resultEnum.getCode());</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getMessage() : resultEnum.getMessage());</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getSucceed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> succeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSucceed</span><span class="params">(Boolean succeed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CommonResult&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;succeed=&quot;</span> + succeed +</span><br><span class="line">                <span class="string">&quot;, code=&quot;</span> + code +</span><br><span class="line">                <span class="string">&quot;, message=&#x27;&quot;</span> + message + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, data=&quot;</span> + data +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回类的封装工具类"><a href="#返回类的封装工具类" class="headerlink" title="返回类的封装工具类:"></a>返回类的封装工具类:</h2><p>ResultUtil类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.utils.result;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; CommonResult&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">true</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title function_">fail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title function_">fail</span><span class="params">(ResultCode resultEnum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">false</span>, resultEnum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="PageResult类"><a href="#PageResult类" class="headerlink" title="PageResult类:"></a>PageResult类:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.utils.result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageResult</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt;, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">3720998571176536865L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; records = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一共有多少条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> totalElements;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> currentPage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一页数据最多有多少条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> pageSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一共有多少页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> totalPages;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页数有多少条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> numberOfElements;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法，只用把原来的page类放进来即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 查出来的分页对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageResult</span><span class="params">(Page&lt;T&gt; page)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.records = page.getRecords();</span><br><span class="line">        <span class="built_in">this</span>.totalElements = page.getTotal();</span><br><span class="line">        <span class="built_in">this</span>.currentPage = page.getCurrent();</span><br><span class="line">        <span class="built_in">this</span>.pageSize = page.getSize();</span><br><span class="line">        <span class="built_in">this</span>.numberOfElements = page.getRecords().size();</span><br><span class="line">        <span class="built_in">this</span>.totalPages = page.getPages();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有前一页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPrevious</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getCurrentPage() &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有下一页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getCurrentPage() + <span class="number">1</span> &lt; getTotalPages();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取总的页数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> long</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getTotalPages</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.totalPages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前页的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List&lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;T&gt; <span class="title function_">getRecords</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableList(records);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> records 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRecords</span><span class="params">(List&lt;T&gt; records)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.records = records;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasRecords</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getNumberOfElements() &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单页大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getPageSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置单页大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageSize</span><span class="params">(Long pageSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pageSize = pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取全部元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getTotalElements</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> totalElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置全部元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotalElements</span><span class="params">(<span class="type">long</span> totalElements)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.totalElements = totalElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前页号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getCurrentPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置当前页号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCurrentPage</span><span class="params">(Long currentPage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.currentPage = currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单页元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumberOfElements</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> numberOfElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置单页元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNumberOfElements</span><span class="params">(<span class="type">int</span> numberOfElements)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.numberOfElements = numberOfElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getRecords().iterator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ResultCode类-枚举"><a href="#ResultCode类-枚举" class="headerlink" title="ResultCode类(枚举):"></a>ResultCode类(枚举):</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.utils.result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 规定:</span></span><br><span class="line"><span class="comment"> * #1表示成功</span></span><br><span class="line"><span class="comment"> * #1001～1999 区间表示参数错误</span></span><br><span class="line"><span class="comment"> * #2001～2999 区间表示用户错误</span></span><br><span class="line"><span class="comment"> * #3001～3999 区间表示接口异常</span></span><br><span class="line"><span class="comment"> * 统一错误枚举类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 成功 */</span></span><br><span class="line">    SUCCESS(<span class="number">200</span>, <span class="string">&quot;成功&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 默认失败 */</span></span><br><span class="line">    COMMON_FAIL(<span class="number">999</span>, <span class="string">&quot;失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    CUSTOM_FAIL(<span class="number">9999</span>, <span class="string">&quot;自定义错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 参数错误：1000～1999 */</span></span><br><span class="line">    PARAM_NOT_VALID(<span class="number">1001</span>, <span class="string">&quot;参数无效&quot;</span>),</span><br><span class="line">    PARAM_IS_BLANK(<span class="number">1002</span>, <span class="string">&quot;参数为空&quot;</span>),</span><br><span class="line">    PARAM_TYPE_ERROR(<span class="number">1003</span>, <span class="string">&quot;参数类型错误&quot;</span>),</span><br><span class="line">    PARAM_NOT_COMPLETE(<span class="number">1004</span>, <span class="string">&quot;参数缺失&quot;</span>),</span><br><span class="line">    FAIL_COPY_PROPERTIES(<span class="number">1076</span>, <span class="string">&quot;创建对象失败或拷贝对象属性失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 微信小程序登录 */</span></span><br><span class="line">    WEI_XIN_CODE_ERROR(<span class="number">3001</span>, <span class="string">&quot;携带code向小程序请求失败&quot;</span>),</span><br><span class="line">    WEI_XIN_SKEY_VALID(<span class="number">3002</span>, <span class="string">&quot;skey无效&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 用户错误 */</span></span><br><span class="line">    USER_NOT_LOGIN(<span class="number">2001</span>, <span class="string">&quot;用户未登录&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_EXPIRED(<span class="number">2002</span>, <span class="string">&quot;账号已过期&quot;</span>),</span><br><span class="line">    USER_CREDENTIALS_ERROR(<span class="number">2003</span>, <span class="string">&quot;密码错误&quot;</span>),</span><br><span class="line">    USER_CREDENTIALS_EXPIRED(<span class="number">2004</span>, <span class="string">&quot;密码过期&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_DISABLE(<span class="number">2005</span>, <span class="string">&quot;账号不可用&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_LOCKED(<span class="number">2006</span>, <span class="string">&quot;账号被锁定&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_NOT_EXIST(<span class="number">2007</span>, <span class="string">&quot;账号不存在&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_ALREADY_EXIST(<span class="number">2008</span>, <span class="string">&quot;账号已存在&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_USE_BY_OTHERS(<span class="number">2009</span>, <span class="string">&quot;账号下线&quot;</span>),</span><br><span class="line">    USER_IS_EMPTY(<span class="number">2010</span>, <span class="string">&quot;用户为空&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Token错误*/</span></span><br><span class="line">    TOKEN_EXPIRED(<span class="number">4001</span>, <span class="string">&quot;登陆信息过期&quot;</span>),</span><br><span class="line">    TOKEN_ERROR(<span class="number">4002</span>, <span class="string">&quot;信息被更改,请重新登陆&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 业务错误 */</span></span><br><span class="line">    NO_PERMISSION(<span class="number">5001</span>, <span class="string">&quot;没有权限&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*订单错误*/</span></span><br><span class="line">    EXISTED_ORDER(<span class="number">6001</span>, <span class="string">&quot;该商品的订单已存在，请支付或取消后再重新下单&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*商品错误*/</span></span><br><span class="line">    EXISTED_GOOD(<span class="number">7001</span>, <span class="string">&quot;已存在该商品&quot;</span>),</span><br><span class="line">    EXISTED_GOOD_INCART(<span class="number">7002</span>,<span class="string">&quot;购物车中已经存在该商品&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*招投标错误*/</span></span><br><span class="line">    EXISTED_SUBMISSION(<span class="number">8001</span>,<span class="string">&quot;已经存在该投标了&quot;</span>),</span><br><span class="line">    EXISTED_INVITATION(<span class="number">8002</span>,<span class="string">&quot;已经存在该招标了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ResultCode(Integer code, String message) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResultCode <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResultCode <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据code获取message</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 状态码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMessageByCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (ResultCode ele : values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ele.getCode().equals(code)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ele.getMessage();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常返回类"><a href="#异常返回类" class="headerlink" title="异常返回类"></a>异常返回类</h2><p>GlobalException类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">error</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        log.error(e.getMessage());</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.fail(ResultCode.COMMON_FAIL.setMessage(e.getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(AppException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">error</span><span class="params">(AppException e)</span> &#123;</span><br><span class="line">        log.error(e.getMessage());</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.fail(ResultCode.CUSTOM_FAIL.setCode(e.getCode()).setMessage(e.getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>APPExceptin类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AppException</span><span class="params">(ResultCode resultCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = resultCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = resultCode.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redis工具类"><a href="#Redis工具类" class="headerlink" title="Redis工具类:"></a>Redis工具类:</h2><p><strong>redis接口类:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RedisService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存存属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">get</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">del</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">del</span><span class="params">(List&lt;String&gt; keys)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">getExpire</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否有该属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hasKey</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按delta递增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按delta递减</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Hash结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">hGet</span><span class="params">(String key, String hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Hash结构中放入一个属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Hash结构中放入一个属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接获取整个Hash结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;Object, Object&gt; <span class="title function_">hGetAll</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接设置整个Hash结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接设置整个Hash结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Hash结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hDel</span><span class="params">(String key, Object... hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断Hash结构中是否有该属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hHasKey</span><span class="params">(String key, String hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash结构中属性递增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">hIncr</span><span class="params">(String key, String hashKey, Long delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash结构中属性递减</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">hDecr</span><span class="params">(String key, String hashKey, Long delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Set结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Set&lt;Object&gt; <span class="title function_">sMembers</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Set结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sAdd</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Set结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sAdd</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否为Set中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">sIsMember</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Set结构的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sSize</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Set结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sRemove</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取List结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Object&gt; <span class="title function_">lRange</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取List结构的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lSize</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引获取List中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">lIndex</span><span class="params">(String key, <span class="type">long</span> index)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPush</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPush</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中批量添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPushAll</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中批量添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPushAll</span><span class="params">(String key, Long time, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从List结构中移除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>redis接口实现类:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">RedisService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">del</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">del</span><span class="params">(List&lt;String&gt; keys)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(keys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getExpire</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hasKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hGet</span><span class="params">(String key, String hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hashKey, value);</span><br><span class="line">        <span class="keyword">return</span> expire(key, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hashKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hGetAll</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">        <span class="keyword">return</span> expire(key, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hDel</span><span class="params">(String key, Object... hashKey)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hHasKey</span><span class="params">(String key, String hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">hIncr</span><span class="params">(String key, String hashKey, Long delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, hashKey, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">hDecr</span><span class="params">(String key, String hashKey, Long delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, hashKey, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">sMembers</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sAdd</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sAdd</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">sIsMember</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sRemove</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">lRange</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">lIndex</span><span class="params">(String key, <span class="type">long</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPush</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPush</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">index</span> <span class="operator">=</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPushAll</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPushAll</span><span class="params">(String key, Long time, Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JWT工具类"><a href="#JWT工具类" class="headerlink" title="JWT工具类:"></a>JWT工具类:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.io.BaseEncoding;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtBuilder;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> tokenExpiredTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String jwtId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String jwtSecret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建JWT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(Map&lt;String, Object&gt; claims, Long time)</span> &#123;</span><br><span class="line">        <span class="comment">//指定签名的时候使用的签名算法，也就是header那部分，jjwt已经将这部分内容封装好了。</span></span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="comment">//生成JWT的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">nowMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//下面就是在为payload添加各种标准声明和私有声明了</span></span><br><span class="line">        <span class="comment">//这里其实就是new一个JwtBuilder，设置jwt的body</span></span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                <span class="comment">//如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的</span></span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                <span class="comment">//设置jti(JWT ID)：是JWT的唯一标识，根据业务需要，这个可以设置为一个不重复的值，主要用来作为一次性token,从而回避重放攻击。</span></span><br><span class="line">                .setId(jwtId)</span><br><span class="line">                <span class="comment">//iat: jwt的签发时间</span></span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                <span class="comment">//设置签名使用的签名算法和签名使用的秘钥</span></span><br><span class="line">                .signWith(signatureAlgorithm, secretKey);</span><br><span class="line">        <span class="keyword">if</span> (time &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> nowMillis + time;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line">            <span class="comment">//设置过期时间</span></span><br><span class="line">            builder.setExpiration(exp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证jwt</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">verifyJwt</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="comment">//签名秘钥，和生成的签名的秘钥一模一样</span></span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        Claims claims;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims = Jwts.parser()  <span class="comment">//得到DefaultJwtParser</span></span><br><span class="line">                    .setSigningKey(key)         <span class="comment">//设置签名的秘钥</span></span><br><span class="line">                    .parseClaimsJws(token).getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            claims = <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="comment">//设置需要解析的jwt</span></span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由字符串生成加密key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SecretKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title function_">generalKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">stringKey</span> <span class="operator">=</span> jwtSecret;</span><br><span class="line">        <span class="type">byte</span>[] encodedKey = BaseEncoding.base64().decode(stringKey);</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(encodedKey, <span class="number">0</span>, encodedKey.length, <span class="string">&quot;HmacSHA256&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据userId和openid生成token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String openId)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;openId&quot;</span>, openId);</span><br><span class="line">        <span class="keyword">return</span> createJWT(map, tokenExpiredTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.token-expired-time&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTokenExpiredTime</span><span class="params">(<span class="type">long</span> tokenExpiredTime)</span> &#123;</span><br><span class="line">        JwtUtils.tokenExpiredTime = tokenExpiredTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJwtId</span><span class="params">(String jwtId)</span> &#123;</span><br><span class="line">        JwtUtils.jwtId = jwtId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.secret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJwtSecret</span><span class="params">(String jwtSecret)</span> &#123;</span><br><span class="line">        JwtUtils.jwtSecret = jwtSecret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getTokenExpiredTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tokenExpiredTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJwtId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jwtId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJwtSecret</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jwtSecret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>待补充…</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux入门</title>
      <link href="/2022/03/16/linux%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/16/linux%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="linux介绍"><a href="#linux介绍" class="headerlink" title="linux介绍:"></a>linux介绍:</h1><p><a href="https://www.runoob.com/linux/linux-command-manual.html">详细较全面的linux命令</a>)</p><p>本文主要写linux的操作过程知识点。</p><h2 id="开机"><a href="#开机" class="headerlink" title="开机"></a>开机</h2><p>开机会启动许多程序。它们在Windows叫做”服务”（service），在Linux就叫做”守护进程”（daemon）。</p><hr><blockquote><p>守护进程</p></blockquote><p>守护进程是提供基本操作系统下可能无法使用的多种功能的服务。其主要任务是监听服务请求，同时对这些请求采取行动。服务完成后，它将断开连接并等待进一步的请求。守护进程是脱离于终端并且在后台运行的进程，脱离终端是为了避免在执行的过程中的信息在终端上显示，并且进程也不会被任何终端所产生的终端信息所打断。</p><p>守护进程一般的生命周期是系统启动到系统停止运行。</p><p>我们用daemon来做什么事情呢？我们可以用守护进程监控一个进程的运行，如果发现其被kill了，那就重新启动进程。简单来说，就是用来守护其它进程。</p><p>做法也很简单，首先生成这个守护进程，在这个进程中启动个定时器或者while循环：让其不断检测另外一个进程是否还在运行，如果没有在运行那就启动之。当然，也可以不用检测，直接不断的循环去启动即可！ 如果已经正常启动，再次去启动就会失败，这无所谓。如果已经kill,则立即将之启动。</p><hr><p>开机成功后，它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份，密码是不显示的，输完回车即可！</p><p>一般来说，用户的登录方式有三种：</p><ul><li>命令行登录</li><li>ssh登录</li><li>图形界面登录</li></ul><p>最高权限账户为 root，可以操作一切！</p><h2 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h2><p>在linux领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。</p><p>关机指令为：shutdown ；</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sync # 将数据由内存同步到硬盘中。</span><br><span class="line"></span><br><span class="line">shutdown # 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</span><br><span class="line"></span><br><span class="line">shutdown –h 10 # 这个命令告诉大家，计算机将在10分钟后关机</span><br><span class="line"></span><br><span class="line">shutdown –h now # 立马关机</span><br><span class="line"></span><br><span class="line">shutdown –h 20:25 # 系统会在今天20:25关机</span><br><span class="line"></span><br><span class="line">shutdown –h +10 # 十分钟后关机</span><br><span class="line"></span><br><span class="line">shutdown –r now # 系统立马重启</span><br><span class="line"></span><br><span class="line">shutdown –r +10 # 系统十分钟后重启</span><br><span class="line"></span><br><span class="line">reboot # 就是重启，等同于 shutdown –r now</span><br><span class="line"></span><br><span class="line">halt # 关闭系统，等同于shutdown –h now 和 poweroff</span><br></pre></td></tr></table></figure><p>最后总结一下，不管是重启系统还是关闭系统，首先要运行 sync 命令，把内存中的数据写到磁盘中。</p><h2 id="系统目录介绍"><a href="#系统目录介绍" class="headerlink" title="系统目录介绍"></a>系统目录介绍</h2><p>可以通过ls查看系统下面的目录</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220309173857323.png" alt="image-20220309173857323"></p><p>树状目录结构:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220309174037598.png" alt="image-20220309174037598"></p><ul><li><strong>&#x2F;bin：</strong>bin是Binary的缩写, 这个目录存放着最经常使用的命令。</li><li>&#x2F;boot： 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。(不要动)</li><li>&#x2F;dev ： dev是Device(设备)的缩写, 存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</li><li><strong>&#x2F;etc：</strong> 这个目录用来存放所有的系统管理所需要的配置文件和子目录。</li><li>&#x2F;<strong>home</strong>：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</li><li>&#x2F;lib：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。(不要动)</li><li>&#x2F;lost+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。(存放突然关机的一些文件)</li><li>&#x2F;media：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</li><li>&#x2F;mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在&#x2F;mnt&#x2F;上，然后进入该目录就可以查看光驱里的内容了。</li><li>&#x2F;opt：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</li><li>&#x2F;proc：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</li><li>&#x2F;<strong>root</strong>：该目录为系统管理员，也称作超级权限者的用户主目录。</li><li>&#x2F;sbin：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</li><li>&#x2F;srv：该目录存放一些服务启动之后需要提取的数据。</li><li>&#x2F;sys：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。</li><li>&#x2F;tmp：这个目录是用来存放一些临时文件的。(用完就可以丢的文件,安装包啥的)</li><li>&#x2F;<strong>usr</strong>：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</li><li>&#x2F;usr&#x2F;bin： 系统用户使用的应用程序。</li><li>&#x2F;usr&#x2F;sbin： 超级用户使用的比较高级的管理程序和系统守护程序。</li><li>&#x2F;usr&#x2F;src： 内核源代码默认的放置目录。</li><li>&#x2F;var：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</li><li>&#x2F;run：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。</li></ul><h1 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h1><blockquote><p>绝对路径和相对路径</p></blockquote><p>我们知道Linux的目录结构为树状结构，最顶级的目录为根目录 <code>/</code>。</p><p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p><p>在开始本教程前我们需要先知道什么是绝对路径与相对路径。</p><blockquote><p>绝对路径：</p></blockquote><p>路径的写法，由根目录 <code>/</code> 写起，例如：<code>/usr/share/doc</code> 这个目录。</p><blockquote><p>相对路径：</p></blockquote><p>路径的写法，不是由 <code>/</code> 写起，例如由 <code>/usr/share/doc</code> 要到 <code>/usr/share/man</code> 底下时，可以写成：<code>cd ../man</code> 这就是相对路径的写法啦！</p><blockquote><p>处理目录的常用命令</p></blockquote><ul><li>ls: 列出目录</li><li>ll:  一列表的形式列出目录</li><li>cd：切换目录</li><li>pwd：显示目前的目录</li><li>mkdir：创建一个新的目录</li><li>rmdir：删除一个空的目录</li><li>cp: 复制文件或目录</li><li>rm: 移除文件或目录</li><li>mv: 移动文件与目录，或修改文件与目录的名称</li></ul><p>你可以使用 man [命令] 来查看各个命令的使用文档，如 ：man cp。</p><h2 id="ls-（列出目录）"><a href="#ls-（列出目录）" class="headerlink" title="ls （列出目录）"></a>ls （列出目录）</h2><p>在Linux系统当中， ls 命令可能是最常被运行的。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# ls [-aAdfFhilnrRSt] 目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</p><p>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</p><p>将目录下的所有文件列出来(含属性与隐藏档)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# ls -al ~</span><br><span class="line">ll -al 列出全部的文件(包括隐藏文件)</span><br></pre></td></tr></table></figure><p>补充：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -A 列出除.及..的其它文件</span><br><span class="line">ls -r 反序排列</span><br><span class="line">ls -t 以文件修改时间排序</span><br><span class="line">ls -S 以文件大小排序</span><br><span class="line">ls -h 以易读大小显示</span><br><span class="line">ls -l  == ll列出全部的文件(不包括隐藏文件)</span><br></pre></td></tr></table></figure><h2 id="cd-（切换目录）"><a href="#cd-（切换目录）" class="headerlink" title="cd （切换目录）"></a>cd （切换目录）</h2><p>cd是Change Directory的缩写，这是用来变换工作目录的命令。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd [相对路径或绝对路径]</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 切换到用户目录下</span><br><span class="line">[root@kuangshen /]# cd home  </span><br><span class="line"></span><br><span class="line"># 使用 mkdir 命令创建 kuangstudy 目录</span><br><span class="line">[root@kuangshen home]# mkdir kuangstudy</span><br><span class="line"></span><br><span class="line"># 进入 kuangstudy 目录</span><br><span class="line">[root@kuangshen home]# cd kuangstudy</span><br><span class="line"></span><br><span class="line"># 回到上一级</span><br><span class="line">[root@kuangshen kuangstudy]# cd ..</span><br><span class="line"></span><br><span class="line"># 回到根目录</span><br><span class="line">[root@kuangshen kuangstudy]# cd /</span><br><span class="line"></span><br><span class="line"># 表示回到自己的家目录，亦即是 /root 这个目录</span><br><span class="line">[root@kuangshen kuangstudy]# cd ~</span><br></pre></td></tr></table></figure><h2 id="pwd-显示目前所在的目录"><a href="#pwd-显示目前所在的目录" class="headerlink" title="pwd ( 显示目前所在的目录 )"></a>pwd ( 显示目前所在的目录 )</h2><p>pwd 是 Print Working Directory 的缩写，也就是显示目前所在目录的命令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen kuangstudy]#pwd [-P]</span><br></pre></td></tr></table></figure><p>选项与参数：-P ：显示出确实的路径，而非使用连接(link) 路径。</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 单纯显示出目前的工作目录</span><br><span class="line">[root@kuangshen ~]# pwd</span><br><span class="line">/root</span><br><span class="line"></span><br><span class="line"># 如果是链接，要显示真实地址，可以使用 -P参数</span><br><span class="line">[root@kuangshen /]# cd bin</span><br><span class="line">[root@kuangshen bin]# pwd -P</span><br><span class="line">/usr/bin</span><br></pre></td></tr></table></figure><h2 id="mkdir-（创建新目录）"><a href="#mkdir-（创建新目录）" class="headerlink" title="mkdir （创建新目录）"></a>mkdir （创建新目录）</h2><p>如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir [-mp] 目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</p><p>-p ：帮助你直接将所需要的目录(包含上一级目录)<strong>递归</strong>创建起来！</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入我们用户目录下</span><br><span class="line">[root@kuangshen /]# cd /home</span><br><span class="line"></span><br><span class="line"># 创建一个 test 文件夹</span><br><span class="line">[root@kuangshen home]# mkdir test</span><br><span class="line"></span><br><span class="line"># 创建多层级目录</span><br><span class="line">[root@kuangshen home]# mkdir test1/test2/test3/test4</span><br><span class="line">mkdir: cannot create directory ‘test1/test2/test3/test4’:</span><br><span class="line">No such file or directory  # &lt;== 没办法直接创建此目录啊！</span><br><span class="line"></span><br><span class="line"># 加了这个 -p 的选项，可以自行帮你创建多层目录！</span><br><span class="line">[root@kuangshen home]# mkdir -p test1/test2/test3/test4</span><br><span class="line"></span><br><span class="line"># 创建权限为 rwx--x--x 的目录。</span><br><span class="line">[root@kuangshen home]# mkdir -m 711 test2</span><br><span class="line">[root@kuangshen home]# ls -l</span><br><span class="line">drwxr-xr-x 2 root root  4096 Mar 12 21:55 test</span><br><span class="line">drwxr-xr-x 3 root root  4096 Mar 12 21:56 test1</span><br><span class="line">drwx--x--x 2 root root  4096 Mar 12 21:58 test2</span><br></pre></td></tr></table></figure><h2 id="rmdir-删除空的目录"><a href="#rmdir-删除空的目录" class="headerlink" title="rmdir ( 删除空的目录 )"></a>rmdir ( 删除空的目录 )</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rmdir [-p] 目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：-p ：连同上一级『空的』目录也一起删除</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 看看有多少目录存在？[root@kuangshen home]# ls -ldrwxr-xr-x 2 root root  4096 Mar 12 21:55 testdrwxr-xr-x 3 root root  4096 Mar 12 21:56 test1drwx--x--x 2 root root  4096 Mar 12 21:58 test2# 可直接删除掉，没问题[root@kuangshen home]# rmdir test# 因为尚有内容，所以无法删除！[root@kuangshen home]# rmdir test1rmdir: failed to remove ‘test1’: Directory not empty# 利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 依次删除。[root@kuangshen home]# rmdir -p test1/test2/test3/test4</span><br></pre></td></tr></table></figure><p>注意：这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录，后面我们会将学习！</p><h2 id="cp-复制文件或目录"><a href="#cp-复制文件或目录" class="headerlink" title="cp ( 复制文件或目录 )"></a>cp ( 复制文件或目录 )</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# cp [-adfilprsu] 来源档(source) 目标档(destination)[root@www ~]# cp [options] source1 source2 source3 .... directory</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</p><p>-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</p><p>-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</p><p>-r：递归持续复制，用於目录的复制行为；(常用)</p><p>-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</p><p>-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</p><p>-l：进行硬式连结(hard link)的连结档创建，而非复制文件本身。</p><p>-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</p><p>-u：若 destination 比 source 旧才升级 destination ！</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 找一个有文件的目录，我这里找到 root目录[root@kuangshen home]# cd /root[root@kuangshen ~]# lsinstall.sh[root@kuangshen ~]# cd /home# 复制 root目录下的install.sh 到 home目录下[root@kuangshen home]# cp /root/install.sh /home[root@kuangshen home]# lsinstall.sh# 再次复制，加上-i参数，增加覆盖询问？[root@kuangshen home]# cp -i /root/install.sh /homecp: overwrite ‘/home/install.sh’? y # n不覆盖，y为覆盖</span><br></pre></td></tr></table></figure><h2 id="rm-移除文件或目录"><a href="#rm-移除文件或目录" class="headerlink" title="rm ( 移除文件或目录 )"></a>rm ( 移除文件或目录 )</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm [-fir] 文件或目录</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</p><p>-i ：互动模式，在删除前会询问使用者是否动作</p><p>-r ：递归删除啊！最常用在目录的删除了！<strong>这是非常危险的选项！！！</strong></p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将刚刚在 cp 的实例中创建的 install.sh删除掉！[root@kuangshen home]# rm -i install.shrm: remove regular file ‘install.sh’? y# 如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！# 尽量不要在服务器上使用 rm -rf /</span><br></pre></td></tr></table></figure><h2 id="mv-移动文件与目录，或修改名称"><a href="#mv-移动文件与目录，或修改名称" class="headerlink" title="mv  ( 移动文件与目录，或修改名称 )"></a>mv  ( 移动文件与目录，或修改名称 )</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# mv [-fiu] source destination[root@www ~]# mv [options] source1 source2 source3 .... directory</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</p><p>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</p><p>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 复制一个文件到当前目录[root@kuangshen home]# cp /root/install.sh /home# 创建一个文件夹 test[root@kuangshen home]# mkdir test# 将复制过来的文件移动到我们创建的目录，并查看[root@kuangshen home]# mv install.sh test[root@kuangshen home]# lstest[root@kuangshen home]# cd test[root@kuangshen test]# lsinstall.sh# 将文件夹重命名，然后再次查看！[root@kuangshen test]# cd ..[root@kuangshen home]# mv test mvtest[root@kuangshen home]# lsmvtest</span><br></pre></td></tr></table></figure><h1 id="Linux-文件基本属性"><a href="#Linux-文件基本属性" class="headerlink" title="Linux 文件基本属性"></a>Linux 文件基本属性</h1><p>Linux 系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。</p><p>为了保护系统的安全性，Linux 系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p><p>在 Linux 中我们通常使用以下两个命令来修改文件或目录的所属用户与权限：</p><ul><li>chown (change owner) ： 修改所属用户与组。</li><li>chmod (change mode) ： 修改用户的权限。</li></ul><p>下图中通过 chown 来授权用户，通过 chmod 为用户设置可以开门的权限。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1_151733904241.png" alt="img"></p><p>在 Linux 中我们可以使用 <strong>ll</strong> 或者 <strong>ls –l</strong> 命令来显示一个文件的属性以及文件所属的用户和组，如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www /]# ls -ltotal 64dr-xr-xr-x   2 root root 4096 Dec 14  2012 bindr-xr-xr-x   4 root root 4096 Apr 19  2012 boot……</span><br></pre></td></tr></table></figure><p>实例中，<strong>bin</strong> 文件的第一个属性用 <strong>d</strong> 表示。<strong>d</strong> 在 Linux 中代表该文件是一个目录文件。</p><p>在 Linux 中第一个字符代表这个文件是目录、文件或链接文件等等。</p><ul><li>当为 <strong>d</strong> 则是目录</li><li>当为 <strong>-</strong> 则是文件；</li><li>若是 <strong>l</strong> 则表示为链接文档(link file)；</li><li>若是 <strong>b</strong> 则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li><li>若是 <strong>c</strong> 则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li></ul><p>接下来的字符中，以三个为一组，且均为 <strong>rwx</strong> 的三个参数的组合。其中， <strong>r</strong> 代表可读(read)、 <strong>w</strong> 代表可写(write)、 <strong>x</strong> 代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号 <strong>-</strong> 而已。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/file-llls22.jpg" alt="img"></p><p>每个文件的属性由左边第一部分的 10 个字符来确定（如下图）。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/363003_1227493859FdXT-16468222156635.png" alt="363003_1227493859FdXT"></p><p>从左至右用 <strong>0-9</strong> 这些数字来表示。</p><p>第 <strong>0</strong> 位确定文件类型，第 <strong>1-3</strong> 位确定属主（该文件的所有者）拥有该文件的权限。</p><p>第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p><p>其中，</p><p>第 <strong>1、4、7</strong> 位表示<strong>读权限</strong>，如果用 <strong>r</strong> 字符表示，则有读权限，如果用 <strong>-</strong> 字符表示，则没有读权限；</p><p>第 <strong>2、5、8</strong> 位表示<strong>写权限</strong>，如果用 <strong>w</strong> 字符表示，则有写权限，如果用 <strong>-</strong> 字符表示没有写权限；</p><p>第 <strong>3、6、9</strong> 位表示<strong>可执行权限</strong>，如果用 <strong>x</strong> 字符表示，则有执行权限，如果用 <strong>-</strong> 字符表示，则没有执行权限。</p><p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p><p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p><p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p><p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p><p>在以上实例中，boot 文件是一个目录文件，属主和属组都为 root。</p><h1 id="修改文件属性"><a href="#修改文件属性" class="headerlink" title="修改文件属性"></a>修改文件属性</h1><h2 id="chgrp：更改文件属组"><a href="#chgrp：更改文件属组" class="headerlink" title="chgrp：更改文件属组"></a>chgrp：更改文件属组</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chgrp [-R] 属组名 文件名</span><br></pre></td></tr></table></figure><p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</p><h2 id="chown：更改文件属主，也可以同时更改文件属组"><a href="#chown：更改文件属主，也可以同时更改文件属组" class="headerlink" title="chown：更改文件属主，也可以同时更改文件属组"></a>chown：更改文件属主，也可以同时更改文件属组</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown [–R] 属主名 文件名chown [-R] 属主名：属组名 文件名</span><br></pre></td></tr></table></figure><h2 id="chmod：更改文件9个属性"><a href="#chmod：更改文件9个属性" class="headerlink" title="chmod：更改文件9个属性"></a>chmod：更改文件9个属性</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod [-R] xyz 文件或目录</span><br></pre></td></tr></table></figure><p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p><p>Linux文件的基本权限就有九个，分别是<strong>owner&#x2F;group&#x2F;others</strong>三种身份各有自己的<strong>read&#x2F;write&#x2F;execute</strong>权限。</p><p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p><p><strong>r:4 w:2 x:1</strong><br>每种身份(owner&#x2F;group&#x2F;others)各自的三个权限(r&#x2F;w&#x2F;x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：</p><p>owner &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</p><p>group &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</p><p>others&#x3D; — &#x3D; 0+0+0 &#x3D; 0</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 770 filename</span><br></pre></td></tr></table></figure><h1 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Linux系统中使用以下命令来查看文件的内容：</p><ul><li>cat 由第一行开始显示文件内容</li><li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li><li>nl 显示的时候，顺道输出行号！</li><li>more 一页一页的显示文件内容</li><li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li><li>head 只看头几行</li><li>tail 只看尾巴几行</li></ul><p>你可以使用 man [命令]来查看各个命令的使用文档，如 ：man cp。</p><h2 id="cat-由第一行开始显示文件内容"><a href="#cat-由第一行开始显示文件内容" class="headerlink" title="cat 由第一行开始显示文件内容"></a>cat 由第一行开始显示文件内容</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat [-AbEnTv]</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</p><p>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</p><p>-E ：将结尾的断行字节 $ 显示出来；</p><p>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</p><p>-T ：将 [tab] 按键以 ^I 显示出来；</p><p>-v ：列出一些看不出来的特殊字符</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看网络配置: 文件地址 /etc/sysconfig/network-scripts/[root@kuangshen ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0DEVICE=eth0BOOTPROTO=dhcpONBOOT=yes</span><br></pre></td></tr></table></figure><h2 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h2><p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen ~]# tac /etc/sysconfig/network-scripts/ifcfg-eth0ONBOOT=yesBOOTPROTO=dhcpDEVICE=eth0</span><br></pre></td></tr></table></figure><h2 id="nl-显示行号"><a href="#nl-显示行号" class="headerlink" title="nl 显示行号"></a>nl 显示行号</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nl [-bnw] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)；</p><p>-n ：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ；</p><p>-w ：行号栏位的占用的位数。</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen ~]# nl /etc/sysconfig/network-scripts/ifcfg-eth01DEVICE=eth02BOOTPROTO=dhcp3ONBOOT=yes</span><br></pre></td></tr></table></figure><h2 id="more-一页一页翻动"><a href="#more-一页一页翻动" class="headerlink" title="more 一页一页翻动"></a>more 一页一页翻动</h2><p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p><p>空白键 (space)：代表向下翻一页；</p><p>Enter ：代表向下翻『一行』；</p><p>&#x2F;字串 ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</p><p>:f ：立刻显示出档名以及目前显示的行数；</p><p>q ：代表立刻离开 more ，不再显示该文件内容。</p><p>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen etc]# more /etc/csh.login....(中间省略)....--More--(28%) # 重点在这一行喔！你的光标也会在这里等待你的命令</span><br></pre></td></tr></table></figure><h2 id="less-一页一页翻动，以下实例输出-x2F-etc-x2F-man-config文件的内容："><a href="#less-一页一页翻动，以下实例输出-x2F-etc-x2F-man-config文件的内容：" class="headerlink" title="less 一页一页翻动，以下实例输出&#x2F;etc&#x2F;man.config文件的内容："></a>less 一页一页翻动，以下实例输出&#x2F;etc&#x2F;man.config文件的内容：</h2><p>less运行时可以输入的命令有：</p><p>空白键 ：向下翻动一页；</p><p>[pagedown]：向下翻动一页；</p><p>[pageup] ：向上翻动一页；</p><p>&#x2F;字串 ：向下搜寻『字串』的功能；</p><p>?字串 ：向上搜寻『字串』的功能；</p><p>n ：重复前一个搜寻 (与 &#x2F; 或 ? 有关！)</p><p>N ：反向的重复前一个搜寻 (与 &#x2F; 或 ? 有关！)</p><p>q ：离开 less 这个程序；</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen etc]# more /etc/csh.login....(中间省略)....:   # 这里可以等待你输入命令！</span><br></pre></td></tr></table></figure><h2 id="head-取出文件前面几行"><a href="#head-取出文件前面几行" class="headerlink" title="head 取出文件前面几行"></a>head 取出文件前面几行</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">head [-n number] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：-n 后面接数字，代表显示几行的意思！</p><p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen etc]# head -n 20 /etc/csh.login</span><br></pre></td></tr></table></figure><h2 id="tail-取出文件后面几行"><a href="#tail-取出文件后面几行" class="headerlink" title="tail 取出文件后面几行"></a>tail 取出文件后面几行</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail [-n number] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-n ：后面接数字，代表显示几行的意思</p><p>默认的情况中，显示最后 10 行！若要显示最后 20 行，就得要这样：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen etc]# tail -n 20 /etc/csh.login</span><br></pre></td></tr></table></figure><h1 id="拓展：Linux-链接概念-了解即可"><a href="#拓展：Linux-链接概念-了解即可" class="headerlink" title="拓展：Linux 链接概念(了解即可)"></a>拓展：Linux 链接概念(了解即可)</h1><p>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。</p><p>情况下，ln 命令产生硬链接。</p><blockquote><p>硬连接(并列关系)</p></blockquote><p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，<strong>A 和 B 对文件系统来说是完全平等的</strong>。删除其中任何一个都不会影响另外一个的访问。</p><p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，<strong>文件真正删除的条件是与之相关的所有硬连接文件均被删除。</strong></p><blockquote><p>软连接(主从关系)</p></blockquote><p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。<strong>软链接文件有类似于 Windows 的快捷方式</strong>。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是<strong>“主从”关系</strong>，<strong>如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</strong></p><p>语法:</p><p><strong>ln</strong> 创建连接</p><p><strong>touch</strong> 创建文件夹</p><p><strong>echo</strong> 输入字符串,也可以是输入到指定文件中</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln 源文件名 硬连接文件名ln -s 源文件名 软连接文件名</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@kuangshen /]# cd /home[root@kuangshen home]# touch f1 # 创建一个测试文件f1[root@kuangshen home]# lsf1[root@kuangshen home]# ln f1 f2     # 创建f1的一个硬连接文件f2[root@kuangshen home]# ln -s f1 f3   # 创建f1的一个符号连接文件f3[root@kuangshen home]# ls -li       # -i参数显示文件的inode节点信息397247 -rw-r--r-- 2 root root     0 Mar 13 00:50 f1397247 -rw-r--r-- 2 root root     0 Mar 13 00:50 f2397248 lrwxrwxrwx 1 root root     2 Mar 13 00:50 f3 -&gt; f1</span><br></pre></td></tr></table></figure><p>从上面的结果中可以看出，硬连接文件 f2 与原文件 f1 的 inode 节点相同，均为 397247，然而符号连接文件的 inode 节点不同。</p><p><strong>echo 字符串输出 &gt;&gt; f1 输出到 f1文件</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># echo 字符串输出 &gt;&gt; f1 输出到 f1文件[root@kuangshen home]# echo &quot;I am f1 file&quot; &gt;&gt;f1[root@kuangshen home]# cat f1I am f1 file[root@kuangshen home]# cat f2I am f1 file[root@kuangshen home]# cat f3I am f1 file[root@kuangshen home]# rm -f f1[root@kuangshen home]# cat f2I am f1 file[root@kuangshen home]# cat f3cat: f3: No such file or directory</span><br></pre></td></tr></table></figure><p>通过上面的测试可以看出：当删除原始文件 f1 后，硬连接 f2 不受影响，但是符号连接 f1 文件无效；</p><p>依此您可以做一些相关的测试，可以得到以下全部结论：</p><p>删除符号连接f3,对f1,f2无影响；</p><p>删除硬连接f2，对f1,f3也无影响；</p><p>删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效；</p><p>同时删除原文件f1,硬连接f2，整个文件会真正的被删除。</p><h1 id="Linux-vi-x2F-vim"><a href="#Linux-vi-x2F-vim" class="headerlink" title="Linux vi&#x2F;vim"></a>Linux vi&#x2F;vim</h1><p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p><p>但是目前我们使用比较多的是 vim 编辑器。</p><p>vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。</p><p>相关文章：<a href="https://www.runoob.com/w3cnote/all-vim-cheatsheat.html">史上最全Vim快捷键键位图 — 入门到进阶</a></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/vi-vim-cheat-sheet-sch.gif" alt="img">vi&#x2F;vim 的使用</p><p>基本上 vi&#x2F;vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。 这三种模式的作用分别是：</p><h3 id="命令模式："><a href="#命令模式：" class="headerlink" title="命令模式："></a>命令模式：</h3><p>用户刚刚启动 vi&#x2F;vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p>以下是常用的几个命令：</p><ul><li><strong>i</strong> 切换到输入模式，以输入字符。</li><li><strong>x</strong> 删除当前光标所在处的字符。</li><li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li></ul><p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p><p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><h3 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h3><p>在命令模式下按下i就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及Shift组合</strong>，输入字符</li><li><strong>ENTER</strong>，回车键，换行</li><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>DEL</strong>，删除键，删除光标后一个字符</li><li><strong>方向键</strong>，在文本中移动光标</li><li><strong>HOME</strong>&#x2F;<strong>END</strong>，移动光标到行首&#x2F;行尾</li><li><strong>Page Up</strong>&#x2F;<strong>Page Down</strong>，上&#x2F;下翻页</li><li><strong>Insert</strong>，切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><h3 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h3><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li>q 退出程序</li><li>w 保存文件</li></ul><p>按ESC键可随时退出底线命令模式。</p><p>简单的说，我们可以将这三个模式想成底下的图标来表示</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/vim-vi-workmodel.png" alt="img"></p><h2 id="vi-x2F-vim-使用实例"><a href="#vi-x2F-vim-使用实例" class="headerlink" title="vi&#x2F;vim 使用实例"></a>vi&#x2F;vim 使用实例</h2><h3 id="使用-vi-x2F-vim-进入一般模式"><a href="#使用-vi-x2F-vim-进入一般模式" class="headerlink" title="使用 vi&#x2F;vim 进入一般模式"></a>使用 vi&#x2F;vim 进入一般模式</h3><p>如果你想要使用 vi 来建立一个名为 runoob.txt 的文件时，你可以这样做：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim runoob.txt</span><br></pre></td></tr></table></figure><p>直接输入 <strong>vi 文件名</strong> 就能够进入 vi 的一般模式了。请注意，记得 vi 后面一定要加文件名，不管该文件存在与否！</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/078207F0-B204-4464-AAEF-982F45EDDAE9.jpg" alt="img"></p><h3 id="按下-i-进入输入模式-也称为编辑模式-，开始编辑文字"><a href="#按下-i-进入输入模式-也称为编辑模式-，开始编辑文字" class="headerlink" title="按下 i 进入输入模式(也称为编辑模式)，开始编辑文字"></a>按下 i 进入输入模式(也称为编辑模式)，开始编辑文字</h3><p>在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！</p><p>在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。</p><p>这个时候，键盘上除了 <strong>Esc</strong> 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1C928383-471E-4AF1-A61E-9E2CCBD5A913.jpg" alt="img"></p><h3 id="按下-ESC-按钮回到一般模式"><a href="#按下-ESC-按钮回到一般模式" class="headerlink" title="按下 ESC 按钮回到一般模式"></a>按下 ESC 按钮回到一般模式</h3><p>好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 <strong>Esc</strong> 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！</p><h3 id="在一般模式中按下-wq-储存后离开-vi"><a href="#在一般模式中按下-wq-储存后离开-vi" class="headerlink" title="在一般模式中按下 :wq 储存后离开 vi"></a>在一般模式中按下 <strong>:wq</strong> 储存后离开 vi</h3><p>OK，我们要存档了，存盘并离开的指令很简单，输入 <strong>:wq</strong> 即可保存离开！</p><p><img src="/../imgs/B2FB5146-327C-4019-AC96-DD7A8EE7460C.jpg" alt="img"></p><p>OK! 这样我们就成功创建了一个 runoob.txt 的文件。</p><hr><h2 id="vi-x2F-vim-按键说明"><a href="#vi-x2F-vim-按键说明" class="headerlink" title="vi&#x2F;vim 按键说明"></a>vi&#x2F;vim 按键说明</h2><p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p><h3 id="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等"><a href="#第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等" class="headerlink" title="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等"></a>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</h3><table><thead><tr><th align="left">移动光标的方法</th><th></th></tr></thead><tbody><tr><td align="left">h 或 向左箭头键(←)</td><td>光标向左移动一个字符</td></tr><tr><td align="left">j 或 向下箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td align="left">k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td align="left">l 或 向右箭头键(→)</td><td>光标向右移动一个字符</td></tr><tr><td align="left">如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</td><td></td></tr><tr><td align="left">[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td align="left">[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td align="left">+</td><td>光标移动到非空格符的下一行</td></tr><tr><td align="left">-</td><td>光标移动到非空格符的上一行</td></tr><tr><td align="left">n<space></td><td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。</td></tr><tr><td align="left">0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td align="left">$ 或功能键[End]</td><td>移动到这一行的最后面字符处(常用)</td></tr><tr><td align="left">H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td align="left">M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td align="left">L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td align="left">G</td><td>移动到这个档案的最后一行(常用)</td></tr><tr><td align="left">nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td align="left">gg</td><td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td></tr><tr><td align="left">n<Enter></td><td>n 为数字。光标向下移动 n 行(常用)</td></tr><tr><td align="left">搜索替换</td><td></td></tr><tr><td align="left">&#x2F;word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 &#x2F;vbird 即可！ (常用)</td></tr><tr><td align="left">?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td align="left">n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 &#x2F;vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td align="left">N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 &#x2F;vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td></tr><tr><td align="left">使用 &#x2F;word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！</td><td></td></tr><tr><td align="left">:n1,n2s&#x2F;word1&#x2F;word2&#x2F;g</td><td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s&#x2F;vbird&#x2F;VBIRD&#x2F;g』。(常用)</td></tr><tr><td align="left"><strong>:1,$s&#x2F;word1&#x2F;word2&#x2F;g</strong> 或 <strong>:%s&#x2F;word1&#x2F;word2&#x2F;g</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td></tr><tr><td align="left"><strong>:1,$s&#x2F;word1&#x2F;word2&#x2F;gc</strong> 或 <strong>:%s&#x2F;word1&#x2F;word2&#x2F;gc</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td></tr><tr><td align="left">删除、复制与贴上</td><td></td></tr><tr><td align="left">x, X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td align="left">nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td align="left">dd</td><td>剪切游标所在的那一整行(常用)，用 p&#x2F;P 可以粘贴。</td></tr><tr><td align="left">ndd</td><td>n 为数字。剪切光标所在的向下 n 行，例如 20dd 则是剪切 20 行(常用)，用 p&#x2F;P 可以粘贴。</td></tr><tr><td align="left">d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td align="left">dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td align="left">d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td align="left">d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td align="left">yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td align="left">nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td align="left">y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td align="left">yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td align="left">y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td align="left">y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td align="left">p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td></tr><tr><td align="left">J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td align="left">c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td align="left">u</td><td>复原前一个动作。(常用)</td></tr><tr><td align="left">[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr><tr><td align="left">这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</td><td></td></tr><tr><td align="left">.</td><td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)</td></tr></tbody></table><h3 id="第二部分：一般模式切换到编辑模式的可用的按钮说明"><a href="#第二部分：一般模式切换到编辑模式的可用的按钮说明" class="headerlink" title="第二部分：一般模式切换到编辑模式的可用的按钮说明"></a>第二部分：一般模式切换到编辑模式的可用的按钮说明</h3><table><thead><tr><th align="left">进入输入或取代的编辑模式</th><th></th></tr></thead><tbody><tr><td align="left">i, I</td><td>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td></tr><tr><td align="left">a, A</td><td>进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td align="left">o, O</td><td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)</td></tr><tr><td align="left">r, R</td><td>进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td align="left">上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td><td></td></tr><tr><td align="left">[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><h3 id="第三部分：一般模式切换到指令行模式的可用的按钮说明"><a href="#第三部分：一般模式切换到指令行模式的可用的按钮说明" class="headerlink" title="第三部分：一般模式切换到指令行模式的可用的按钮说明"></a>第三部分：一般模式切换到指令行模式的可用的按钮说明</h3><table><thead><tr><th align="left">指令行的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td align="left">:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td align="left">:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td align="left">:q</td><td>离开 vi (常用)</td></tr><tr><td align="left">:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td align="left">:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td align="left">ZZ</td><td>这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td></tr><tr><td align="left">ZQ</td><td>不保存，强制退出。效果等同于 **:q!**。</td></tr><tr><td align="left">:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td align="left">:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td align="left">:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td align="left">:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls &#x2F;home』即可在 vi 当中察看 &#x2F;home 底下以 ls 输出的档案信息！</td></tr><tr><td align="left">vim 环境的变更</td><td></td></tr><tr><td align="left">:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td align="left">:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><p>特别注意，在 vi&#x2F;vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。</p><p>举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot整合redis</title>
      <link href="/2022/03/15/springboot%E6%95%B4%E5%90%88redis/"/>
      <url>/2022/03/15/springboot%E6%95%B4%E5%90%88redis/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot整合redis"><a href="#springboot整合redis" class="headerlink" title="springboot整合redis"></a>springboot整合redis</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>Redis是目前使用最多的缓存，包括Spring Boot 中我们也是会用Redis做很多事情。那么今天就来说一说Spring Boot如何整合Redis。Spring Boot整合Redis 需要那些步骤呢？</p><h2 id="整合redis"><a href="#整合redis" class="headerlink" title="整合redis:"></a>整合redis:</h2><h3 id="一-pom-xml增加依赖如下"><a href="#一-pom-xml增加依赖如下" class="headerlink" title="一 pom.xml增加依赖如下:"></a>一 pom.xml增加依赖如下:</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- redis 连接池 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--新版本连接池lettuce--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二-资源文件application-yaml中增加Redis相关配置"><a href="#二-资源文件application-yaml中增加Redis相关配置" class="headerlink" title="二 资源文件application.yaml中增加Redis相关配置"></a>二 资源文件application.yaml中增加Redis相关配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">//这里用的是本地的redis</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">-1ms</span> <span class="comment"># 连接池最大阻塞等待时间，负值表示没有限制</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三-封装redis工具类"><a href="#三-封装redis工具类" class="headerlink" title="三 封装redis工具类"></a>三 封装redis工具类</h3><p>这个工具类就是封装操作redisTemplate的实现类,基本涵盖了redis常用的基本类型</p><p><strong>redis工具类接口</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cuit.epoch.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RedisService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存存属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">get</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">del</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">del</span><span class="params">(List&lt;String&gt; keys)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">getExpire</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否有该属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hasKey</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按delta递增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按delta递减</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Hash结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">hGet</span><span class="params">(String key, String hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Hash结构中放入一个属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Hash结构中放入一个属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接获取整个Hash结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;Object, Object&gt; <span class="title function_">hGetAll</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接设置整个Hash结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接设置整个Hash结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Hash结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hDel</span><span class="params">(String key, Object... hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断Hash结构中是否有该属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hHasKey</span><span class="params">(String key, String hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash结构中属性递增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">hIncr</span><span class="params">(String key, String hashKey, Long delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash结构中属性递减</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">hDecr</span><span class="params">(String key, String hashKey, Long delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Set结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Set&lt;Object&gt; <span class="title function_">sMembers</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Set结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sAdd</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Set结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sAdd</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否为Set中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">sIsMember</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Set结构的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sSize</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Set结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sRemove</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取List结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Object&gt; <span class="title function_">lRange</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取List结构的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lSize</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引获取List中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">lIndex</span><span class="params">(String key, <span class="type">long</span> index)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPush</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPush</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中批量添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPushAll</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中批量添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPushAll</span><span class="params">(String key, Long time, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从List结构中移除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>redis工具类实现类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cuit.epoch.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">RedisService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">del</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">del</span><span class="params">(List&lt;String&gt; keys)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(keys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getExpire</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hasKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hGet</span><span class="params">(String key, String hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hashKey, value);</span><br><span class="line">        <span class="keyword">return</span> expire(key, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hashKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hGetAll</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">        <span class="keyword">return</span> expire(key, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hDel</span><span class="params">(String key, Object... hashKey)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hHasKey</span><span class="params">(String key, String hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">hIncr</span><span class="params">(String key, String hashKey, Long delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, hashKey, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">hDecr</span><span class="params">(String key, String hashKey, Long delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, hashKey, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">sMembers</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sAdd</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sAdd</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">sIsMember</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sRemove</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">lRange</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">lIndex</span><span class="params">(String key, <span class="type">long</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPush</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPush</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">index</span> <span class="operator">=</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPushAll</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPushAll</span><span class="params">(String key, Long time, Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-创建RedisController控制器"><a href="#四-创建RedisController控制器" class="headerlink" title="四 创建RedisController控制器"></a>四 创建RedisController控制器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.feng.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.feng.utils.RedisService;</span><br><span class="line"><span class="keyword">import</span> com.feng.utils.result.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.feng.utils.result.ResultUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/redis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/nihao&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">niHao</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这里是nihao方法!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;User&gt; <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">111L</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;ladidol&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        redis.set(<span class="string">&quot;json:user&quot;</span>, user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getUsers&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Map&lt;Object, Object&gt;&gt; <span class="title function_">getJsonList</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setId(<span class="number">111L</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;ladidol1&quot;</span>);</span><br><span class="line">        user1.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setId(<span class="number">111L</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;ladidol2&quot;</span>);</span><br><span class="line">        user2.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user3.setId(<span class="number">111L</span>);</span><br><span class="line">        user3.setName(<span class="string">&quot;ladidol3&quot;</span>);</span><br><span class="line">        user3.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;ladidol1&quot;</span>, user1);</span><br><span class="line">        map.put(<span class="string">&quot;ladidol2&quot;</span>, user2);</span><br><span class="line">        map.put(<span class="string">&quot;ladidol3&quot;</span>, user3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        redis.hSetAll(<span class="string">&quot;json:userMaps&quot;</span>, map, <span class="number">2000</span>);</span><br><span class="line">        Map&lt;Object, Object&gt; userMaps = redis.hGetAll(<span class="string">&quot;json:userMaps&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success(userMaps);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果截图:</p><p>单个用户查询:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220311173344155.png" alt="image-20220311173344155"></p><p>查询全部用户:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220311173322149.png" alt="image-20220311173322149"></p><p>在idea中项目的最终结构是这样:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220311175106978.png" alt="image-20220311175106978"></p><p>tips:这里面导入了一些工具类,可以去我其他博客看一下;</p><p><strong>一些小小瑕疵:</strong></p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">用这个redis工具类的时候会出现,key值在redis中存储有多余的前缀</span><br><span class="line">类似这种:</span><br><span class="line">\xac\xed\x00\x05t\x00\x0djson:userMaps</span><br><span class="line">\xac\xed\x00\x05t\x00\x08ladidol2</span><br><span class="line">但是不影响使用;</span><br></pre></td></tr></table></figure><p>key值有前缀乱码解决方法:(好像并没有全部解决,有点寄)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis数据库自定义key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REDIS_KEY_DATABASE</span> <span class="operator">=</span> <span class="string">&quot;community&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance,ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">//key序列化方式</span></span><br><span class="line">        template.setKeySerializer(redisSerializer);</span><br><span class="line">        <span class="comment">//value序列化</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//value hashmap序列化</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="comment">//解决查询缓存转换异常的问题</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance,ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span></span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">        <span class="type">RedisCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> java </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/03/15/hello-world/"/>
      <url>/2022/03/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第一篇 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
