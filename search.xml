<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CSS学习(下)</title>
      <link href="/2022/04/07/css%E5%85%A5%E9%97%A8(%E4%B8%8B)/"/>
      <url>/2022/04/07/css%E5%85%A5%E9%97%A8(%E4%B8%8B)/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="f4918e94febdc842734c49986474a622604fc3467c5f236711d06a920ec9427b">c92271cf075fe1244ae5c161f435c003d27ecbda7ceb8b7a9afb1afb02623f7c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，博主可能还没写完，所以这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> web前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS学习(上)</title>
      <link href="/2022/04/07/css%E5%85%A5%E9%97%A8(%E4%B8%8A)/"/>
      <url>/2022/04/07/css%E5%85%A5%E9%97%A8(%E4%B8%8A)/</url>
      
        <content type="html"><![CDATA[<p>跟着这个githuber走<a href="https://github.com/JERRY-Z-J-R/I-love-you-3-thousand/tree/master/%E6%88%91%E7%88%B1%E4%BD%A0%EF%BC%8C%E4%B8%8D%E6%AD%A2%E4%B8%89%E5%8D%83%E9%81%8D/HTML%20CSS">戳这里</a></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><h2 id="一、CSS简介"><a href="#一、CSS简介" class="headerlink" title="一、CSS简介"></a>一、CSS简介</h2><p><strong>CSS即层叠样式表</strong>（Cascading StyleSheet），</p><p>层叠样式表可以有效地对游戏场景、网站页面、微信小程序和各种基于H5的应用软件进行布局，对字体、颜色、背景和其它效果实现更加精确的控制</p><p><strong>HTML、CSS和JavaScript的关系如下：</strong></p><p>“HTML是网页的结构，CSS是网页的外观，而JavaScript是页面的行为。”</p><h3 id="1-1-HTML的局限性"><a href="#1-1-HTML的局限性" class="headerlink" title="1.1 HTML的局限性"></a>1.1 HTML的局限性</h3><p>HTML 只关注内容的语义，虽然 HTML 可以做简单的样式，但是带来的是无尽的臃肿、繁琐和低维护性……</p><h3 id="1-2-CSS网页的美容师"><a href="#1-2-CSS网页的美容师" class="headerlink" title="1.2 CSS网页的美容师"></a>1.2 CSS网页的美容师</h3><p>CSS 是 <code>层叠样式表</code> 的简称。</p><p>有时我们也会称之为 <code>CSS样式表</code> 或 <code>级联样式表</code>。</p><p>CSS 也是一种 <code>标记语言</code>。</p><p>CSS 主要用于设置 HTML 页面中的文本样式（字体、大小、颜色、对齐方式……）、图片样式（宽高、边框样式、边距……）以及版面的布局和外观显示样式。</p><p>CSS 让我们的网页更加丰富多彩，布局更加灵活自如，简单理解：CSS 可以美化 HTML，让 HTML 更漂亮，同时让页面布局更简单。</p><p><strong>总结：</strong></p><ul><li>HTML 搭建结构，填入元素内容</li><li>CSS 美化 HTML，布局网页元素</li><li>CSS 最大价值：由 HTML 专注去做结构呈现，样式交给 CSS，即：<strong>结构 与 样式 分离</strong></li></ul><h3 id="1-3-CSS语法规范"><a href="#1-3-CSS语法规范" class="headerlink" title="1.3 CSS语法规范"></a>1.3 CSS语法规范</h3><p>使用 HTML 时，需要遵从一定的规范，CSS 也是如此，要想熟练地使用 CSS 对网页进行修饰，首先需要了解 CSS 样式规则。</p><p>CSS 规则由两个主要的部分构成：<code>选择器</code> 以及 <code>一条或多条声明</code>。</p><ul><li><code>选择器</code> 是用于选出需要设置 CSS 样式的 HTML 标签，<strong>花括号</strong>内是对该对象设置的具体样式</li><li><code>属性</code> 和 <code>属性值</code> 以 <code>“键值对”</code> 的形式出现 <code>属性: 属性值;</code></li><li>属性是对指定的对象设置的样式属性，例如：字体大小、文本颜色等</li><li>属性和属性值之间用英文 <code>:</code> 分开</li><li>多个 “键值对” 之间用英文 <code>;</code> 进行区分（末尾的键值对可以不加 <code>;</code>）</li></ul><p>就是json的结构</p><p>所有的样式，都包含在 <code>&lt;style&gt;</code> 标签内，表示是样式表。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-xml"> 一般写到 <span class="tag">&lt;/<span class="name">head</span>&gt;</span> 里。</span></span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h4</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: bule;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：<code>&lt;style&gt;</code> 标签可以写到其他标签内部并作用与该标签区域内，但是强烈不推荐这种写法！</p><blockquote><p><code>type=&quot;text/css&quot;</code> 可以省略。</p></blockquote><h2 id="二、内容"><a href="#二、内容" class="headerlink" title="二、内容"></a>二、内容</h2><h3 id="1-1-css的引入方式"><a href="#1-1-css的引入方式" class="headerlink" title="1.1 css的引入方式"></a>1.1 css的引入方式</h3><p>在HTML中引入CSS共有3种方式：</p><p>（1）外部样式表； （2）内部样式表； （3）内联样式表；</p><p>下面我们详细为大家介绍这3种CSS引入方式。</p><p>一、CSS的3种引用方式</p><p><strong>1、外部样式表</strong>(解耦合)</p><p>外部样式表是<strong>最理想的CSS引用方式，</strong>在实际开发当中，为了提升网站的性能和维护性，一般都是使用外部样式表。所谓的“外部样式表”，就是把CSS代码和HTML代码都单独放在不同文件中，然后<strong>在HTML文档中使用link标签来引用CSS样式表</strong>。 当样式需要被应用到多个页面时，外部样式表是最理想的选择。使用样式表，你就可以通过更改一个CSS文件来改变整个网站的外观。 外部样式表在单独文件中定义，并且在标签对中使用link标签来引用。 举例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在HTML页面中引用文件名为index的css文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css文件路径&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong>：外部样式表都是在head标签内使用link标签来引用的。</p><p><strong>2、内部样式表</strong></p><p>内部样式，指的就是把CSS代码和HTML代码放在同一个文件中，其中CSS代码放在标签对是放在标签对内的。 举例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这是内部样式表，CSS样式在style标签中定义--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:Red;&#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>对于内部样式表，CSS样式在<style>标签内定义，而<style>标签必须放在<head>标签内。</p><p><strong>3.内联样式表</strong></p><p>内联样式表，也是把CSS代码和HTML代码放在同一个文件中，但是跟内部样式表不同，CSS样式不是在<style></style>标签对中定义，而是在标签的style属性中定义。</p><p>举例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:Red; &quot;</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:Red; &quot;</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:Red; &quot;</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="CSS引入方式总结"><a href="#CSS引入方式总结" class="headerlink" title="CSS引入方式总结"></a>CSS引入方式总结</h4><table><thead><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr></thead><tbody><tr><td>行内样式表（行内式）</td><td>书写方便，权重高</td><td>结构样式混写</td><td>较少</td><td>控制一个标签</td></tr><tr><td>内部样式表（嵌入式）</td><td>部分结构和样式分离</td><td>没有彻底分离</td><td>较多</td><td>控制一个页面</td></tr><tr><td>外部样式表（外链式）</td><td>完全实现结构和样式相分离</td><td>需要引入</td><td>最多，吐血推荐</td><td>控制多个页面</td></tr></tbody></table><h3 id="2-2-元素的id和class"><a href="#2-2-元素的id和class" class="headerlink" title="2.2 元素的id和class"></a>2.2 元素的id和class</h3><p>id和class是HTML元素中两个最基本的公共属性。</p><p><strong>一、元素的id属性</strong></p><p>id属性被赋予了标识页面元素的唯一身份。如果一个页面出现了多个相同id属性取值，<a href="http://www.lvyestudy.com/les_cj/cj_2.2.aspx">CSS选择器</a>或者JavaScript就会因为无法分辨要控制的元素而最终报错。</p><p>举例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/css_reset.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>上面HTML代码是错误的，因为在同一个HTML页面中，不允许出现两个相同的id。不过要注意一下，在不同页面是可以出现相同id的元素。</p><p><strong>二、元素的class属性</strong></p><p>class，顾名思义，就是“类”。它采用的思想跟其他C、Java等编程语言的“类”相似。我们可以为同一个页面的相同元素或者不同元素设置相同的class，然后使得相同的class具有相同的CSS样式。</p><p>如果你要为两个元素或者两个以上元素定义相同的样式，建议使用class属性。</p><p>举例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/css_reset.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>这段HTML代码是正确的，因为在同一个HTML页面中，允许相同的元素或者不同的元素设置相同的class属性，以便我们可以统一对具有相同的class属性的元素定义相同的CSS样式。</p><p><strong>id和class就像你的身份证号和姓名，身份证号是全国唯一的，id号也就是唯一的，class（类名）就是姓名，两个人的姓名就有可能一样。</strong></p><p>此外，需要注意一下：</p><ul><li>（1）一个标签可以同时定义多个class；</li><li>（2）id也可以写成name，区别在于name是HTML中的标准，而id是XHTML中的标准，现在网页的标准都是使用id，所以大家尽量不要用name属性；</li></ul><h3 id="3-3-CSS选择器"><a href="#3-3-CSS选择器" class="headerlink" title="3.3 CSS选择器"></a>3.3 CSS选择器</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器</span><br><span class="line">&#123;</span><br><span class="line">  样式属性1:取值1;</span><br><span class="line">  样式属性2:取值2;</span><br><span class="line">  ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>选择器分类:</strong></p><p>选择器分为 <code>基础选择器</code> 和 <code>复合选择器</code> 两个大类，下面主要先介绍一下<strong>基础选择器</strong>。</p><ul><li>基础选择器是由 <code>单个</code> 选择器组成的</li><li>基础选择器又包括：<code>标签选择器</code>、<code>类选择器</code>、<code>id 选择器</code>、<code>通配符选择器</code></li></ul><h4 id="1）基础选择器"><a href="#1）基础选择器" class="headerlink" title="1）基础选择器:"></a>1）基础选择器:</h4><h5 id="1-标签选择器"><a href="#1-标签选择器" class="headerlink" title="1. 标签选择器"></a>1. 标签选择器</h5><p><code>标签选择器</code>（元素选择器）是指用 HTML 标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的 CSS 样式。</p><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">标签名 &#123;</span><br><span class="line">属性1: 属性值1;</span><br><span class="line">属性2: 属性值2;</span><br><span class="line">属性3: 属性值3;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>作用：</strong></p><p>标签选择器可以把某一类标签全部选择出来，比如所有的 <code>&lt;div&gt;</code> 标签和所有的 <code>&lt;span&gt;</code> 标签。</p><p><strong>优点：</strong></p><p>能快速为页面中同类型的标签统一设置样式。</p><p><strong>缺点：</strong></p><p>不能设计差异化样式，只能选择全部的当前标签。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;基础选择器之标签选择器&lt;/title&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        /* 会对所有的该标签元素运用样式，优点：快速统一，缺点：无法差异化设置 */</span><br><span class="line">        p &#123;</span><br><span class="line">            color: green;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        div &#123;</span><br><span class="line">            color: pink;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;男&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;男&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;男&lt;/p&gt;</span><br><span class="line">    &lt;div&gt;女生&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;女生&lt;/div&gt;</span><br><span class="line">    &lt;div&gt;女生&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="2-类选择器"><a href="#2-类选择器" class="headerlink" title="2. 类选择器"></a>2. 类选择器</h5><p>如果想要差异化选择不同的标签，单独选一个或者某几个标签，可以使用 <code>类选择器</code> 。</p><p><strong>CSS 语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.类名 &#123;</span><br><span class="line">属性1: 属性值1;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例如：将所有拥有 red 类的 HTML 元素均设置为红色。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.red &#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HTML 语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;red&quot;&gt;变红色&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>类选择器在 HTML 中以 class 属性表示，在 CSS 中，类选择器以一个 <code>.</code> 号显示。</p><p><strong>注意：</strong></p><ul><li>类选择器使用 <code>.</code>（英文点号）进行标识，后面紧跟类名（自定义，我们自己命名的）</li><li>可以理解为给这个标签起了一个别名来表示</li><li>长名称或词组可以使用<strong>中横线</strong> <code>-</code> 来为类命名</li><li>不能使用已有的关键字作为类名</li><li>不要使用纯数字、中文等命名，尽量使用英文字母来表示</li><li>命名要有意义，尽量使别人一眼就知道这个类名的目的（<strong>可读性第一，长度第二，推荐使用英语，如果是使用拼音请使用全拼</strong>）</li><li>命名规范：见附件（Web前端开发规范手册.pdf）</li></ul><h5 id="3-id选择器"><a href="#3-id选择器" class="headerlink" title="3. id选择器"></a>3. id选择器</h5><p>id 选择器可以为标有特定 id 的 HTML 元素指定特定的样式。</p><p>HTML 元素以 id 属性来设置 id 选择器，CSS 中 id 选择器以 <code>#</code> 来定义。</p><p><strong>语法：</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#id</span>名 &#123;</span><br><span class="line">属性<span class="number">1</span>: 属性值<span class="number">1</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>例如：</strong>将 id 为 nav 元素中的内容设置为红色。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#nav</span> &#123;</span><br><span class="line"><span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>id 属性只能在每个 HTML 文档中出现一次。</p><p><strong>口诀：</strong>样式 <code>#</code> 定义，结构 <code>id</code> 调用，只能调用一次，别人切勿使用。</p><p><strong>id 选择器和类选择器的区别：</strong></p><ul><li>类选择器 (class) 好比人的名字，一个人可以有多个名字，同时一个名字也可以被多个人使用</li><li>id 选择器好比人的身份证号码，全中国是唯一的，不可重复（同一个 id 选择器只能调用一次）</li><li>id 选择器和类选择器最大的不同在于使用次数上</li><li>类选择器在修改样式中用的最多，id 选择器一般用于页面唯一性的元素上，经常和 JavaScript 搭配使用</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基础选择器之id选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* id 选择器口诀：样式 # 定义，结构 id 调用，只能调用一次，别人切勿使用 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#pink</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;pink&quot;</span>&gt;</span>zhoujirui<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次强调：<strong>同一 id 只能定义一次，同一 id 选择器也只能调用一次！</strong>（对于 CSS 修改样式来说，最好使用类选择器，id 选择器主要与后面的 JS 搭配使用）。</p><h5 id="4-通配符选择器"><a href="#4-通配符选择器" class="headerlink" title="4.  通配符选择器"></a>4.  通配符选择器</h5><p>在 CSS 中，通配符选择器使用 <code>*</code> 定义，它表示选取页面中<strong>所有元素</strong>（标签）。</p><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line">属性1: 属性值1;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>通配符选择器不需要调用，自动就给所有的元素使用样式</li><li>特殊情况才使用，后面讲解使用场景</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 利用通配符选择器清除所有的元素标签的内外边距，后期讲</span><br><span class="line">* &#123;</span><br><span class="line">margin: 0;</span><br><span class="line">padding: 0;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>基础选择器之通配符选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* * 给 html 标签所有的元素都使用样式，并且这个过程是自动完成的，不需要手动调用 */</span></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>我的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>我的<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>还是我的<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="基础选择器总结"><a href="#基础选择器总结" class="headerlink" title="基础选择器总结"></a>基础选择器总结</h5><table><thead><tr><th>基础选择器</th><th>作用</th><th>特点</th><th>使用情况</th><th>用法</th></tr></thead><tbody><tr><td>标签选择器</td><td>可以选出所有相同的标签，比如：p</td><td>不能差异化选择</td><td>较多</td><td><code>p &#123;color: red;&#125;</code></td></tr><tr><td>类选择器</td><td>可以选出 1 个或者 多个 标签</td><td>可以根据需求选择</td><td>非常多</td><td><code>.nav &#123;color: red;&#125;</code></td></tr><tr><td>id 选择器</td><td>一次只能选择 1 个标签</td><td>ID 属性只能在每个 HTML 文档中出现一次，也只能调用一次</td><td>一般和 js 搭配</td><td><code>#nav &#123;color: red;&#125;</code></td></tr><tr><td>通配符选择器</td><td>选择所有的标签</td><td>选择的太多，有部分不需要</td><td>特殊情况使用</td><td><code>* &#123;color: red;&#125;</code></td></tr></tbody></table><h4 id="2）复合选择器："><a href="#2）复合选择器：" class="headerlink" title="2）复合选择器："></a>2）复合选择器：</h4><h5 id="1-1-什么是复合选择器"><a href="#1-1-什么是复合选择器" class="headerlink" title="1.1 什么是复合选择器"></a>1.1 什么是复合选择器</h5><p>在 CSS 中，可以根据选择器的类型把选择器分为：<code>基础选择器</code> 和 <code>复合选择器</code>，复合选择器是建立在基础选择器之上，对基础选择器进行<strong>组合形成</strong>的。</p><ul><li>复合选择器可以更准确、更高效的选择目标元素（标签）</li><li>复合选择器是由两个或多个基础选择器，通过不同的方式组合而成的</li><li>常用的复合选择器包括：<strong>后代选择器</strong>、<strong>子选择器</strong>、<strong>并集选择器</strong>、<strong>伪类选择器</strong>等</li></ul><h5 id="1-2-后代选择器"><a href="#1-2-后代选择器" class="headerlink" title="1.2 后代选择器"></a>1.2 后代选择器</h5><p><code>后代选择器</code> 又称为 <code>包含选择器</code>，可以选择父元素里面子元素。其写法就是把外层标签写在前面，内层标签写在后面，中间用空格分隔。当标签发生嵌套时，内层标签就成为外层标签的后代。</p><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">元素1 元素2 &#123; 样式声明 &#125;</span><br></pre></td></tr></table></figure><p>上述语法表示选择 元素 1 里面的<strong>所有</strong>元素 2 （后代元素）。</p><p><strong>例如：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ul li &#123; 样式声明 &#125; /* 选择 ul 里面所有的 li 标签元素 */</span><br></pre></td></tr></table></figure><ul><li>元素1 和 元素2 中间用 <strong>空格</strong> 隔开</li><li>元素1 是父级，元素2 是子级，最终选择的是 元素2，即：元素1 是不会生效样式的</li><li>元素2 可以是儿子，也可以是孙子等，只要是 元素1 的后代即可</li><li>元素1 和 元素2 <strong>可以是任意基础选择器</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>复合选择器之后代选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 把 ol 里面的小 li 选出来改为 pink */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ol</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 把 ol 里面的小 a 选出来改为 red */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ol</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 把 ul 里面的小 li 选出来改为 green */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 把 nav 类中的 li 里面的 a 选出来改为 yellow */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.nav</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是 ol 的孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是 ol 的孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是 ol 的孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是 ol 的孙子<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是 ul 的孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是 ul 的孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>我是 ul 的孩子<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是 ul 的孙子，但是我不会变化<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我偏要变色！并且只能我一个人色……<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1-3-子选择器"><a href="#1-3-子选择器" class="headerlink" title="1.3 子选择器"></a>1.3 子选择器</h5><p>子元素选择器（子选择器）只能选择作为某元素的<strong>最近一级子元素</strong>，简单理解就是选亲儿子元素。</p><p>注意：是<strong>最近一级而并非最近一个</strong>！</p><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">元素1&gt;元素2 &#123; 样式声明 &#125;</span><br></pre></td></tr></table></figure><p>上述语法表示选择元素1 里面的所有直接后代（子元素）元素2。</p><p><strong>例如：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div&gt;p &#123; 样式声明 &#125; /* 选择 div 里面所有最近一级 p 标签元素 */</span><br></pre></td></tr></table></figure><ul><li>元素1 和 元素2 中间用 <strong>大于号</strong> 隔开</li><li>元素1 是父级，元素2 是子级，最终选择的是元素2，即元素1 是不会生效样式的</li><li>元素2 <strong>必须是亲儿子，其孙子、重孙之类都不归他管</strong>，你也可以叫：亲儿子选择器</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>复合选择器之子元素选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.nav</span>&gt;<span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是儿子1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是孙子1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是孙子2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是儿子2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1-4-并集选择器"><a href="#1-4-并集选择器" class="headerlink" title="1.4 并集选择器"></a>1.4 并集选择器</h5><p><code>并集选择器</code> 可以选择多组标签，同时为他们定义相同的样式，通常用于<strong>集体声明</strong>。 <code>并集选择器</code> 是各选择器通过<strong>英文逗号</strong> <code>,</code> 连接而成，任何形式的选择器都可以作为并集选择器的一部分。</p><p><strong>语法：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">元素1, 元素2, 元素3 &#123; 样式声明 &#125;</span><br><span class="line">元素1,</span><br><span class="line">元素2,</span><br><span class="line">元素3 &#123;</span><br><span class="line">    样式声明</span><br><span class="line">&#125;</span><br><span class="line">/* 推荐写法，编码风格 */</span><br></pre></td></tr></table></figure><p>上述语法表示选择元素1、元素2 和 元素3。</p><p><strong>例如：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ul, div &#123; 样式声明 &#125; /* 选择 ul 和 div标签元素 */</span><br></pre></td></tr></table></figure><ul><li>元素1 和 元素2 中间用逗号隔开（最后一个不加逗号）</li><li>逗号可以理解为和的意思</li><li>并集选择器通常用于集体声明</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>复合选择器之并集选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 要求1：请把熊大和熊二改为粉色 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* div,</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        p &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            color: pink;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        &#125; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 要求2：请把熊大和熊二改为红色，还有小猪一家改为粉色 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.pig</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 语法规范：并集选择器通常竖着写 */</span></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>熊大<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>熊二<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>光头强<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pig&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>小猪佩奇<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>猪爸爸<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>猪妈妈<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1-5-伪类选择器"><a href="#1-5-伪类选择器" class="headerlink" title="1.5 伪类选择器"></a>1.5 伪类选择器</h5><p><code>伪类选择器</code> 用于<strong>向某些选择器添加特殊的效果</strong>，比如：给链接添加特殊效果（链接伪类），或选择第 n 个元素（结构伪类）。 <code>伪类选择器</code> 书写最大的特点是用<strong>冒号</strong> <code>:</code> 表示，比如：<code>:hover</code>、<code>:first-child</code>。 因为伪类选择器很多，比如：<code>链接伪类</code>、<code>结构伪类</code> 等，所以这里先讲解常用的链接伪类选择器。</p><blockquote><p>伪类的由来：因为在页面中并没有这个真实存在的类，所以称为 “伪类”。</p></blockquote><h5 id="1-6-链接伪类选择器"><a href="#1-6-链接伪类选择器" class="headerlink" title="1.6 链接伪类选择器"></a>1.6 链接伪类选择器</h5><p><strong>链接伪类选择器注意事项：</strong></p><ul><li>为了确保生效且不冲突，请按照 <code>LVHA</code> 的顺序声明 <code>:link</code> <code>:visited</code> <code>:hover</code> <code>:active</code></li><li>记忆法：love hate 或者 lv 包包 hao</li><li>因为 a 链接在浏览器中具有默认样式，所以我们实际工作中都需要给链接单独指定样式</li></ul><p><strong>链接伪类选择器实际工作开发中的写法：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">/* a 是标签选择器 所有的链接 */</span><br><span class="line">a &#123;</span><br><span class="line">color: gray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* :hover 是链接伪类选择器 鼠标经过 */</span><br><span class="line">a:hover &#123;</span><br><span class="line">color: red; /* 鼠标经过的时候，由原来的 灰色 变成了红色 */</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>复合选择器之链接伪类选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 注意：要学会触类旁通，这里不只是可以改变颜色，当链接为图片时还可以改图片 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 1、a:link 把没有点击过的（访问过的）链接选出来 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:link</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 2、a:visited 选择点击过的（访问过的）链接选出来 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:visited</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: orange;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 3、a:hover 选择鼠标经过（停留）的那个链接 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 4、a:active 选择的是我们鼠标正在按下还没有弹起鼠标的那个链接 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:active</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>小猪佩奇<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>:hover</code> <code>:active</code> 也适用于其他标签元素。</p></blockquote><h5 id="1-7-focus伪类选择器"><a href="#1-7-focus伪类选择器" class="headerlink" title="1.7 :focus伪类选择器"></a>1.7 :focus伪类选择器</h5><p><code>:focus</code> 伪类选择器用于选取获得焦点的表单元素。</p><p>焦点就是光标，一般情况 <code>&lt;input&gt;</code> 类表单元素才能获取，因此这个选择器也主要针对于表单元素来说。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">input:focus &#123;</span><br><span class="line">background-color: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>复合选择器之focus伪类选择器<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 把获得光标的 input 表单元素选区出来 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1-8-复合选择器总结"><a href="#1-8-复合选择器总结" class="headerlink" title="1.8 复合选择器总结"></a>1.8 复合选择器总结</h5><table><thead><tr><th>选择器</th><th>作用</th><th>特征</th><th>使用情况</th><th>隔开符号及用法</th></tr></thead><tbody><tr><td>后代选择器</td><td>用来选择后代元素</td><td>可以是子孙后代</td><td>较多</td><td>符号是空格 <code>.nav a</code></td></tr><tr><td>子代选择器</td><td>选择最近一级元素</td><td>只选亲儿子</td><td>较少</td><td>符号是大于 <code>.nav&gt;p</code></td></tr><tr><td>并集选择器</td><td>选择某些相同样式的元素</td><td>可以用于集体声明</td><td>较多</td><td>符号是逗号 <code>.nav</code>, <code>.header</code></td></tr><tr><td>链接伪类选择器</td><td>选择不同状态的链接</td><td>跟链接相关</td><td>较多</td><td>重点记住 <code>a&#123;&#125;</code> 和 <code>a:hover</code> 实际开发的写法</td></tr><tr><td><code>:focus</code> 选择器</td><td>选择获得光标的表单</td><td>跟表单相关</td><td>较少</td><td><code>input:focus</code> 记住这个写法</td></tr></tbody></table><p>强调：复合选择器的层级写得越细越好（可读性，可维护性，安全性），同时将复合选择器的层级写得越细，可以提前避免大部分的选择器优先级混乱！</p><h2 id="三、CSS字体属性"><a href="#三、CSS字体属性" class="headerlink" title="三、CSS字体属性"></a>三、CSS字体属性</h2><p>CSS Fonts（字体）属性用于定义：<code>字体系列</code>、<code>大小</code>、<code>粗细</code>、和 <code>文字样式</code>（如：斜体）。</p><h3 id="3-1-字体系列"><a href="#3-1-字体系列" class="headerlink" title="3.1 字体系列"></a>3.1 字体系列</h3><p>CSS 使用 font-family 属性定义文本的字体系列。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">font-family: &quot;Microsoft YaHei&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">div &#123;</span><br><span class="line">font-family: Arial, &quot;Microsoft YaHei&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>各种字体之间必须使用英文状态下的逗号隔开</li><li>一般情况下，如果有空格隔开的多个单词组成的字体，加引号</li><li>尽量使用系统默认自带字体，保证在任何用户的浏览器中都能正确显示</li><li>最常用的字体：<code>body &#123;font-family: &quot;Microsoft YaHei&quot;, tahoma, arial, sans-serif, &quot;Hiragino Sans GB&quot;;&#125;</code></li></ul><blockquote><p>Apple 官网字体：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">   <span class="attribute">font-family</span>: <span class="string">&quot;SF Pro SC&quot;</span>, <span class="string">&quot;SF Pro Text&quot;</span>, <span class="string">&quot;SF Pro Icons&quot;</span>, <span class="string">&quot;PingFang SC&quot;</span>, <span class="string">&quot;Helvetica Neue&quot;</span>, <span class="string">&quot;Helvetica&quot;</span>, <span class="string">&quot;Arial&quot;</span>, sans-serif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>Instagram 官网字体：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">   <span class="attribute">font-family</span>: -apple-system, BlinkMacSystemFont,<span class="string">&quot;Segoe UI&quot;</span>, Roboto, Helvetica, Arial, sans-serif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>知乎官网字体：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">   <span class="attribute">font-family</span>: -apple-system, BlinkMacSystemFont, Helvetica Neue, PingFang SC, Microsoft YaHei, Source Han Sans SC, Noto Sans CJK SC, WenQuanYi Micro Hei, sans-serif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>爱奇艺官网字体：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: PingFangSC-Regular, Helvetica, Arial, Microsoft Yahei, sans-serif</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS字体属性之字体系列<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 浏览器会从第一个字体开始进行适配，如果本机可以适配的话，那么就使用该字体，否则看下一个字体，</span></span></span><br><span class="line"><span class="comment"><span class="language-css">           如果都不可以，那么浏览器会使用自带的默认字体，所以实际开发中一般建议使用比较标准化的字体 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* font-family: &#x27;微软雅黑&#x27;; 可以使用中文，但不建议 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&quot;Microsoft YaHei&quot;</span>, Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&quot;Times New Roman&quot;</span>, Times, serif;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>ladidol的秘密<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：小小<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>生日：2001年12月25日<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：男<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>婚姻状况：单身<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS字体属性之字体系列<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 一些情况下，如果要全局设置字体可以直接在 body 标签选择器中指明 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: <span class="string">&quot;Microsoft YaHei&quot;</span>, Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>ladidol的秘密<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：小小<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>生日：2001年12月25日<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：男<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>婚姻状况：单身<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：浏览器字体是依据用户操作系统来调用的，所以这里介绍一种 Windows 系统安装字体的方法。</p><blockquote><p>当然实际开发中通常浏览器请求时，会把字体文件随 HTML CSS JS 等一同传送到客服端。</p></blockquote><h3 id="3-2-字体大小"><a href="#3-2-字体大小" class="headerlink" title="3.2 字体大小"></a>3.2 字体大小</h3><p>CSS 使用 font-size 属性定义字体大小。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">font-size: 20px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>px（像素）大小是我们网页的最常用的单位</li><li>谷歌浏览器默认的文字大小为：16px</li><li>不同浏览器可能默认显示的字号大小不一致，我们尽量给一个明确值大小，不要默认大小</li><li>可以给 body 指定整个页面文字的大小</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS字体属性之字体大小<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 全局设置时，一般在 body 标签选择器中指定文字大小，谷歌浏览器默认 16px，</span></span></span><br><span class="line"><span class="comment"><span class="language-css">           但是最好还是指定一个明确值，以保证在不同浏览器中的效果是一样的 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 标题标签比较特殊，body 中的设置对其是不生效的，需要单独指定文字大小 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">54px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>ladidol的秘密<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：小小<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>生日：2001年12月25日<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：男<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>婚姻状况：单身<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-3-字体粗细"><a href="#3-3-字体粗细" class="headerlink" title="3.3 字体粗细"></a>3.3 字体粗细</h3><p>CSS 使用 font-weight 属性设置文本字体的粗细。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"><span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><code>normal</code></td><td>默认值（不加粗的）</td></tr><tr><td><code>bold</code></td><td>定义粗体（加粗的）</td></tr><tr><td><code>100-900</code></td><td>400 等同于 normal，而 700 等同于 bold，其它值一般不使用，注意这个数字后面不跟单位</td></tr></tbody></table><ul><li>学会让加粗标签（比如 h 和 strong 等）变为不加粗，或者让其他标签加粗</li><li>实际开发时，我们更喜欢用数字表示粗细</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS字体属性之字体粗细<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.bold</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* font-weight: bold; */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 实际开发中，我们更提倡使用数字来表示加粗的效果 */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 这个 700 的后面不要跟单位 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: <span class="number">700</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 使文字不加粗 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* font-weight: normal; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: <span class="number">400</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>laidol的秘密<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>姓名：小小<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>生日：2001年12月25日<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>性别：男<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;bold&quot;</span>&gt;</span>婚姻状况：单身<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-4-文字样式"><a href="#3-4-文字样式" class="headerlink" title="3.4 文字样式"></a>3.4 文字样式</h3><p>CSS 使用 font-style 属性设置文本的风格。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line"><span class="attribute">font-style</span>: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>作用</th></tr></thead><tbody><tr><td><code>normal</code></td><td>默认值，浏览器会显示标准的字体样式 font-style: normal;</td></tr><tr><td><code>italic</code></td><td>浏览器会显示斜体的字体样式</td></tr></tbody></table><p><strong>注意：</strong>平时我们很少给文字加斜体，反而要给斜体标签 (em、i) 改为不倾斜字体。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS字体属性之字体样式（风格）<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 让不倾斜的字体倾斜 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-style</span>: italic;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">em</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 让倾斜的字体不倾斜 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-style</span>: normal;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>上课时候的你<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">em</span>&gt;</span>下课时候的你<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-5-字体复合属性"><a href="#3-5-字体复合属性" class="headerlink" title="3.5 字体复合属性"></a>3.5 字体复合属性</h3><p>字体属性可以把以上文字样式综合来写，这样可以更节约代码。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">body &#123;</span><br><span class="line">font: font-style font-weight font-size/line-height font-family;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">font: normal 400 font-size/line-height &quot;Microsoft YaHei&quot;, Arial, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 font 属性时，必须按上面语法格式中的顺序书写，不能更换顺序，并且各个属性间以空格隔开</li><li>不需要设置的属性可以省略（取默认值），但必须保留 font-size 和 font-family 属性，否则 font 属性将不起作用</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS字体属性之复合属性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 想要 div 文字变倾斜、加粗、字号设置为 16 像素，并且是微软雅黑 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* font-style: italic;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">               font-weight: 700;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">               font-size: 16px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">               font-family: &#x27;Microsoft YaHei&#x27;; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 复合属性：简写的方式，里面的顺序不能打乱 以空格隔开 */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* font: font-style font-weight font-size/line-height font-family; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">font</span>: italic <span class="number">700</span> <span class="number">16px</span> <span class="string">&#x27;Microsoft YaHei&#x27;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 注意：不需要设置的属性可以省略（取默认值），但必须保留 font-size 和 font-family 属性，否则 font 属性将不起作用 */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* font: 20px &#x27;Microsoft YaHei&#x27;； */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>三生三世十里桃花，一心一意百行代码<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-6-字体属性总结"><a href="#3-6-字体属性总结" class="headerlink" title="3.6 字体属性总结"></a>3.6 字体属性总结</h3><table><thead><tr><th>属性</th><th>表示</th><th>注意点</th></tr></thead><tbody><tr><td><code>font-size</code></td><td>字号</td><td>我们通常用的单位是 px 像素，一定要跟上单位</td></tr><tr><td><code>font-family</code></td><td>字体</td><td>实际工作中按照团队约定来写字体</td></tr><tr><td><code>font-weight</code></td><td>字体属性</td><td>记住加粗是 700 或者 bold 不加粗 是 normal 或者 400 记住数字不要跟单位</td></tr><tr><td><code>font-style</code></td><td>字体样式</td><td>记住倾斜是 italic 不倾斜是 normal 工作中我们最常用 normal</td></tr><tr><td><code>font</code></td><td>字体连写</td><td>1、字体连写是有顺序的不能随意换位置，2、其中字号和字体必须同时出现</td></tr></tbody></table><h2 id="四、CSS文本属性"><a href="#四、CSS文本属性" class="headerlink" title="四、CSS文本属性"></a>四、CSS文本属性</h2><p>CSS Text（文本）属性可定义文本的 <code>外观</code>，比如：<code>文本颜色</code>、<code>文本对齐</code>、<code>文本装饰</code>、<code>文本缩进</code>、<code>行间距</code> 等。</p><h3 id="4-1-文本颜色"><a href="#4-1-文本颜色" class="headerlink" title="4.1 文本颜色"></a>4.1 文本颜色</h3><p><code>color</code> 属性用于定义文本的颜色。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>表示方式</th><th>属性值</th></tr></thead><tbody><tr><td>预定义的颜色值</td><td>red，green，blue，black，white，gray</td></tr><tr><td>十六进制</td><td>#FF0000，#FF6600，#29D794（每两位对应：#红R绿G蓝B）</td></tr><tr><td>RGB 代码</td><td>rgb(255, 0, 0) 或 rgb(100%, 0%, 0%)</td></tr></tbody></table><p><strong>注意：</strong>开发中最常用的是十六进制。</p><blockquote><p>熟记开发常用色：</p><p>黑色：<code>black</code>、<code>#000000</code>、<code>rgb(0, 0, 0)</code>（三原色啥也没有混合就为黑）</p><p>白色：<code>white</code>、<code>#FFFFFF</code>、<code>rgb(255, 255, 255)</code>（三原色全满混合就为白）</p><p>灰色：<code>gray</code>、<code>#808080</code>、<code>rgb(128, 128, 128)</code>（三原色全半混合就为灰）</p><p>红色：<code>red</code>、<code>#FF0000</code>、<code>rgb(255, 0, 0)</code></p><p>绿色：<code>green</code>、<code>#008000</code>、<code>rgb(0, 128, 0)</code>（绿色较为特殊，green 对应的是 #008000）</p><p>蓝色：<code>blue</code>、<code>#0000FF</code>、<code>rgb(0, 0, 255)</code></p><p>黄色：<code>yellow</code>、<code>#FFFF00</code>、<code>rgb(255, 255, 0)</code></p><p>青色：<code>#00FFFF</code>、<code>rgb(0, 255, 255)</code></p><p>洋红：<code>#FF00FF</code>、<code>rgb(255, 0, 255)</code></p><p>橙色：<code>orange</code></p><p>粉色：<code>pink</code></p><p>烈粉色：<code>hotpink</code>（浓度低）、<code>deeppink</code>（浓度高）</p><p>天蓝色：<code>skyblue</code></p><p>深色系：<code>dark颜色</code> 如：<code>darkgreen</code></p><p>浅色系：<code>light颜色</code> 如：<code>lightgreen</code></p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS文本外观属性之文本颜色<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* color: deeppink; */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* color: #FF1493; 最常用 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">20</span>, <span class="number">147</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>pink<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-文本对齐"><a href="#4-2-文本对齐" class="headerlink" title="4.2 文本对齐"></a>4.2 文本对齐</h3><p><code>text-align</code> 属性用于设置元素内文本内容的水平对齐方式。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">text-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>解释</th></tr></thead><tbody><tr><td>left</td><td>左对齐（默认值）</td></tr><tr><td>rigth</td><td>右对齐</td></tr><tr><td>center</td><td>居中对齐</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;CSS文本外观之文本对齐&lt;/title&gt;</span><br><span class="line">    &lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">        h1 &#123;</span><br><span class="line">            /* 本质是让 h1 盒子里面的文字水平居中对齐 */</span><br><span class="line">            /* text-align: center; */</span><br><span class="line">            text-align: right;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;右对齐的标题&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>注意：</p><p><code>text-align</code> 属性只能作用于 <code>块级元素</code>，并让该块级元素内的 <code>行内元素</code> 实现居中（不一定是文字）。</p><p>上述例子中：h1 为块级元素，所以给 h1 设置 text-align，便会作用于里面的文本（如果里面还有行内元素的话，也会一同作用）。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS文本外观之文本对齐<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>zhoujiruizhoujirui<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述例子中：为 div 设置 text-align 之所以能够使其内部的块级元素 p 里的文字居中，原因是 p 会继承父元素 div 的 text-align 属性，所以相当于对 p 设置了 text-align。</p><h3 id="4-3-文本装饰"><a href="#4-3-文本装饰" class="headerlink" title="4.3 文本装饰"></a>4.3 文本装饰</h3><p><code>text-decoration</code> 属性规定添加到文本的修饰，可以给文本添加 <code>下划线</code>、<code>删除线</code>、<code>上划线</code> 等。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">text-decoration: underline;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td><code>none</code></td><td>默认，没有装饰线（<strong>最常用</strong>）</td></tr><tr><td><code>underline</code></td><td>下划线，链接 a 自带下划线（常用）</td></tr><tr><td><code>overline</code></td><td>上划线（几乎不用）</td></tr><tr><td><code>line-through</code></td><td>删除线（不常用）</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS文本外观之文本装饰<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 默认为 none 没有装饰 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 上划线 几乎不用 */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* text-decoration: overline; */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 删除线 不常用 */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* text-decoration: line-through; */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 下划线 常用，链接 a 自带下划线 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: underline;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 取消 a 默认的下划线 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#333333</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>粉红色的回忆<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://jerry-z-j-r.github.io&quot;</span>&gt;</span>JERRY<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-4-文本缩进"><a href="#4-4-文本缩进" class="headerlink" title="4.4 文本缩进"></a>4.4 文本缩进</h3><p><code>text-indent</code> 属性用来指定文本的第一行的缩进，通常是将段落的首行缩进。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">div &#123;</span><br><span class="line">text-indent: 10px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过设置该属性，所有元素的第一行都可以缩进一个给定的长度，甚至该长度可以是负值。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">text-indent: 2em;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>em 是一个相对单位，就是当前元素 (font-size) 1 个文字的大小，如果当前元素没有设置大小，则会按照父元素的 1 个文字大小。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS文本外观之文本缩进<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 文本的首行缩进多少距离，不仅可以为正值，还可以为负值 */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* text-indent: 20px; */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* em 为相对于当前元素的大小单位 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>打开北京、上海与广州的地铁地图，你会看见三张纵横交错的线路网络，</span><br><span class="line">        这代表了中国最成熟的三套城市轨道交通系统<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>可即使是这样，在北上广生活的人依然少不了对地铁的抱怨，其中谈及最多的问题便是拥挤，</span><br><span class="line">        对很多人而言，每次挤地铁的过程，都像是一场硬仗。更何况，还都是败仗居多。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>那么，当越来越多的二线甚至三线城市迎接来了自己的地铁，中国哪里的地铁是最拥挤的呢？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-5-行间距（行高）"><a href="#4-5-行间距（行高）" class="headerlink" title="4.5 行间距（行高）"></a>4.5 行间距（行高）</h3><p><code>line-height</code> 属性用于设置行间的距离（行高），可以控制文字行与行之间的距离。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p &#123;</span><br><span class="line">line-height: 26px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>行间距 = 上间距 + 文本高度 + 下间距</code></li><li><code>上下间距 = （行间距 - 文本高度）/ 2</code></li><li><code>文本高度 = font-size</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS文本外观之行间距<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 行间距 = 上间距 + 文本高度 + 下间距 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 行间距 = 行高 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 文本高度 = 字体像素大小 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 上下间距 = （行间距 - 文本高度）/ 2 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>打开北京、上海与广州的地铁地图，你会看见三张纵横交错的线路网络，</span><br><span class="line">        这代表了中国最成熟的三套城市轨道交通系统<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>可即使是这样，在北上广生活的人依然少不了对地铁的抱怨，其中谈及最多的问题便是拥挤，</span><br><span class="line">        对很多人而言，每次挤地铁的过程，都像是一场硬仗。更何况，还都是败仗居多。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>那么，当越来越多的二线甚至三线城市迎接来了自己的地铁，中国哪里的地铁是最拥挤的呢？<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>补充：行间距测量技巧：上一行文字的底部与本行文字的底部之间的距离就是行间距。</p><h3 id="4-6-文本属性总结"><a href="#4-6-文本属性总结" class="headerlink" title="4.6 文本属性总结"></a>4.6 文本属性总结</h3><table><thead><tr><th>属性</th><th>表示</th><th>注意点</th></tr></thead><tbody><tr><td><code>color</code></td><td>文本颜色</td><td>我们通常用 十六进制 而且通常是简写形式 #fff（6 个一样可以简写）</td></tr><tr><td><code>text-align</code></td><td>文本对齐</td><td>可以设定文字水平的对齐方式</td></tr><tr><td><code>text-indent</code></td><td>文本缩进</td><td>通常我们用于段落首行缩进2个字的距离 text-indent: 2em;</td></tr><tr><td><code>text-decoration</code></td><td>文本修饰</td><td>牢记 添加下划线 underline 取消下划线 none</td></tr><tr><td><code>line-height</code></td><td>行高</td><td>控制行与行之间的距离</td></tr></tbody></table><h2 id="五、CSS-的背景"><a href="#五、CSS-的背景" class="headerlink" title="五、CSS 的背景"></a>五、CSS 的背景</h2><p>通过 CSS 背景属性，可以给页面元素添加背景样式。 背景属性可以设置 <code>背景颜色</code>、<code>背景图片</code>、<code>背景平铺</code>、<code>背景图片位置</code>、<code>背景图像固定</code> 等。</p><h3 id="5-1-背景颜色"><a href="#5-1-背景颜色" class="headerlink" title="5.1 背景颜色"></a>5.1 背景颜色</h3><p><code>background-color</code> 属性定义了元素的背景颜色。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-color: 颜色值;</span><br></pre></td></tr></table></figure><p>一般情况下元素背景颜色默认值是 <code>transparent</code>（透明），我们也可以手动指定背景颜色为透明色。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-color: transparent;</span><br></pre></td></tr></table></figure><p>目前 CSS 还支持丰富的渐变色，但是某些浏览器不支持，这里了解即可，具体内容请查阅资料。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;zh-CN&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;渐变&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        #grad1 &#123;</span><br><span class="line">            height: 200px;</span><br><span class="line">            /* 浏览器不支持时显示 */</span><br><span class="line">            background-color: red;</span><br><span class="line">            /* 线性渐变 - 从上到下（默认情况下）*/</span><br><span class="line">            background-image: linear-gradient(#e66465, #9198e5);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;线性渐变 - 从上到下&lt;/h3&gt;</span><br><span class="line">    &lt;p&gt;从顶部开始的线性渐变。起点是红色，慢慢过渡到蓝色：&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div id=&quot;grad1&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; Internet Explorer 9 及之前的版本不支持渐变。&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-2-背景图片"><a href="#5-2-背景图片" class="headerlink" title="5.2 背景图片"></a>5.2 背景图片</h3><p><code>background-image</code> 属性描述了元素的背景图像，实际开发常用于 <strong>logo</strong> 或者一些<strong>装饰性的小图片</strong>或者是<strong>超大的背景图片</strong>, 优点是非常便于控制位置（精灵图也是一种运用场景）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-image : none | url(url)</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数值</th><th>作用</th></tr></thead><tbody><tr><td><code>none</code></td><td>无背景图（默认的）</td></tr><tr><td><code>url</code></td><td>使用绝对或相对地址指定背景图像</td></tr></tbody></table><p>注意：背景图片后面的地址，千万不要忘记加 URL， 同时里面的路径不要加引号。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-color: pink;</span><br><span class="line">background-image: url(../images/logo.png);</span><br><span class="line">/* 1、背景图片不平铺 */</span><br><span class="line">/* background-repeat: no-repeat; */</span><br><span class="line">/* 2、默认情况下，背景图片是平铺的 */</span><br><span class="line">/* background-repeat: repeat; */ /* 页面元素既可以添加背景颜色也可以添加背景图片，只不过背景图片区域会覆盖背景颜色 */</span><br></pre></td></tr></table></figure><h3 id="5-3-背景平铺"><a href="#5-3-背景平铺" class="headerlink" title="5.3 背景平铺"></a>5.3 背景平铺</h3><p>如果需要在 HTML 页面上对背景图像进行平铺，可以使用 <code>background-repeat</code> 属性。</p><p>注：平铺可以简单的理解为“重复”。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-repeat: repeat | no-repeat | repeat-x | repeat-y</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数值</th><th>作用</th></tr></thead><tbody><tr><td><code>repeat</code></td><td>背景图像在纵向和横向上平铺（默认的）</td></tr><tr><td><code>no-repeat</code></td><td>背景图像不平铺</td></tr><tr><td><code>repeat-x</code></td><td>背景图像在横向上平铺</td></tr><tr><td><code>repeat-y</code></td><td>背景图像在纵向上平铺</td></tr></tbody></table><h3 id="5-4-背景图片位置"><a href="#5-4-背景图片位置" class="headerlink" title="5.4 背景图片位置"></a>5.4 背景图片位置</h3><p>利用 <code>background-position</code> 属性可以改变图片在背景中的位置。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-position: x y;</span><br></pre></td></tr></table></figure><p>参数代表的意思是：x 坐标 和 y 坐标，可以使用 <code>方位名词</code> 或者 <code>精确单位</code>。</p><table><thead><tr><th>参数值</th><th>说明</th></tr></thead><tbody><tr><td><code>length</code></td><td>百分数 | 由浮点数字和单位标识符组成的长度值</td></tr><tr><td><code>position</code></td><td>top | center | bottom | left | rigth 方位名词</td></tr></tbody></table><ul><li>参数是方位名词<ul><li>如果指定的两个值都是方位名词，则两个值前后顺序无关，比如 left top 和 top left 效果一致</li><li>如果只指定了一个方位名词，另一个值省略，则<strong>第二个值默认居中对齐</strong></li></ul></li><li>参数是精确单位<ul><li>如果参数值是精确坐标，那么第一个肯定是 x 坐标，第二个一定是 y 坐标</li><li>如果只指定一个数值，那该数值一定是 x 坐标，<strong>另一个默认垂直居中</strong></li></ul></li><li>参数是混合单位<ul><li>如果指定的两个值是精确单位和方位名词混合使用，则第一个值是 x 坐标，第二个值是 y 坐标</li></ul></li></ul><h3 id="5-5-背景图像固定（背景附着）"><a href="#5-5-背景图像固定（背景附着）" class="headerlink" title="5.5 背景图像固定（背景附着）"></a>5.5 背景图像固定（背景附着）</h3><p><code>background-attachment</code> 属性设置背景图像是否固定或者随着页面的其余部分滚动。</p><p><code>background-attachment</code> 后期可以制作 <code>视差滚动</code> 的效果。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background-attachment : scroll | fixed</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td><code>scroll</code></td><td>背景图像是随对象内容滚动的（可见区域取决于背景图像的高度）</td></tr><tr><td><code>fixed</code></td><td>背景图像固定</td></tr></tbody></table><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;超大背景图片&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            background-image: url(images/bg.jpg);</span><br><span class="line">            background-repeat: no-repeat;</span><br><span class="line">            background-position: center top;</span><br><span class="line">            /* 把背景图片固定住 */</span><br><span class="line">            background-attachment: fixed;</span><br><span class="line">            color: #fff;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;天王盖地虎, pink老师一米五&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-6-背景复合写法"><a href="#5-6-背景复合写法" class="headerlink" title="5.6 背景复合写法"></a>5.6 背景复合写法</h3><p>为了简化背景属性的代码，我们可以将这些属性合并简写在同一个属性 <code>background</code> 中，从而节约代码量。 当使用简写属性时，没有特定的书写顺序，一般习惯约定顺序为： <code>background</code>: <code>背景颜色</code> <code>背景图片地址</code> <code>背景平铺</code> <code>背景图像滚动</code> <code>背景图片位置</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background: transparent url(image.jpg) no-repeat fixed top;</span><br></pre></td></tr></table></figure><p>这是实际开发中，我们更提倡的写法。</p><h3 id="5-7-背景色半透明"><a href="#5-7-背景色半透明" class="headerlink" title="5.7 背景色半透明"></a>5.7 背景色半透明</h3><p>CSS3 为我们提供了背景颜色半透明的效果。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">background: rgba(0, 0, 0, 0.3);</span><br></pre></td></tr></table></figure><ul><li>最后一个参数是 <code>alpha</code> 透明度，取值范围在 <code>0~1</code> 之间</li><li>习惯把 0.3 的 0 省略掉，写为 <code>background: rgba(0, 0, 0, .3);</code></li><li>注意：背景半透明是指盒子背景半透明，盒子里面的内容不受影响</li><li>CSS3 新增属性，是 IE9+ 版本浏览器才支持的</li><li>但是现在实际开发，我们不太关注兼容性写法了，可以放心使用</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;背景色透明写法&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        div &#123;</span><br><span class="line">            width: 300px;</span><br><span class="line">            height: 300px;</span><br><span class="line">            /* background-color: black; */</span><br><span class="line">            background: rgba(0, 0, 0, .3);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 只是让背景颜色半透明，盒子里的内容并不受影响 --&gt;</span><br><span class="line">    &lt;div&gt;zhoujirui&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-8-背景总结"><a href="#5-8-背景总结" class="headerlink" title="5.8 背景总结"></a>5.8 背景总结</h3><table><thead><tr><th>属性</th><th>作用</th><th>值</th></tr></thead><tbody><tr><td><code>backgroud-color</code></td><td>背景颜色</td><td>预定义的颜色值 &#x2F; 十六进制 &#x2F; RGB代码</td></tr><tr><td><code>backgroud-image</code></td><td>背景图片</td><td>url（图片路径）</td></tr><tr><td><code>backgroud-repeat</code></td><td>是否平铺</td><td>repeat &#x2F; no-repeat &#x2F; repeat-x &#x2F; repeat-y</td></tr><tr><td><code>backgroud-position</code></td><td>背景位置</td><td>length &#x2F; position 分别是 x 和 y 坐标</td></tr><tr><td><code>backgroud-attachment</code></td><td>背景附着</td><td>scroll（背景滚动）&#x2F; fixed（背景固定）</td></tr><tr><td><code>背景简写</code></td><td>书写更简单</td><td>背景颜色 背景图片地址 背景平铺 背景滚动 背景位置</td></tr><tr><td><code>背景色半透明</code></td><td>背景颜色半透明</td><td>background: rgba(0, 0, 0, 0.3); 后面必须是4个值</td></tr></tbody></table><p>背景图片：实际开发常见于 logo 或者一些装饰性的小图片或者是超大的背景图片，优点是非常便于控制位置（精灵图也是一种运用场景）。</p><h3 id="5-9-王者荣耀案例"><a href="#5-9-王者荣耀案例" class="headerlink" title="5.9 王者荣耀案例"></a>5.9 王者荣耀案例</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;背景位置案例一之王者荣耀点击选项&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        /* 对于 logo 图片来说，最常用的方法便是利用背景来设置，而并非直接插入图片 */</span><br><span class="line">        h3 &#123;</span><br><span class="line">            width: 118px;</span><br><span class="line">            height: 40px;</span><br><span class="line">            font-size: 14px;</span><br><span class="line">            font-weight: 400;</span><br><span class="line">            line-height: 40px;</span><br><span class="line">            background-image: url(../image/icon.png);</span><br><span class="line">            background-repeat: no-repeat;</span><br><span class="line">            background-position: left center;</span><br><span class="line">            text-indent: 2em;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        h3 a &#123;</span><br><span class="line">            color: #000;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;&lt;a href=&quot;#&quot;&gt;成长守护平台&lt;/a&gt;&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">    &lt;title&gt;背景位置案例二之王者荣耀背景图片&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            background-image: url(../image/b.jpg);</span><br><span class="line">            background-repeat: no-repeat;</span><br><span class="line">            background-position: center top;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 对于网页中的大面积图片而言，一般不采用直接插入图片的方式来做，</span><br><span class="line">    因为图片的分辨率及尺寸是固定的但是显示器或网页窗口的大小分辨率则是会改变的，</span><br><span class="line">    直接插入图片的话不方便控制图片大小及位置 --&gt;</span><br><span class="line">    &lt;!-- &lt;img src=&quot;../image/b.jpg&quot; alt=&quot;&quot;&gt; --&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="【Emmet语法-就是效率工具】"><a href="#【Emmet语法-就是效率工具】" class="headerlink" title="【Emmet语法,就是效率工具】"></a>【Emmet语法,就是效率工具】</h2><blockquote><p>本文档是个人对 Pink 老师课程的总结归纳及补充，转载请注明出处！ </p></blockquote><p><code>Emmet</code> 语法的前身是 <code>Zen coding</code>，它使用缩写，来提高 <code>html/css</code> 的编写速度,，<code>VSCode</code> 内部已经集成该语法。</p><ul><li>快速生成 HTML 结构语法</li><li>快速生成 CSS 样式语法</li></ul><h3 id="快速生成HTML结构语法"><a href="#快速生成HTML结构语法" class="headerlink" title="快速生成HTML结构语法"></a>快速生成HTML结构语法</h3><ul><li>生成标签直接输入标签名按 <kbd>tab</kbd> 键即可，比如 <code>div</code> 然后 <kbd>tab</kbd> 键， 就可以生成 <code>&lt;div&gt;&lt;/div&gt;</code></li><li>如果想要生成多个相同标签加上 <code>*</code> 就可以了，比如 <code>div*3</code> 就可以快速生成 3 个 <code>div</code></li><li>如果有父子级关系的标签，可以用 <code>&gt;</code> 比如 <code>ul&gt;li</code> 就可以了</li><li>如果有兄弟关系的标签，用 <code>+</code> 就可以了 比如 <code>div+p</code></li><li>如果生成带有 <code>类名</code> 或者 <code>id</code> 名字的标签， 直接写 <code>标签.demo</code> 或者 <code>标签#demo</code> 再按下 tab 键就可以了</li><li>如果生成的事物有顺序，可以用自增符号 <code>$</code></li><li>如果想要在生成的标签内部写内容可以用 <code>&#123;&#125;</code> 表示</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Emmet语法之快速生成HTML结构语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- div --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- table --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- div*6 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- p*4 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ul&gt;li --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- div&gt;span --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- div+p --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- .nav --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- #banner --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;banner&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- p.one --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- span.gray --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;gray&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ul&gt;li#two --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">&quot;two&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- .demo*5 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- .demo$*5 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- div&#123;pink老师不是gay&#125; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>pink老师不是gay<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- div&#123;他不喜欢男人&#125;*6 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>他不喜欢男人<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>他不喜欢男人<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>他不喜欢男人<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>他不喜欢男人<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>他不喜欢男人<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>他不喜欢男人<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- div&#123;$&#125;*6 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="快速生成CSS样式语法"><a href="#快速生成CSS样式语法" class="headerlink" title="快速生成CSS样式语法"></a>快速生成CSS样式语法</h3><p>CSS 基本采取简写形式即可。</p><ul><li>比如 <code>w200</code> 按 <kbd>tab</kbd> 可以 生成 <code>width: 200px;</code></li><li>比如 <code>lh26px</code> 按 <kbd>tab</kbd> 可以生成 <code>line-height: 26px;</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Emmet语法之快速生成CSS样式语法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.one</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* tac */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* ti2e */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-indent</span>: <span class="number">2em</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* w */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* width: ; */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* h */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* height: ; */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* w24 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* h24 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* tdn */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="快速格式化代码"><a href="#快速格式化代码" class="headerlink" title="快速格式化代码"></a>快速格式化代码</h3><p><code>VSCode</code> 快速格式化代码：<kbd>Shift</kbd> + <kbd>Alt</kbd> + <kbd>F</kbd>。</p><p><code>WebStorm</code> 快速格式化代码：<kbd>Ctrl</kbd> + <kbd>Alt</kbd> + <kbd>L</kbd>。</p><h2 id="【CSS三大特性】"><a href="#【CSS三大特性】" class="headerlink" title="【CSS三大特性】"></a>【CSS三大特性】</h2><blockquote><p>本文档是个人对 Pink 老师课程的总结归纳及补充，转载请注明出处！ </p></blockquote><p>CSS 有三个非常重要的特性：<code>层叠性</code>、<code>继承性</code>、<code>优先级</code>。</p><h3 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h3><p>给同一个选择器设置相同的样式，此时一个样式就会<strong>覆盖</strong>（层叠）另一个冲突的样式，<strong>层叠性主要解决样式冲突的问题</strong>。</p><p>层叠性原则：</p><ul><li>样式冲突，遵循的原则是 <code>就近原则</code>，哪个样式距离结构近，就执行哪个样式</li><li>样式不冲突，不会层叠</li></ul><p>注：就近的标准是：<strong>后 &gt; 前</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS三大特性之层叠性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- pink 色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>小小<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h3><p>现实中的继承：我们继承了父亲的姓。</p><p>CSS 中的继承：<strong>子标签会继承父标签的某些样式</strong>，如：文本颜色和字号，简单的理解就是：子承父业。</p><ul><li>恰当地使用继承可以简化代码，降低 CSS 样式的复杂性</li><li>子元素可以继承父元素的样式（ <code>text-</code>、<code>font-</code>、<code>line-</code>、<code>color</code> ） 文本、字体、段落、颜色</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS三大特性之继承性<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>小小<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>行高的继承</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> <span class="string">&#x27;Microsoft YaHei&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>行高可以跟单位也可以不跟单位</li><li>如果子元素没有设置行高，则会继承父元素的行高为 1.5</li><li>此时子元素的行高是：<strong>当前元素</strong>的<strong>文字大小</strong> * 1.5</li><li>body 行高 1.5 这样写法最大的优势就是<strong>里面的子元素可以根据自己文字的大小自动调整行高</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS三大特性之继承性——行高的继承<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* font: 12px/18px; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span>;<span class="comment">/* 12 + 12 * 0.5 = 18 */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 子元素继承了父元素 body 的行高 1.5 */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 这个 1.5 就是当前元素文字大小 font-size 的 1.5 倍 */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 所以当前 div 的行高就是：14 + 14 * 0.5 = 21px */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 1.5 * 16 = 24 当前行高 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* li 没有手动指定文字大小，则会继承父亲（此处的父亲可以层层向上推）的文字大小  */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 即：body 12px 所有 li 的文字大小为 12px */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 当前 li 的行高就是 12 * 1.5 = 18  */</span></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>小小<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>JERRY<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>没有指定文字大小<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ul><li>选择器相同，则执行层叠性</li><li>选择器不同，则根据选择器权重执行</li></ul><p><strong>选择器权重如下表所示：</strong></p><table><thead><tr><th>选择器</th><th>选择器权重</th></tr></thead><tbody><tr><td>继承 或  <code>*</code></td><td><code>0,0,0,0</code></td></tr><tr><td>元素选择器</td><td><code>0,0,0,1</code></td></tr><tr><td>类选择器、伪类选择器</td><td><code>0,0,1,0</code></td></tr><tr><td>ID 选择器</td><td><code>0,1,0,0</code></td></tr><tr><td>行内样式 style&#x3D;””</td><td><code>1,0,0,0</code></td></tr><tr><td>!important 重要的</td><td><code>∞</code> 无穷大</td></tr></tbody></table><p><strong>规则：</strong>比较位级别，位级别相同时比较位大小。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS三大特性之优先级<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.test</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#demo</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span>你笑起来真好看<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- red --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span>&gt;</span>你笑起来真好看<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- green --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span> <span class="attr">id</span>=<span class="string">&quot;demo&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color: blue;&quot;</span>&gt;</span>你笑起来真好看<span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!-- blue --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">    假如在 css 选择器 某一个属性值后面跟上 !important，那么这个属性一定会执行！</span></span><br><span class="line"><span class="comment">    例如：div &#123;</span></span><br><span class="line"><span class="comment">             color: pink !important;  </span></span><br><span class="line"><span class="comment">          &#125;</span></span><br><span class="line"><span class="comment">          ...</span></span><br><span class="line"><span class="comment">    &lt;div class=&quot;test&quot; id=&quot;demo&quot; style=&quot;color: blue;&quot;&gt;你笑起来真好看&lt;/div&gt; -- pink --</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>优先级注意问题：</strong></p><ul><li>权重是由 4 组数字组成的，但是不会有进位！</li><li>可以理解为：<code>类选择器</code> 永远大于 <code>元素选择器</code>，<code>ID 选择器</code> 永远大于 <code>类选择器</code>，以此类推！</li><li>等级判断 <code>从左到右</code>，如果某一位数值相同，则判断下一位数值</li><li>可以简单的记忆：<code>通配符</code> 和 <code>继承</code> 权重为 0，<code>标签选择器</code> 为 1，<code>类</code>（<code>伪类</code>）选择器为 10，<code>ID</code> 选择器为 100，<code>行内样式表</code> 为 1000，<code>!important</code> 无穷大</li><li>继承的权重是 0，不管父元素权重多高，子元素得到的权重都是 0 ！</li><li><code>a</code> 链接浏览器默认指定了一个样式，所以它不参与继承，所以设置样式需要选中单独设置</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS三大特性之优先级——注意问题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 父亲的权重是 100 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#father</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* p 继承的权重为 0 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 所以以后我们看标签到底执行哪一个样式，就先看这个标签有没有直接被选出来</span></span></span><br><span class="line"><span class="comment"><span class="language-css">           如果直接被选择出来了，那么就与父亲无关了！*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 继承的权重是 0，不管父元素权重多高，子元素得到的权重都是 0 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>你还是很好看<span class="tag">&lt;/<span class="name">p</span>&gt;</span> <span class="comment">&lt;!-- pink --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- a 链接浏览器默认指定了一个样式，所以它不参与继承，所以给 a 改样式必须直接把 a 选出来 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我是单独的样式<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>权重的叠加：</strong></p><p>如果是复合选择器，则会有权重叠加，需要计算权重。</p><p>注意：再次强调！权重虽然会叠加，但一定不会进位！（1万个元素选择器也比不过一个类选择器）。</p><p>从左到右逐位比较，只有左一位同样大，才比较右边一位！</p><p><strong>例如：</strong></p><ul><li><code>div ul li</code> ——&gt; <code>0,0,0,3</code></li><li><code>.nav ul li</code> ——&gt; <code>0,0,1,2</code></li><li><code>a:hover</code> ——&gt; <code>0,0,1,1</code></li><li><code>.nav a</code> ——&gt; <code>0,0,1,1</code></li></ul><p>如果要对某一元素设置样式，那么就必须给它足够高的权重（注意：是给他，而不是他的父亲！）。</p><blockquote><p>提高选择器权重的技巧之一：</p><ul><li>多写几层类选择器</li></ul></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>CSS三大特性之优先级——权重叠加<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 复合选择器会有权重叠加的问题 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 权重虽然会叠加，但是永远不会有进位 例如：十个 0,0,0,1 相加为 0,0,0,10 而不是 0,0,1,0 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* ul li 权重 0,0,0,1 + 0,0,0,1 = 0,0,0,2 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: green;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* li 的权重是 0,0,0,1 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* .nav li 权重 0,0,1,0 + 0,0,0,1 = 0,0,1,1 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.nav</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>大猪蹄子<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="comment">&lt;!-- pink --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>大肘子<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="comment">&lt;!-- pink --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>猪尾巴<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="comment">&lt;!-- pink --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="【CSS盒子模型】"><a href="#【CSS盒子模型】" class="headerlink" title="【CSS盒子模型】"></a>【CSS盒子模型】</h2><blockquote><p>本文档是个人对 Pink 老师课程的总结归纳及补充，转载请注明出处！ </p></blockquote><p>页面布局要学习<strong>三大核心</strong>：<strong>盒子模型</strong>、<strong>浮动</strong>和<strong>定位</strong>。</p><p>学习好盒子模型能非常好的帮助我们布局页面。</p><h3 id="一、看透网页布局的本质"><a href="#一、看透网页布局的本质" class="headerlink" title="一、看透网页布局的本质"></a>一、看透网页布局的本质</h3><p>网页布局过程：</p><ul><li><p>先准备好相关的网页元素，网页元素基本都是盒子</p></li><li><p>利用 CSS 设置好盒子样式，然后摆放到相应位置</p></li><li><p>往盒子里面装内容</p></li></ul><p>网页<strong>布局的核心</strong>本质： 就是<strong>利用 CSS 摆盒子！</strong></p><h3 id="二、盒子模型（Box-Model）组成"><a href="#二、盒子模型（Box-Model）组成" class="headerlink" title="二、盒子模型（Box Model）组成"></a>二、盒子模型（Box Model）组成</h3><p>所谓盒子模型：就是把 HTML 页面中的布局元素看作是一个矩形的盒子，也就是一个盛<strong>装内容的容器</strong>。<br>CSS 盒子模型本质上是一个盒子，封装周围的 HTML 元素，它包括：<code>边框</code>、<code>外边距</code>、<code>内边距</code>、和 <code>内容</code>。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407201404225.png" alt="image-20220407201404225"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407201425753.png" alt="image-20220407201425753"></p><h3 id="三、边框（border）"><a href="#三、边框（border）" class="headerlink" title="三、边框（border）"></a>三、边框（border）</h3><p><code>border</code> 可以设置元素的边框。</p><p>边框有三部分组成：<code>边框宽度（粗细）</code>、<code>边框样式</code>、<code>边框颜色</code>。</p><p><strong>语法：</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span>: border-width || border-style || border-color</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td><code>border-width</code></td><td>定义边框粗细，单位是 <code>px</code></td></tr><tr><td><code>border-style</code></td><td>边框的样式</td></tr><tr><td><code>border-color</code></td><td>边框颜色</td></tr></tbody></table><p>边框样式 border-style 可以设置如下值：</p><ul><li><code>none</code>：没有边框，即忽略所有边框的宽度（默认值）</li><li><code>solid</code>：边框为单实线（最为常用的）</li><li><code>dashed</code>：边框为虚线</li><li><code>dotted</code>：边框为点线</li></ul><p><strong>边框简写：</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border</span>: <span class="number">1px</span> solid red; <span class="comment">/* 没有顺序 */</span></span><br></pre></td></tr></table></figure><p><strong>边框分开写法：</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-top</span>: <span class="number">1px</span> solid red; <span class="comment">/* 只设定上边框，其余同理 */</span></span><br></pre></td></tr></table></figure><p><strong>案例：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>盒子模型之边框的复合写法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-css">            -- border-width 边框的粗细，一般情况下使用 px --</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            border-width: 5px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            -- border-width 边框的样式 solid 实线边框 dashed 虚线边框 dotted 点线边框 --</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            border-style: solid;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            background-color: pink;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 边框的复合写法 简写： */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">10px</span> dotted skyblue;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 利用 CSS 层叠性将上边框单独覆盖 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-top</span>: <span class="number">10px</span> dotted pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: blue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407144117226.png" alt="image-20220407144117226"></p><h4 id="3-1-表格的细线边框"><a href="#3-1-表格的细线边框" class="headerlink" title="3.1 表格的细线边框"></a>3.1 表格的细线边框</h4><p>表格中两个单元格相邻的边框会重叠在一起，呈现出加粗的效果。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>表格边框——今日小说排行榜<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">249px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">td</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">th</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 合并相邻的边框 */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* border-collapse: collapse; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>排名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>关键词<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>趋势<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>进入搜索<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>最近七日<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>相关链接<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>鬼吹灯<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;down.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>456<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>鬼吹灯<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;down.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>456<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>西游记<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;up.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>456<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>鬼吹灯<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;down.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>456<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>鬼吹灯<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;down.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>456<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>鬼吹灯<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;down.jpg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>456<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>123<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>贴吧<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>图片<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>百科<span class="tag">&lt;/<span class="name">a</span>&gt;</span> <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\冯小强\AppData\Roaming\Typora\typora-user-images\image-20220407144251587.png" alt="image-20220407144251587"></p><p><code>border-collapse</code> 属性控制浏览器绘制表格边框的方式。</p><p>它控制相邻单元格的边框。</p><p><strong>语法：</strong></p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-collapse</span>: collapse;</span><br></pre></td></tr></table></figure><ul><li><code>collapse</code> 单词是合并的意思</li><li><code>border-collapse: collapse;</code> 表示相邻边框合并在一起</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table</span>,</span><br><span class="line"><span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-tag">th</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="comment">/* 合并相邻的边框 */</span></span><br><span class="line">    <span class="attribute">border-collapse</span>: collapse;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>![](<a href="https://raw.githubusercontent.com/JERRY-Z-J-R/I-love-you-3-thousand/master/%E6%88%91%E7%88%B1%E4%BD%A0%EF%BC%8C%E4%B8%8D%E6%AD%A2%E4%B8%89%E5%8D%83%E9%81%8D/HTML">https://raw.githubusercontent.com/JERRY-Z-J-R/I-love-you-3-thousand/master/我爱你，不止三千遍/HTML</a> CSS&#x2F;6、【CSS盒子模型】&#x2F;mark-img&#x2F;20210406125405658.gif)</p><h4 id="3-2-边框会影响盒子实际大小"><a href="#3-2-边框会影响盒子实际大小" class="headerlink" title="3.2 边框会影响盒子实际大小"></a>3.2 边框会影响盒子实际大小</h4><p>边框会额外增加盒子的实际区域大小。因此我们有两种方案解决：</p><ul><li>测量盒子大小的时候，不量边框</li><li>如果测量的时候包含了边框，则需要 width、height 减去边框宽度（注意减单边还是双边）</li></ul><blockquote><p>注意：盒子实际区域大小 &#x3D; 内容区大小 + 内边距大小 + 边框大小 + 外边距大小</p></blockquote><p>案例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>边框会影响盒子的实际大小<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 我们需要一个 200*200 的盒子, 但是这个盒子有 10 像素的红色边框 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">180px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">180px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">10px</span> solid black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407144541175.png" alt="image-20220407144541175"></p><h3 id="四、内边距（padding）"><a href="#四、内边距（padding）" class="headerlink" title="四、内边距（padding）"></a>四、内边距（padding）</h3><p>padding 属性用于设置<strong>内边距</strong>，即<strong>边框与内容之间的距离</strong>。</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td><code>padding-left</code></td><td>左内边距</td></tr><tr><td><code>padding-rigth</code></td><td>右内边距</td></tr><tr><td><code>padding-top</code></td><td>上内边距</td></tr><tr><td><code>padding-bottom</code></td><td>下内边距</td></tr></tbody></table><p>padding 属性（简写属性）可以有一到四个值。</p><table><thead><tr><th>值的个数</th><th>表达意思</th></tr></thead><tbody><tr><td><code>padding: 5px;</code></td><td>1 个值，代表上下左右都有 5 像素内边距</td></tr><tr><td><code>padding: 5px 10px;</code></td><td>2 个值，代表上下内边距是 5 像素，左右内边距是 10 像素</td></tr><tr><td><code>padding: 5px 10px 20px;</code></td><td>3 个值，代码上内边距 5 像素，左右内边距 10 像素，下内边距 20 像素</td></tr><tr><td><code>padding: 5px 10px 20px 30px;</code></td><td>4 个值，上是 5 像素，右 10 像素，下 20 像素，左是 30 像素（顺时针）</td></tr></tbody></table><p>以上 4 种情况，我们实际开发都会遇到。</p><p>当我们给盒子指定 <code>padding</code> 值之后，发生了 2 件事情：</p><ul><li>内容和边框有了距离，添加了内边距</li><li><code>padding</code> 影响了盒子实际区域大小</li></ul><p>也就是说，如果盒子已经有了宽度和高度，此时再指定内边距，会撑大盒子区域！</p><p>解决方案：</p><ul><li>如果保证盒子跟效果图大小保持一致，则让 width、height 减去多出来的内边距大小即可</li><li>如果盒子本身没有指定 width、height 属性，则此时 padding 不会撑开盒子区域大小</li></ul><p>【padding 撑大盒子】</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>padding 撑大盒子<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* padding: 30px; */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407150227459.png" alt="image-20220407150227459"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>padding 撑大盒子<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407150241626.png" alt="image-20220407150241626"></p><p>案例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>盒子模型之内边距<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            padding-top: 5px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            padding-rigth: 10px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            padding-bottom: 20px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            padding-rigth: 30px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">             */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 内边距复合写法（简写） 上、右、下、左 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">5px</span> <span class="number">10px</span> <span class="number">20px</span> <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 由于在对盒子指定高宽后，padding 会撑大盒子 */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 所以，此时盒子大小为：240*225 */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 注意：这里的“盒子大小”指的是盒子所占据的大小，盒子真实的 width 和 height 依旧是 200px */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        盒子内容是 content，盒子内容是 content，盒子内容是 content</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>padding 的使用技巧：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407150358570.png" alt="image-20220407150358570"></p><p>![](<a href="https://raw.githubusercontent.com/JERRY-Z-J-R/I-love-you-3-thousand/master/%E6%88%91%E7%88%B1%E4%BD%A0%EF%BC%8C%E4%B8%8D%E6%AD%A2%E4%B8%89%E5%8D%83%E9%81%8D/HTML">https://raw.githubusercontent.com/JERRY-Z-J-R/I-love-you-3-thousand/master/我爱你，不止三千遍/HTML</a> CSS&#x2F;6、【CSS盒子模型】&#x2F;mark-img&#x2F;20210406131403183.gif)</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>新浪导航案例-padding影响盒子的好处<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.nav</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">41px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-top</span>: <span class="number">3px</span> solid <span class="number">#ff8500</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#edeef0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fcfcfc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">41px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.nav</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* a 属于行内元素，要指定高度，必须要转换为行内块元素 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">41px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 没有指定宽度，此时设置 padding 会使盒子内容之间的距离相同 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#4c4c4c</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.nav</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#ff8500</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>设为首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>手机新浪网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>移动客户端<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>微博<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>网站导航<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>![](<a href="https://raw.githubusercontent.com/JERRY-Z-J-R/I-love-you-3-thousand/master/%E6%88%91%E7%88%B1%E4%BD%A0%EF%BC%8C%E4%B8%8D%E6%AD%A2%E4%B8%89%E5%8D%83%E9%81%8D/HTML">https://raw.githubusercontent.com/JERRY-Z-J-R/I-love-you-3-thousand/master/我爱你，不止三千遍/HTML</a> CSS&#x2F;6、【CSS盒子模型】&#x2F;mark-img&#x2F;20210406132137553.gif)</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>简洁版小米侧边栏案例-padding影响盒子大小计算<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 1、把 a 转换为块级元素 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 230 - 30（padding-left）= 200 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#55585a</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-left</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 一个小技巧：单行文字垂直居中的代码，让文字的行高等于盒子的高度 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 2、鼠标经过链接变换背景颜色 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#ff6700</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>手机 电话卡<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>电视 盒子<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>笔记本 平板<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>出行 穿戴<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>智能 路由器<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>健康 儿童<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>耳机 音响<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="五、外边距（margin）"><a href="#五、外边距（margin）" class="headerlink" title="五、外边距（margin）"></a>五、外边距（margin）</h3><p><code>margin</code> 属性用于设置<strong>外边距</strong>，即控制<strong>盒子和盒子之间的距离</strong>。</p><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td><code>margin-left</code></td><td>左外边距</td></tr><tr><td><code>margin-right</code></td><td>右外边距</td></tr><tr><td><code>margin-top</code></td><td>上外边距</td></tr><tr><td><code>margin-bottom</code></td><td>下外边距</td></tr></tbody></table><p><code>margin</code> 简写方式代表的意义跟 <code>padding</code> 完全一致。</p><p>外边距典型应用：</p><p>外边距可以让<strong>块级盒子水平居中</strong>，但是必须满足两个条件：</p><ul><li>盒子必须指定了宽度 <code>width</code></li><li>盒子左右的外边距都设置为 <code>auto</code></li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.header</span> &#123; <span class="attribute">width</span>: <span class="number">960px</span>; <span class="attribute">margin</span>: <span class="number">0</span> auto;&#125;</span><br></pre></td></tr></table></figure><p>常见的写法，以下三种都可以：</p><ul><li><code>margin-left: auto; margin-right: auto;</code></li><li><code>margin: auto;</code></li><li><code>margin: 0 auto;</code></li></ul><p>注意：以上方法是让块级元素水平居中，行内元素或者行内块元素水平居中给其父元素添加 <code>text-align: center</code> 即可。</p><p>案例：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407145708847.png" alt="image-20220407145708847"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>盒子模型之外边距margin<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-css">        .one &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            margin-bottom: 20px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        &#125; </span></span></span><br><span class="line"><span class="comment"><span class="language-css">        */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.two</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407145651869.png" alt="image-20220407145651869"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>块级盒子水平居中对齐<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">900px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 上下 100 左右 auto */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407145633816.png" alt="image-20220407145633816"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>行内元素、行内块元素水平居中对齐<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">900px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 行内元素或者行内块元素水平居中给其父元素添加 text-align: center 即可 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 这样是不起作用的 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-css">        span &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            margin: 0 auto;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        &#125; </span></span></span><br><span class="line"><span class="comment"><span class="language-css">        */</span></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>里面的文字<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../image/icon.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-1-外边距合并"><a href="#5-1-外边距合并" class="headerlink" title="5.1 外边距合并"></a>5.1 外边距合并</h4><p>使用 <code>margin</code> 定义块元素的垂直外边距时，可能会出现外边距的合并。</p><p>注意：<strong>内边距没有合并一说！浮动的盒子不会发生外边距合并！</strong></p><p>主要有两种情况:</p><ul><li><strong>相邻块元素垂直外边距的合并</strong></li><li><strong>嵌套块元素垂直外边距的塌陷</strong></li></ul><h5 id="5-1-1-相邻块元素垂直外边距的合并"><a href="#5-1-1-相邻块元素垂直外边距的合并" class="headerlink" title="5.1.1 相邻块元素垂直外边距的合并"></a>5.1.1 相邻块元素垂直外边距的合并</h5><p>当上下相邻的两个块元素（兄弟关系）相遇时，如果上面的元素有下外边距 <code>margin-bottom</code>，下面的元素有上外边距 <code>margin-top</code> ，则他们之间的垂直间距不是 <code>margin-bottom</code> 与 <code>margin-top</code> 之和。而是取两个值中的<strong>较大者</strong>，这种现象被称为相邻块元素垂直外边距的合并（准确的描述应该是：<strong>大的外边距覆盖小的</strong>）。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407145231999.png" alt="image-20220407145231999"></p><p><strong>解决方案：</strong></p><p>尽量只给一个盒子添加 <code>margin</code> 值。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>相邻块元素垂直外边距的合并<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.one</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: hotpink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.two</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>one<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span>two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>![](<a href="https://raw.githubusercontent.com/JERRY-Z-J-R/I-love-you-3-thousand/master/%E6%88%91%E7%88%B1%E4%BD%A0%EF%BC%8C%E4%B8%8D%E6%AD%A2%E4%B8%89%E5%8D%83%E9%81%8D/HTML">https://raw.githubusercontent.com/JERRY-Z-J-R/I-love-you-3-thousand/master/我爱你，不止三千遍/HTML</a> CSS&#x2F;6、【CSS盒子模型】&#x2F;mark-img&#x2F;20210410205508662.gif)</p><h5 id="5-1-2-嵌套块元素垂直外边距的塌陷"><a href="#5-1-2-嵌套块元素垂直外边距的塌陷" class="headerlink" title="5.1.2 嵌套块元素垂直外边距的塌陷"></a>5.1.2 嵌套块元素垂直外边距的塌陷</h5><p>对于两个嵌套关系（父子关系）的块元素，当子元素有上外边距，此时父元素会塌陷较大的外边距值（<strong>外边距效果显示在父元素之上</strong>）。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407145116018.png" alt="image-20220407145116018"></p><p><strong>解决方案：</strong></p><ul><li>可以为父元素定义上边框（比如：可以给一个透明 transparent 边框）</li><li>可以为父元素定义上内边距</li><li>可以为父元素添加 <code>overflow: hidden</code></li></ul><p>还有其他方法，比如浮动、固定，绝对定位的盒子不会有塌陷问题，后面咱们再总结。</p><p>案例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>外边距合并-嵌套块级元素垂直外边距塌陷<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>![](<a href="https://raw.githubusercontent.com/JERRY-Z-J-R/I-love-you-3-thousand/master/%E6%88%91%E7%88%B1%E4%BD%A0%EF%BC%8C%E4%B8%8D%E6%AD%A2%E4%B8%89%E5%8D%83%E9%81%8D/HTML">https://raw.githubusercontent.com/JERRY-Z-J-R/I-love-you-3-thousand/master/我爱你，不止三千遍/HTML</a> CSS&#x2F;6、【CSS盒子模型】&#x2F;mark-img&#x2F;20210410205223833.gif)</p><hr><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>外边距合并-嵌套块级元素垂直外边距塌陷<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.father</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* border: 1px solid transparent; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.son</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407145020660.png" alt="image-20220407145020660"></p><p><strong>注意：外边距的合并在利用盒子布局页面的时候是经常发生的！</strong></p><h3 id="六、清除内外边距"><a href="#六、清除内外边距" class="headerlink" title="六、清除内外边距"></a>六、清除内外边距</h3><p>网页元素很多都带有默认的内外边距，而且不同浏览器默认的也不一致。因此我们在布局前，首先要清除下网页元素的内外边距。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">* &#123;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">0</span>; <span class="comment">/* 清除内边距 */</span></span><br><span class="line"><span class="attribute">margin</span>:<span class="number">0</span>; <span class="comment">/* 清除外边距 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：行内元素为了照顾兼容性，尽量只设置左右内外边距，不要设置上下内外边距（某些时候，行内元素对上下内外边距不生效）。但是转换为块级和行内块元素就可以了。</p><h3 id="七、案例"><a href="#七、案例" class="headerlink" title="七、案例"></a>七、案例</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407144953310.png" alt="image-20220407144953310"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>综合案例-MI产品模块<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">298px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">415px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 让块级的盒子水平居中对齐 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 图片的宽度和父亲一样宽 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.review</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 因为这个段落没有 width 属性，所以 padding 不会撑开盒子的宽度 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 因为这个段落有 height 属性，所以 padding-top 会撑大盒子，所以我们用 margin-top */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 其实用 padding-top 也可以，但是需要手动减去 top 值，麻烦且不规范 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.appraise</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#b0b0b0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.info</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.info</span> <span class="selector-tag">h4</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: <span class="number">400</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.info</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#ff6700</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.info</span> <span class="selector-tag">em</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 不倾斜 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-style</span>: normal;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#ebe4e0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">6px</span> <span class="number">0</span> <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;images/img.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;review&quot;</span>&gt;</span>快递牛，整体不错蓝牙可以说秒连。红米给力<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;appraise&quot;</span>&gt;</span>来自于 117384232 的评价<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h4</span>&gt;</span> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Redmi AirDots真无线蓝...<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 特殊元素可以用 em 包裹 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">em</span>&gt;</span>|<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span> 99.9元<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>![](<a href="https://raw.githubusercontent.com/JERRY-Z-J-R/I-love-you-3-thousand/master/%E6%88%91%E7%88%B1%E4%BD%A0%EF%BC%8C%E4%B8%8D%E6%AD%A2%E4%B8%89%E5%8D%83%E9%81%8D/HTML">https://raw.githubusercontent.com/JERRY-Z-J-R/I-love-you-3-thousand/master/我爱你，不止三千遍/HTML</a> CSS&#x2F;6、【CSS盒子模型】&#x2F;mark-img&#x2F;20210406135403703.jpg)</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>综合案例-快报模板<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 去除列表前的圆点 */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 之所以把这条语句单独写，是因为整个页面都需要把 li 的圆点去除 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">248px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">163px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">h3</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">1px</span> dotted <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: <span class="number">400</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 由于该盒子带有一个下边框，所以缩进不能使用 margin，否则下边框也会一同缩进，</span></span></span><br><span class="line"><span class="comment"><span class="language-css">            此处就用 padding。并且此处没有设置 width，所以 padding-left 也不会撑大盒子 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-left</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-decoration</span>: underline;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">23px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">line-height</span>: <span class="number">23px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding-left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">7px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>品优购快报<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>【特惠】爆款耳机5折秒！<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>【特惠】母亲节，健康好礼低至5折！<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>【特惠】语音折叠台灯99元！<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>【特惠】9.9元3D打印！<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>【特惠】格力智能空调立省1000元！<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>![](<a href="https://raw.githubusercontent.com/JERRY-Z-J-R/I-love-you-3-thousand/master/%E6%88%91%E7%88%B1%E4%BD%A0%EF%BC%8C%E4%B8%8D%E6%AD%A2%E4%B8%89%E5%8D%83%E9%81%8D/HTML">https://raw.githubusercontent.com/JERRY-Z-J-R/I-love-you-3-thousand/master/我爱你，不止三千遍/HTML</a> CSS&#x2F;6、【CSS盒子模型】&#x2F;mark-img&#x2F;20210406135403715.gif)</p><h3 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h3><h4 id="a、布局为啥用不同盒子，我只想用-div？"><a href="#a、布局为啥用不同盒子，我只想用-div？" class="headerlink" title="a、布局为啥用不同盒子，我只想用 div？"></a>a、布局为啥用不同盒子，我只想用 div？</h4><p>标签都是有语义的，合理的地方用合理的标签。比如产品标题就用 <code>h</code>，大量文字段落就用 <code>p</code>。</p><h4 id="b、为啥用辣么多类名？"><a href="#b、为啥用辣么多类名？" class="headerlink" title="b、为啥用辣么多类名？"></a>b、为啥用辣么多类名？</h4><p>类名就是给每个盒子起了一个名字，可以更好的找到这个盒子，选取盒子更容易，后期维护也更方便。</p><h4 id="c、到底用-margin-还是-padding？"><a href="#c、到底用-margin-还是-padding？" class="headerlink" title="c、到底用 margin 还是 padding？"></a>c、到底用 margin 还是 padding？</h4><p>大部分情况两个可以混用，两者各有优缺点，但是根据实际情况，总是有更简单的方法实现。</p><p>一般来说，盒子与盒子之间统一用 margin，内容与边框之间用 padding。</p><h4 id="d、自己做没有思路？"><a href="#d、自己做没有思路？" class="headerlink" title="d、自己做没有思路？"></a>d、自己做没有思路？</h4><p>布局有很多种实现方式，可以开始先模仿大牛的写法，然后再做出自己的风格。</p><p>最后一定多运用辅助工具，比如屏幕画笔，PS 等等。</p><h2 id="【圆角边框、盒子阴影、文字阴影】"><a href="#【圆角边框、盒子阴影、文字阴影】" class="headerlink" title="【圆角边框、盒子阴影、文字阴影】"></a>【圆角边框、盒子阴影、文字阴影】</h2><blockquote><p>本文档是个人对 Pink 老师课程的总结归纳及补充，转载请注明出处！ </p></blockquote><h3 id="一、圆角边框"><a href="#一、圆角边框" class="headerlink" title="一、圆角边框"></a>一、圆角边框</h3><p>CSS 3 新增了圆角边框样式。</p><p>border-radius 属性用于设置元素的外边框圆角。</p><p>语法：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">border-radius</span>: length;</span><br></pre></td></tr></table></figure><p>原理：</p><p>border-radius 顾名思义：边框半径。</p><p>（椭）圆与边框的交集形成圆角效果。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407150717209.png"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>圆角边框<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>![](E:\ladidol\source\_posts\mark-img\20210407171251321.jpg)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407151012852.png" alt="image-20220407151012852"></p><p>注意：</p><ul><li>参数值可以为数值或百分比的形式</li><li>如果是正方形，想要设置为圆形，那么只需要把数值修改为高度或者宽度的一半即可，或者直接写为 50%</li><li>如果是个矩形，设置为高度的一半就可以做 “胶囊” 效果了</li><li>该属性是一个简写属性，可以跟多个值<ul><li>四个值：左上角、右上角、右下角、左下角（从左上开始顺时针）</li><li>三个值：左上、右上+左下、右下（对角为一组）</li><li>两个值：左上+右下、右上+左下（对角为一组）</li></ul></li><li>同时可以对特定角单独设置<ul><li>左上角：<code>border-top-left-radius</code></li><li>右上角：<code>border-top-right-radius</code></li><li>右下角：<code>border-bottom-right-radius</code></li><li>左下角：<code>border-bottom-left-radius</code></li></ul></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>圆角边框常用写法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.yuanxing</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* border-radius: 100px; */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 50% 就是宽度和高度的一半  等价于 100px */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.juxing</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 圆角矩形设置为高度的一半 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.radius</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* border-radius: 10px 20px 30px 40px; */</span></span></span><br><span class="line"><span class="language-css">            <span class="comment">/* border-radius: 10px 40px; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-top-left-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    1. 圆形的做法:</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;yuanxing&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    2. 圆角矩形的做法:</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;juxing&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    3. 可以设置不同的圆角:</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;radius&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407151735051.png" alt="image-20220407151735051"></p><h3 id="二、盒子阴影"><a href="#二、盒子阴影" class="headerlink" title="二、盒子阴影"></a>二、盒子阴影</h3><p>CSS 3 新增了盒子阴影。</p><p>box-shadow 属性用于为盒子添加阴影。</p><p>语法：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: h-shadow v-shadow blur spread color inset;</span><br></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>h-shadow</code></td><td>必须。水平阴影的位置，允许负值。</td></tr><tr><td><code>v-shadow</code></td><td>必须。垂直阴影的位置，允许负值。</td></tr><tr><td><code>blur</code></td><td>可选。模糊距离（虚实程度）。</td></tr><tr><td><code>spread</code></td><td>可选。阴影的尺寸（大小）。</td></tr><tr><td><code>color</code></td><td>可选。阴影的颜色，请参阅 CSS 颜色值（阴影多为半透明颜色）。</td></tr><tr><td><code>inset</code></td><td>可选。将外部阴影（outset）改为内部阴影（outset 不能指定，默认为空即可）。</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>盒子阴影<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: salmon;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">100px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* box-shadow: 10px 10px; */</span></span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 伪类不仅仅可以用于 a 链接，还能用于其他标签 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 原先盒子没有影子,当我们鼠标经过盒子就添加阴影效果 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">10px</span> <span class="number">10px</span> <span class="number">10px</span> -<span class="number">4px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>![](<a href="https://raw.githubusercontent.com/JERRY-Z-J-R/I-love-you-3-thousand/master/%E6%88%91%E7%88%B1%E4%BD%A0%EF%BC%8C%E4%B8%8D%E6%AD%A2%E4%B8%89%E5%8D%83%E9%81%8D/HTML">https://raw.githubusercontent.com/JERRY-Z-J-R/I-love-you-3-thousand/master/我爱你，不止三千遍/HTML</a> CSS&#x2F;7、【圆角边框、盒子阴影、文字阴影】&#x2F;mark-img&#x2F;20210407181220613.gif)</p><p><strong>三边阴影、双边阴影、单边阴影的设置方法：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>盒子阴影 三边阴影、双边阴影、单边阴影<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">25px</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.a</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">25px</span> <span class="number">5px</span> red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 三边阴影就是直接把整个阴影部分往下边移 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.b</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">6px</span> <span class="number">10px</span> <span class="number">0</span> red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 两边阴影要用盒子嵌套来解决 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span> -<span class="number">5px</span> red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.c2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> -<span class="number">10px</span> <span class="number">10px</span> -<span class="number">5px</span> red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 单边阴影就是直接把整个阴影部分往下边移，并且减小阴影大小 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.d</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span> -<span class="number">5px</span> red;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;a&quot;</span>&gt;</span>四边阴影<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;b&quot;</span>&gt;</span>三边阴影<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;c2&quot;</span>&gt;</span>两边阴影<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;d&quot;</span>&gt;</span>一边阴影<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407151940903.png" alt="image-20220407151940903"></p><h3 id="三、文字阴影"><a href="#三、文字阴影" class="headerlink" title="三、文字阴影"></a>三、文字阴影</h3><p>CSS 3 新增了文字阴影。</p><p>text-shadow 属性用于为文本添加阴影。</p><p>语法：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">text-shadow</span>: h-shadow v-shadow blur color;</span><br></pre></td></tr></table></figure><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td><code>h-shadow</code></td><td>必须。水平阴影的位置。允许负值。</td></tr><tr><td><code>v-shadow</code></td><td>必须。垂直阴影的位置。允许负值。</td></tr><tr><td><code>blur</code></td><td>可选。模糊的距离（虚实程度）。</td></tr><tr><td><code>color</code></td><td>可选。阴影的颜色。参阅 CSS 颜色值。</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文字阴影<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-size</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: salmon;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: <span class="number">700</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">6px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, .<span class="number">3</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        你是阴影,我是火影</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407152006854.png" alt="image-20220407152006854"></p><h2 id="【CSS浮动】"><a href="#【CSS浮动】" class="headerlink" title="【CSS浮动】"></a>【CSS浮动】</h2><blockquote><p>本文档是个人对 Pink 老师课程的总结归纳及补充，转载请注明出处！ </p></blockquote><h3 id="一、浮动（float）"><a href="#一、浮动（float）" class="headerlink" title="一、浮动（float）"></a>一、浮动（float）</h3><h4 id="1-1-传统网页布局的三种方式"><a href="#1-1-传统网页布局的三种方式" class="headerlink" title="1.1 传统网页布局的三种方式"></a>1.1 传统网页布局的三种方式</h4><p>网页布局的本质：用 CSS 来摆放盒子，把盒子摆放到相应位置。</p><p>CSS 提供了三种传统布局方式（简单说就是盒子如何进行排列）。</p><ul><li>普通流（标准流）</li><li>浮动</li><li>定位</li></ul><blockquote><p>这里指的只是传统布局，其实还有一些特殊高级的布局方式。</p></blockquote><h4 id="1-2-标准流（普通流-x2F-文档流）"><a href="#1-2-标准流（普通流-x2F-文档流）" class="headerlink" title="1.2 标准流（普通流&#x2F;文档流）"></a>1.2 标准流（普通流&#x2F;文档流）</h4><p>所谓的标准流：就是标签按照规定好的默认方式排列。</p><ol><li><strong>块级元素会独占一行，从上向下顺序排列。</strong></li><li><strong>行内元素会按照顺序，从左到右顺序排列，碰到父元素边缘则自动换行。</strong></li></ol><p>以上都是标准流布局，我们前面学习的就是标准流，标准流是最基本的布局方式。</p><p>这三种布局方式都是用来摆放盒子的，盒子摆放到合适位置，布局自然就完成了。</p><p><strong>注意：</strong>实际开发中，一个页面基本都包含了这三种布局方式（后面移动端学习新的布局方式） 。</p><h4 id="1-3-为什么需要浮动？"><a href="#1-3-为什么需要浮动？" class="headerlink" title="1.3 为什么需要浮动？"></a>1.3 为什么需要浮动？</h4><p>提问：我们用标准流能很方便的实现如下效果吗？</p><ol><li><strong>如何让多个块级盒子（div）水平排列成一行？</strong></li></ol><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407152426295.png" alt="image-20220407152426295"></p><p>比较难，虽然转换为行内块元素可以实现一行显示，但是他们之间会有大的<strong>空白缝隙</strong>，很难控制。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>行内块中间有缝隙<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#d87093</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407152459944.png" alt="image-20220407152459944"></p><ol start="2"><li><strong>如何实现两个盒子的左右对齐？</strong></li></ol><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407152820374.png" alt="image-20220407152820374"></p><p>总结： 有很多的布局效果，标准流没有办法完成，此时就可以利用浮动完成布局。 因为浮动可以改变元素标签默认的排列方式。</p><p><strong>浮动最典型的应用：可以让多个块级元素一行内排列显示。</strong></p><p><strong>网页布局第一准则：多个块级元素纵向排列找标准流，多个块级元素横向排列找浮动！</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>多个块级元素横向排列找浮动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#d87093</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407152946759.png" alt="image-20220407152946759"></p><p><strong>拓展：</strong>浮动的盒子不会发生外边距合并！</p><h4 id="1-4-什么是浮动？"><a href="#1-4-什么是浮动？" class="headerlink" title="1.4 什么是浮动？"></a>1.4 什么是浮动？</h4><p><code>float</code> 属性用于创建浮动框，将其移动到一边，直到左边缘或右边缘触及包含块或另一个浮动框的边缘。</p><p>语法：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">float</span>: 属性值;&#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>none</td><td>元素不浮动（默认值）</td></tr><tr><td>left</td><td>元素向左浮动</td></tr><tr><td>right</td><td>元素向右浮动</td></tr></tbody></table><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>什么是浮动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左青龙<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右白虎<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407153318054.png" alt="image-20220407153318054"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>什么是浮动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 层叠性 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左青龙<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右白虎<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>层叠性, 有覆盖:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407153547042.png" alt="image-20220407153547042"></p><h4 id="1-5-浮动特性（重难点）"><a href="#1-5-浮动特性（重难点）" class="headerlink" title="1.5 浮动特性（重难点）"></a>1.5 浮动特性（重难点）</h4><p>加了浮动之后的元素，会具有很多特性，需要我们掌握。</p><ol><li>浮动元素会脱离标准流（脱标）</li><li>浮动的元素会一行内显示并且元素顶部对齐</li><li>浮动的元素会具有行内块元素的特性</li></ol><p>下面分别解释：</p><p><strong>（1）浮动元素会脱离标准流（脱标）</strong></p><ul><li>脱离标准普通流的控制（浮） 移动到指定位置（动），（俗称脱标）</li><li>浮动的盒子不再保留原先的位置</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407153815413.png" alt="image-20220407153815413"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动特性1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 设置了浮动（float）的元素会：</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        1.脱离标准普通流的控制（浮）移动到指定位置（动）。</span></span></span><br><span class="line"><span class="comment"><span class="language-css">        2.浮动的盒子不再保留原先的位置 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box2</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>浮动的盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>标准流的盒子<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407153915403.png" alt="image-20220407153915403"></p><p><strong>（2）浮动的元素会一行内显示并且元素顶部对齐</strong></p><ul><li>如果多个盒子都设置了浮动，则它们会按照属性值一行内显示并且顶端对齐排列。</li><li>浮动的元素是互相贴靠在一起的（不会有缝隙），如果父级宽度装不下这些浮动的盒子，多出的盒子会另起一行对齐。</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动元素特性-浮动元素一行显示<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.two</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">249px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.four</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;four&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407154122676.png" alt="image-20220407154122676"></p><p>![](<a href="https://raw.githubusercontent.com/JERRY-Z-J-R/I-love-you-3-thousand/master/%E6%88%91%E7%88%B1%E4%BD%A0%EF%BC%8C%E4%B8%8D%E6%AD%A2%E4%B8%89%E5%8D%83%E9%81%8D/HTML">https://raw.githubusercontent.com/JERRY-Z-J-R/I-love-you-3-thousand/master/我爱你，不止三千遍/HTML</a> CSS&#x2F;8、【CSS浮动】&#x2F;mark-img&#x2F;20210410111551264.gif)</p><p>![](<a href="https://raw.githubusercontent.com/JERRY-Z-J-R/I-love-you-3-thousand/master/%E6%88%91%E7%88%B1%E4%BD%A0%EF%BC%8C%E4%B8%8D%E6%AD%A2%E4%B8%89%E5%8D%83%E9%81%8D/HTML">https://raw.githubusercontent.com/JERRY-Z-J-R/I-love-you-3-thousand/master/我爱你，不止三千遍/HTML</a> CSS&#x2F;8、【CSS浮动】&#x2F;mark-img&#x2F;readme.gif)</p><p><strong>（3）浮动的元素会具有行内块元素的特性</strong></p><p>任何元素都可以浮动。不管原先是什么模式的元素，添加浮动之后具有行内块元素相似的特性。</p><ul><li>块级盒子：没有设置宽度时默认宽度和父级一样宽，但是添加浮动后，它的大小根据内容来决定</li><li>行内盒子：宽度默认和内容一样宽，直接设置高宽无效，但是添加浮动后，它的大小可以直接设置</li><li>浮动的盒子中间是没有缝隙的，是紧挨着一起的</li><li><strong>即：默认宽度由内容决定，同时支持指定高宽，盒子之间无空隙</strong></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动的元素具有行内块元素特点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 任何元素都可以浮动。不管原先是什么模式的元素，添加浮动之后具有行内块元素相似的特性。 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">span</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 如果行内元素有了浮动，则不需要转换块级\行内块元素就可以直接给高度和宽度 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>pppppppppppppp<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407160428783.png" alt="image-20220407160428783"></p><p>注意：之所以顶部没有对齐，原因是 p 标签自带的外边距 &gt; span div 自带的外边距。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动的元素具有行内块元素特点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 任何元素都可以浮动。不管原先是什么模式的元素，添加浮动之后具有行内块元素相似的特性。 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">span</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 如果行内元素有了浮动,则不需要转换块级\行内块元素就可以直接给高度和宽度 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>pppppppppppppp<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407160750381.png" alt="image-20220407160750381"></p><h4 id="1-6-浮动元素经常和标准流父级搭配使用"><a href="#1-6-浮动元素经常和标准流父级搭配使用" class="headerlink" title="1.6 浮动元素经常和标准流父级搭配使用"></a>1.6 浮动元素经常和标准流父级搭配使用</h4><p>为了约束浮动元素位置，我们网页布局一般采取的策略是：</p><p><strong>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置。符合网页布局第一准侧。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407160847786.png" alt="image-20220407160847786"></p><p>应用举例：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407160858759.png" alt="image-20220407160858759"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动元素搭配标准流父盒子1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">1200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">460px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">230px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">460px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">460px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>右侧<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407161539227.png" alt="image-20220407161539227"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407161246386.png" alt="image-20220407161246386"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动元素搭配标准流父盒子2<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 取消 li 前的圆点 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">1226px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">285px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 让大盒子水平居中 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">296px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">285px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 每个小盒子用右边距隔开 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-right</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 取消最后一个小盒子的右外边距 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 这里必须写 .box .last 要注意权重的问题  20 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-class">.last</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;last&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407162008123.png" alt="image-20220407162008123"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动布局练习3<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">1226px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">615px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">234px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">615px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">992px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">615px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.right</span>&gt;<span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">234px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-left</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>左青龙<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407162248219.png" alt="image-20220407162248130"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407162306535.png" alt="image-20220407162306535"></p><h3 id="二、常见网页布局"><a href="#二、常见网页布局" class="headerlink" title="二、常见网页布局"></a>二、常见网页布局</h3><h4 id="2-1-初识常见网页布局"><a href="#2-1-初识常见网页布局" class="headerlink" title="2.1 初识常见网页布局"></a>2.1 初识常见网页布局</h4><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407162815079.png" alt="image-20220407162815079"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407162824137.png" alt="image-20220407162824137"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>常见网页布局<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        * &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.top</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.banner</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">980px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">980px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">237px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> <span class="selector-class">.last</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 只要是通栏的盒子（和浏览器一样宽）不需要指定宽度 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span>top<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner&quot;</span>&gt;</span>banner<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;last&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407162842151.png" alt="image-20220407162842151"></p><h4 id="2-2-浮动布局注意点"><a href="#2-2-浮动布局注意点" class="headerlink" title="2.2 浮动布局注意点"></a>2.2 浮动布局注意点</h4><p><strong>（1）浮动和标准流的父盒子搭配</strong></p><p>先用标准流的父元素排列上下位置，之后内部子元素采取浮动排列左右位置。</p><p><strong>（2）一个元素浮动了，理论上其余的兄弟元素也要浮动</strong></p><p>一个盒子里面有多个子盒子，如果其中一个盒子浮动了，那么其他兄弟也应该浮动，以防止引起问题。</p><p>浮动的盒子只会影响浮动盒子后面的标准流，不会影响前面的标准流。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动注意点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 如果一个子元素浮动了，尽量其他盒子也浮动，这样保证这些子元素一行显示 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">900px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.damao</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: palevioletred;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ermao</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: palegreen;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.sanmao</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">240px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;damao&quot;</span>&gt;</span>大毛<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- float: left; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ermao&quot;</span>&gt;</span>二毛<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- float: left; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sanmao&quot;</span>&gt;</span>三毛<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- float: left; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407163448553.png"></p><hr><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动注意点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 浮动的盒子只会影响浮动盒子后面的标准流，不会影响前面的标准流。 */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 大毛为标准流，所以大毛会占据其所在的一行，后面的二毛就算浮动也不会跑到大毛上方！*/</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">900px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.damao</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* float: left; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: palevioletred;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ermao</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: palegreen;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.sanmao</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">240px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;damao&quot;</span>&gt;</span>大毛<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- 标准流 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ermao&quot;</span>&gt;</span>二毛<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- float: left; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sanmao&quot;</span>&gt;</span>三毛<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- float: left; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>浮动和标准流位置先后</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407163541520.png"></p><hr><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>浮动注意点<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 浮动的盒子只会影响浮动盒子后面的标准流，不会影响前面的标准流。 */</span></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">900px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.damao</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: palevioletred;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ermao</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* float: left; */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: palegreen;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.sanmao</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">240px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;damao&quot;</span>&gt;</span>大毛<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- float: left; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ermao&quot;</span>&gt;</span>二毛<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- 标准流 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;sanmao&quot;</span>&gt;</span>三毛<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- float: left; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407163937352.png" alt="image-20220407163937352"></p><p>由于大毛是浮动的，所以原来大毛的位置会空出来，此时二毛就会向上补齐空位，由于二毛高度小于大毛，所以二毛被大毛挡住了，又因为二毛是标准流，所以二毛会占据所在的一行，所以后面浮动的三毛就只能在二毛的底部之下，又由于大毛也是浮动的，所以三毛就会紧贴在大毛右侧。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407163956062.png"></p><h3 id="三、清除浮动"><a href="#三、清除浮动" class="headerlink" title="三、清除浮动"></a>三、清除浮动</h3><h4 id="3-1-思考题"><a href="#3-1-思考题" class="headerlink" title="3.1 思考题"></a>3.1 思考题</h4><p>我们前面浮动元素有一个标准流的父元素，他们有一个共同的特点，都是有高度的。</p><p>但是，所有的父盒子都必须有高度吗？</p><p>答案：不一定！比如，一个产品列表，随着时期的不同，产品数量也不同，所需的盒子大小也会随之改变，那么直接固定盒子高度的形式显然就是不行的。再比如，文章之类的盒子，不同的文章字数是不相同的，那么显然盒子也不能直接固定高度。</p><p>理想中的状态，<strong>让子盒子撑开父亲</strong>。有多少孩子，我父盒子就有多高。</p><p>但是不给父盒子高度会有问题吗？</p><p>答案：会！但有方法解决（清除浮动）。</p><h4 id="3-2-为什么需要清除浮动？"><a href="#3-2-为什么需要清除浮动？" class="headerlink" title="3.2 为什么需要清除浮动？"></a>3.2 为什么需要清除浮动？</h4><p>由于父级盒子很多情况下不方便给高度，但是子盒子浮动又不占有位置，最后父级盒子高度为 0 时，就会影响下面的标准流盒子。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407164145316.png" alt="image-20220407164145316"></p><ul><li><p>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响</p></li><li><p>此时一但父盒子下面有其他盒子，那么布局就会发生严重混乱！</p></li></ul><h4 id="3-3-清除浮动本质"><a href="#3-3-清除浮动本质" class="headerlink" title="3.3 清除浮动本质"></a>3.3 清除浮动本质</h4><ul><li>清除浮动的本质是清除浮动元素造成的影响</li><li>如果父盒子本身有高度，则不需要清除浮动</li><li><strong>清除浮动之后，父级就会根据浮动的子盒子自动检测高度。</strong>父级有了高度，就不会影响下面的标准流了</li></ul><h4 id="3-4-清除浮动"><a href="#3-4-清除浮动" class="headerlink" title="3.4 清除浮动"></a>3.4 清除浮动</h4><p>语法：</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">选择器 &#123; <span class="attribute">clear</span>: 属性值; &#125;</span><br></pre></td></tr></table></figure><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td>right</td><td>不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><p>我们实际工作中，几乎只用 <code>clear: both;</code></p><p>清除浮动的策略是：闭合浮动。</p><h4 id="3-5-清除浮动方法"><a href="#3-5-清除浮动方法" class="headerlink" title="3.5 清除浮动方法"></a>3.5 清除浮动方法</h4><ol><li>额外标签法也称为隔墙法，是 W3C 推荐的做法。(实际开发不推荐)</li><li>父级添加 overflow 属性</li><li>父级添加 after 伪元素</li><li>父级添加 双伪元素</li></ol><h4 id="3-6-清除浮动-——-额外标签法"><a href="#3-6-清除浮动-——-额外标签法" class="headerlink" title="3.6 清除浮动 —— 额外标签法"></a>3.6 清除浮动 —— 额外标签法</h4><p>额外标签法也称为隔墙法，是 W3C 推荐的做法。</p><p>额外标签法会在浮动元素末尾添加一个空的标签。例如 <code>&lt;div style=&quot;clear: both&quot;&gt;&lt;/div&gt;</code>，或者其他标签（如 <code>&lt;br&gt;</code> 等）。</p><ul><li>优点： 通俗易懂，书写方便</li><li>缺点： 添加许多无意义的标签，结构化较差</li></ul><p>注意： 要求这个新的空标签必须是<strong>块级元素</strong>。</p><p>总结：</p><ul><li>清除浮动本质是？</li></ul><p>清除浮动的本质是清除浮动元素脱离标准流造成的影响。</p><ul><li>清除浮动策略是？</li></ul><p><strong>闭合浮动。只让浮动在父盒子内部影响，不影响父盒子外面的其他盒子。</strong></p><ul><li>额外标签法？</li></ul><p><strong>隔墙法，就是在最后一个浮动的子元素后面添加一个额外空标签（块级标签），添加清除浮动样式。</strong></p><p>实际工作可能会遇到，但是不常用。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>清除浮动之额外标签法<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">3px</span> solid black;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.damao</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: salmon;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ermao</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: gray;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.clear</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;damao&quot;</span>&gt;</span>大毛<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ermao&quot;</span>&gt;</span>二毛<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ermao&quot;</span>&gt;</span>二毛<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ermao&quot;</span>&gt;</span>二毛<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ermao&quot;</span>&gt;</span>二毛<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 这个新增的盒子要求必须是块级元素不能是行内元素 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;span class=&quot;clear&quot;&gt;&lt;/span&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407170132882.png" alt="image-20220407170132882"></p><h4 id="3-7-清除浮动-——-父级添加-overflow"><a href="#3-7-清除浮动-——-父级添加-overflow" class="headerlink" title="3.7 清除浮动 —— 父级添加 overflow"></a>3.7 清除浮动 —— 父级添加 overflow</h4><p>可以给父级添加 <code>overflow</code> 属性，将其属性值设置为 <code>hidden</code>、 <code>auto</code> 或 <code>scroll</code>。</p><p>子不教，父之过，注意是给父元素添加代码。</p><ul><li>优点：代码简洁</li><li>缺点：无法显示溢出的部分</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>overflow清除浮动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* 清除浮动 */</span></span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.damao</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: purple;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ermao</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;damao&quot;</span>&gt;</span>大毛<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ermao&quot;</span>&gt;</span>二毛<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407170225455.png" alt="image-20220407170225455"></p><h4 id="3-8-清除浮动-——-after-伪元素法"><a href="#3-8-清除浮动-——-after-伪元素法" class="headerlink" title="3.8 清除浮动 —— :after 伪元素法"></a>3.8 清除浮动 —— :after 伪元素法</h4><p><code>:after</code> 方式是额外标签法的升级版，也是给父元素添加代码。</p><p>原理：自动在父盒子里的末尾添加一个 行内盒子，我们将它转换为 块级盒子，就间接实现了额外标签法。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="attribute">display</span>: block;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line"><span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123; </span><br><span class="line">    <span class="comment">/* IE6、7 专有 */</span></span><br><span class="line">*zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：类名不一定非要是 clearfix，但是还是推荐这么写以提高可读性。</p><ul><li>优点：没有增加标签，结构更简单</li><li>缺点：需要单独照顾低版本浏览器</li><li>代表网站： 百度、淘宝网、网易等</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>伪元素清除浮动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">visibility</span>: hidden;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.clearfix</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="comment">/* IE6、7 专有 */</span></span></span><br><span class="line"><span class="language-css">            *zoom: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.damao</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: purple;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ermao</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;damao&quot;</span>&gt;</span>大毛<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ermao&quot;</span>&gt;</span>二毛<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407170426412.png" alt="image-20220407170426412"></p><h4 id="3-9-清除浮动-——-双伪元素清除浮动"><a href="#3-9-清除浮动-——-双伪元素清除浮动" class="headerlink" title="3.9 清除浮动 —— 双伪元素清除浮动"></a>3.9 清除浮动 —— 双伪元素清除浮动</h4><p>额外标签法的升级版，也是给给父元素添加代码。</p><p>原理：自动在父盒子里的两端添加两个行内盒子，并把它们转换为 表格，间接实现了额外标签法。</p><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line"><span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">    <span class="comment">/* IE6、7 专有 */</span></span><br><span class="line">*zoom:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：类名不一定非要是 clearfix，但是还是推荐这么写以提高可读性。</p><ul><li><p>优点：代码更简洁</p></li><li><p>缺点：需要单独照顾低版本浏览器</p></li><li><p>代表网站：小米、腾讯等</p></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>双伪元素清除浮动<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">:before</span>,</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: table;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">clear</span>: both;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.clearfix</span> &#123;</span></span><br><span class="line"><span class="language-css">            *zoom: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid blue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.damao</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: purple;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.ermao</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: pink;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.footer</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box clearfix&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;damao&quot;</span>&gt;</span>大毛<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;ermao&quot;</span>&gt;</span>二毛<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220407194042511.png" alt="image-20220407194042511"></p><h4 id="3-10-清除浮动总结"><a href="#3-10-清除浮动总结" class="headerlink" title="3.10 清除浮动总结"></a>3.10 清除浮动总结</h4><p>为什么需要清除浮动？</p><ul><li>父级没高度</li><li>子盒子浮动了</li><li>影响下面布局了，我们就应该清除浮动了</li></ul><table><thead><tr><th>清除浮动的方式</th><th>优点</th><th>缺点</th></tr></thead><tbody><tr><td>额外标签法（隔墙法）</td><td>通俗易懂，书写方便</td><td>添加许多无意义的标签，结构化较差</td></tr><tr><td>父级 overflow: hidden;</td><td>书写简单</td><td>溢出隐藏</td></tr><tr><td>父级 after 伪元素</td><td>结构语义化正确</td><td>由于 IE6~7 不支持 :after，兼容性问题</td></tr><tr><td>父级双伪元素</td><td>结构语义化正确</td><td>由于 IE6~7 不支持 :after，兼容性问题</td></tr></tbody></table><blockquote><p>after 伪元素、双伪元素 清除浮动的原理将在后面的 CSS3 中解释。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> web前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端上机代码汇总</title>
      <link href="/2022/04/06/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5D%E5%89%8D%E7%AB%AF%E4%B8%8A%E6%9C%BA%E4%BB%A3%E7%A0%81%E6%B1%87%E6%80%BB/"/>
      <url>/2022/04/06/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5D%E5%89%8D%E7%AB%AF%E4%B8%8A%E6%9C%BA%E4%BB%A3%E7%A0%81%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<p>第一次上机:2022年4月6日21:29:59</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>个人信息介绍<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--上面用一个标题--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>时间是岁月的橡皮擦<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">这是我的个人博客网站:</span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://ladfeng.top&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;1000px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--就是类似一个新建标签页,然后内置与当前页面--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--下面用一个表格--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第一行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>性别: <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> 男</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span>&gt;</span> 女</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第二行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>生日: <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>--请选者年份--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>2001<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>2002<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>2003<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>2004<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>2005<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>2006<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>--请选者月份--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>6<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>--请选者日期--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span>&gt;</span>6<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第三行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>所在地区: <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;四川纯爷们&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第四行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>婚姻状况: <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;marry&quot;</span>&gt;</span>已婚</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1marry&quot;</span>&gt;</span>未婚</span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2marry&quot;</span>&gt;</span>离婚</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第五行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>学历: <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;幼儿园&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第六行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>喜欢的电影类型: <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">list</span>=<span class="string">&quot;browsers&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;browsers&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;冒险&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;科幻&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;悬疑&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;动漫&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;爱情&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第七行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>个人介绍: <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span>&gt;</span>个人简介<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第八行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;免费注册&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第九行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span>我同意注册条款</span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--第十行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span> 我是会员, 立即登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第十一行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h5</span>&gt;</span>我承诺<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    我是中国公民!</span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    我是中国学生!</span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">                    我会为遵纪守法!</span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--第十二行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>推荐一首歌:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;horse.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;https://music.163.com/song?id=1933800693&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class="line">                您的浏览器不支持 Audio 标签。</span><br><span class="line">            <span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--第十二行--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>推荐一个视频:<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;320&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span></span><br><span class="line">                您的浏览器不支持 Video 标签。</span><br><span class="line">            <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>请选择你的爱好：<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;myhobby&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myhobby&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;运动&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span>&gt;</span>足球<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;电子&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;看电影&quot;</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;看电视&quot;</span>&gt;</span>看电视<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>第二次上机：</p><p><a href="!%5Bimg%5D(file:///C:%5CUsers%5C%EF%BF%BD%0F:%5CAppData%5CRoaming%5CTencent%5CQQTempSys%5B5UQ%5BBL(6~BS2JV6W%7DN6%5B%25S.png)https://github.com/JERRY-Z-J-R/I-love-you-3-thousand/blob/master/%E6%88%91%E7%88%B1%E4%BD%A0%EF%BC%8C%E4%B8%8D%E6%AD%A2%E4%B8%89%E5%8D%83%E9%81%8D/HTML%20CSS/9%E3%80%81%E3%80%90%E5%AD%A6%E6%88%90%E5%9C%A8%E7%BA%BF%E6%A1%88%E4%BE%8B%E3%80%91/%E3%80%90%E5%AD%A6%E6%88%90%E5%9C%A8%E7%BA%BF%E6%A1%88%E4%BE%8B%E3%80%91.md">戳这里</a></p><p>可以看一下这个 github上面的笔记</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> 上机 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> 上机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(未完成)springboot中aspect注解的使用</title>
      <link href="/2022/04/06/%5B%E5%BE%85%E5%AE%8C%E6%88%90%5Dspringboot%E4%B8%ADaspect%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/04/06/%5B%E5%BE%85%E5%AE%8C%E6%88%90%5Dspringboot%E4%B8%ADaspect%E6%B3%A8%E8%A7%A3%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>这里有个连接<a href="https://blog.csdn.net/u012326462/article/details/82529835">戳这里</a></p>]]></content>
      
      
      <categories>
          
          <category> aspect </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java枚举类详解</title>
      <link href="/2022/04/05/java%E6%9E%9A%E4%B8%BE%E7%B1%BB%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/04/05/java%E6%9E%9A%E4%B8%BE%E7%B1%BB%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="一、初始枚举"><a href="#一、初始枚举" class="headerlink" title="一、初始枚举"></a>一、初始枚举</h1><p>枚举类型是Java 5中新增特性的一部分，它是一种特殊的数据类型，之所以特殊是因为它既是一种类(class)类型却又比类类型多了些特殊的约束，但是这些约束的存在也造就了枚举类型的<strong>简洁性、安全性以及便捷性</strong>。下面先来看看什么是枚举？如何定义枚举？</p><h2 id="1、枚举的定义"><a href="#1、枚举的定义" class="headerlink" title="1、枚举的定义"></a>1、枚举的定义</h2><p>​    用类来枚举:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*使用普通方式定义日期常量</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DayDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MONDAY</span> <span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> TUESDAY=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> WEDNESDAY=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> THURSDAY=<span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> FRIDAY=<span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> SATURDAY=<span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> SUNDAY=<span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述的常量定义常量的方式称为int枚举模式，这样的定义方式并没有什么错，但它存在许多不足，如在类型安全和使用方便性上并没有多少好处，如果存在定义int值相同的变量，混淆的几率还是很大的，编译器也不会提出任何警告，因此这种方式在枚举出现后并不提倡，现在我们利用枚举类型来重新定义上述的常量，同时也感受一把枚举定义的方式，如下定义周一到周日的常量。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//枚举类型，使用关键字enum</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Day</span> &#123;</span><br><span class="line">    MONDAY, TUESDAY, WEDNESDAY,</span><br><span class="line">    THURSDAY, FRIDAY, SATURDAY, SUNDAY</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相当简洁，在定义枚举类型时我们使用的关键字是enum，与class关键字类似，只不过前者是定义枚举类型，后者是定义类类型。枚举类型Day中分别定义了从周一到周日的值，这里要注意，值一般是大写的字母，多个值之间以逗号分隔。同时我们应该知道的是枚举类型可以像类(class)类型一样，定义为一个单独的文件，当然也可以定义在其他类内部，更重要的是枚举常量在类型安全性和便捷性都很有保证，如果出现类型问题编译器也会提示我们改进，但务必记住枚举表示的类型其取值是必须有限的，也就是说每个值都是可以枚举出来的，比如上述描述的一周共有七天。那么该如何使用呢？如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="comment">//直接引用</span></span><br><span class="line">        <span class="type">Day</span> <span class="variable">day</span> <span class="operator">=</span>Day.MONDAY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义枚举类型</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Day</span> &#123;</span><br><span class="line">    MONDAY, TUESDAY, WEDNESDAY,</span><br><span class="line">    THURSDAY, FRIDAY, SATURDAY, SUNDAY</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2、枚举实现原理"><a href="#2、枚举实现原理" class="headerlink" title="2、枚举实现原理"></a>2、枚举实现原理</h2><p>我们大概了解了枚举类型的定义与简单使用后，现在有必要来了解一下枚举类型的基本实现原理。实际上在使用关键字enum创建枚举类型并编译后，编译器会为我们生成一个相关的类，这个类继承了Java API中的java.lang.Enum类，也就是说通过关键字enum创建枚举类型在编译后事实上也是一个类类型而且该类继承自java.lang.Enum类。</p><p>利用javac编译前面定义的EnumDemo.java文件后分别生成了Day.class和EnumDemo.class文件，而Day.class就是枚举类型，这也就验证前面所说的使用关键字enum定义枚举类型并编译后，编译器会自动帮助我们生成一个与枚举相关的类。我们再来看看<strong>反编译Day.class</strong>文件：</p><p>这个反编译</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反编译Day.class</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Day</span> <span class="keyword">extends</span> <span class="title class_">Enum</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//编译器为我们添加的静态的values()方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Day[] values()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (Day[])$VALUES.clone();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//编译器为我们添加的静态的valueOf()方法，注意间接调用了Enum也类的valueOf方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Day <span class="title function_">valueOf</span><span class="params">(String s)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> (Day)Enum.valueOf(com/feng/enumdemo/Day, s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//私有构造函数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Day</span><span class="params">(String s, <span class="type">int</span> i)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">super</span>(s, i);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//前面定义的7种枚举实例</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Day MONDAY;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Day TUESDAY;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Day WEDNESDAY;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Day THURSDAY;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Day FRIDAY;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Day SATURDAY;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Day SUNDAY;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Day $VALUES[];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> </span><br><span class="line">    &#123;    </span><br><span class="line">        <span class="comment">//实例化枚举实例</span></span><br><span class="line">        MONDAY = <span class="keyword">new</span> <span class="title class_">Day</span>(<span class="string">&quot;MONDAY&quot;</span>, <span class="number">0</span>);</span><br><span class="line">        TUESDAY = <span class="keyword">new</span> <span class="title class_">Day</span>(<span class="string">&quot;TUESDAY&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        WEDNESDAY = <span class="keyword">new</span> <span class="title class_">Day</span>(<span class="string">&quot;WEDNESDAY&quot;</span>, <span class="number">2</span>);</span><br><span class="line">        THURSDAY = <span class="keyword">new</span> <span class="title class_">Day</span>(<span class="string">&quot;THURSDAY&quot;</span>, <span class="number">3</span>);</span><br><span class="line">        FRIDAY = <span class="keyword">new</span> <span class="title class_">Day</span>(<span class="string">&quot;FRIDAY&quot;</span>, <span class="number">4</span>);</span><br><span class="line">        SATURDAY = <span class="keyword">new</span> <span class="title class_">Day</span>(<span class="string">&quot;SATURDAY&quot;</span>, <span class="number">5</span>);</span><br><span class="line">        SUNDAY = <span class="keyword">new</span> <span class="title class_">Day</span>(<span class="string">&quot;SUNDAY&quot;</span>, <span class="number">6</span>);</span><br><span class="line">        $VALUES = (<span class="keyword">new</span> <span class="title class_">Day</span>[] &#123;</span><br><span class="line">            MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>从反编译的代码可以看出编译器确实帮助我们生成了一个Day类(注意该类是final类型的，将无法被继承)而且该类继承自java.lang.Enum类，该类是一个抽象类(稍后我们会分析该类中的主要方法)，除此之外，编译器还帮助我们生成了7个Day类型的实例对象分别对应枚举中定义的7个日期，这也充分说明了我们前面使用关键字enum定义的Day类型中的每种日期枚举常量也是实实在在的Day实例对象，只不过代表的内容不一样而已。</p><p>注意编译器还为我们生成了两个静态方法，分别是**values()和 valueOf()**，稍后会分析它们的用法，到此我们也就明白了，使用关键字enum定义的枚举类型，在编译期后，也将转换成为一个实实在在的类，而在该类中，会存在每个在枚举类型中定义好变量的对应实例对象，如上述的MONDAY枚举类型对应<code>public static final Day MONDAY</code>;，同时编译器会为该类创建两个方法，分别是values()和valueOf()。</p><p>ok~，到此相信我们对枚举的实现原理也比较清晰，下面我们深入了解一下java.lang.Enum类以及values()和valueOf()的用途。</p><h2 id="3、枚举的常见方法"><a href="#3、枚举的常见方法" class="headerlink" title="3、枚举的常见方法"></a>3、枚举的常见方法</h2><p><strong>Enum抽象类常见方法</strong></p><p>Enum是所有 Java 语言枚举类型的公共基本类（注意Enum是抽象类），以下是它的常见方法：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220405161933965.png" alt="image-20220405161933965"></p><p>这里主要说明一下ordinal()方法，该方法获取的是枚举变量在枚举类中声明的顺序，下标从0开始，如日期中的MONDAY在第一个位置，那么MONDAY的ordinal值就是0，如果MONDAY的声明位置发生变化，那么ordinal方法获取到的值也随之变化，注意在大多数情况下我们都不应该首先使用该方法，毕竟它总是变幻莫测的。</p><p>compareTo(E o)方法则是比较枚举的大小，注意其内部实现是根据每个枚举的ordinal值大小进行比较的。name()方法与toString()几乎是等同的，都是输出变量的字符串形式。至于valueOf(Class enumType, String name)方法则是根据枚举类的Class对象和枚举名称获取枚举常量，注意该方法是静态的，后面在枚举单例时，我们还会详细分析该方法，下面的代码演示了上述方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumDemo</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建枚举数组</span></span><br><span class="line">        Day[] days=<span class="keyword">new</span> <span class="title class_">Day</span>[]&#123;Day.MONDAY, Day.TUESDAY, Day.WEDNESDAY,</span><br><span class="line">                Day.THURSDAY, Day.FRIDAY, Day.SATURDAY, Day.SUNDAY&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;days.length ; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;day[&quot;</span>+i+<span class="string">&quot;].ordinal():&quot;</span>+days[i].ordinal());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//通过compareTo方法比较,实际上其内部是通过ordinal()值比较的</span></span><br><span class="line">        System.out.println(<span class="string">&quot;days[0].compareTo(days[1]):&quot;</span>+days[<span class="number">0</span>].compareTo(days[<span class="number">1</span>]));</span><br><span class="line">        System.out.println(<span class="string">&quot;days[0].compareTo(days[1]):&quot;</span>+days[<span class="number">0</span>].compareTo(days[<span class="number">2</span>]));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取该枚举对象的Class对象引用,当然也可以通过getClass方法</span></span><br><span class="line">        Class&lt;?&gt; clazz = days[<span class="number">0</span>].getDeclaringClass();</span><br><span class="line">        System.out.println(<span class="string">&quot;clazz:&quot;</span>+clazz);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//name()</span></span><br><span class="line">        System.out.println(<span class="string">&quot;days[0].name():&quot;</span>+days[<span class="number">0</span>].name());</span><br><span class="line">        System.out.println(<span class="string">&quot;days[1].name():&quot;</span>+days[<span class="number">1</span>].name());</span><br><span class="line">        System.out.println(<span class="string">&quot;days[2].name():&quot;</span>+days[<span class="number">2</span>].name());</span><br><span class="line">        System.out.println(<span class="string">&quot;days[3].name():&quot;</span>+days[<span class="number">3</span>].name());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;days[0].toString():&quot;</span>+days[<span class="number">0</span>].toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;days[1].toString():&quot;</span>+days[<span class="number">1</span>].toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;days[2].toString():&quot;</span>+days[<span class="number">2</span>].toString());</span><br><span class="line">        System.out.println(<span class="string">&quot;days[3].toString():&quot;</span>+days[<span class="number">3</span>].toString());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Day d=Enum.valueOf(Day.class,days[<span class="number">0</span>].name());</span><br><span class="line">        Day d2=Day.valueOf(Day.class,days[<span class="number">0</span>].name());</span><br><span class="line">        System.out.println(<span class="string">&quot;d:&quot;</span>+d);</span><br><span class="line">        System.out.println(<span class="string">&quot;d2:&quot;</span>+d2);</span><br><span class="line">    &#125;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> 执行结果:</span></span><br><span class="line"><span class="comment">   day[0].ordinal():0</span></span><br><span class="line"><span class="comment">   day[1].ordinal():1</span></span><br><span class="line"><span class="comment">   day[2].ordinal():2</span></span><br><span class="line"><span class="comment">   day[3].ordinal():3</span></span><br><span class="line"><span class="comment">   day[4].ordinal():4</span></span><br><span class="line"><span class="comment">   day[5].ordinal():5</span></span><br><span class="line"><span class="comment">   day[6].ordinal():6</span></span><br><span class="line"><span class="comment">   -------------------------------------</span></span><br><span class="line"><span class="comment">   days[0].compareTo(days[1]):-1</span></span><br><span class="line"><span class="comment">   days[0].compareTo(days[1]):-2</span></span><br><span class="line"><span class="comment">   clazz:class com.zejian.enumdemo.Day</span></span><br><span class="line"><span class="comment">   -------------------------------------</span></span><br><span class="line"><span class="comment">   days[0].name():MONDAY</span></span><br><span class="line"><span class="comment">   days[1].name():TUESDAY</span></span><br><span class="line"><span class="comment">   days[2].name():WEDNESDAY</span></span><br><span class="line"><span class="comment">   days[3].name():THURSDAY</span></span><br><span class="line"><span class="comment">   -------------------------------------</span></span><br><span class="line"><span class="comment">   days[0].toString():MONDAY</span></span><br><span class="line"><span class="comment">   days[1].toString():TUESDAY</span></span><br><span class="line"><span class="comment">   days[2].toString():WEDNESDAY</span></span><br><span class="line"><span class="comment">   days[3].toString():THURSDAY</span></span><br><span class="line"><span class="comment">   -------------------------------------</span></span><br><span class="line"><span class="comment">   d:MONDAY</span></span><br><span class="line"><span class="comment">   d2:MONDAY</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Day</span> &#123;</span><br><span class="line">    MONDAY, TUESDAY, WEDNESDAY,</span><br><span class="line">    THURSDAY, FRIDAY, SATURDAY, SUNDAY</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>到此对于抽象类Enum类的基本内容就介绍完了，这里提醒大家一点，Enum类内部会有一个构造函数，该构造函数只能有编译器调用，我们是无法手动操作的，不妨看看Enum类的主要源码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现了Comparable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Enum</span>&lt;E <span class="keyword">extends</span> <span class="title class_">Enum</span>&lt;E&gt;&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;E&gt;, Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name; <span class="comment">//枚举字符串名称</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">name</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">int</span> ordinal;<span class="comment">//枚举顺序值</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">ordinal</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ordinal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//枚举的构造方法，只能由编译器调用</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">Enum</span><span class="params">(String name, <span class="type">int</span> ordinal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.ordinal = ordinal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object other)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>==other;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//比较的是ordinal值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(E o)</span> &#123;</span><br><span class="line">        Enum&lt;?&gt; other = (Enum&lt;?&gt;)o;</span><br><span class="line">        Enum&lt;E&gt; self = <span class="built_in">this</span>;</span><br><span class="line">        <span class="keyword">if</span> (self.getClass() != other.getClass() &amp;&amp; <span class="comment">// optimization</span></span><br><span class="line">            self.getDeclaringClass() != other.getDeclaringClass())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassCastException</span>();</span><br><span class="line">        <span class="keyword">return</span> self.ordinal - other.ordinal;<span class="comment">//根据ordinal值比较大小</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> Class&lt;E&gt; <span class="title function_">getDeclaringClass</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//获取class对象引用，getClass()是Object的方法</span></span><br><span class="line">        Class&lt;?&gt; clazz = getClass();</span><br><span class="line">        <span class="comment">//获取父类Class对象引用</span></span><br><span class="line">        Class&lt;?&gt; zuper = clazz.getSuperclass();</span><br><span class="line">        <span class="keyword">return</span> (zuper == Enum.class) ? (Class&lt;E&gt;)clazz : (Class&lt;E&gt;)zuper;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Enum</span>&lt;T&gt;&gt; T <span class="title function_">valueOf</span><span class="params">(Class&lt;T&gt; enumType,</span></span><br><span class="line"><span class="params">                                                String name)</span> &#123;</span><br><span class="line">        <span class="comment">//enumType.enumConstantDirectory()获取到的是一个map集合，key值就是name值，value则是枚举变量值   </span></span><br><span class="line">        <span class="comment">//enumConstantDirectory是class对象内部的方法，根据class对象获取一个map集合的值       </span></span><br><span class="line">        <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> enumType.enumConstantDirectory().get(name);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        <span class="keyword">if</span> (name == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;Name is null&quot;</span>);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">            <span class="string">&quot;No enum constant &quot;</span> + enumType.getCanonicalName() + <span class="string">&quot;.&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//.....省略其他没用的方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过Enum源码，可以知道，Enum实现了Comparable接口，这也是可以使用compareTo比较的原因，当然Enum构造函数也是存在的，该函数只能由编译器调用，毕竟我们只能使用enum关键字定义枚举，其他事情就放心交给编译器吧。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//由编译器调用</span></span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">Enum</span><span class="params">(String name, <span class="type">int</span> ordinal)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.ordinal = ordinal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>编译器生成的Values方法与ValueOf方法</strong></p><p>values()方法和valueOf(String name)方法是编译器生成的static方法，因此从前面的分析中，在Enum类中并没出现values()方法，但valueOf()方法还是有出现的，只不过编译器生成的valueOf()方法需传递一个name参数，而Enum自带的静态方法valueOf()则需要传递两个方法，从前面反编译后的代码可以看出，编译器生成的valueOf方法最终还是调用了Enum类的valueOf方法，下面通过代码来演示这两个方法的作用：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Day[] days2 = Day.values();</span><br><span class="line">System.out.println(<span class="string">&quot;day2:&quot;</span>+Arrays.toString(days2));</span><br><span class="line"><span class="type">Day</span> <span class="variable">day</span> <span class="operator">=</span> Day.valueOf(<span class="string">&quot;MONDAY&quot;</span>);</span><br><span class="line">System.out.println(<span class="string">&quot;day:&quot;</span>+day);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 输出结果:</span></span><br><span class="line"><span class="comment"> day2:[MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY]</span></span><br><span class="line"><span class="comment"> day:MONDAY</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>从结果可知道，<strong>values()方法的作用就是获取枚举类中的所有变量</strong>，并作为数组返回，而<strong>valueOf(String name)方法与Enum类中的valueOf方法的作用类似根据名称获取枚举变量</strong>，只不过编译器生成的valueOf方法更简洁些只需传递一个参数。这里我们还必须注意到，由于values()方法是由编译器插入到枚举类中的static方法，所以如果我们将枚举实例<strong>向上转型为Enum</strong>，那么values()方法将无法被调用，因为Enum类中并没有values()方法，valueOf()方法也是同样的道理，注意是一个参数的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//正常使用</span></span><br><span class="line">Day[] ds=Day.values();</span><br><span class="line"><span class="comment">//向上转型Enum</span></span><br><span class="line"><span class="type">Enum</span> <span class="variable">e</span> <span class="operator">=</span> Day.MONDAY;</span><br><span class="line"><span class="comment">//无法调用,没有此方法</span></span><br><span class="line"><span class="comment">//e.values();</span></span><br></pre></td></tr></table></figure><h1 id="二、枚举与Class对象"><a href="#二、枚举与Class对象" class="headerlink" title="二、枚举与Class对象"></a>二、枚举与Class对象</h1><p>上述我们提到当枚举实例向上转型为Enum类型后，values()方法将会失效，也就无法一次性获取所有枚举实例变量，但是由于Class对象的存在，即使不使用values()方法，还是有可能一次获取到所有枚举实例变量的，在Class对象中存在如下方法：<br><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/c5e6bea7ca9e4dad94b8f568f86396a6.png" alt="在这里插入图片描述"><br>因此通过getEnumConstants()方法，同样可以轻而易举地获取所有枚举实例变量下面通过代码来演示这个功能：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正常使用</span></span><br><span class="line">Day[] ds=Day.values();</span><br><span class="line"><span class="comment">//向上转型Enum</span></span><br><span class="line"><span class="type">Enum</span> <span class="variable">e</span> <span class="operator">=</span> Day.MONDAY;</span><br><span class="line"><span class="comment">//无法调用,没有此方法</span></span><br><span class="line"><span class="comment">//e.values();</span></span><br><span class="line"><span class="comment">//获取class对象引用</span></span><br><span class="line">Class&lt;?&gt; clasz = e.getDeclaringClass();</span><br><span class="line"><span class="keyword">if</span>(clasz.isEnum()) &#123;</span><br><span class="line">    Day[] dsz = (Day[]) clasz.getEnumConstants();</span><br><span class="line">    System.out.println(<span class="string">&quot;dsz:&quot;</span>+Arrays.toString(dsz));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   输出结果:</span></span><br><span class="line"><span class="comment">   dsz:[MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY]</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>正如上述代码所展示，通过Enum的class对象的getEnumConstants方法，我们仍能一次性获取所有的枚举实例常量。</p><h1 id="三、枚举与switch"><a href="#三、枚举与switch" class="headerlink" title="三、枚举与switch"></a>三、枚举与switch</h1><p>关于枚举与switch是个比较简单的话题，使用switch进行条件判断时，条件参数一般只能是整型，字符型。而枚举型确实也被switch所支持，在java 1.7后switch也对字符串进行了支持。这里我们简单看一下switch与枚举类型的使用：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Color</span> &#123;GREEN,RED,BLUE&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EnumDemo4</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printName</span><span class="params">(Color color)</span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (color)&#123;</span><br><span class="line">            <span class="keyword">case</span> BLUE: <span class="comment">//无需使用Color进行引用</span></span><br><span class="line">                System.out.println(<span class="string">&quot;蓝色&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RED:</span><br><span class="line">                System.out.println(<span class="string">&quot;红色&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> GREEN:</span><br><span class="line">                System.out.println(<span class="string">&quot;绿色&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        printName(Color.BLUE);</span><br><span class="line">        printName(Color.RED);</span><br><span class="line">        printName(Color.GREEN);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//蓝色</span></span><br><span class="line">        <span class="comment">//红色</span></span><br><span class="line">        <span class="comment">//绿色</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>需要注意的是使用在于switch条件进行结合使用时，无需使用Color引用。</p><h1 id="四、枚举进阶"><a href="#四、枚举进阶" class="headerlink" title="四、枚举进阶"></a>四、枚举进阶</h1><p>在前面的分析中，我们都是基于简单枚举类型的定义，也就是在定义枚举时只定义了枚举实例类型，并没定义方法或者成员变量，实际上使用关键字enum定义的枚举类，除了不能使用继承(因为编译器会自动为我们继承Enum抽象类而Java只支持单继承，因此枚举类是无法手动实现继承的)，可以把enum类当成常规类，也就是说我们可以向enum类中添加方法和变量，甚至是mian方法，下面就来感受一把。</p><h2 id="1、向enum类添加方法与自定义构造函数"><a href="#1、向enum类添加方法与自定义构造函数" class="headerlink" title="1、向enum类添加方法与自定义构造函数"></a>1、向enum类添加方法与自定义构造函数</h2><p>重新定义一个日期枚举类，带有desc成员变量描述该日期的对于中文描述，同时定义一个getDesc方法，返回中文描述内容，自定义私有构造函数，在声明枚举实例时传入对应的中文描述，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Day2</span> &#123;</span><br><span class="line">    MONDAY(<span class="string">&quot;星期一&quot;</span>),</span><br><span class="line">    TUESDAY(<span class="string">&quot;星期二&quot;</span>),</span><br><span class="line">    WEDNESDAY(<span class="string">&quot;星期三&quot;</span>),</span><br><span class="line">    THURSDAY(<span class="string">&quot;星期四&quot;</span>),</span><br><span class="line">    FRIDAY(<span class="string">&quot;星期五&quot;</span>),</span><br><span class="line">    SATURDAY(<span class="string">&quot;星期六&quot;</span>),</span><br><span class="line">    SUNDAY(<span class="string">&quot;星期日&quot;</span>);<span class="comment">//记住要用分号结束</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;<span class="comment">//中文描述</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有构造,防止被外部调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> desc</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Day2</span><span class="params">(String desc)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.desc=desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义方法,返回描述,跟常规类的定义没区别</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Day2 day:Day2.values()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;name:&quot;</span>+day.name()+</span><br><span class="line">                    <span class="string">&quot;,desc:&quot;</span>+day.getDesc());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     输出结果:</span></span><br><span class="line"><span class="comment">     name:MONDAY,desc:星期一</span></span><br><span class="line"><span class="comment">     name:TUESDAY,desc:星期二</span></span><br><span class="line"><span class="comment">     name:WEDNESDAY,desc:星期三</span></span><br><span class="line"><span class="comment">     name:THURSDAY,desc:星期四</span></span><br><span class="line"><span class="comment">     name:FRIDAY,desc:星期五</span></span><br><span class="line"><span class="comment">     name:SATURDAY,desc:星期六</span></span><br><span class="line"><span class="comment">     name:SUNDAY,desc:星期日</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面的例子就是, 开发中可能会常用到的枚举场景(这是博主在实验室一个项目中用到的工具类):</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.utils.result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 规定:</span></span><br><span class="line"><span class="comment"> * #1表示成功</span></span><br><span class="line"><span class="comment"> * #1001～1999 区间表示参数错误</span></span><br><span class="line"><span class="comment"> * #2001～2999 区间表示用户错误</span></span><br><span class="line"><span class="comment"> * #3001～3999 区间表示接口异常</span></span><br><span class="line"><span class="comment"> * 统一错误枚举类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 成功 */</span></span><br><span class="line">    SUCCESS(<span class="number">200</span>, <span class="string">&quot;成功&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 默认失败 */</span></span><br><span class="line">    COMMON_FAIL(<span class="number">999</span>, <span class="string">&quot;失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    CUSTOM_FAIL(<span class="number">9999</span>, <span class="string">&quot;自定义错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 参数错误：1000～1999 */</span></span><br><span class="line">    PARAM_NOT_VALID(<span class="number">1001</span>, <span class="string">&quot;参数无效&quot;</span>),</span><br><span class="line">    PARAM_IS_BLANK(<span class="number">1002</span>, <span class="string">&quot;参数为空&quot;</span>),</span><br><span class="line">    PARAM_TYPE_ERROR(<span class="number">1003</span>, <span class="string">&quot;参数类型错误&quot;</span>),</span><br><span class="line">    PARAM_NOT_COMPLETE(<span class="number">1004</span>, <span class="string">&quot;参数缺失&quot;</span>),</span><br><span class="line">    FAIL_COPY_PROPERTIES(<span class="number">1076</span>, <span class="string">&quot;创建对象失败或拷贝对象属性失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 微信小程序登录 */</span></span><br><span class="line">    WEI_XIN_CODE_ERROR(<span class="number">3001</span>, <span class="string">&quot;携带code向小程序请求失败&quot;</span>),</span><br><span class="line">    WEI_XIN_SKEY_VALID(<span class="number">3002</span>, <span class="string">&quot;skey无效&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 用户错误 */</span></span><br><span class="line">    USER_NOT_LOGIN(<span class="number">2001</span>, <span class="string">&quot;用户未登录&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_EXPIRED(<span class="number">2002</span>, <span class="string">&quot;账号已过期&quot;</span>),</span><br><span class="line">    USER_CREDENTIALS_ERROR(<span class="number">2003</span>, <span class="string">&quot;密码错误&quot;</span>),</span><br><span class="line">    USER_CREDENTIALS_EXPIRED(<span class="number">2004</span>, <span class="string">&quot;密码过期&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_DISABLE(<span class="number">2005</span>, <span class="string">&quot;账号不可用&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_LOCKED(<span class="number">2006</span>, <span class="string">&quot;账号被锁定&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_NOT_EXIST(<span class="number">2007</span>, <span class="string">&quot;账号不存在&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_ALREADY_EXIST(<span class="number">2008</span>, <span class="string">&quot;账号已存在&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_USE_BY_OTHERS(<span class="number">2009</span>, <span class="string">&quot;账号下线&quot;</span>),</span><br><span class="line">    USER_IS_EMPTY(<span class="number">2010</span>, <span class="string">&quot;用户为空&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Token错误*/</span></span><br><span class="line">    TOKEN_EXPIRED(<span class="number">4001</span>, <span class="string">&quot;登陆信息过期&quot;</span>),</span><br><span class="line">    TOKEN_ERROR(<span class="number">4002</span>, <span class="string">&quot;信息被更改,请重新登陆&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 业务错误 */</span></span><br><span class="line">    NO_PERMISSION(<span class="number">5001</span>, <span class="string">&quot;没有权限&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*订单错误*/</span></span><br><span class="line">    EXISTED_ORDER(<span class="number">6001</span>, <span class="string">&quot;该商品的订单已存在，请支付或取消后再重新下单&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*商品错误*/</span></span><br><span class="line">    EXISTED_GOOD(<span class="number">7001</span>, <span class="string">&quot;已存在该商品&quot;</span>),</span><br><span class="line">    EXISTED_GOOD_INCART(<span class="number">7002</span>,<span class="string">&quot;购物车中已经存在该商品&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*招投标错误*/</span></span><br><span class="line">    EXISTED_SUBMISSION(<span class="number">8001</span>,<span class="string">&quot;已经存在该投标了&quot;</span>),</span><br><span class="line">    EXISTED_INVITATION(<span class="number">8002</span>,<span class="string">&quot;已经存在该招标了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定一个构造方法</span></span><br><span class="line">    ResultCode(Integer code, String message) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//get方法</span></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//set方法</span></span><br><span class="line">    <span class="keyword">public</span> ResultCode <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResultCode <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据code获取message</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 状态码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMessageByCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (ResultCode ele : values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ele.getCode().equals(code)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ele.getMessage();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述代码可知，在enum类中确实可以像定义常规类一样声明变量或者成员方法。但是我们必须注意到，如果打算在enum类中定义方法，务必在声明完枚举实例后使用分号分开，倘若在枚举实例前定义任何方法，编译器都将会报错，无法编译通过，同时即使自定义了构造函数且enum的定义结束，我<strong>们也永远无法手动调用构造函数创建枚举实例</strong>，毕竟这事只能由编译器执行。</p><h2 id="2、覆盖enum类方法-就是override"><a href="#2、覆盖enum类方法-就是override" class="headerlink" title="2、覆盖enum类方法,就是override"></a>2、覆盖enum类方法,就是override</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Day2</span> &#123;</span><br><span class="line">    MONDAY(<span class="string">&quot;星期一&quot;</span>),</span><br><span class="line">    TUESDAY(<span class="string">&quot;星期二&quot;</span>),</span><br><span class="line">    WEDNESDAY(<span class="string">&quot;星期三&quot;</span>),</span><br><span class="line">    THURSDAY(<span class="string">&quot;星期四&quot;</span>),</span><br><span class="line">    FRIDAY(<span class="string">&quot;星期五&quot;</span>),</span><br><span class="line">    SATURDAY(<span class="string">&quot;星期六&quot;</span>),</span><br><span class="line">    SUNDAY(<span class="string">&quot;星期日&quot;</span>);<span class="comment">//记住要用分号结束</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String desc;<span class="comment">//中文描述</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 私有构造,防止被外部调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> desc</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Day2</span><span class="params">(String desc)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.desc=desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 覆盖</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Day2 day:Day2.values()) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;name:&quot;</span>+day.name()+</span><br><span class="line">                    <span class="string">&quot;,desc:&quot;</span>+day.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     输出结果:</span></span><br><span class="line"><span class="comment">     name:MONDAY,desc:星期一</span></span><br><span class="line"><span class="comment">     name:TUESDAY,desc:星期二</span></span><br><span class="line"><span class="comment">     name:WEDNESDAY,desc:星期三</span></span><br><span class="line"><span class="comment">     name:THURSDAY,desc:星期四</span></span><br><span class="line"><span class="comment">     name:FRIDAY,desc:星期五</span></span><br><span class="line"><span class="comment">     name:SATURDAY,desc:星期六</span></span><br><span class="line"><span class="comment">     name:SUNDAY,desc:星期日</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3、enum类中定义抽象方法"><a href="#3、enum类中定义抽象方法" class="headerlink" title="3、enum类中定义抽象方法"></a>3、enum类中定义抽象方法</h2><p>与常规抽象类一样，enum类允许我们为其定义抽象方法，然后使每个枚举实例都实现该方法，以便产生不同的行为方式，注意abstract关键字对于枚举类来说并不是必须的如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumDemo3</span> &#123;</span><br><span class="line"></span><br><span class="line">    FIRST&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;FIRST TIME&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    SECOND&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;SECOND TIME&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义抽象方法, 这个抽象方法会被上面的几个enum实例给重写;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getInfo</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;F:&quot;</span>+EnumDemo3.FIRST.getInfo());</span><br><span class="line">        System.out.println(<span class="string">&quot;S:&quot;</span>+EnumDemo3.SECOND.getInfo());</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         输出结果:</span></span><br><span class="line"><span class="comment">         F:FIRST TIME</span></span><br><span class="line"><span class="comment">         S:SECOND TIME</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过这种方式就可以轻而易举地定义每个枚举实例的不同行为方式。我们可能注意到，enum类的实例似乎表现出了多态的特性，可惜的是枚举类型的实例终究不能作为类型传递使用，就像下面的使用方式，编译器是不可能答应的：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//无法通过编译,毕竟EnumDemo3.FIRST是个实例对象</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">text</span><span class="params">(EnumDemo3.FIRST instance)</span>&#123; &#125;</span><br></pre></td></tr></table></figure><p>感觉到枚举的流弊, 它就好像是将实例和类放在一个类中</p><h2 id="4、enum类与接口"><a href="#4、enum类与接口" class="headerlink" title="4、enum类与接口"></a>4、enum类与接口</h2><p>由于Java单继承的原因，enum类并不能再继承其它类，但并不妨碍它实现接口，因此enum类同样是可以实现多接口的，如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">food</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">sport</span>&#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">EnumDemo2</span> <span class="keyword">implements</span> <span class="title class_">food</span> ,sport&#123;</span><br><span class="line">    FOOD,</span><br><span class="line">    SPORT,</span><br><span class="line">    ; <span class="comment">//分号分隔</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;eat.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;run.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>有时候，我们可能需要对一组数据进行分类，比如进行食物菜单分类而且希望这些菜单都属于food类型，appetizer(开胃菜)、mainCourse(主菜)、dessert(点心)、Coffee等，每种分类下有多种具体的菜式或食品，此时可以利用接口来组织，如下(代码引用自Thinking in Java)：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">  <span class="keyword">enum</span> <span class="title class_">Appetizer</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    SALAD, SOUP, SPRING_ROLLS;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">enum</span> <span class="title class_">MainCourse</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    LASAGNE, BURRITO, PAD_THAI,</span><br><span class="line">    LENTILS, HUMMOUS, VINDALOO;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">enum</span> <span class="title class_">Dessert</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    TIRAMISU, GELATO, BLACK_FOREST_CAKE,</span><br><span class="line">    FRUIT, CREME_CARAMEL;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">enum</span> <span class="title class_">Coffee</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    BLACK_COFFEE, DECAF_COFFEE, ESPRESSO,</span><br><span class="line">    LATTE, CAPPUCCINO, TEA, HERB_TEA;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TypeOfFood</span> &#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Food</span> <span class="variable">food</span> <span class="operator">=</span> Appetizer.SALAD;</span><br><span class="line">    food = MainCourse.LASAGNE;</span><br><span class="line">    food = Dessert.GELATO;</span><br><span class="line">    food = Coffee.CAPPUCCINO;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>好屌</p><p>通过这种方式可以很方便组织上述的情景，同时确保每种具体类型的食物也属于Food，现在我们利用一个枚举嵌套枚举的方式，把前面定义的菜谱存放到一个Meal菜单中，通过这种方式就可以统一管理菜单的数据了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Meal</span>&#123;</span><br><span class="line">  APPETIZER(Food.Appetizer.class),</span><br><span class="line">  MAINCOURSE(Food.MainCourse.class),</span><br><span class="line">  DESSERT(Food.Dessert.class),</span><br><span class="line">  COFFEE(Food.Coffee.class);</span><br><span class="line">  <span class="keyword">private</span> Food[] values;</span><br><span class="line">  <span class="keyword">private</span> <span class="title function_">Meal</span><span class="params">(Class&lt;? extends Food&gt; kind)</span> &#123;</span><br><span class="line">    <span class="comment">//通过class对象获取枚举实例</span></span><br><span class="line">    <span class="comment">//枚举实例就是上面那四个</span></span><br><span class="line">    values = kind.getEnumConstants();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Appetizer</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">      SALAD, SOUP, SPRING_ROLLS;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">MainCourse</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">      LASAGNE, BURRITO, PAD_THAI,</span><br><span class="line">      LENTILS, HUMMOUS, VINDALOO;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Dessert</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">      TIRAMISU, GELATO, BLACK_FOREST_CAKE,</span><br><span class="line">      FRUIT, CREME_CARAMEL;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">enum</span> <span class="title class_">Coffee</span> <span class="keyword">implements</span> <span class="title class_">Food</span> &#123;</span><br><span class="line">      BLACK_COFFEE, DECAF_COFFEE, ESPRESSO,</span><br><span class="line">      LATTE, CAPPUCCINO, TEA, HERB_TEA;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h1 id="五、枚举与单例模式"><a href="#五、枚举与单例模式" class="headerlink" title="五、枚举与单例模式"></a>五、枚举与单例模式</h1><p>单例模式可以说是最常使用的设计模式了，它的作用是确保某个类只有一个实例，自行实例化并向整个系统提供这个实例。在实际应用中，线程池、缓存、日志对象、对话框对象常被设计成单例，总之，<strong>选择单例模式就是为了避免不一致状态</strong>，下面我们将会简单说明单例模式的几种主要编写方式，从而对比出使用枚举实现单例模式的优点。首先看看饿汉式的单例模式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//饿汉式（基于classloder机制避免了多线程的同步问题）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonHungry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SingletonHungry</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingletonHungry</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingletonHungry</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonHungry <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然这种写法比较简单，但问题是无法做到延迟创建对象，事实上如果该单例类涉及资源较多，创建比较耗时间时，我们更希望它可以尽可能地延迟加载，从而减小初始化的负载，于是便有了如下的懒汉式单例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">//懒汉式单例模式（适合多线程安全）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonLazy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SingletonLazy instance;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingletonLazy</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> SingletonLazy <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">SingletonLazy</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法能够在多线程中很好的工作避免同步问题，同时也具备lazy loading机制，遗憾的是，由于synchronized的存在，效率很低，在单线程的情景下，完全可以去掉synchronized，为了兼顾效率与性能问题，改进后代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="type">Singleton</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getSingleton</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class)&#123;</span><br><span class="line">                <span class="keyword">if</span>(singleton == <span class="literal">null</span>)&#123;</span><br><span class="line">                    singleton = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种编写方式被称为“双重检查锁”，主要在getSingleton()方法中，进行两次null检查。这样可以极大提升并发度，进而提升性能。毕竟在单例中new的情况非常少，绝大多数都是可以并行的读操作，因此在加锁前多进行一次null检查就可以减少绝大多数的加锁操作，也就提高了执行效率。但是必须注意的是volatile关键字，该关键字有两层语义。第一层语义是可见性，可见性是指在一个线程中对该变量的修改会马上由工作内存（Work Memory）写回主内存（Main Memory），所以其它线程会马上读取到已修改的值，关于工作内存和主内存可简单理解为高速缓存（直接与CPU打交道）和主存（日常所说的内存条），注意工作内存是线程独享的，主存是线程共享的。volatile的第二层语义是禁止指令重排序优化，我们写的代码（特别是多线程代码），由于编译器优化，在实际执行的时候可能与我们编写的顺序不同。编译器只保证程序执行结果与源代码相同，却不保证实际指令的顺序与源代码相同，这在单线程并没什么问题，然而一旦引入多线程环境，这种乱序就可能导致严重问题。volatile关键字就可以从语义上解决这个问题，值得关注的是volatile的禁止指令重排序优化功能在Java 1.5后才得以实现，因此1.5前的版本仍然是不安全的，即使使用了volatile关键字。或许我们可以利用静态内部类来实现更安全的机制，静态内部类单例模式如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingletonInner</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Holder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">SingletonInner</span> <span class="variable">singleton</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SingletonInner</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SingletonInner</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SingletonInner <span class="title function_">getSingleton</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Holder.singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正如上述代码所展示的，我们把Singleton实例放到一个静态内部类中，这样可以避免了静态实例在Singleton类的加载阶段就创建对象，毕竟静态变量初始化是在SingletonInner类初始化时触发的，并且由于静态内部类只会被加载一次，所以这种写法也是线程安全的。从上述4种单例模式的写法中，似乎也解决了效率与懒加载的问题，但是它们都有两个共同的缺点：</p><p>序列化可能会破坏单例模式，比较每次反序列化一个序列化的对象实例时都会创建一个新的实例，解决方案如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试例子(四种写解决方式雷同)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;     </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();     </span><br><span class="line"></span><br><span class="line">   <span class="keyword">protected</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;     </span><br><span class="line">   &#125;  </span><br><span class="line"></span><br><span class="line">   <span class="comment">//反序列时直接返回当前INSTANCE</span></span><br><span class="line">   <span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;     </span><br><span class="line">            <span class="keyword">return</span> INSTANCE;     </span><br><span class="line">      &#125;    </span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure><p>使用反射强行调用私有构造器，解决方式可以修改构造器，让它在创建第二个实例的时候抛异常，如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();     </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span>  <span class="type">boolean</span>  <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">    flag = <span class="literal">false</span>;   </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;The instance  already exists ！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上所述，问题确实也得到了解决，但问题是我们为此付出了不少努力，即添加了不少代码，还应该注意到如果单例类维持了其他对象的状态时还需要使他们成为transient的对象，这种就更复杂了，那有没有更简单更高效的呢？当然是有的，那就是枚举单例了，先来看看如何实现：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//枚举单利</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  <span class="title class_">SingletonEnum</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码相当简洁，我们也可以像常规类一样编写enum类，为其添加变量和方法，访问方式也更简单，使用SingletonEnum.INSTANCE进行访问，这样也就避免调用getInstance方法，更重要的是使用枚举单例的写法，我们完全不用考虑序列化和反射的问题。枚举序列化是由jvm保证的，每一个枚举类型和定义的枚举变量在JVM中都是唯一的，在枚举类型的序列化和反序列化上，Java做了特殊的规定：在序列化时Java仅仅是将枚举对象的name属性输出到结果中，反序列化的时候则是通过java.lang.Enum的valueOf方法来根据名字查找枚举对象。同时，编译器是不允许任何对这种序列化机制的定制的并禁用了writeObject、readObject、readObjectNoData、writeReplace和readResolve等方法，从而保证了枚举实例的唯一性，这里我们不妨再次看看Enum类的valueOf方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;T <span class="keyword">extends</span> <span class="title class_">Enum</span>&lt;T&gt;&gt; T <span class="title function_">valueOf</span><span class="params">(Class&lt;T&gt; enumType,</span></span><br><span class="line"><span class="params">                                              String name)</span> &#123;</span><br><span class="line">      <span class="type">T</span> <span class="variable">result</span> <span class="operator">=</span> enumType.enumConstantDirectory().get(name);</span><br><span class="line">      <span class="keyword">if</span> (result != <span class="literal">null</span>)</span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">      <span class="keyword">if</span> (name == <span class="literal">null</span>)</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;Name is null&quot;</span>);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">          <span class="string">&quot;No enum constant &quot;</span> + enumType.getCanonicalName() + <span class="string">&quot;.&quot;</span> + name);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>实际上通过调用enumType(Class对象的引用)的enumConstantDirectory方法获取到的是一个Map集合，在该集合中存放了以枚举name为key和以枚举实例变量为value的Key&amp;Value数据，因此通过name的值就可以获取到枚举实例，看看enumConstantDirectory方法源码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, T&gt; <span class="title function_">enumConstantDirectory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (enumConstantDirectory == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//getEnumConstantsShared最终通过反射调用枚举类的values方法</span></span><br><span class="line">            T[] universe = getEnumConstantsShared();</span><br><span class="line">            <span class="keyword">if</span> (universe == <span class="literal">null</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                    getName() + <span class="string">&quot; is not an enum type&quot;</span>);</span><br><span class="line">            Map&lt;String, T&gt; m = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;(<span class="number">2</span> * universe.length);</span><br><span class="line">            <span class="comment">//map存放了当前enum类的所有枚举实例变量，以name为key值</span></span><br><span class="line">            <span class="keyword">for</span> (T constant : universe)</span><br><span class="line">                m.put(((Enum&lt;?&gt;)constant).name(), constant);</span><br><span class="line">            enumConstantDirectory = m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> enumConstantDirectory;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">transient</span> Map&lt;String, T&gt; enumConstantDirectory = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><p>到这里我们也就可以看出枚举序列化确实不会重新创建新实例，jvm保证了每个枚举实例变量的唯一性。再来看看反射到底能不能创建枚举，下面试图通过反射获取构造器并创建枚举:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IllegalAccessException, InvocationTargetException, InstantiationException, NoSuchMethodException &#123;</span><br><span class="line">  <span class="comment">//获取枚举类的构造函数(前面的源码已分析过)</span></span><br><span class="line">   Constructor&lt;SingletonEnum&gt; constructor=SingletonEnum.class.getDeclaredConstructor(String.class,<span class="type">int</span>.class);</span><br><span class="line">   constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">   <span class="comment">//创建枚举</span></span><br><span class="line">   SingletonEnum singleton=constructor.newInstance(<span class="string">&quot;otherInstance&quot;</span>,<span class="number">9</span>);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>执行报错:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.IllegalArgumentException: Cannot reflectively create <span class="keyword">enum</span> <span class="title class_">objects</span></span><br><span class="line">    at java.lang.reflect.Constructor.newInstance(Constructor.java:<span class="number">417</span>)</span><br><span class="line">    at zejian.SingletonEnum.main(SingletonEnum.java:<span class="number">38</span>)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:<span class="number">62</span>)</span><br><span class="line">    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:<span class="number">43</span>)</span><br><span class="line">    at java.lang.reflect.Method.invoke(Method.java:<span class="number">498</span>)</span><br><span class="line">    at com.intellij.rt.execution.application.AppMain.main(AppMain.java:<span class="number">144</span>)</span><br></pre></td></tr></table></figure><p>显然告诉我们不能使用反射创建枚举类，这是为什么呢？不妨看看newInstance方法源码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">newInstance</span><span class="params">(Object ... initargs)</span></span><br><span class="line">       <span class="keyword">throws</span> InstantiationException, IllegalAccessException,</span><br><span class="line">              IllegalArgumentException, InvocationTargetException</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span> (!override) &#123;</span><br><span class="line">           <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class="line">               Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">               checkAccess(caller, clazz, <span class="literal">null</span>, modifiers);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//这里判断Modifier.ENUM是不是枚举修饰符，如果是就抛异常</span></span><br><span class="line">       <span class="keyword">if</span> ((clazz.getModifiers() &amp; Modifier.ENUM) != <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Cannot reflectively create enum objects&quot;</span>);</span><br><span class="line">       <span class="type">ConstructorAccessor</span> <span class="variable">ca</span> <span class="operator">=</span> constructorAccessor;   <span class="comment">// read volatile</span></span><br><span class="line">       <span class="keyword">if</span> (ca == <span class="literal">null</span>) &#123;</span><br><span class="line">           ca = acquireConstructorAccessor();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">       <span class="type">T</span> <span class="variable">inst</span> <span class="operator">=</span> (T) ca.newInstance(initargs);</span><br><span class="line">       <span class="keyword">return</span> inst;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>源码很了然，确实无法使用反射创建枚举实例，也就是说明了创建枚举实例只有编译器能够做到而已。显然枚举单例模式确实是很不错的选择，因此我们推荐使用它。但是这总不是万能的，对于android平台这个可能未必是最好的选择，在android开发中，内存优化是个大块头，而使用枚举时占用的内存常常是静态变量的两倍还多，因此android官方在内存优化方面给出的建议是尽量避免在android中使用enum。但是不管如何，关于单例，我们总是应该记住：线程安全，延迟加载，序列化与反序列化安全，反射安全是很重重要的。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java枚举类 </tag>
            
            <tag> 详解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生活在成都的真实生活状态是怎么样的?</title>
      <link href="/2022/04/05/%E5%88%AB%E4%BA%BA%E7%BB%99%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%BB%BA%E8%AE%AE/"/>
      <url>/2022/04/05/%E5%88%AB%E4%BA%BA%E7%BB%99%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%BB%BA%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<p>来自知乎的一篇文章<a href="https://www.zhihu.com/question/410535427/answer/2398745363?utm_source=qq&utm_medium=social&utm_oi=1130057001182621696">戳这里</a></p><p>他给的一些经验总结:</p><h2 id="总结十条经验："><a href="#总结十条经验：" class="headerlink" title="总结十条经验："></a>总结十条经验：</h2><h3 id="1、读书仍然是最好的出路。"><a href="#1、读书仍然是最好的出路。" class="headerlink" title="1、读书仍然是最好的出路。"></a>1、读书仍然是最好的出路。</h3><p>学历决定平台。</p><p>能上清北，直接跨阶层。985或211能保本，本科能保证基本生活，专科以下基本上翻盘无望。</p><h3 id="2、学会错位竞争。"><a href="#2、学会错位竞争。" class="headerlink" title="2、学会错位竞争。"></a>2、学会错位竞争。</h3><p>和城里孩子比学习，比音乐文艺一般都比不过，毕竟人家父母花了钱去培训。</p><p>但你可以比体能，从小山里长大，只要不是天天像肥宅躺在家里，身体基础就要好些。</p><p>进城以后，马上学篮球足球，体能搞好，人生长得很。</p><h3 id="3、不要怕麻烦别人。"><a href="#3、不要怕麻烦别人。" class="headerlink" title="3、不要怕麻烦别人。"></a>3、不要怕麻烦别人。</h3><p>农村父母最怕给别人添麻烦，稍微一点小事都不敢麻烦别人，怕别人看不起自己。<a href="https://www.zhihu.com/search?q=%E5%86%9C%E8%80%95%E6%97%B6%E4%BB%A3&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2398745363%7D">农耕时代</a>自给自足这样搞，可以。</p><p>但是，现在是市场经济，每个人都不能自给自足，都有信息盲区。</p><p>遇到重要的事情，不要只听父母的，找到身边清醒的成功人士，谦虚地询问，一般都愿意指点一二。</p><p>不然被充满爱意但无知的亲戚，引上歪路就狗一辈子了。</p><h3 id="4、先图吃饱再想吃好。"><a href="#4、先图吃饱再想吃好。" class="headerlink" title="4、先图吃饱再想吃好。"></a>4、先图吃饱再想吃好。</h3><p>农村孩子通常经济资源非常少，像刘强东这样的，百万分之一，加上时代风口才来的。</p><p>不管学习成绩多好，要把自己看成普通人，先整个保本能稳定吃饭的地方，慢慢吃饱了才有力气博时运。</p><p>我成绩很不错，高考大省省排50，也先选垄断性央企、政府机关和教师医生这些职业。</p><p>不是我干不下互联网金融风口行业，是我明白只有我稳定了，家庭才能稳定，才能稳定择偶，给下一代机会。</p><h3 id="5、警察是男生性价比最高的职业。"><a href="#5、警察是男生性价比最高的职业。" class="headerlink" title="5、警察是男生性价比最高的职业。"></a>5、警察是男生性价比最高的职业。</h3><p>警察的特点是任务重，收入高于当地公务员，直面群众，文武兼修。</p><p><strong>非常适合普通农村男孩子。</strong></p><p><strong>任务重，导致一般稍微富裕点的孩子都不愿意去，而农村娃最不怕就是日晒雨淋。</strong></p><p><a href="https://www.zhihu.com/search?q=%E6%96%87%E6%AD%A6%E5%85%BC%E4%BF%AE&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2398745363%7D">文武兼修</a>，导致同等条件下，对文化成绩要求低，一般市局要双一流，对应的警察入口双非本科。</p><p>直面群众，一般在农村长大的，都经历过村里的各种矛盾，很能明白基层矛盾的实际，少了书生气，开展工作更容易。</p><p>另外，择偶优势。警服加上长期体训，同等条件下，对女生的吸引力很大。</p><p>而且相对于军校路线，警察一般都能在家人附近。</p><h3 id="6、身体和心态是最重要本钱。"><a href="#6、身体和心态是最重要本钱。" class="headerlink" title="6、身体和心态是最重要本钱。"></a>6、身体和心态是最重要本钱。</h3><p>人生路很长，不要因为一时的困境，放弃拼搏。</p><p><strong>更不能因为突然的崛起，放弃了良好的心态。</strong></p><p>很多贫困孩子走出来到了一定阶段，就放松了，就觉得满足了。跟着大流，吃吃喝喝，放弃学习拼搏，温水青蛙以后就再无向上的可能性。</p><h3 id="7、保持自尊自爱的人格。"><a href="#7、保持自尊自爱的人格。" class="headerlink" title="7、保持自尊自爱的人格。"></a>7、保持自尊自爱的人格。</h3><p>不因为别人财富多少和地位高低，而改变自己的态度。 很不喜欢对上跪舔，对下傲慢的人。 保持自己独立的人格，与人交往，最核心是看人格。<br>在物质横流，部分人有几代人积累的情况下，穷人家的孩子，最难的就是<a href="https://www.zhihu.com/search?q=%E5%90%83%E8%8B%A6%E8%80%90%E5%8A%B3&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2398745363%7D">吃苦耐劳</a>和坚韧不拔的品格。一定要把最宝贵的东西守护好，最容易被大部分人认同。</p><p>总结了<strong>十条与人交往的经验之谈：</strong></p><p><strong>对上级的领导，要真尊敬不谄媚。</strong><br><strong>对年长的同事，要多咨询不傲慢。</strong><br><strong>对年轻的同事，要真关爱不苛求。</strong></p><p><strong>对农村的父母，要善沟通不<a href="https://www.zhihu.com/search?q=%E6%84%9A%E5%AD%9D&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2398745363%7D">愚孝</a>。</strong><br><strong>对多嘴的亲朋，要多善辨不争执。</strong><br><strong>对失意的兄弟，要多鼓励少冷漠。</strong></p><p><strong>对得意的朋友，要善提醒不跪舔。</strong><br><strong>对业务的下级，要多体谅不甩锅。</strong></p><p><strong>对偏执的群众，要多沟通不嫌弃。</strong><br><strong>对联系的企业，要善帮助不违规。</strong></p><h2 id="关于汇报："><a href="#关于汇报：" class="headerlink" title="关于汇报："></a>关于汇报：</h2><p>从事工作中，很大一部分都需要汇报。既有对上级的汇报，也有要求下级的汇报。</p><p><strong>在体制内工作，能够做好汇报，是一门技术。</strong></p><ol><li><strong>在合适的时机汇报合适的事情，在合适的时候表明正确的态度。</strong></li><li><strong>在上级可能存在信息盲区的时候，及时提醒信息盲点。</strong></li><li><strong>重要而不紧急的事情，形成完备方案后进行汇报。</strong></li><li><strong>急迫但不重要的事情，得到信息第一时间进行汇报。</strong></li><li><strong>敏感而隐私的需求，反复斟酌选择最难拒绝的时机进行汇报。</strong></li><li><strong>极端情况下的越级汇报，一定要反复多次思考再进行！</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 人生 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单理解java注解</title>
      <link href="/2022/04/05/java%E6%B3%A8%E8%A7%A3%E8%AF%A6%E8%A7%A3/"/>
      <url>/2022/04/05/java%E6%B3%A8%E8%A7%A3%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>Annotation 中文译过来就是注解、标释的意思，在 Java 中注解是一个很重要的知识点，但经常还是有点让新手不容易理解。<del>老手有时候也不知道</del></p><p><strong>初学者可以这样理解注解：想像代码具有生命，注解就是对于代码中某些鲜活个体的贴上去的一张标签。简化来讲，注解如同一张标签。</strong></p><p>在未开始学习任何注解具体语法而言，你可以把注解看成一张标签。这有助于你快速地理解它的大致作用。如果初学者在学习过程有大脑放空的时候，请不要慌张，对自己说：</p><p>注解，标签。注解，标签。</p><h2 id="注解语法"><a href="#注解语法" class="headerlink" title="注解语法"></a><strong>注解语法</strong></h2><p>因为平常开发少见，相信有不少的人员会认为注解的地位不高。其实同 classs 和 interface 一样，注解也属于一种类型。它是在 Java SE 5.0 版本中开始引入的概念。</p><p>注解通过 @interface 关键字进行定义:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TestAnnotation &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解的应用"><a href="#注解的应用" class="headerlink" title="注解的应用"></a><strong>注解的应用</strong></h2><p>上面创建了一个注解，那么注解的的使用方法是什么呢。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TestAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建一个类 Test,然后在类定义的地方加上<code>@TestAnnotation</code>就可以用 <code>TestAnnotation</code> 注解这个类了。</p><p>你可以简单理解为将<code> TestAnnotation</code> 这张标签贴到 Test 这个类上面。</p><p>不过，要想注解能够正常工作，还需要介绍一下一个新的概念那就是<strong>元注解</strong>。</p><h2 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a><strong>元注解</strong></h2><p>元注解是什么意思呢？</p><p>元注解是可以注解到注解上的注解，或者说元注解是一种基本注解，但是它能够应用到其它的注解上面。</p><p>如果难于理解的话，你可以这样理解。元注解也是一张标签，但是它是一张特殊的标签，它的作用和目的就是给其他普通的标签进行解释说明的。</p><p>元标签有 <strong>@Retention、@Documented、@Target、@Inherited、@Repeatable</strong> 5 种。</p><h4 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a><strong>@Retention</strong></h4><p>Retention 的英文意为保留期的意思。当 @Retention 应用到一个注解上的时候，它解释说明了这个注解的的存活时间。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">RetentionPolicy.SOURCE 注解只在源码阶段保留，在编译器进行编译时它将被丢弃忽视。</span><br><span class="line">RetentionPolicy.CLASS 注解只被保留到编译进行的时候，它并不会被加载到 JVM 中。</span><br><span class="line">RetentionPolicy.RUNTIME 注解可以保留到程序运行的时候，它会被加载进入到 JVM 中，所以在程序运行时可以获取到它们。</span><br></pre></td></tr></table></figure><h4 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a><strong>@Documented</strong></h4><p>顾名思义，这个元注解肯定是和文档有关。它的作用是能够将注解中的元素包含到 Javadoc 中去。</p><h4 id="Target"><a href="#Target" class="headerlink" title="@Target"></a><strong>@Target</strong></h4><p>Target 是目标的意思，@Target 指定了注解运用的地方。</p><p>你可以这样理解，当一个注解被 @Target 注解时，这个注解就被限定了运用的场景。</p><p>类比到标签，原本标签是你想张贴到哪个地方就到哪个地方，但是因为 @Target 的存在，它张贴的地方就非常具体了，比如只能张贴到方法上、类上、方法参数上等等。@Target 有下面的取值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ElementType.ANNOTATION_TYPE 可以给一个注解进行注解</span><br><span class="line">ElementType.CONSTRUCTOR 可以给构造方法进行注解</span><br><span class="line">ElementType.FIELD 可以给属性进行注解</span><br><span class="line">ElementType.LOCAL_VARIABLE 可以给局部变量进行注解</span><br><span class="line">ElementType.METHOD 可以给方法进行注解</span><br><span class="line">ElementType.PACKAGE 可以给一个包进行注解</span><br><span class="line">ElementType.PARAMETER 可以给一个方法内的参数进行注解</span><br><span class="line">ElementType.TYPE 可以给一个类型进行注解，比如类、接口、枚举</span><br></pre></td></tr></table></figure><h4 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a><strong>@Inherited</strong></h4><p>Inherited 是继承的意思，但是它并不是说注解本身可以继承，而是说如果一个超类被 @Inherited 注解过的注解进行注解的话，那么如果它的子类没有被任何注解应用的话，那么这个子类就继承了超类的注解。<br>说的比较抽象。代码来解释。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Test &#123;</span><br><span class="line">    </span><br><span class="line">&#125;<span class="comment">//这里就是,表示test这个注解被@Inherited修饰</span></span><br><span class="line">===========================================</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">===========================================</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注解 Test 被 @Inherited 修饰，之后类 A 被 Test 注解，类 B 继承 A,类 B 也拥有 Test 这个注解。</p><h4 id="Repeatable"><a href="#Repeatable" class="headerlink" title="@Repeatable"></a><strong>@Repeatable</strong></h4><p>Repeatable 自然是可重复的意思。@Repeatable 是 Java 1.8 才加进来的，所以算是一个新的特性。</p><p>什么样的注解会多次应用呢？通常是注解的值可以同时取多个。</p><p>举个例子，一个人他既是程序员又是产品经理,同时他还是个画家。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//容器注解, 专门拿来给注解当容器的</span></span><br><span class="line"><span class="meta">@interface</span> Persons &#123;</span><br><span class="line">    Person[]  value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repeatable(Persons.class)</span></span><br><span class="line"><span class="meta">@interface</span> Person&#123;</span><br><span class="line">    String <span class="title function_">role</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Person(role=&quot;artist&quot;)</span></span><br><span class="line"><span class="meta">@Person(role=&quot;coder&quot;)</span></span><br><span class="line"><span class="meta">@Person(role=&quot;PM&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SuperMan</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照规定，它里面必须要有一个 value 的属性，属性类型是一个被 @Repeatable 注解过的注解数组，注意它是数组。</p><p>如果不好理解的话，可以这样理解。Persons 是一张总的标签，上面贴满了 Person 这种同类型但内容不一样的标签。把 Persons 给一个 SuperMan 贴上，相当于同时给他贴了程序员、产品经理、画家的标签。</p><p>我们可能对于 @Person(role&#x3D;”PM”) 括号里面的内容感兴趣，它其实就是给 Person 这个注解的 role 属性赋值为 PM ，大家不明白正常，马上就讲到注解的属性这一块。</p><h2 id="注解的属性"><a href="#注解的属性" class="headerlink" title="注解的属性"></a><strong>注解的属性</strong></h2><p>注解的属性也叫做成员变量。注解只有成员变量，没有方法。注解的成员变量在注解的定义中以“无形参的方法”形式来声明，其方法名定义了该成员变量的名字，其返回值定义了该成员变量的类型。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TestAnnotation &#123;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">id</span><span class="params">()</span>;</span><br><span class="line">    String <span class="title function_">msg</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码定义了 TestAnnotation 这个注解中拥有 id 和 msg 两个属性。在使用的时候，我们应该给它们进行赋值。</p><p>赋值的方式是在注解的括号内以 value&#x3D;”” 形式，多个属性之前用 ，隔开。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TestAnnotation(id=3,msg=&quot;hello annotation&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，在注解中定义属性时它的类型必须是 8 种基本数据类型外加 类、接口、注解及它们的数组。</p><p>注解中属性可以有默认值，默认值需要用 default 关键值指定。比如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TestAnnotation &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">id</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">msg</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;Hi&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TestAnnotation 中 id 属性默认值为 -1，msg 属性默认值为 Hi。<br>它可以这样应用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TestAnnotation()</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>因为有默认值，所以无需要再在 @TestAnnotation 后面的括号里面进行赋值了，这一步可以省略。</p><p>另外，还有一种情况。如果一个注解内仅仅只有一个名字为 value 的属性时，应用这个注解时可以直接接属性值填写到括号内。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Check &#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，Check 这个注解只有 value 这个属性。所以可以这样应用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Check(&quot;hi&quot;)</span></span><br><span class="line"><span class="type">int</span> a;</span><br></pre></td></tr></table></figure><p>这和下面的效果是一样的</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Check(value=&quot;hi&quot;)</span></span><br><span class="line"><span class="type">int</span> a;</span><br></pre></td></tr></table></figure><p>最后，还需要注意的一种情况是一个注解没有任何属性。比如</p><p>那么在应用这个注解的时候，括号都可以省略。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Perform</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMethod</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="Java-预置的注解"><a href="#Java-预置的注解" class="headerlink" title="Java 预置的注解"></a><strong>Java 预置的注解</strong></h2><p>学习了上面相关的知识，我们已经可以自己定义一个注解了。其实 Java 语言本身已经提供了几个现成的注解。</p><p> <strong>@Deprecated、@Override、@SuppressWarnings、@SafeVarargs、@FunctionalInterface</strong></p><h4 id="Deprecated"><a href="#Deprecated" class="headerlink" title="@Deprecated"></a><strong>@Deprecated</strong></h4><p>源码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(value=&#123;CONSTRUCTOR, FIELD, LOCAL_VARIABLE, METHOD, PACKAGE, PARAMETER, TYPE&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Deprecated &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个元素是用来标记过时的元素，想必大家在日常开发中经常碰到。编译器在编译阶段遇到这个注解时会发出提醒警告，告诉开发者正在调用一个过时的元素比如过时的方法、过时的类、过时的成员变量。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Hero</span> &#123;</span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Noting has to say!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">speak</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;I have a dream!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义了一个 Hero 类，它有两个方法 say() 和 speak() ，其中 say() 被 @Deprecated 注解。然后我们在 IDE 中分别调用它们。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220406150347966.png" alt="image-20220406150347966"></p><p>可以看到，say() 方法上面被一条直线划了一条，这其实就是编译器识别后的提醒效果。</p><h4 id="Override"><a href="#Override" class="headerlink" title="@Override"></a><strong>@Override</strong></h4><p>这个大家应该很熟悉了，提示子类要复写父类中被 @Override 修饰的方法</p><p>源码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SuppressWarnings"><a href="#SuppressWarnings" class="headerlink" title="@SuppressWarnings"></a><strong>@SuppressWarnings</strong></h4><p>阻止警告的意思。之前说过调用被 @Deprecated 注解的方法后，编译器会警告提醒，而有时候开发者会忽略这种警告，他们可以在调用的地方通过 @SuppressWarnings 达到目的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">Hero</span> <span class="variable">hero</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">    hero.say();</span><br><span class="line">    hero.speak();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;TYPE, FIELD, METHOD, PARAMETER, CONSTRUCTOR, LOCAL_VARIABLE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SuppressWarnings &#123;</span><br><span class="line">    String[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其内部有一个String数组, 主要接收值如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deprecation：使用了不赞成使用的类或方法时的警告；</span><br><span class="line">unchecked：执行了未检查的转换时的警告，例如当使用集合时没有用泛型</span><br><span class="line">(Generics) 来指定集合保存的类型;</span><br><span class="line">fallthrough：当 Switch 程序块直接通往下一种情况而没有 Break时的警告;</span><br><span class="line">path：在类路径、源文件路径等中有不存在的路径时的警告; serial：当在可序列化的类上缺少</span><br><span class="line">serialVersionUID 定义时的警告;</span><br><span class="line">finally：任何 finally 子句不能正常完成时的警告;</span><br><span class="line">all：关于以上所有情况的警告。</span><br></pre></td></tr></table></figure><h4 id="SafeVarargs"><a href="#SafeVarargs" class="headerlink" title="@SafeVarargs"></a><strong>@SafeVarargs</strong></h4><p>参数安全类型注解。它的目的是提醒开发者不要用参数做一些不安全的操作,它的存在会阻止编译器产生 unchecked 这样的警告。它是在 Java 1.7 的版本中加入的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SafeVarargs</span> <span class="comment">// Not actually safe!</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">m</span><span class="params">(List&lt;String&gt;... stringLists)</span> &#123;</span><br><span class="line">    Object[] array = stringLists;</span><br><span class="line">    List&lt;Integer&gt; tmpList = Arrays.asList(<span class="number">42</span>);</span><br><span class="line">    array[<span class="number">0</span>] = tmpList; <span class="comment">// Semantically invalid, but compiles without warnings</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> stringLists[<span class="number">0</span>].get(<span class="number">0</span>); <span class="comment">// Oh no, ClassCastException at runtime!</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中，编译阶段不会报错，但是运行时会抛出 ClassCastException 这个异常，所以它虽然告诉开发者要妥善处理，但是开发者自己还是搞砸了。</p><p>Java 官方文档说，未来的版本会授权编译器对这种不安全的操作产生错误警告。</p><h4 id="FunctionalInterface"><a href="#FunctionalInterface" class="headerlink" title="@FunctionalInterface"></a><strong>@FunctionalInterface</strong></h4><p>函数式接口注解，这个是 Java 1.8 版本引入的新特性。函数式编程很火，所以 Java 8 也及时添加了这个特性。</p><p>源码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> FunctionalInterface &#123;&#125;</span><br></pre></td></tr></table></figure><p>函数式接口 (Functional Interface) 就是一个具有一个方法的普通接口。<br>比如</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span></span><br><span class="line"><span class="comment">     * to create a thread, starting the thread causes the object&#x27;s</span></span><br><span class="line"><span class="comment">     * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span></span><br><span class="line"><span class="comment">     * thread.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span></span><br><span class="line"><span class="comment">     * take any action whatsoever.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span>     java.lang.Thread#run()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们进行线程开发中常用的 Runnable 就是一个典型的函数式接口，上面源码可以看到它就被 @FunctionalInterface 注解。</p><p>可能有人会疑惑，函数式接口标记有什么用，这个原因是函数式接口可以很容易转换为 Lambda 表达式。这是另外的主题了，有兴趣的同学请自己搜索相关知识点学习。</p><h2 id="注解的提取"><a href="#注解的提取" class="headerlink" title="注解的提取"></a><strong>注解的提取</strong></h2><p>博文前面的部分讲了注解的基本语法，现在是时候检测我们所学的内容了。</p><p>我通过用标签来比作注解，前面的内容是讲怎么写注解，然后贴到哪个地方去，而现在我们要做的工作就是检阅这些标签内容。 形象的比喻就是你把这些注解标签在合适的时候撕下来，然后检阅上面的内容信息。</p><p>要想正确检阅注解，离不开一个手段，那就是反射。</p><h2 id="注解与反射"><a href="#注解与反射" class="headerlink" title="注解与反射"></a><strong>注解与反射</strong></h2><p>注解通过反射获取。首先可以通过 Class 对象的 isAnnotationPresent() 方法判断它是否应用了某个注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isAnnotationPresent</span><span class="params">(Class&lt;? extends Annotation&gt; annotationClass)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>然后通过 getAnnotation() 方法来获取 Annotation 对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;A <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; A <span class="title function_">getAnnotation</span><span class="params">(Class&lt;A&gt; annotationClass)</span> &#123;&#125;</span><br></pre></td></tr></table></figure><p>或者是 getAnnotations() 方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Annotation[] getAnnotations() &#123;&#125;</span><br></pre></td></tr></table></figure><p>前一种方法返回指定类型的注解，后一种方法返回注解到这个元素上的所有注解。</p><p>如果获取到的 Annotation 如果不为 null，则就可以调用它们的属性方法了。比如</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TestAnnotation(id=12,msg = &quot;兴趣使然的小小&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasAnnotation</span> <span class="operator">=</span> Test.class.isAnnotationPresent(TestAnnotation.class);</span><br><span class="line">        <span class="keyword">if</span> ( hasAnnotation ) &#123;</span><br><span class="line">            <span class="type">TestAnnotation</span> <span class="variable">testAnnotation</span> <span class="operator">=</span> Test.class.getAnnotation(TestAnnotation.class);</span><br><span class="line">            System.out.println(<span class="string">&quot;id:&quot;</span>+testAnnotation.id());</span><br><span class="line">            System.out.println(<span class="string">&quot;msg:&quot;</span>+testAnnotation.msg());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序的运行结果是：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">id:12</span><br><span class="line">msg:兴趣使然的小小</span><br></pre></td></tr></table></figure><p>这个正是 TestAnnotation 中 id 和 msg 的值。</p><p>上面的例子中，只是检阅出了注解在类上的注解，其实属性、方法上的注解照样是可以的。同样还是要假手于反射。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> manipatic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.FIELD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Check&#123;</span><br><span class="line">    String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> Perform&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@interface</span> TestAnnotation &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">id</span><span class="params">()</span> <span class="keyword">default</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">msg</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;Hi&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@TestAnnotation(msg = &quot;hello, annotation! &quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="meta">@Check(value=&quot;hi&quot;)</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="meta">@Perform</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testMethod</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="meta">@SuppressWarnings(&quot;deprecation&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Hero</span> <span class="variable">hero</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Hero</span>();</span><br><span class="line">        hero.say();</span><br><span class="line">        hero.speak();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">hasAnnotation</span> <span class="operator">=</span> Test.class.isAnnotationPresent(TestAnnotation.class);</span><br><span class="line">        <span class="keyword">if</span> ( hasAnnotation ) &#123;</span><br><span class="line">            <span class="type">TestAnnotation</span> <span class="variable">testAnnotation</span> <span class="operator">=</span> Test.class.getAnnotation(TestAnnotation.class);</span><br><span class="line">            <span class="comment">//获取类的注解</span></span><br><span class="line">            System.out.println(<span class="string">&quot;id:&quot;</span>+testAnnotation.id());</span><br><span class="line">            System.out.println(<span class="string">&quot;msg:&quot;</span>+testAnnotation.msg());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Field</span> <span class="variable">a</span> <span class="operator">=</span> Test.class.getDeclaredField(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">            a.setAccessible(<span class="literal">true</span>);</span><br><span class="line">            <span class="comment">//获取一个成员变量上的注解</span></span><br><span class="line">            <span class="type">Check</span> <span class="variable">check</span> <span class="operator">=</span> a.getAnnotation(Check.class);</span><br><span class="line">            <span class="keyword">if</span> ( check != <span class="literal">null</span> ) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;check value:&quot;</span>+check.value());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">Method</span> <span class="variable">testMethod</span> <span class="operator">=</span> Test.class.getDeclaredMethod(<span class="string">&quot;testMethod&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> ( testMethod != <span class="literal">null</span> ) &#123;</span><br><span class="line">                <span class="comment">// 获取方法中的注解</span></span><br><span class="line">                Annotation[] ans = testMethod.getAnnotations();</span><br><span class="line">                <span class="keyword">for</span>( <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; ans.length;i++) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;method testMethod annotation:&quot;</span>+ans[i].annotationType().getSimpleName());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*结果</span></span><br><span class="line"><span class="comment">id:-1</span></span><br><span class="line"><span class="comment">msg:hello, annotation! </span></span><br><span class="line"><span class="comment">check value:hi</span></span><br><span class="line"><span class="comment">method testMethod annotation:Perform</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>需要注意的是，如果一个注解要在运行时被成功提取，那么 @Retention(RetentionPolicy.RUNTIME) 是必须的。</p><h2 id="注解的使用场景"><a href="#注解的使用场景" class="headerlink" title="注解的使用场景"></a><strong>注解的使用场景</strong></h2><p>我相信博文讲到这里大家都很熟悉了注解，但是有不少同学肯定会问，注解到底有什么用呢？</p><p>对啊注解到底有什么用？</p><p>我们不妨将目光放到 Java 官方文档上来。</p><p>文章开始的时候，我用标签来类比注解。但标签比喻只是我的手段，而不是目的。为的是让大家在初次学习注解时能够不被那些抽象的新概念搞懵。既然现在，我们已经对注解有所了解，我们不妨再仔细阅读官方最严谨的文档</p><blockquote><p>注解是一系列元数据，它提供数据用来解释程序代码，但是注解并非是所解释的代码本身的一部分。注解对于代码的运行效果没有直接影响。</p><p>注解有许多用处，主要如下：</p></blockquote><ul><li>提供信息给编译器： 编译器可以利用注解来探测错误和警告信息</li><li>编译阶段时的处理： 软件工具可以用来利用注解信息来生成代码、Html文档或者做其它相应处理。</li><li>运行时的处理： 某些注解可以在程序运行的时候接受代码的提取<br>值得注意的是，注解不是代码本身的一部分。</li></ul><p>注解无法改变代码本身，注解只是某些工具的的工具。</p><p>还是回到官方文档的解释上，注解主要针对的是编译器和其它工具软件(SoftWare tool)。</p><p>当开发者使用了Annotation 修饰了类、方法、Field 等成员之后，这些 Annotation 不会自己生效，必须由开发者提供相应的代码来提取并处理 Annotation 信息。这些处理提取和处理 Annotation 的代码统称为 APT（Annotation Processing Tool)。</p><h2 id="亲手自定义注解完成某个目的"><a href="#亲手自定义注解完成某个目的" class="headerlink" title="亲手自定义注解完成某个目的"></a><strong>亲手自定义注解完成某个目的</strong></h2><p>我要写一个测试框架，测试程序员的代码有无明显的异常。</p><p>—— 程序员 A : 我写了一个类，它的名字叫做 NoBug，因为它所有的方法都没有错误。<br>—— 我：自信是好事，不过为了防止意外，让我测试一下如何？<br>—— 程序员 A: 怎么测试？<br>—— 我：把你写的代码的方法都加上 @Jiecha 这个注解就好了。<br>—— 程序员 A: 好的。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> manuscript;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NoBug</span> &#123;</span><br><span class="line">    <span class="meta">@XiaoXiao</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">suanShu</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1234567890&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@XiaoXiao</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jiafa</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1+1=&quot;</span> + <span class="number">1</span> + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@XiaoXiao</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">jiefa</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;1-1=&quot;</span> + (<span class="number">1</span> - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@XiaoXiao</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">chengfa</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;3 x 5=&quot;</span> + <span class="number">3</span> * <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@XiaoXiao</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">chufa</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;6 / 0=&quot;</span> + <span class="number">6</span> / <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ziwojieshao</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我写的程序没有 bug!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码，有些方法上面运用了 @XiaoXiao 注解。</p><p>这个注解是我写的测试软件框架中定义的注解。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> XiaoXiao &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后，我再编写一个测试类 TestTool 就可以测试 NoBug 相应的方法了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> manuscript;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestTool</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="type">NoBug</span> <span class="variable">testobj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NoBug</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> testobj.getClass();</span><br><span class="line">        Method[] method = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="comment">//用来记录测试产生的 log 信息</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">log</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="comment">// 记录异常的次数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">errornum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> ( Method m: method ) &#123;</span><br><span class="line">            <span class="comment">// 只有被 @XiaoXiao 标注过的方法才进行测试</span></span><br><span class="line">            <span class="keyword">if</span> ( m.isAnnotationPresent( XiaoXiao.class )) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">//如果是private方法的话，就需要调用这个setAccessible()</span></span><br><span class="line">                    m.setAccessible(<span class="literal">true</span>);</span><br><span class="line">                    <span class="comment">//调用对应的对象的方法</span></span><br><span class="line">                    m.invoke(testobj, <span class="literal">null</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    <span class="comment">//e.printStackTrace();</span></span><br><span class="line">                    errornum++;</span><br><span class="line">                    log.append(m.getName());</span><br><span class="line">                    log.append(<span class="string">&quot; &quot;</span>);</span><br><span class="line">                    log.append(<span class="string">&quot;has error:&quot;</span>);</span><br><span class="line">                    log.append(<span class="string">&quot;\n\r  caused by &quot;</span>);</span><br><span class="line">                    <span class="comment">//记录测试过程中，发生的异常的名称</span></span><br><span class="line">                    log.append(e.getCause().getClass().getSimpleName());</span><br><span class="line">                    log.append(<span class="string">&quot;\n\r&quot;</span>);</span><br><span class="line">                    <span class="comment">//记录测试过程中，发生的异常的具体信息</span></span><br><span class="line">                    log.append(e.getCause().getMessage());</span><br><span class="line">                    log.append(<span class="string">&quot;\n\r&quot;</span>);</span><br><span class="line">                &#125; </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.append(clazz.getSimpleName());</span><br><span class="line">        log.append(<span class="string">&quot; has  &quot;</span>);</span><br><span class="line">        log.append(errornum);</span><br><span class="line">        log.append(<span class="string">&quot; error.&quot;</span>);</span><br><span class="line">        <span class="comment">// 生成测试报告</span></span><br><span class="line">        System.out.println(log.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1234567890</span></span><br><span class="line"><span class="comment">1+1=11</span></span><br><span class="line"><span class="comment">3 x 5=15</span></span><br><span class="line"><span class="comment">1-1=0</span></span><br><span class="line"><span class="comment">chufa has error:</span></span><br><span class="line"><span class="comment">  caused by ArithmeticException</span></span><br><span class="line"><span class="comment">/ by zero</span></span><br><span class="line"><span class="comment">NoBug has  1 error.</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></table></figure><p>测试的结果是：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">1234567890</span><br><span class="line">1+1=11</span><br><span class="line">3 x 5=15</span><br><span class="line">1-1=0</span><br><span class="line">chufa has error:</span><br><span class="line">  caused by ArithmeticException</span><br><span class="line">/ by zero</span><br><span class="line">NoBug has  1 error.</span><br></pre></td></tr></table></figure><p>提示 NoBug 类中的 chufa() 这个方法有异常，这个异常名称叫做 ArithmeticException，原因是运算过程中进行了除 0 的操作。</p><p>所以，NoBug 这个类有 Bug。</p><p>这样，通过注解我完成了我自己的目的，那就是对别人的代码进行测试。</p><p>所以，再问我注解什么时候用？我只能告诉你，这取决于你想利用它干什么用。</p><h2 id="注解应用实例"><a href="#注解应用实例" class="headerlink" title="注解应用实例"></a><strong>注解应用实例</strong></h2><p>注解运用的地方太多了，如：<br>JUnit 这个是一个测试框架，典型使用方法如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleUnitTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addition_isCorrect</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        assertEquals(<span class="number">4</span>, <span class="number">2</span> + <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Test 标记了要进行测试的方法 addition_isCorrect().</p><p>还有例如ssm框架等运用了大量的注解。</p><p>如果想在深入了解一下注解的话,可以看一下这个博主写的<a href="https://blog.csdn.net/CSDN_SAVIOR/article/details/122471544?utm_source=app&app_version=5.1.1&code=app_1562916241&uLinkId=usr1mkqgl919blen">戳这里</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><ul><li>如果注解难于理解，你就把它类同于标签，标签为了解释事物，注解为了解释代码。</li><li>注解的基本语法，创建如同接口，但是多了个 @ 符号。</li><li>注解的元注解。</li><li>注解的属性。</li><li>注解主要给编译器及工具类型的软件用的。</li><li>注解的提取需要借助于 Java 的反射技术，反射比较慢，所以注解使用时也需要谨慎计较时间成本。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 注解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro进阶</title>
      <link href="/2022/04/04/%5B%E5%BE%85%E5%AE%8C%E6%88%90%5Dshiro%E8%BF%9B%E9%98%B6/"/>
      <url>/2022/04/04/%5B%E5%BE%85%E5%AE%8C%E6%88%90%5Dshiro%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<p>我靠有点看不懂! </p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang学习路线</title>
      <link href="/2022/04/04/%5B%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%5Dgolang%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/2022/04/04/%5B%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%5Dgolang%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="7c16018e48dc76d63e26a6ad6d245bc06238e65c51c765a45e99f13ce44ef566">c92271cf075fe1244ae5c161f435c0037ac722d9cbf4cfed4d18a83f3f6e0847331aec8aa198656dfc83f1096fd496dd97bb70260572ae0c4b2cbaf02287882178e2acede48a1ce30496f24c331d91bfecaeb1fddc5eef1fe53784d1c271e8571bc6c403b6bece3c7217c8fec951af735d027048dbde65da7be6ac2126ea4c9e89eeb5ccb913dba4fda37d4ae2755fc1b4451ef7ddf73e0adfc1571ceffb78a7dd57c5e787a4202513922317cfe3365c9855198110d3b279a66b126b07a6e55787d0a50956712cdaa7d928b52fca640743c53ae15dc8ef76315d52181282d81153fb4e15f02f141256c62015755ecd687eb5df7e21b9240b74e27e91445228527b42318539a377e2c63b5c81ca218965e0f8cef9b2f0ba4a8eb7cfcb9f402b4f7fc9250b20f5d0d9d08ca25d25cff274a49b53ceff25f47770c320042ee3a09b01544c5a81d97069b011ae8c41c124dfe9844e25ccab527e485c5b9a27d7dce0af42e4b08d56f895d2bf297de147a55e66476e81b03569906003abfa6f1969904f76851122f45a335c10b25fa5fc1330216ec6acbeb2ed9f033a5900940f090f194a3f7e9e8159e9841e8e7b1878d8c6c06060a60f4f02e5e2569ccea29bf7bb92c0a748ee3a7f199ab59ef5b81b24f4cb1dcc0cb7f040be1f117a98091181ac7cd2b6e7a7277e50d2f8aed341e46475aa4e91a7ade0b05790bf9d82cda5d0fd953d2b0dd769bbbdf016a25d65fe50da81f2c7877e5f0e95b1b076cf56e8581246ddd19be6db7d3aa0abef80c21be18b7d10865316293533ca25cb5dc62db7a3</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，博主可能还没写完，所以这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 加密文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(未完成)golang语法进阶</title>
      <link href="/2022/04/04/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dgolang%E8%AF%AD%E6%B3%95%E8%BF%9B%E9%98%B6/"/>
      <url>/2022/04/04/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dgolang%E8%AF%AD%E6%B3%95%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<p>跟着这个博主<a href="https://luzhenyu.blog.csdn.net/article/details/122816289">戳这里</a></p><p>和那个视频走<a href="https://www.bilibili.com/video/BV1gf4y1r79E?p=21">戳这里</a></p><p>进阶篇主要讲反射和并发</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> go后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入门 </tag>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux下安装常用的中间件和软件命令</title>
      <link href="/2022/04/04/linxu%E4%B8%8B%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%92%8C%E8%BD%AF%E4%BB%B6/"/>
      <url>/2022/04/04/linxu%E4%B8%8B%E5%AE%89%E8%A3%85%E5%B8%B8%E7%94%A8%E4%B8%AD%E9%97%B4%E4%BB%B6%E5%92%8C%E8%BD%AF%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<p>一图解决 Linux 安装软件 MySql Redis Nginx RabbitMQ Docker 轻松 详细</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/2D8EC996615E7FA87A44A42DE5821718" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> 安装软件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>自己的一些小小的记录</title>
      <link href="/2022/04/04/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5D%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%B0%8F%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/04/04/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5D%E4%B8%80%E4%BA%9B%E5%B0%8F%E5%B0%8F%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="ef176ffb85859eda423b208f94fad422e5e48cba837bad282ef0344e05149936">c92271cf075fe1244ae5c161f435c00353da3ff6251c2d92a139118f817d190396841c88ca13f1dda70a71e7d0f3b925bb29a9a30cd044e000adfae649764d2d9bc48833330c5b8852c4696db74ed824547712683a7f9d57e3692e79011db3b737d308154d9f89bb1dd1353acffcb35b059d275be2bb54b69eae23ac99f6bab8d10495b553c0edda0ad8028e09d7a608d2c212fea8b4a0e389ea695a7ae7be6522c34a586107d34c418c9bbd1d7e054d1c68cf5346d9b84a16be533964f5cb5f3be6395de14dde352df705e42501ad305d060b18edcad076d0c2425ddb33d73bf5aac4ccbb33c4d5d796e0620986997875bc9ee67aa3fde92f4431dcff7d35a78d7b228cd6178a73bc22041cf86e581e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，博主可能还没写完，所以这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 加密文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
            <tag> 记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro初级入门</title>
      <link href="/2022/04/03/shiro%E5%88%9D%E7%BA%A7%E5%85%A5%E9%97%A8/"/>
      <url>/2022/04/03/shiro%E5%88%9D%E7%BA%A7%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><h2 id="Spring-Security和Shiro的比较"><a href="#Spring-Security和Shiro的比较" class="headerlink" title="Spring Security和Shiro的比较"></a>Spring Security和Shiro的比较</h2><h3 id="1-相同点"><a href="#1-相同点" class="headerlink" title="1.相同点"></a>1.相同点</h3><p>①认证功能<br>②授权功能<br>③加密功能<br>④会话管理<br>⑤缓存支持<br>⑥rememberMe功能<br>… …</p><h3 id="2-不同点"><a href="#2-不同点" class="headerlink" title="2.不同点"></a>2.不同点</h3><p>①Spring Security是一个重量级的安全管理框架；Shiro则是一个轻量级的安全管理框架<br>②Spring Security 基于Spring开发，项目若使用Spring作为基础，配合Spring Security 做权限更便捷，而Shiro需要和Spring 进行整合开发；<br>③Spring Security 功能比Shiro更加丰富些，例如安全维护方面；<br>④Spring Security 社区资源相对于Shiro更加丰富；<br>⑤Shiro 的配置和使用比较简单，Spring Security 上手复杂些；<br>⑥Shiro 依赖性低，不需要任何框架和容器，可以独立运行， Spring Security依赖Spring容器；<br>⑦Shiro 不仅仅可以使用在web中，它可以工作在任何应用环境中。在集群会话时Shiro最重要的一个好处或许就是它的会话是独立于容器的；</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220312111852929.png" alt="image-20220312111852929"></p><h1 id="1-、Shiro简介"><a href="#1-、Shiro简介" class="headerlink" title="1 、Shiro简介"></a>1 、Shiro简介</h1><h2 id="1-1、什么是Shiro？"><a href="#1-1、什么是Shiro？" class="headerlink" title="1.1、什么是Shiro？"></a>1.1、什么是Shiro？</h2><ul><li>[ ]Apache Shiro 是一个Java 的安全（权限）框架。</li><li>Shiro 可以非常容易的开发出足够好的应用，其不仅可以用在JavaSE环境，也可以用在JavaEE环境。 </li><li>Shiro可以完成，认证，授权，加密，会话管理，Web集成，缓存等。</li><li>下载地址：<a href="http://shiro.apache.org/">http://shiro.apache.org/</a></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220403182821385.png" alt="image-20220403182821385"></p><h2 id="1-2、有哪些功能？"><a href="#1-2、有哪些功能？" class="headerlink" title="1.2、有哪些功能？"></a>1.2、有哪些功能？</h2><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220403182901184.png" alt="image-20220403182901184"></p><ul><li>Authentication：身份认证、登录，验证用户是不是拥有相应的身份；</li><li>Authorization：授权，即权限验证，验证某个已认证的用户是否拥有某个权限，即判断用户能否 进行什么操作，如：验证某个用户是否拥有某个角色，或者细粒度的验证某个用户对某个资源是否 具有某个权限！</li><li>Session Manager：会话管理，即用户登录后就是第一次会话，在没有退出之前，它的所有信息都 在会话中；会话可以是普通的JavaSE环境，也可以是Web环境；</li><li>Cryptography：加密，保护数据的安全性，如密码加密存储到数据库中，而不是明文存储；</li><li>Web Support：Web支持，可以非常容易的集成到Web环境； </li><li>Caching：缓存，比如用户登录后，其用户信息，拥有的角色、权限不必每次去查，这样可以提高效率 </li><li>Concurrency：Shiro支持多线程应用的并发验证，即，如在一个线程中开启另一个线程，能把权限 自动的传播过去 </li><li>Testing：提供测试支持； </li><li>Run As：允许一个用户假装为另一个用户（如果他们允许）的身份进行访问； </li><li>Remember Me：记住我，这个是非常常见的功能，即一次登录后，下次再来的话不用登录了</li></ul><h2 id="1-3、Shiro架构（外部）"><a href="#1-3、Shiro架构（外部）" class="headerlink" title="1.3、Shiro架构（外部）"></a>1.3、Shiro架构（外部）</h2><p>从外部来看Shiro，即从应用程序角度来观察如何使用shiro完成工作：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220403183315537.png" alt="image-20220403183315537"></p><h4 id="shiro的主要工作流程"><a href="#shiro的主要工作流程" class="headerlink" title="shiro的主要工作流程:"></a><strong>shiro的主要工作流程:</strong></h4><ul><li><strong>subject</strong>： 应用代码直接交互的对象是Subject，也就是说Shiro的<strong>对外API核心就是Subject</strong>， <strong>Subject代表了当前的用户</strong>，这个用户不一定是一个具体的人，与当前应用交互的任何东西都是 Subject，如网络爬虫，机器人等，与Subject的所有交互都会委托给SecurityManager；Subject其 实是一个门面，SecurityManageer 才是实际的执行者</li><li><strong>SecurityManager</strong>：安全管理器，即所有与安全有关的操作都会与SercurityManager交互，并且它 管理着所有的Subject，可以看出它是Shiro的核心，它负责与Shiro的其他组件进行交互，它相当于 SpringMVC的DispatcherServlet的角色</li><li><strong>Realm</strong>：Shiro从Realm获取安全数据（<strong>如用户，角色，权限</strong>），就是说SecurityManager 要验证 用户身份，那么它需要从Realm 获取相应的用户进行比较，来确定用户的身份是否合法；也需要从 Realm得到用户相应的角色、权限，进行验证用户的操作是否能够进行，可以把Realm看成 DataSource；</li></ul><h2 id="1-4、Shiro架构（内部）"><a href="#1-4、Shiro架构（内部）" class="headerlink" title="1.4、Shiro架构（内部）"></a>1.4、Shiro架构（内部）</h2><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220403183757756.png" alt="image-20220403183757756"></p><ul><li><strong>Subject</strong>：任何可以与应用交互的 ‘用户’；</li><li><strong>Security</strong> <strong>Manager</strong>：相当于SpringMVC中的DispatcherServlet；是Shiro的心脏，所有具体的交互 都通过Security Manager进行控制，它管理者所有的Subject，且负责进行认证，授权，会话，及 缓存的管理。</li><li><strong>Authenticator(认证员)<strong>：负责</strong>Subject认证</strong>，<strong>是一个扩展点，</strong>可以自定义实现；可以使用认证策略 （Authentication Strategy），即什么情况下算用户认证通过了；</li><li><strong>Authorizer(授权者)<strong>：授权器，</strong>即访问控制器</strong>，用来决定主体是否有权限进行相应的操作；即控制着用户能 访问应用中的那些功能；</li><li><strong>Realm</strong>：可以有一个或者多个的realm，可以认为是安全实体数据源，即用于获取安全实体的，可以用JDBC实现，也可以是内存实现等等，由用户提供；所以一般在应用中<strong>都需要实现自己的realm</strong></li><li><strong>SessionManager</strong>：管理Session生命周期的组件，而Shiro并不仅仅可以用在Web环境，也可以用 在普通的JavaSE环境中</li><li><strong>CacheManager</strong>：缓存控制器，来管理如用户，角色，权限等缓存的；因为这些数据基本上很少改 变，放到缓存中后可以提高访问的性能；</li><li><strong>Cryptography</strong>：密码模块，Shiro 提高了一些常见的加密组件用于密码加密，解密等</li></ul><h1 id="2-、HelloWorld"><a href="#2-、HelloWorld" class="headerlink" title="2 、HelloWorld"></a>2 、HelloWorld</h1><h2 id="2-1、快速实践"><a href="#2-1、快速实践" class="headerlink" title="2.1、快速实践"></a>2.1、快速实践</h2><p>查看官网文档：<a href="http://shiro.apache.org/tutorial.html">http://shiro.apache.org/tutorial.html</a> </p><p>官方的quickstart：<a href="https://github.com/apache/shiro/tree/master/samples/quickstart/">https://github.com/apache/shiro/tree/master/samples/quickstart/</a></p><ol><li><p>创建一个maven父工程，用于学习Shiro，删掉不必要的东西 </p></li><li><p>创建一个普通的Maven子工程：shiro-01-helloworld </p></li><li><p>根据官方文档，我们来导入Shiro的依赖</p></li></ol><p>pom.xml文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shirofeng<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>shiro-01-helloworld<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            　　</span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            　　</span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-simple<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            　　</span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            　　</span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jcl-over-slf4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>编写Shiro配置</li></ol><p>resources目录下:</p><p>log4j.properties配置文件</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">log4j.rootLogger</span>=<span class="string">INFO, stdout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.stdout.layout.ConversionPattern</span>=<span class="string">%d %p [%c] - %m %n</span></span><br><span class="line"><span class="comment"># General Apache libraries</span></span><br><span class="line"><span class="attr">log4j.logger.org.apache</span>=<span class="string">WARN</span></span><br><span class="line"><span class="comment"># Spring</span></span><br><span class="line"><span class="attr">log4j.logger.org.springframework</span>=<span class="string">WARN</span></span><br><span class="line"><span class="comment"># Default Shiro logging</span></span><br><span class="line"><span class="attr">log4j.logger.org.apache.shiro</span>=<span class="string">INFO</span></span><br><span class="line"><span class="comment"># Disable verbose logging</span></span><br><span class="line"><span class="attr">log4j.logger.org.apache.shiro.util.ThreadContext</span>=<span class="string">WARN</span></span><br><span class="line"><span class="attr">log4j.logger.org.apache.shiro.cache.ehcache.EhCache</span>=<span class="string">WARN</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>shiro.ini（如果是用的idea的话,可能需要安装ini配置文件插件,注意格式不要写错啦,key-value键值对）</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[users]</span></span><br><span class="line"><span class="comment"># user &#x27;root&#x27; with password &#x27;secret&#x27; and the &#x27;admin&#x27; role</span></span><br><span class="line"><span class="attr">root</span> = secret, admin</span><br><span class="line"><span class="comment"># user &#x27;guest&#x27; with the password &#x27;guest&#x27; and the &#x27;guest&#x27; role</span></span><br><span class="line"><span class="attr">guest</span> = guest, guest</span><br><span class="line"><span class="comment"># user &#x27;presidentskroob&#x27; with password &#x27;12345&#x27; (&quot;That&#x27;s the same combination on</span></span><br><span class="line"><span class="comment"># my luggage!!!&quot; ;)), and role &#x27;president&#x27;</span></span><br><span class="line"><span class="attr">presidentskroob</span> = <span class="number">12345</span>, president</span><br><span class="line"><span class="comment"># user &#x27;darkhelmet&#x27; with password &#x27;ludicrousspeed&#x27; and roles &#x27;darklord&#x27; and &#x27;schwartz&#x27;</span></span><br><span class="line"><span class="attr">darkhelmet</span> = ludicrousspeed, darklord, schwartz</span><br><span class="line"><span class="comment"># user &#x27;lonestarr&#x27; with password &#x27;vespa&#x27; and roles &#x27;goodguy&#x27; and &#x27;schwartz&#x27;</span></span><br><span class="line"><span class="attr">lonestarr</span> = vespa, goodguy, schwartz</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># Roles with assigned permissions</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># Each line conforms to the format defined in the</span></span><br><span class="line"><span class="comment"># org.apache.shiro.realm.text.TextConfigurationRealm#setRoleDefinitions JavaDoc</span></span><br><span class="line"><span class="comment"># -----------------------------------------------------------------------------</span></span><br><span class="line"><span class="section">[roles]</span></span><br><span class="line"><span class="comment"># &#x27;admin&#x27; role has all permissions, indicated by the wildcard &#x27;*&#x27;</span></span><br><span class="line"><span class="attr">admin</span> = *</span><br><span class="line"><span class="comment"># The &#x27;schwartz&#x27; role can do anything (*) with any lightsaber:</span></span><br><span class="line"><span class="attr">schwartz</span> = lightsaber:*</span><br><span class="line"><span class="comment"># The &#x27;goodguy&#x27; role is allowed to &#x27;drive&#x27; (action) the winnebago (type) with</span></span><br><span class="line"><span class="comment"># license plate &#x27;eagle5&#x27; (instance specific id)</span></span><br><span class="line"><span class="attr">goodguy</span> = winnebago:drive:eagle5</span><br></pre></td></tr></table></figure><ol start="5"><li>编写我们的QuickStrat（主要步骤有中文备注提示）</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.shiro.SecurityUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.config.IniSecurityManagerFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.mgt.SecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.session.Session;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.Subject;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.util.Factory;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple Quickstart application showing how to use Shiro&#x27;s API.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Quickstart</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">transient</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span></span><br><span class="line">            LoggerFactory.getLogger(Quickstart.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">// The easiest way to create a Shiro SecurityManager withconfigured</span></span><br><span class="line"><span class="comment">// realms, users, roles and permissions is to use the simpleINI config.</span></span><br><span class="line"><span class="comment">// We&#x27;ll do that by using a factory that can ingest a .inifile and</span></span><br><span class="line"><span class="comment">// return a SecurityManager instance:</span></span><br><span class="line"><span class="comment">// Use the shiro.ini file at the root of the classpath</span></span><br><span class="line"><span class="comment">// (file: and url: prefixes load from files and urlsrespectively):</span></span><br><span class="line">        Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">IniSecurityManagerFactory</span>(<span class="string">&quot;classpath:shiro.ini&quot;</span>);</span><br><span class="line">        <span class="type">SecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> factory.getInstance();</span><br><span class="line"><span class="comment">// for this simple example quickstart, make theSecurityManager</span></span><br><span class="line"><span class="comment">// accessible as a JVM singleton. Most applications wouldn&#x27;tdo this</span></span><br><span class="line"><span class="comment">// and instead rely on their container configuration orweb.xml for</span></span><br><span class="line"><span class="comment">// webapps. That is outside the scope of this simplequickstart, so</span></span><br><span class="line"><span class="comment">// we&#x27;ll just do the bare minimum so you can continue to get afeel</span></span><br><span class="line"><span class="comment">// for things.</span></span><br><span class="line">        SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line"><span class="comment">// Now that a simple Shiro environment is set up, let&#x27;s seewhat you can do:</span></span><br><span class="line"><span class="comment">// get the currently executing user:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取当前用户对象subject</span></span><br><span class="line">        <span class="type">Subject</span> <span class="variable">currentUser</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line"><span class="comment">// Do some stuff with a Session (no need for a web or EJBcontainer!!!)</span></span><br><span class="line">        <span class="comment">//通过当前用户拿到session</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">session</span> <span class="operator">=</span> currentUser.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;someKey&quot;</span>, <span class="string">&quot;aValue&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;someKey&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (value.equals(<span class="string">&quot;aValue&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Retrieved the correct value! [&quot;</span> + value + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// let&#x27;s login the current user so we can check against rolesand permissions:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断当前的用户是否被认证,</span></span><br><span class="line">        <span class="keyword">if</span> (!currentUser.isAuthenticated()) &#123;</span><br><span class="line">            <span class="comment">//令牌</span></span><br><span class="line">            <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                    <span class="title class_">UsernamePasswordToken</span>(<span class="string">&quot;lonestarr&quot;</span>, <span class="string">&quot;vespa&quot;</span>);</span><br><span class="line">            token.setRememberMe(<span class="literal">true</span>);<span class="comment">//设置了记住我</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                currentUser.login(token);<span class="comment">//执行登陆操作</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnknownAccountException uae) &#123;<span class="comment">//没有账号</span></span><br><span class="line">                log.info(<span class="string">&quot;There is no user with username of &quot;</span> +</span><br><span class="line">                        token.getPrincipal());</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IncorrectCredentialsException ice) &#123;<span class="comment">//密码错误</span></span><br><span class="line">                log.info(<span class="string">&quot;Password for account &quot;</span> +</span><br><span class="line">                        token.getPrincipal() + <span class="string">&quot; was incorrect!&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (LockedAccountException lae) &#123;<span class="comment">//锁定异常</span></span><br><span class="line">                log.info(<span class="string">&quot;The account for username &quot;</span> +</span><br><span class="line">                        token.getPrincipal() + <span class="string">&quot; is locked. &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;Please contact your administrator to unlock it.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// ... catch more exceptions here (maybe custom onesspecific to your application?</span></span><br><span class="line">            <span class="keyword">catch</span> (AuthenticationException ae) &#123;</span><br><span class="line"><span class="comment">//unexpected condition? error?</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//say who they are:</span></span><br><span class="line"><span class="comment">//print their identifying principal (in this case, ausername):</span></span><br><span class="line">        log.info(<span class="string">&quot;User [&quot;</span> + currentUser.getPrincipal() + <span class="string">&quot;] logged in successfully.&quot;</span>);</span><br><span class="line"><span class="comment">//test a role:</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.hasRole(<span class="string">&quot;schwartz&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;May the Schwartz be with you!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Hello, mere mortal.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//粗粒度</span></span><br><span class="line"><span class="comment">//test a typed permission (not instance-level)</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;lightsaber:wield&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You may use a lightsaber ring. Use it wisely.&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, lightsaber rings are for schwartz masters only.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//细粒度</span></span><br><span class="line"><span class="comment">//a (very powerful) Instance Level permission:</span></span><br><span class="line">        <span class="keyword">if</span> (currentUser.isPermitted(<span class="string">&quot;winnebago:drive:eagle5&quot;</span>)) &#123;</span><br><span class="line">            log.info(<span class="string">&quot;You are permitted to &#x27;drive&#x27; the winnebago with license plate (id) &#x27;eagle5&#x27;. &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;Here are the keys - have fun!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;Sorry, you aren&#x27;t allowed to drive the &#x27;eagle5&#x27; winnebago!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//all done - log out!</span></span><br><span class="line">        <span class="comment">//注销</span></span><br><span class="line">        currentUser.logout();</span><br><span class="line">        <span class="comment">//结束系统</span></span><br><span class="line">        System.exit(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="6"><li>运行程序</li></ol><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[main] INFO org.apache.shiro.session.mgt.AbstractValidatingSessionManager - Enabling session validation scheduler...</span><br><span class="line">[main] INFO Quickstart - Retrieved the correct value! [aValue]</span><br><span class="line">[main] INFO Quickstart - User [lonestarr] logged <span class="keyword">in</span> successfully.</span><br><span class="line">[main] INFO Quickstart - May the Schwartz be with you!</span><br><span class="line">[main] INFO Quickstart - You may use a lightsaber ring. Use it wisely.</span><br><span class="line">[main] INFO Quickstart - You are permitted to <span class="string">&#x27;drive&#x27;</span> the winnebago with license plate (<span class="built_in">id</span>) <span class="string">&#x27;eagle5&#x27;</span>. Here are the keys - have fun!</span><br></pre></td></tr></table></figure><h2 id="2-2、阅读代码"><a href="#2-2、阅读代码" class="headerlink" title="2.2、阅读代码"></a>2.2、阅读代码</h2><p>略</p><p>详情请看上面代码的注解</p><p><strong>OK，一个简单的Shiro程序体验，我们就在官方的带领下初步认识了！</strong></p><h1 id="3-、SpringBoot集成"><a href="#3-、SpringBoot集成" class="headerlink" title="3 、SpringBoot集成"></a>3 、SpringBoot集成</h1><h2 id="3-1、准备工作"><a href="#3-1、准备工作" class="headerlink" title="3.1、准备工作"></a>3.1、准备工作</h2><ol><li>搭建一个SpringBoot项目、选中web模块即可！</li></ol><p>pom.xml,新加点东西</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--thymeleaf模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li><p>导入Maven依赖 thymeleaf</p></li><li><p>编写一个页面 index.html templates</p></li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span><span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>shiro首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>编写controller进行访问测试</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.springbootshiro.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    <span class="comment">//一般首页不止一个,所以就这样写</span></span><br><span class="line">    <span class="meta">@RequestMapping(&#123;&quot;/&quot;, &quot;/index&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toIndex</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello,Shiro&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="5"><li>测试访问首页！</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220403203140214.png" alt="image-20220403203140214"></p><h2 id="3-2、整合Shiro"><a href="#3-2、整合Shiro" class="headerlink" title="3.2、整合Shiro"></a>3.2、整合Shiro</h2><ol><li><p>Subject：用户主体 </p></li><li><p>SecurityManager：安全管理器</p></li><li><p>Realm：Shiro 连接数据</p></li></ol><p>步骤:</p><ol><li>导入shiro依赖</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>编写Shiro 配置类 config包</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.springbootshiro.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">//声明为配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShiroConfig</span> &#123;</span><br><span class="line">    <span class="comment">//创建 ShiroFilterFactoryBean( 步骤三</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">getShiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;securityManager&quot;)</span> DefaultWebSecurityManager securityManager)</span> &#123;</span><br><span class="line">        <span class="type">ShiroFilterFactoryBean</span> <span class="variable">shiroFilterFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">        <span class="comment">//设置安全管理器</span></span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                添加Shiro内置过滤器，常用的有如下过滤器：</span></span><br><span class="line"><span class="comment">                anon： 无需认证就可以访问</span></span><br><span class="line"><span class="comment">                authc： 必须认证才可以访问</span></span><br><span class="line"><span class="comment">                user： 如果使用了记住我功能就可以直接访问</span></span><br><span class="line"><span class="comment">                perms: 拥有某个资源权限才可以访问</span></span><br><span class="line"><span class="comment">                role： 拥有某个角色权限才可以访问</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">        Map&lt;String, String&gt; filterMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;&gt;();</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/add&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/update&quot;</span>, <span class="string">&quot;authc&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(filterMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改到要跳转的login页面；</span></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建 DefaultWebSecurityManager( 步骤二</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;securityManager&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DefaultWebSecurityManager <span class="title function_">getDefaultWebSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span> &#123;</span><br><span class="line">        <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">        <span class="comment">//关联Realm</span></span><br><span class="line">        securityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> securityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建 realm 对象( 步骤一</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> UserRealm <span class="title function_">userRealm</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserRealm</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>我们倒着来，先想办法创建一个 realm 对象 </li><li>我们需要自定义一个 realm 的类，用来编写一些查询的方法，或者认证与授权的逻辑</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.springbootshiro.config;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationException;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.AuthenticationToken;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="comment">//自定义Realm</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了=&gt;授权逻辑PrincipalCollection&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了=&gt;认证逻辑AuthenticationToken&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-3、页面拦截实现"><a href="#3-3、页面拦截实现" class="headerlink" title="3.3、页面拦截实现"></a>3.3、页面拦截实现</h2><ol><li>编写两个页面、在templates目录下新建一个 user 目录 新建两个页面</li></ol><p>add.html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span><span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>add<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>小小的add<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>update.html</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span><span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>update<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>小小的update<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在template下新建一个首页</p><p>nihao.html(这里充当首页的意思)</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>登录页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        用户名： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        密码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="2"><li>编写跳转到页面的controller</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user/add&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">toAdd</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;user/add&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/user/update&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">toUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;user/update&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/toLogin&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">toLogin</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;nihao&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>测试，完全OK！</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220403214420469.png" alt="image-20220403214420469"></p><p>点击两个连接都会跳转到登录界面</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220403214441478.png" alt="image-20220403214441478"></p><h2 id="3-4、登录认证操作"><a href="#3-4、登录认证操作" class="headerlink" title="3.4、登录认证操作"></a>3.4、登录认证操作</h2><p>结果:</p><p>当用户名不存在的时候</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220404142928230.png" alt="image-20220404142928230"></p><p>密码错误:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220404143244141.png" alt="image-20220404143244141"></p><p>每一次提交账号和密码都会执行认证逻辑</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220404143447875.png" alt="image-20220404143447875"></p><p>成功就会跳转到首页:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220404143304742.png" alt="image-20220404143304742"></p><p>两个链接也都可以访问了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220404143310795.png" alt="image-20220404143310795"></p><h2 id="3-5、整合数据库-来执行登录认证操作"><a href="#3-5、整合数据库-来执行登录认证操作" class="headerlink" title="3.5、整合数据库,来执行登录认证操作"></a>3.5、整合数据库,来执行登录认证操作</h2><ol><li>导入Mybatis的相关依赖:</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">        <span class="comment">&lt;!--整合数据库,来查询用户信息--&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 引入 myBatis，这是 MyBatis官方提供的适配 Spring Boot 的，而不是Spring</span></span><br><span class="line"><span class="comment">Boot自己的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>编写配置文件,的数据库连接配置application.yaml文件</li></ol><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">nihao123</span></span><br><span class="line">  <span class="comment">#?serverTimezone=UTC解决时区的报错</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/shiro_feng?serverTimezone=UTC&amp;useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="comment">#Spring Boot 默认是不注入这些属性值的，需要自己绑定</span></span><br><span class="line">    <span class="comment">#druid 数据源专有配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">#配置监控统计拦截的filters，stat:监控统计、log4j：日志记录、wall：防御sql注入</span></span><br><span class="line">    <span class="comment">#如果允许时报错 java.lang.ClassNotFoundException:org.apache.log4j.Priority</span></span><br><span class="line">    <span class="comment">#则导入 log4j 依赖即可，Maven 地址：https://mvnrepository.com/artifact/log4j/log4j</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment">#似乎没起作用</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.feng.springshiro.pojo</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>编写试题类:又引入lombok</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.springbootshiro.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>编写mybatis那几层:</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.springbootshiro.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.feng.springbootshiro.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserByName</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.springbootshiro.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.feng.springbootshiro.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserByName</span><span class="params">(String name)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.springbootshiro.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.feng.springbootshiro.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.feng.springbootshiro.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.feng.springbootshiro.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">queryUserByName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.queryUserByName(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>UserMapper.xml文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.feng.springbootshiro.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryUserByName&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.feng.springbootshiro.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where name = #&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>可以先测试一下数据库整合是否成功:</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.springbootshiro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.feng.springbootshiro.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.feng.springbootshiro.service.impl.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Shiro02SpringbootApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserServiceImpl userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.queryUserByName(<span class="string">&quot;ladidol&quot;</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果成功的话就,开始进行realm中的认证了</p><ol start="6"><li>改造UserRealm，连接到数据库进行真实的操作！</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.springbootshiro.config;</span><br><span class="line"><span class="keyword">import</span> com.feng.springbootshiro.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.feng.springbootshiro.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authc.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.authz.AuthorizationInfo;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.realm.AuthorizingRealm;</span><br><span class="line"><span class="keyword">import</span> org.apache.shiro.subject.PrincipalCollection;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义Realm</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserRealm</span> <span class="keyword">extends</span> <span class="title class_">AuthorizingRealm</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthorizationInfo <span class="title function_">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principals)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了=&gt;授权逻辑PrincipalCollection&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行认证逻辑</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> AuthenticationInfo <span class="title function_">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken token)</span> <span class="keyword">throws</span> AuthenticationException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行了=&gt;认证逻辑AuthenticationToken&quot;</span>);</span><br><span class="line"></span><br><span class="line">;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.判断用户名</span></span><br><span class="line">        <span class="type">UsernamePasswordToken</span> <span class="variable">userToken</span> <span class="operator">=</span> (UsernamePasswordToken)token;</span><br><span class="line">        <span class="comment">//真实连接数据库</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.queryUserByName(userToken.getUsername());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//数据库中没有找到</span></span><br><span class="line">            <span class="comment">//用户名不存在</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">//shiro底层就会抛出 UnknownAccountException</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//2. 验证密码,我们可以使用一个AuthenticationInfo实现类 SimpleAuthenticationInfo</span></span><br><span class="line">        <span class="comment">// shiro会自动帮我们验证！重点是第二个参数就是要验证的密码！</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SimpleAuthenticationInfo</span>(<span class="string">&quot;&quot;</span>, user.getPwd(), <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>整合后的项目结构:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220404150420687.png" alt="image-20220404150420687"></p><p>结果:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220404150248929.png" alt="image-20220404150248929"></p><p>完全OK，成功查询出来了！</p><h2 id="3-6、思考：密码比对原理探究"><a href="#3-6、思考：密码比对原理探究" class="headerlink" title="3.6、思考：密码比对原理探究"></a>3.6、思考：密码比对原理探究</h2><p>思考？这个Shiro，是怎么帮我们实现密码自动比对的呢？<br>我们可以去 realm的父类<code>AuthorizingRealm</code>的父类<code>AuthenticatingRealm</code>中找一个方法 核心： <code>getCredentialsMatcher()</code> 翻译过来：获取证书匹配器 我们去看这个接口 <code>CredentialsMatcher </code>有很多的实现类，MD5盐值加密</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220404153012119.png" alt="image-20220404153012119"></p><p>我们的密码一般都不能使用明文保存？需要加密处理；思路分析 </p><ol><li>如何把一个字符串加密为MD5 </li><li>替换当前的Realm 的 <code>CredentialsMatcher </code>属性，直接使用 <code>Md5CredentialsMatcher </code>对象， 并设置加密算法</li></ol><h2 id="3-7、用户授权操作顺便整合了一下Thymeleaf"><a href="#3-7、用户授权操作顺便整合了一下Thymeleaf" class="headerlink" title="3.7、用户授权操作顺便整合了一下Thymeleaf"></a>3.7、用户授权操作顺便整合了一下Thymeleaf</h2><ol><li>还要添加一下依赖:</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--https://mvnrepository.com/artifact/com.github.theborakompanioni/thymeleaf-extras-shiro --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>.配置一个shiro的Dialect ，在shiro的配置中增加一个Bean</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置ShiroDialect：方言，用于 thymeleaf 和 shiro 标签配合使用</span></span><br><span class="line"><span class="comment">//这个为了登录者只展示相应链接,这个是前后端不分离的时候</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ShiroDialect <span class="title function_">getShiroDialect</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="3"><li>修改index中的前端配置</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span> <span class="attr">xmlns:shiro</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>shiro首页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里主要判断是不是需要展示登录按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:if</span>=<span class="string">&quot;$&#123;session.loginUser==null&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--看权限是否够--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:add&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/add&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:update&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;/user/update&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="4"><li>在shiroconfig中修改请求访问权限:</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//        filterMap.put(&quot;/user/add&quot;, &quot;authc&quot;);</span></span><br><span class="line"><span class="comment">//        filterMap.put(&quot;/user/update&quot;, &quot;authc&quot;);</span></span><br><span class="line">        <span class="comment">//授权过滤器</span></span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/add&quot;</span>,<span class="string">&quot;perms[user:add]&quot;</span>);</span><br><span class="line">        filterMap.put(<span class="string">&quot;/user/update&quot;</span>,<span class="string">&quot;perms[user:update]&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="5"><li>数据库表中的修改:</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220404160846241.png" alt="image-20220404160846241"></p><ol start="6"><li>实体类的修改:</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.springbootshiro.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">    <span class="keyword">private</span> String perms;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="7"><li>在controller中添加一个未授权不能访问的提示页面</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/noauth&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">noAuth</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;未经授权不能访问此页面&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候也要在config中的然后再 shiroFilterFactoryBean 中配置一个未授权的请求页面！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">&quot;/noauth&quot;</span>);</span><br></pre></td></tr></table></figure><p>没登录的话,就可以有thymeleaf来, 展示登录按钮</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220404160308339.png" alt="image-20220404160308339"></p><p>登录小小就可以有add这个权限:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220404154645775.png" alt="image-20220404154645775"></p><p>登录ladidol这个用户就有update这个权限了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220404154730263.png" alt="image-20220404154730263"></p><p>ladfeng这个用户暂时没弄权限:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220404154808066.png" alt="image-20220404154808066"></p><p>用小小直接访问update的话会返回:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220404161314742.png" alt="image-20220404161314742"></p><h2 id="3-8、小结："><a href="#3-8、小结：" class="headerlink" title="3.8、小结："></a>3.8、小结：</h2><p>如果学习了SpringSecurity 和 Shiro 两个安全的框架，其实什么都不用，我们靠拦截器也可以实现这些功能对吧，但是可能需要花费大量的时间和代码， 还有就是Bug多，思考不全，而现在，我们两个框架都会使用了，也给大家对比的进行学习了，当然真 实的工作中，可能代码会更加的复杂，请多加练习，和复习，也可以看一下源码。</p><h1 id="4-后记："><a href="#4-后记：" class="headerlink" title="4. 后记："></a>4. 后记：</h1><p>如果想要更深入了解shiro的话，后续我会再把黑马老师的那个项目分析实现一下，那个结合redis的可能更加适合工作的时候使用；</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBootWeb开发提升(Swagger)</title>
      <link href="/2022/04/03/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5DSpringBootWeb%E5%BC%80%E5%8F%91%E6%8F%90%E5%8D%87(Swagger)/"/>
      <url>/2022/04/03/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5DSpringBootWeb%E5%BC%80%E5%8F%91%E6%8F%90%E5%8D%87(Swagger)/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> swagger </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swagger </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode刷题篇</title>
      <link href="/2022/04/03/LeetCode%E5%88%B7%E9%A2%98%E7%AF%87/"/>
      <url>/2022/04/03/LeetCode%E5%88%B7%E9%A2%98%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p><a href="https://blog.csdn.net/qq_32424059/article/details/102850716?utm_source=app&app_version=5.1.1&code=app_1562916241&uLinkId=usr1mkqgl919blen">写于LeetCode刷完900题之际的感想</a></p><p><strong>1. 刻意练习真的有奇效。</strong></p><p><strong>2. 做了，即便只做一点点，也比不做要好。</strong></p><p><strong>3. 一天做10题的收获 &gt; 十天做10题。</strong></p><p><strong>4. 保持心情愉快。</strong></p><p><strong>5. 多和别人交流 and Think out loud。</strong></p><p><strong>6. 人生苦短，我用Python。</strong>(对我来说可能go或者java吧)</p><p><strong>7. 推荐参加周赛。</strong></p><p><strong>8. 打好基础吧，</strong></p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> LeetCode </tag>
            
            <tag> 刷题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>typora 1.0.3破解教程</title>
      <link href="/2022/04/03/typora1.0.3%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/"/>
      <url>/2022/04/03/typora1.0.3%E7%A0%B4%E8%A7%A3%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>迅雷下载:</p><p>链接：<a href="https://pan.xunlei.com/s/VMziT2DOaboqdsZvNpj4D0gEA1">https://pan.xunlei.com/s/VMziT2DOaboqdsZvNpj4D0gEA1</a><br>提取码：a76x</p><ol><li>先安装好后，<strong>注意安装完成后不要启动typora：</strong></li></ol><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220403161217390.png" alt="image-20220403161217390"></p><ol start="2"><li>进入这个文件夹中的tools文件夹：</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220403161105713.png" alt="image-20220403161105713"></p><ol start="3"><li>安装完成后不要启动typora，将tools文件全部复制到安装路径的resources文件当中</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220403161309293.png" alt="image-20220403161309293"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220403161604718.png" alt="image-20220403161604718"></p><ol start="4"><li>运行run.exe，等待cmd弹窗运行结束后将key.txt文本内的激活码复制到序列号选框当中，输入任意邮箱地址</li></ol><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220403161730415.png" alt="image-20220403161730415"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220403161720685.png" alt="image-20220403161720685"></p><p>到此typora破解安装就成功了！</p><p>欢迎点赞关注哦！</p><p>也欢迎到访我的博客！<a href="https://ladfeng.top/">传送门</a>!</p>]]></content>
      
      
      <categories>
          
          <category> 破解教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 破解教程 </tag>
            
            <tag> typora </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>活好你的二十岁[转载]</title>
      <link href="/2022/04/02/%E6%B4%BB%E5%A5%BD%E4%BD%A0%E7%9A%84%E4%BA%8C%E5%8D%81%E5%B2%81/"/>
      <url>/2022/04/02/%E6%B4%BB%E5%A5%BD%E4%BD%A0%E7%9A%84%E4%BA%8C%E5%8D%81%E5%B2%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>“别活得太认真，你逃不出你的命运。” – Van Wilder</strong></p></blockquote><p>这句流行的名言，对于如今的20几岁的青年，看起来就是让他们没有任何目标的自由生活，尽可能的为所欲为，不接受任何指引。作为一个工作狂、一个创业者，从我自学校毕业，这句话就没有和我产生过共鸣，不仅如此，我甚至还十分慎重的过好每一分钟，因为我知道，20几岁，这是一生中一段非常独特的时间，是人生的其它时间代替不了的。</p><p>一个朋友最近推荐我一本书，<a href="http://amzn.to/Zst06b">《The Definining Decade: Why your twenties matter – and how to make the most of them now》.</a>读完之后，我前所未有的认识到了我20几岁这段时间的重要性，它改变了我如何度过20几岁余下这最后几年的人生计划。</p><p>出自一位临床心理学家之手，这本书触及到了我们生活的各个关键点：工作，爱情和我们的身体。里面有很多的思想都是非常宝贵的，但最触动我的是下面这三个：</p><h3 id="1-你的20几岁为你之后余下的人生事业打下了成功的基础。"><a href="#1-你的20几岁为你之后余下的人生事业打下了成功的基础。" class="headerlink" title="1) 你的20几岁为你之后余下的人生事业打下了成功的基础。"></a>1) 你的20几岁为你之后余下的人生事业打下了成功的基础。</h3><p>无论你做多长时间的酒吧招待或餐厅服务员，用多长时间在你家后院想你的“创业想法”，你都是在浪费生命，阻挡自己朝着未来更成功、更幸福的生活前进。</p><p>也许在星巴克当服务员的日子很快乐，但你的收入能养活你未来的孩子吗？更重要的，你真的打算今后10年仍然干这个吗？如果不是，那你目前的工作是否有助于你迈进你想要的工作的门槛吗？如果你不是Facebook的创始人，也许你应该考虑到一家创业公司开创自己的职业道路，而不是做一个永远都飞不起来的雏鸟。</p><p>人都是一步一步走出来的。从刚开始去做那些辛苦的低收入的，能力上绰绰有余的工作，慢慢得到越来越多的机会。我有硕士学位，仍然需要抽出时间来去实习，才能进入科技界的大门。实习工作让我在一家创业公司找到了全职工作，公司的创始人向我引荐了Hiten Shah，他成为了我的导师，现在，我给他的公司开发产品KISSmetrics。他是我见到的最成功的经营自己事业的人，他总是从小事做起。</p><p>****经验：****不要拖延开展自己的事业。越早进入一个行业或成为你希望的角色，越早你能获得你满意的职业生涯。</p><h3 id="2-据统计，女人应该在35岁之前生孩子。"><a href="#2-据统计，女人应该在35岁之前生孩子。" class="headerlink" title="2) 据统计，女人应该在35岁之前生孩子。"></a>2) 据统计，女人应该在35岁之前生孩子。</h3><p>根据作者所说，女人怀孕的能力在35岁左右的时候开始急剧下降。更糟糕的是，超过35岁，四分之一的女性会流产。这是一个令人震惊的数据，让我想象到了一副好不容易受孕却最终流产的场景。没有人想要这样的结果。</p><p>20几岁的时候成立家庭的想法和离我很遥远。我把事业放到了其它所有事情之前。但我知道，我最终是要组织一个家庭的。当知道了这些统计数据后，我们更加认清了我做的选择意味这什么、我现在所做的是为了什么。这正好说明了为什么这么多的创业者会在30左右开始建立家庭。</p><p>****经验：****如果组建一个家庭是你的人生目标，那你的时间会比你想象的要少。如果你是一个男的，想娶一个和你年纪相当的女人，时间的脚步走催促着你，同样也在催促着她。</p><h3 id="3-你的大脑中20多岁时成熟定型。"><a href="#3-你的大脑中20多岁时成熟定型。" class="headerlink" title="3) 你的大脑中20多岁时成熟定型。"></a>3) 你的大脑中20多岁时成熟定型。</h3><p>我一直以为人的大脑在孩子时就已经定型，从10几岁到三四十岁之间不会有多少变化，40四十以后开始萎缩。但事实证明，人的前大脑皮层会在20几岁时发生巨大的变化，30几岁时趋于稳定。<a href="http://en.wikipedia.org/wiki/Frontal_lobe">维基百科上说：</a></p><blockquote><p><em><strong>*额叶(frontal lobes)职能涉及到从当前的活动中认识将来的后果，影响你在好的活动和不好的活动之间做出的选择，忽视或制止不可接受的社会反应，在一些事情和事件间辨别它们的相似或不同。*</strong></em></p></blockquote><p>作为一个有志向开创一个大型公司的人，我认识到现在就需要培养大量的用来领导这样一个公司的各种技能，因为再过几年你就很难或者根本不可能像现在这样学习知识。我听到很多的创业者在公司做到一定规模后就没有能力(或不想)管理这个公司，我现在正面临着提高自己和培养自己的巨大挑战。</p><p><em><strong>*经验：*</strong></em> 不管你有什么样的人生或事业目标，你需要认识到，20多岁时获得的技能和人格特性将会决定着你余生的众多能力。</p><p>很少有书能让我像读这本书这样做如此多的人生反省。如果这些事情你也感兴趣，我高度推荐你看一看。</p><p>[英文原文：<a href="http://jasonevanish.com/2012/11/01/why-you-should-take-your-20s-seriously/">Why you should take your 20s seriously</a> ]</p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 未来 </tag>
            
            <tag> 思考 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java bean浅析</title>
      <link href="/2022/04/01/java%20bean/"/>
      <url>/2022/04/01/java%20bean/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>JavaBean 是一种JAVA语言写成的类（可重用组件）。</p><blockquote><p>它不是技术，而是规范</p></blockquote><p>为写成JavaBean，类必须是具体的和公共的，并且具有无参数的构造器。JavaBean 通过提供符合一致性设计模式的公共方法将内部域暴露成员属性，set和get方法获取。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">所有的属性都是private</span><br><span class="line">提供默认的构造方法</span><br><span class="line">提供getter和setter</span><br><span class="line">实现serializable接口</span><br></pre></td></tr></table></figure><h2 id="JavaBean的结构特点"><a href="#JavaBean的结构特点" class="headerlink" title="JavaBean的结构特点"></a>JavaBean的结构特点</h2><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220401112235376.png" alt="image-20220401112235376"></p><ul><li>是一种习惯和约定</li><li>getXxx</li><li>setXxx</li><li>isXxx</li><li>addXxxListener</li><li>setAttribute</li><li>getAttibute</li></ul><p>一个简单的javabean代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> manipatic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/4/1 10:59</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer score;</span><br><span class="line">    <span class="keyword">private</span> Date birthday;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(Long id, String name, Integer score, Date birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScore</span><span class="params">(Integer score)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.score = score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBirthday</span><span class="params">(Date birthday)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.birthday = birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getScore</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getBirthday</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> birthday;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, score=&quot;</span> + score +</span><br><span class="line">                <span class="string">&quot;, birthday=&quot;</span> + birthday +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>javabean组成：</p><p>1）属性（properties）</p><p>属性值可以通过调用适当的bean方法进行。比如，可能bean有一个名字属性，这个属性的值可能需要调用String getName（）方法读取，而写入属性值可能要需要调用void setName（String str）的方法。这里的属性命名就要遵循驼峰命名法；</p><p>2）方法（method）</p><p>JavaBean严格遵守面向对象的类设计逻辑，不让外部世界访问其任何字段（没有public字段）。这样，方法调用是接触Bean的唯一途径。</p><p>3）事件（event）</p><p>事件为JavaBean组件提供了一种发送通知给其他组件的方法。在AWT事件模型中，一个事件源可以注册事件监听器对象。当事件源检测到发生了某种事件时，它将调用事件监听器对象中的一个适当的事件处理方法来处理这个事件。</p><h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p>​    JavaBean的任务就是: “Write once, run anywhere, reuse everywhere”，即“一次性编写，任何地方执行，任何地方重用”。这个任何实际上就是要解决困扰软件工业的日益增加的复杂性，提供一个简单的、紧凑的和优秀的问题解决方案。</p><p>详解可以看一下<a href="https://blog.csdn.net/fuhanghang/article/details/84074561?ops_request_misc=&request_id=&biz_id=102&utm_term=javabean&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-0-84074561.nonecase&spm=1018.2226.3001.4187">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javabean </tag>
            
            <tag> java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(未完成)shiro权限管理</title>
      <link href="/2022/03/31/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dspringboot%E6%95%B4%E5%90%88shiro%E4%B8%93%E9%A2%98/"/>
      <url>/2022/03/31/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dspringboot%E6%95%B4%E5%90%88shiro%E4%B8%93%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/6844903580999106567?share_token=2f5bb52c-77aa-42c8-89e5-7b31ac7b4587">掘金传送门</a></p><p>先过一遍狂神的<a href="https://www.bilibili.com/video/BV1NE411i7S8?spm_id_from=333.337.search-card.all.click">传送门</a></p><p>这个似乎有点太难理解了</p><p>等先过一遍狂神的demo过后再来看一下下面这个黑马的springboot整合</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>Spring Security和Shiro的区别<br>1.相同点<br>①认证功能<br>②授权功能<br>③加密功能<br>④会话管理<br>⑤缓存支持<br>⑥rememberMe功能<br>… …</p><p>2.不同点<br>①Spring Security是一个重量级的安全管理框架；Shiro则是一个轻量级的安全管理框架<br>②Spring Security 基于Spring开发，项目若使用Spring作为基础，配合Spring Security 做权限更便捷，而Shiro需要和Spring 进行整合开发；<br>③Spring Security 功能比Shiro更加丰富些，例如安全维护方面；<br>④Spring Security 社区资源相对于Shiro更加丰富；<br>⑤Shiro 的配置和使用比较简单，Spring Security 上手复杂些；<br>⑥Shiro 依赖性低，不需要任何框架和容器，可以独立运行， Spring Security依赖Spring容器；<br>⑦Shiro 不仅仅可以使用在web中，它可以工作在任何应用环境中。在集群会话时Shiro最重要的一个好处或许就是它的会话是独立于容器的；</p><h1 id="shiro权限控制"><a href="#shiro权限控制" class="headerlink" title="shiro权限控制"></a>shiro权限控制</h1><h2 id="1-权限控制"><a href="#1-权限控制" class="headerlink" title="1.权限控制"></a>1.权限控制</h2><h3 id="1-1-什么是权限控制"><a href="#1-1-什么是权限控制" class="headerlink" title="1.1 什么是权限控制"></a>1.1 什么是权限控制</h3><p>​        白话文：控制某某用户可以&#x2F;不可以访问某某功能。</p><p>​        我们今天的权限控制，实际上就是对资源加锁，每个锁都有一些规则，只有对应的钥匙才能打开，我们根据用户的角色，将钥匙分配给不同用户。</p><h3 id="1-2-权限控制的方式"><a href="#1-2-权限控制的方式" class="headerlink" title="1.2 权限控制的方式"></a>1.2 权限控制的方式</h3><p>1、基于过滤器进行控制。比如我们servlet中的filter</p><p>2、基于注解进行控制。可以借助spring的AOP进行控制。</p><p>3、直接在业务代码中判断(不可取)</p><p>4、页面标签的权限控制——不太常用。</p><h2 id="2-shiro简介"><a href="#2-shiro简介" class="headerlink" title="2.shiro简介"></a>2.shiro简介</h2><h3 id="2-1-功能"><a href="#2-1-功能" class="headerlink" title="2.1 功能"></a>2.1 功能</h3><h4 id="认证：即我们常说的登录"><a href="#认证：即我们常说的登录" class="headerlink" title="认证：即我们常说的登录"></a>认证：即我们常说的登录</h4><h4 id="授权：给予用户资源权限"><a href="#授权：给予用户资源权限" class="headerlink" title="授权：给予用户资源权限"></a>授权：给予用户资源权限</h4><h4 id="会话：当前认证用户会话"><a href="#会话：当前认证用户会话" class="headerlink" title="会话：当前认证用户会话"></a>会话：当前认证用户会话</h4><h4 id="缓存：缓存认证权限等"><a href="#缓存：缓存认证权限等" class="headerlink" title="缓存：缓存认证权限等"></a>缓存：缓存认证权限等</h4><h3 id="2-2-shiro核心流程"><a href="#2-2-shiro核心流程" class="headerlink" title="2.2 shiro核心流程"></a>2.2 shiro核心流程</h3><h4 id="图示"><a href="#图示" class="headerlink" title="图示"></a>图示</h4><p>——这个图只要是用shiro必定逃离不了。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1587815495018.png" alt="1587815495018">    </p><h3 id="2-3-权限控制方式："><a href="#2-3-权限控制方式：" class="headerlink" title="2.3 权限控制方式："></a>2.3 权限控制方式：</h3><h4 id="filter方式"><a href="#filter方式" class="headerlink" title="filter方式"></a>filter方式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置过滤匹配路径和判断规则</span></span><br><span class="line">Map&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;String, String&gt;();</span><br><span class="line">filterChainDefinitionMap.put(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);<span class="comment">//可以匿名访问</span></span><br><span class="line">shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br></pre></td></tr></table></figure><p>其中，shiro的filter列表，盗了一张图：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1587973836394.png" alt="1587973836394"></p><table><thead><tr><th>过滤器别名</th><th>对应的过滤器</th><th>作用</th></tr></thead><tbody><tr><td><strong>anon</strong></td><td>org.apache.shiro.web.filter.authc.AnonymousFilter</td><td>匿名访问</td></tr><tr><td><strong>authc</strong></td><td><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/FormAuthenticationFilter.html">org.apache.shiro.web.filter.authc.FormAuthenticationFilter</a></td><td>认证后访问</td></tr><tr><td>authcBasic</td><td><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/BasicHttpAuthenticationFilter.html"> org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter</a></td><td></td></tr><tr><td><strong>logout</strong></td><td><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authc/LogoutFilter.html">org.apache.shiro.web.filter.authc.LogoutFilter</a></td><td>登出</td></tr><tr><td>noSessionCreation</td><td><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/session/NoSessionCreationFilter.html">org.apache.shiro.web.filter.session.NoSessionCreationFilter</a></td><td></td></tr><tr><td><strong>perms</strong></td><td><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/PermissionsAuthorizationFilter.html">org.apache.shiro.web.filter.authz.PermissionsAuthorizationFilter</a></td><td>需要某某权限</td></tr><tr><td>port</td><td><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/PermissionsAuthorizationFilter.html">org.apache.shiro.web.filter.authz.PortFilter</a></td><td></td></tr><tr><td>rest</td><td><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/HttpMethodPermissionFilter.html">org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter</a></td><td></td></tr><tr><td><strong>roles</strong></td><td><a href="http://shiro.apache.org/static/current/apidocs/org/apache/shiro/web/filter/authz/RolesAuthorizationFilter.html">org.apache.shiro.web.filter.authz.RolesAuthorizationFilter</a></td><td>角色</td></tr></tbody></table><h4 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在具体的方法上添加注解</span></span><br><span class="line"><span class="meta">@RequiresAuthentication</span> ：表示当前Subject已经认证：Subject.isAuthenticated()返回<span class="literal">true</span></span><br><span class="line"><span class="meta">@RequiresUse</span>：表示当前Subject已经身份验证或者通过记住我登录的</span><br><span class="line"><span class="meta">@RequiresGuest</span> ：表示当前Subject没有身份验证或通过记住我登录过，即是游客身份</span><br><span class="line"><span class="meta">@RequiresRoles(value=&#123;“admin”, “user”&#125;, logical= Logical.AND)</span></span><br><span class="line"><span class="meta">@RequiresPermissions(value=&#123;“user:select”, “user:all”&#125;, logical= Logical.OR)</span> </span><br></pre></td></tr></table></figure><p>只是用注解是不生效的，需要添加配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 注解支持：</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line"><span class="keyword">public</span> DefaultAdvisorAutoProxyCreator <span class="title function_">defaultAdvisorAutoProxyCreator</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">DefaultAdvisorAutoProxyCreator</span> <span class="variable">defaultAAP</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultAdvisorAutoProxyCreator</span>();</span><br><span class="line">    defaultAAP.setProxyTargetClass(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> defaultAAP;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> AuthorizationAttributeSourceAdvisor <span class="title function_">authorizationAttributeSourceAdvisor</span><span class="params">(SecurityManager securityManager)</span> &#123;</span><br><span class="line">    <span class="type">AuthorizationAttributeSourceAdvisor</span> <span class="variable">authorizationAttributeSourceAdvisor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AuthorizationAttributeSourceAdvisor</span>();</span><br><span class="line">    authorizationAttributeSourceAdvisor.setSecurityManager(securityManager);</span><br><span class="line">    <span class="keyword">return</span> authorizationAttributeSourceAdvisor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="标签（了解）"><a href="#标签（了解）" class="headerlink" title="标签（了解）"></a>标签（了解）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">注意，此处使用的是thymeleaf做视图界面展示，并非jsp</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--输出当前用户信息，通常为登录帐号信息。如果存入的principal是对象，可以通过property取值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">shiro:principal</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span>/&gt;</span> <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--验证当前用户是否拥有指定权限。  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">shiro:hasPermission</span>=<span class="string">&quot;user:select&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> &gt;</span>查看用户列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="comment">&lt;!-- 拥有权限 --&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--与hasPermission标签逻辑相反，当前用户没有制定权限时，验证通过。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:lacksPermission</span>=<span class="string">&quot;user:del&quot;</span>&gt;</span> 没有权限 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--验证当前用户是否拥有以下所有权限。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasAllPermissions</span>=<span class="string">&quot;user:view, user:add&quot;</span>&gt;</span>拥有所有才能访问<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--验证当前用户是否拥有以下任意一个权限。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasAnyPermissions</span>=<span class="string">&quot;user:view, user:del&quot;</span>&gt;</span>拥有任意一个即可访问<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--验证当前用户是否属于该角色。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">shiro:hasRole</span>=<span class="string">&quot;role_admin&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>是role_admin角色<span class="tag">&lt;/<span class="name">a</span>&gt;</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--与hasRole标签逻辑相反，当用户不属于该角色时验证通过。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:lacksRole</span>=<span class="string">&quot;role_admin&quot;</span>&gt;</span>我没有role_admin角色<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--验证当前用户是否属于以下所有角色。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasAllRoles</span>=<span class="string">&quot;developer, admin&quot;</span>&gt;</span> 角色与判断 <span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--验证当前用户是否属于以下任意一个角色。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:hasAnyRoles</span>=<span class="string">&quot;admin, vip, developer&quot;</span>&gt;</span> 角色或判断 <span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--验证当前用户是否为“访客”，即未认证（包含未记住）的用户。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:guest</span>=<span class="string">&quot;&quot;</span>&gt;</span>访客 未认证<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--已认证通过的用户。不包含已记住的用户，这是与user标签的区别所在。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:authenticated</span>=<span class="string">&quot;&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">span</span> <span class="attr">shiro:principal</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">p</span>&gt;</span>   </span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!--未认证通过用户，与authenticated标签相对应。--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--与guest标签的区别是，该标签包含已记住用户。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">shiro:notAuthenticated</span>=<span class="string">&quot;&quot;</span>&gt;</span> 未认证通过用户 <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-springboot整合shiro"><a href="#3-springboot整合shiro" class="headerlink" title="3.springboot整合shiro"></a>3.springboot整合shiro</h2><h3 id="3-1-SecurityManager"><a href="#3-1-SecurityManager" class="headerlink" title="3.1 SecurityManager"></a>3.1 SecurityManager</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SecurityManager <span class="title function_">securityManager</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">DefaultWebSecurityManager</span> <span class="variable">securityManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSecurityManager</span>();</span><br><span class="line">    List&lt;Realm&gt; realms = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Realm&gt;();</span><br><span class="line">    realms.add(customRealm());</span><br><span class="line">    securityManager.setRealms(realms);</span><br><span class="line">    securityManager.setSessionManager(sessionManager());</span><br><span class="line">    <span class="keyword">return</span> securityManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-Realm"><a href="#3-2-Realm" class="headerlink" title="3.2 Realm"></a>3.2 Realm</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主要用作封装认证、授权信息，返回给安全管理器处理</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CustomRealm <span class="title function_">customRealm</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">CustomRealm</span> <span class="variable">customRealm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomRealm</span>();</span><br><span class="line">    <span class="comment">//设置密码校验算法——需要和加密算法一致</span></span><br><span class="line">    customRealm.setCredentialsMatcher(credentialsMatcher());</span><br><span class="line">    <span class="keyword">return</span> customRealm;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> CredentialsMatcher <span class="title function_">credentialsMatcher</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">HashedCredentialsMatcher</span> <span class="variable">hashedCredentialsMatcher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashedCredentialsMatcher</span>();</span><br><span class="line">    hashedCredentialsMatcher.setHashAlgorithmName(<span class="string">&quot;md5&quot;</span>);<span class="comment">//散列算法:这里使用MD5算法;</span></span><br><span class="line">    <span class="comment">//        hashedCredentialsMatcher.setHashIterations(2);</span></span><br><span class="line">    <span class="keyword">return</span> hashedCredentialsMatcher;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-ShiroFilter"><a href="#3-3-ShiroFilter" class="headerlink" title="3.3 ShiroFilter"></a>3.3 ShiroFilter</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title function_">shiroFilter2</span><span class="params">(SecurityManager securityManager)</span>&#123;</span><br><span class="line">    <span class="type">ShiroFilterFactoryBean</span> <span class="variable">shiroFilterFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroFilterFactoryBean</span>();</span><br><span class="line">    shiroFilterFactoryBean.setSecurityManager(securityManager);</span><br><span class="line">    shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/admin/toPage&quot;</span>);</span><br><span class="line">    Map&lt;String, String&gt; filterChainDefinitionMap = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;String, String&gt;();</span><br><span class="line">    <span class="comment">//访问控制</span></span><br><span class="line">    filterChainDefinitionMap.put(<span class="string">&quot;/admin/toPage&quot;</span>, <span class="string">&quot;anon&quot;</span>);<span class="comment">//可以匿名访问</span></span><br><span class="line">    filterChainDefinitionMap.put(<span class="string">&quot;/admin/login&quot;</span>, <span class="string">&quot;anon&quot;</span>);<span class="comment">//可以匿名访问</span></span><br><span class="line">    filterChainDefinitionMap.put(<span class="string">&quot;/storage/list&quot;</span>, <span class="string">&quot;perms[user:select]&quot;</span>);<span class="comment">//可以匿名访问</span></span><br><span class="line">    <span class="comment">//        filterChainDefinitionMap.put(&quot;/&quot;, &quot;anon&quot;);//可以匿名访问</span></span><br><span class="line">    filterChainDefinitionMap.put(<span class="string">&quot;/**&quot;</span>, <span class="string">&quot;anon&quot;</span>);<span class="comment">//可以匿名访问</span></span><br><span class="line">    shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);</span><br><span class="line">    <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-SessionManager"><a href="#3-4-SessionManager" class="headerlink" title="3.4 SessionManager"></a>3.4 SessionManager</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SessionManager <span class="title function_">sessionManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">DefaultWebSessionManager</span> <span class="variable">sessionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultWebSessionManager</span>();</span><br><span class="line">    sessionManager.setSessionDAO(redisSessionDAO());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置会话过期时间</span></span><br><span class="line">    sessionManager.setGlobalSessionTimeout(<span class="number">3</span>*<span class="number">60</span>*<span class="number">1000</span>); <span class="comment">//默认半小时</span></span><br><span class="line">    sessionManager.setDeleteInvalidSessions(<span class="literal">true</span>); <span class="comment">//默认自定调用SessionDAO的delete方法删除会话</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置会话定时检查</span></span><br><span class="line">    sessionManager.setSessionValidationInterval(<span class="number">180000</span>); <span class="comment">//默认一小时</span></span><br><span class="line">    sessionManager.setSessionValidationSchedulerEnabled(<span class="literal">true</span>);</span><br><span class="line">    <span class="keyword">return</span> sessionManager;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SessionDAO <span class="title function_">redisSessionDAO</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ShiroSessionRedisDAO</span> <span class="variable">redisDAO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShiroSessionRedisDAO</span>();</span><br><span class="line">    <span class="keyword">return</span> redisDAO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-用户新增"><a href="#3-4-用户新增" class="headerlink" title="3.4 用户新增"></a>3.4 用户新增</h3><p>在controller中接收新增用户后，交给service的saveAdmin做密码加密后保存</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveAdmin</span><span class="params">(Administrator admin)</span> &#123;</span><br><span class="line">    <span class="comment">//对密码进行加密处理</span></span><br><span class="line">    <span class="comment">//1.得到明文密码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> admin.getPassword();</span><br><span class="line">    <span class="comment">//2.生成随机盐 4-8位的随机数字</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">randomSalt</span> <span class="operator">=</span> RandomStringUtils.randomNumeric(<span class="number">4</span>, <span class="number">8</span>);</span><br><span class="line">    admin.setPrivateSalt(randomSalt);</span><br><span class="line">    <span class="comment">//3.md5加密 添加随机盐，加密次数1次(当然，这个一次可以配置在配置文件在，此处注入读取)</span></span><br><span class="line">    <span class="type">Md5Hash</span> <span class="variable">md5Hash</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Md5Hash</span>(password,randomSalt,<span class="number">1</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">hashPwd</span> <span class="operator">=</span> md5Hash.toString();</span><br><span class="line">    admin.setPassword(hashPwd);</span><br><span class="line">    userMapper.insert(admin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-用户登录"><a href="#3-5-用户登录" class="headerlink" title="3.5 用户登录"></a>3.5 用户登录</h3><p>认证</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(</span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(&quot;username&quot;)</span> String username, </span></span><br><span class="line"><span class="params">        <span class="meta">@RequestParam(&quot;password&quot;)</span> String password,Model map)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Subject</span> <span class="variable">subject</span> <span class="operator">=</span> SecurityUtils.getSubject();</span><br><span class="line">            <span class="comment">//处理登录的用户名密码token</span></span><br><span class="line">            <span class="type">UsernamePasswordToken</span> <span class="variable">token</span> <span class="operator">=</span> </span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">UsernamePasswordToken</span>(username, password);</span><br><span class="line">            <span class="comment">//登录(开始认证)</span></span><br><span class="line">            subject.login(token);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;redirect:/admin/main&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (UnknownAccountException ukactException)&#123;</span><br><span class="line">            <span class="comment">//用户不存在异常</span></span><br><span class="line">            ukactException.printStackTrace();</span><br><span class="line">            map.addAttribute(<span class="string">&quot;err_msg&quot;</span>,<span class="string">&quot;用户不存在&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IncorrectCredentialsException credentialExctption)&#123;</span><br><span class="line">            credentialExctption.printStackTrace();</span><br><span class="line">            map.addAttribute(<span class="string">&quot;err_msg&quot;</span>,<span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.addAttribute(<span class="string">&quot;err_msg&quot;</span>,<span class="string">&quot;服务器错误，请重试&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-6-用户访问-权限控制"><a href="#3-6-用户访问-权限控制" class="headerlink" title="3.6 用户访问(权限控制)"></a>3.6 用户访问(权限控制)</h3><h2 id="4-其他"><a href="#4-其他" class="headerlink" title="4.其他"></a>4.其他</h2><h3 id="4-1-thymeleaf中使用shiro标签的支持"><a href="#4-1-thymeleaf中使用shiro标签的支持" class="headerlink" title="4.1 thymeleaf中使用shiro标签的支持"></a>4.1 thymeleaf中使用shiro标签的支持</h3><p>依赖坐标：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.theborakompanioni<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>thymeleaf-extras-shiro<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置支持：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> ShiroDialect <span class="title function_">shiroDialect</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ShiroDialect</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-request判断ajax请求"><a href="#4-2-request判断ajax请求" class="headerlink" title="4.2 request判断ajax请求"></a>4.2 request判断ajax请求</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过头X-Requested-With=XMLHttpRequest来判断</span></span><br><span class="line">request.getHeader(<span class="string">&quot;X-Requested-With&quot;</span>);</span><br></pre></td></tr></table></figure><p>~</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(未完成)shiro的整合的&quot;心路历程&quot;</title>
      <link href="/2022/03/31/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dspringboot%E6%95%B4%E5%90%88shiro%E5%88%9D%E5%A7%8B%E8%BF%87%E7%A8%8B/"/>
      <url>/2022/03/31/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dspringboot%E6%95%B4%E5%90%88shiro%E5%88%9D%E5%A7%8B%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="6cd47dbe4d9373cb0f70f72f0a38d3d714ee117e98066a542113ee2092ad58a7">c92271cf075fe1244ae5c161f435c0032087dbbfba99c870a4218f304ce2b1453a6af93b1dd1045ccafeffebd2f418813efd11493a5eb0af198029f5e3924890635572d7f1e011ee900f8cd7496edd91dcbf9f2e19aa8ee26889b310112b147a7e0ad62de2a4554012d6d781a0b63cb5493db59960866f1187211ac0c1d16d3812aae37da11b20e4081e16274e02cf241d0b9f78b273abb08e56e87bbe5ef7f8bf78bc4d12c5553a722d66d854e15ab464be2d4de32c76b0b23b72ed35ac13d499e7c6ffade60c3ded12f38f44c6c96055ca5c6d31d05bc9ded1c65fb0f6e2d1b6ba2a5732a7b591a3c1e13cda73d61755649ae67291b4afeff56f33caac682a70530e2be1956b9ff1c6e407bd447db813dbea15686ec945946d24052263eb02625d0b29a97500171da735da214d1bd0b8f5804df203b9a6f9dfc16ab30cb7c1658e4b2df220c1ac386770c59488ed8773a0c2fa3361746c1203e97d48c55819d4c9fec048a8f141b418e38b5e02beb494643b998a252b409eb6a785eee21a542b3f08e220d1972e064fd47f68b9b78e2fe154e55be614a370739e62380953f9d4c14f940a7b1c8ef8ae866f2b54e3adb7cd8a086acb6f6a5d6443977f7592cd2678c4f9cc548a24840fab3cbd3b0f6671330ceb56bc3f272bd023ba1594a9e520d2d5bbd8f2442117a911f480aa5828f30f85652169457658db2b06469fa0e4054bb8738d2f71ab10c546842276e8d67a27106ce5541c474babecfd7ec77b1a2d9f70273d1f2901e0a86a9b277ae36fb5be384d6ff9b5b9d39a69b096f1cb6e8ea3b802692cbb270af760ec9dacc3399baf5137a2479e117385ecd4f369cc5b0b4f93b91b4627071d5353c440cccf520958222c1ff34cc13d2a6c46e4e53b26fca7fe734fc68c6cf4bd3cffb6b59376648ed9c4e26041eb95de4a1b68dbefc33a7f872eff1633ca34a1a46d3e03171196bb0cc53ea68a13c32d5104ed68117ff6e5bf31d29b8f94e27bf142384e0cd9768bef5b26d703a96d2d13f3691c3aa54dc172f1ab851f08e8ed9fefc20c74904fe20e77ec6a3a853fc5dc756182cdb142889962fe8f47c5b9859ed5be3079a622991e5371a619fa86f4442f94cf8826253a9f719320e733a3bf317e06164c3b46651ad51a867fba18beae460549a4d62840a0deb6e1480d6775ede2425ac7b996378afba324006432a800f172ed5ea4e6e4f2f54bd4a8315fe117bd49b84bd6a45444e762205c1ca8d3494ae35a6eea08819d6505175eaad8eaba20234191e627884f6689e88c20540fcb27134f7457497094cd932034115e6e4d08e84c38de0aa94089db3771e20257b3d3df45917cac84e2b8866896e3f0112f2059ba3778bc11e68a87ea6b2baedc209fe47f629007492286485a6ac2c0a695e2245548629f2e1e62482d9e25c86b8637e156b00487d6259bc31952cd57a7f87f93a57a4eb08719b2a11895bdde2c915daacad4b97d5f49a61f9f3d884ddaac3b4e11c562cccbd4d20deeed70bcd40d15240332b165bd421079d9989b364b088ae4a30abd498f107a39e7aa101ecf3b52f6a764e01c42cd914f877220205476244f87f41bd930a978e05837ebde7b927847b12c845f060a353a96f133edb89df9d6381579d3352181fab111a25559f98ee0615e0ef6957abe0a5fe14c2da21e16cd0c108be337d83a872ecadc6bfb01ed44e949b504ac41dbb8602e305ae5c85cb9f29d65fe8c972a60b8d9e014584398bfa382e2b9bd7a342df8a395b91be51e95a54dfa672a7339c6f7cd7aa8ea0dfe5f7b8c36cb460ce105434ba64b75a204cc8d61d8cc773700908d60390f18e7150dcac48a427e075e9f5b85c02117688cf6084cbb98d9c74d5d50d56f8de01a266db566e6ec3fea35afd67a0d36df318f51c5b6d5dff0cd09bc64f0458a096db5f8e3c9fad63efc371a6df2bf7c3bd789c41aa6cdf041eb30add407892b6753e2e198b2b933b68f8d83ebf14bbfee30111f95abbd2a2701a07078ec2b7186e45184e084642c4ad4aaca507ef8350160e3e567e8c734f8f9e11df5f83f58fa8bec3d277836bd6466d9b49e18cc69f857d3b96eb70fed51a2f1f0c1ed4ca1c0e8ba0e282bb95d4886eeb1692215fe14715f07a7ca188a55985bd646477fadd4a21133e412a77478a3daa80b09ce56898cbb6426f72132b929316e49f996b38760e33b611174df9ffb4e874b2e1b5815f3c7a63bce49710392f27f796c02e9410a99673ea8415c90bb17fb124fa5c191047dad35128cf4db635db8bad7f52a5fa840e1dca200f57d183d96d35c69d272823f8ea7e3741c0fbe810a4961a03ebc7744c611a3910d67ef826815d1eccd3bca9076731d7eb29e9d73dddc9dc0d7554cce3c1dab07d5008d078169d4ad12f2bb0701bac5f76a8066925918ef402222b5af64492604d317ad6feadf357f706506e923b41812312dfd8e8adc00a8d9df262fc41558198c29843e4b366fca2d0719a4de8648f38bcc70cdc7faecc7adad29745ef236506855ef35e58b7b09e449febf654127f9588049ad30e9b7595123abb2b4e04ba6e6f521ec5824c4b5f152553f65550e3ae8d1dc947ee9614e89245fede42c0c9e58dd7dfbbe47e9d1d02a361c2952693b5b01cb78161b3006077c5a455148bf4d2af82944ed9f8a0c13d4d60c617c3373e4b814f9285012a8939851f16d0e7db8012d17d6ec5f33999a2de4c2a0da3b815f5f40cdc5adc8a14002100c97604155db9b50d78636eab652cca45bfb3018bae88b0cf35e8add2784cbb3eb5fa8a31e4e4cdb239ccd4d583335791dcf61d5094490fe95ef138323db52111cc7e53e75e116ed51509f5910bb75b50360a2349d1834a94a159d31aa07adbdd21dc9626392e62e6795839139b2e02f910dd4bc506d16322edeaabc2fd49cfe881ed6f24d19f5c43a87fb8f2a5dfe6958aaf9fd47ba3b44b06f96557a09c72217cc200c511ca0dad37fb65c8404efe37d52751852591562b0fc3a403623f77b3bc5e84e28430d11653885ef5008a08c6fc1e289fb9a43bb230b96cb839ca444cdb6b278c718a3f546f5885af8ceb00908c0932bc378cd4b946370e969d4610c0de7e10dfc7547fec2211c93ba9a1df60680e6dc58cc673ca7537b52e503e622328d0efca683506ee647ad12db450b7083095ac63186f719b64ebe996bfbd4cdf5dc64ce73e2184f4850a7868fa60d29fe922e5ab6b331ff8103e7eb71d17e17e2bc275d0f5fdf5d57e8f05539ebeb701b1e2ba63d6cbcb958fdcd17ee8e55ef2d53ad9eba7d58747df82a3f77ae2198e51d9f888689510f2df82ab6f85177e444453314105b78d542657c3742598d3fd31859c392bf4d168d5409d81fdcd0b73b71df04be55dbd25a1d36107eaad68a47320396cb094b550a86c6a25bb5e5f7ed84a62f2523cce2a7d21b0bac1c8198a650eac1dc8b27215d8fa259caf52d4180b3a3e407f92ed03e898384a1ee1dd2271c18a7407413650bd9d74b830d2c202c44c342c4b49bdd811c1f330a363f42e10239b44dc94025db79e9950db23eee02698aff7329f3f1b40b2193ff4fa19e7a7e32c7077202bdeb5fdf56071216d37d4af0a35438ef83134e247a736ad1af8686198dd1d0df50051b53aacb1f62e6871ea960a9187bf25728cbef472f0f0daae13bcb7f5e6f99714e20b0fba23b4ab8803eeaff3a59d0bec4b7d92cccc3a151f68ed0c77a6d4d36e19578f743518a992c69790728faba9eeb628536bf3270c9a7ee1c0a127d464a2e315f6d91ff85678c018c89a4c54ddaa207c2fddf03d9e54112e49200757c383351df19d38b338be7c14506e4de2fc17520f973ffb1adeb6bb8cc83819d29630491dd06c351cb1b1739ab40d93aecc47808632d1bad95089636651e52620b844bc0b369e50529755bdb3fabe9004542e2479d3023e4a984112a3f586dccf7bf5e2673812e578ce957beca78b5413319733d7e369cb7a1e40877b89d29cb1d88778f34124edc3ba852e7f05b2ef4775760f580590f9bb708ce92317fc54a1ccee1a1dd5d6cc720ee24de68a36fe068bdfa2407a57b6f15b2d31a1209fb15002ea29f06e0f043065b6c2596aadf877ca944c5bbe580fc53baaa9a6323a3a8761200fa65a54ef965f3a8a0fb118f19ae17f5c3b3be837360325f4f6a9de36e430d06f15417e00a4d9fe24caaa1742d0ec99e3d0091129e9822d873b52169a4d5986e76f4fe592a93ae105aa9d4d317bc773d5e1024c61dbb794fcee90b1c3d0ddf88b1955688c37cebc178a11f40d4388df91230e6cb78939458552ab0a3e10ba3290f0d325edc87574e93d97c8a4486855875e303e68213b13a94024f63645025a1266b1f545431abdada7b304776d78a0ce18b259db1c366caa3c80f79af4d81bd4c3b710b883b57ae32ae7eab04f99d37fc3882a61676762075423ec2425780757ed12b1d7806ee0ec4a36ae44376aacbf0e71df88cf78b879c16e9d83bffb891a1fb4deb49ed6c12eba9b1a847a5ba10c71e2c64ffd7b9e04a581aff8c074273155266af83d1c37bcb24b34e8f43a615fd491669027e7dadc5fe4c70fb4da465d07f0b9005041483f2080ce57da743581fb2222b5aa5f1b8de19a9c1a4294aa9c917028826e0bd971a105d87fb1dbdea53675bdf3738aac0afeccc821585dc86fdd6fccd17d6a181b73752bef298b4263c20f84bc1c57317e2073612ddf5615ec228b37751ed1a3271a9fa2a4d1579704c594dae71275855ec00c4ebeed5fe1b561173a4f865bf881a671cc156ea365c82b9d3d091bdb4a3468123e58b8301397244e75fe1ce5cf3322d21f25a348e77a49519d7efdd4bdd538a319a5c5d98957dd95f725053eb5dddc2c6d6d22c8ed904681f801635ffee7ee01302147bdc3b7f5f6dc0216bd84ce7d044c84dccc4b0e70e81157b27a0bbef6a66cd5ef24f99939c8e063def3dbb6400f257075fd88b1c8ff61fe18556f428af072d26e33b5d5fef3a42d7a06fe69a1050e0314cb52fe93072f0407d451d1b9f20ac208322d604b174ddd43fcc064f7190fc1b6c886dbbf991feb25506c5325013875db2567d49f3b600fd51dceeb52e2a10172a1051ccfe11315f048eb5396310e4c102f890806a6ab9f3b3aa8bde0c9779ca416066393a5f21f937a15ff3827570485d5dfbd0004505d9373495c9b59c6ad7f4a4ec847b5af8d936b198098e3392f2d0814d549cb7a332d42355c2d7308ba43c3b3d2ba7b108cc92c2291e61c9c2ac4905f84623d2cc85e0269321b8706d6e81a03cbc3b4956d1d44a6fc86ecfb05a4954272e01f5ebe8efafb4539c38756d85ebf1f1565112dadd7425d6e6175bdca15c95a5845fd0d7f9b75becd2e5a9bc7c7169e3881ceb4bb1fe1e4173735f1af20816dec1a50bf6035296e6a2c1326a82291c873c2884681cb8c32b9667f5e0608a6f0be58c0d5547907a62c25995d4f84d58bfde6ba16b774ddabaf832090d39b584f14005a9cad545d2421eb7b3822e5bb10b0a129f4c4702996a26ead838ef607133a10dfb6ae2412626c7fa964abb06985744245df7011fde02e538008ba15dfdaa70d4e4eadebece69c8776e79a300c989e79f4ff6bcb2bde43eeb15051ebb2652cac9b6447bd1a51f59ebb469baeb86232acd7c51999d8e71ca3e724f50a05a1be8eb8aa86b408774c8596dd120b6539d2c7660ed84073d8b2b2a4a5d45646958bb193885503e95b88239884f3d2708230faf820ac808c83c51fccbffcbc0b6eb38992c16df8f0c5aec983bf0deebcdeecf5dfb1d43d69a33b7d12b47b3bf947b18a8494ef9d1af1c5a65e42ae434985196d14cf7d693e53e1ce09870b1bc024d504d4b3341610ec6280df3b63aa7c1142827042507934fd052e68468b241089b537f4b46be389c16b9453f4d845f17fad52a1314dab218f931b440d9e5bf8355fc780a38a6884512e65dfa2bf5dd2059ca0033fc5b9445d4b3482331bbd2a45a0532477c27956a00280f1c3093a16b32254b1b9a23e6dc210047303f5be633814d97267d1b7a3bd97cba0eea7b92d0603cfb2947de2110fb4209f5ed2f7549cb8d460b7a721c0363bc03dcd87c9738e41561993254d26d8f22cf8053ed694e3211522de8fabd758c5b1960bbf4a35d23a0718e5135d462a75c77899690233fa0e38bad38fc2d1d1413b6494d5a9b0ce2932896ec6f32b9b516fef71cbd2bbdfabbed60df3c969066cee3969513544998cb7bfb029dd14f144cb11253d0e8e2c21cc1a3033ac122c4a7c7862d7ab75a3d93c090b3c9b65e83b84398786127f7d4b7252d5eadcc4f058c228447f2b632a1cc889b3fad7e8cefd3182f3295c9ee779d474ca0bb1c44837048091896788e3c9e3010fa9c040044b68e4388b53c808a70599174837e07d73d3757337aab3274e25ef27105078d0e3b6f8879278f080cfe5f1df28a1007d1bc27043cd354710105a9b69c2bac638915e72f906456e2cbeebb65d6bc65fa41a024ef8a63c68514c4261d465de80bf382af532862bc36fb4dbc78ab617c4a63aee62478abbe115cc3294bbd731e724d8987ff977b8b9fea818d6233bd85d20b1a1a929b0ac3401958cfbe0c61e2bbdc30120775dfabf7d5f7518c25d967e5abdebb483b39d81088dc0cf1657b99d3129d336bd4c035bb40890e7b9608562d64dc7d7ec1f526cf43a630ac282ca10e7268daf4beb98127e5e082a7de0a01a7a0c72b36d2416b18ca709b05ef031a4d4222e328407a6a6c6cf1cf2530a730f3f3e0550e2fa863542bbb158b58e3ae8ba469e5d2edf9bf0bece717d64fcdfb7b13d8568e1b907b71dd8c221be05c2a55daa9c4b9c49583914101217ea51c580a2e5bfb67b4249e5c5e99bfa3d1739251534ab40a2cde60532ecf5134bb479b83b7811a02dbdb84eab70e610c65ce2fa3be63130c4a6c8c9db2a06f56232854523356adcd124e2d429ef80415d3bde404a0cf6644661865f9dde5d7ecdfcf35f04dbdc6f85eebf9980a7d3c986c1697f83e3a34cc88547d2963b949a33854a3fa564f214f04ea65d3dc915f7f9da6a7ce46f69d4151a97698f5f3a835a042064d3d9c7ac3897770126e9546a65e32cc67866c4b6a725b03f6daa2a24d48e6b50c0a20cf997183208704460cb0707ad35a8875376830bb169f1eec9fae0e1303c0a71111b741679c601f132cc018825d81cf2346f9205e004c6e2fe097e65821f5ff4cb367502f0a7d1afdb6ff66731fce442b0a939223b077352f55015f95c48e0abe6b95d9b620e36a1660ce00b29143528997cf2c37440e8a67aeec3d18abab1dc1cc88fa756b44775fd918a9a012f85d6b145eb6ae583389575b6ca72de8d294009e8689eaa79f87b3fb185782201e94b213409968116e03859383b86e3634794e02a27f36db11235b54ab4af0cc630d1e550b79bbed7b272c0df6e9921f7a3622e2a5e9ebc0ecbf5be97dc9118058625f93da276ef71e4e8fc74f36b5898025914ffed202937b67fd1f1cd7b2d54dc78e6dbdf3b4c0d18b606948f269ff058357b4dfb2f16a42b593be0b56b01836e38da97f19d7a847ec48e66a2f1b218187e308c687d63ab402742ec4cb27ae9b9b64dbc2c6279028c0ffb096157735438cf437eb979f277b2bd8ea8ae6295418d689ffd6b6932d41fa1432b57abece8404a4c3d49034a7fae586e7fb591deb20154eed496cf7a3fc28d721267fb5f9c813646ceca41f4a75baba127d003c7af30696e79201c0f6a888426406ddda2adaf496b1795415f4ab7f721473672d08e35d50038d4048649d84b619044b2bcf3ddb5bbc6e33a62a161c505957484e2b70263f2cb0352a595e5646202ce87c8f1b6d1c55b712a9c6a31f8a503e047d5747fcd9bcccad6da50f9375da4c4b2255b62a542afddedbda058242b91ae5ce0ece9d645322da018408afe809a0d96fd974e1776c58cd61f4a00bdd032c9c4c9cf22f290030a14e96b521fcee58df44fc63ef27dc2dd5c984856112a90a2fd8096cc5bf76f644d5839a27b41f8d3da0766e36e0a3e9dc8fb2b54fc7c25b44413fb1be8735b97f4ff44047fe350834e793dd5f98bc2379742804e435c9e45a1fd1ad573604e35996c8ae4f068c75821157908f81b432fd549cbb3a40583466556bfbdef95691fb73f7c6783e54675237264fb593a183c2be7f45851bcb9b7a8b33749e9e28e600728e07313fe0a1cbedd1f39cd5be43328f4d8d6008f2455032efc3d57de93df87255c1134fb031d1d2bfd586c3cd47b1af118bde3a6984b62cb7812e57bcdbb79c049916297f8bea38e396e0a33b63d04fe3c1b2c782b8a6dd4c109d001fd5d25a94aa3e010ec9e523f1217368c02168b86921fb24df9d2fd855b319589234da3375c6180fcaa8887c8594068214098b144c0b92534f622080f9396d3cf546cf0f0653e315dd30e1f05d632af07bf7faa58c0c57d165f42aa2064492e8751b5eab7fb6f1f41b42e4606f418380c0c9bb7711ab207b4c895352cd4ff5a515bd03bd60ce48ce4df41e6c126ce53f01769ddacf805d65d7f3f0f9757b3448638766aae08f14dad46ac3d6ae60e54b6c23adb334b10ce68c5044a574157f408ee6dba1e46f9c3cb236b7ff97117bb4a931187b5c06625ab31814f3644942515e882560ab10ba342857b4548d191c27c0317461ee1b0b280145efd914a8178fe96d72d6148646e901356deb7e6930cb2172b22f80de3463d7b511b3443b51d6b9e3517a9c6a136d62fc792f39b2a2d7ac548fdf63d5d663d0e69b99ea2e6a9e2e7dc807aea886e3edb79d39dda7b5d6ebc2469a137648ff0c862eb643b155e4aa145dc1744201aed5c34c956d5487f58f1ec49b447198530eb8146d158df7c2f28925b7997f868c119c358b1fb61d0ffa86aed5db099e695e73ce566750c60799ef6f512cdd90dbe49061e37d25854b1cdf6f45240389c08465d940038d2c6e26417ffd506d4b43e0393a4cf1e4761944d5dd700509cf64d0f6a38fb2c20df76014ddd5ce5f4fdd0aa55cdd0a745dece42ed5a58897587bd5647255208de92a2d31f34242c0aad6274f143ffd464ed2b009772137200da7bd68d625e8d7da58c8e3b89b5e4dbfa896c423903a0e77c354faaebcd52448a94350968ed0036116cd4cf6e6d6868011c13a5c10ba411526e836742c1d9ca612908453e761b434067ca79f3861ba38bd920bc5c7d26f472d1dd5bd6fb7e8b2fb4cf55f195d06a292a5a585b77b2f0e26fa99ff6f9d33e5f067eb71f7726bb3239f37c84dc2c7238b52c154e5147577fa25c804396115e8379b336a27b616a77d23291cb304733a95f7fe3014b5fbe799d92ac445ceccbfac0918a928c72efa5ede9da815929102bd0d106b501d3dac8ca789ede7d648dd23d3dfd0bf0dfb3000fc3dd27719ed5ad64c81b50a5152c8d128f224c8b1886a3a65e869786831792ff7351e851287abb6020365f9e8a7ed5099df975069cfbd663f806a4d1e2d8132267f948d4e1c15f0ecf62946f8e29c7ce9c1fa6d230e3f1c181f11ee4d010769197e7da86aa61629de05e059bbbc5af946aff450da0b7d00b979afa7a37e78d5610022539979647714f117cd4a61beaa69a5337f992219cae66af311606b751253b73f48f275620f8e003b5462e522f5ed095cadd923053692e5224ef0417feca1e1186e74cefa45dad6ed6f1d3c95886dcb613525e2831d14df6920530e58ca110a2fe7a879d89a379392632ca6bde83334d20f7813717754fbc12caa8460e1ec5d25eecbf641f6f81a5fbe787c5882e412f041d1021a683e73b948a845f7072065eb52bd2d0ad1696be7ee9ea5f90fdbf7165ea24f7158e6bdc748e5e34e8320fa8e08537a1a1528011d23453576f1acc95a5cbdf293c28435231a8fbe0951e5dacb2840e425396f8a5ba23a714e0373388827e160ca876fa45fcc33bd164fe0512f54c62e840997654cb5f77f9e7903344d8e6df734730d44b165ff85adbf067e7b15776471644f1fcc19903f1354fe163cd37c5d6585e219b6510ea1c81ebc6b4e7f652b3d19c0fcc20abca173f91349df0052df52f2ba768c8f5731a8209a4867be99e70a50293f7a863caf399615f9a99639ab5558cc8470090ee5d5183bf018356a66f10fca3f7c716548c019efe4a74dcaf4dece564b4ada5dfe65ad3f86eb106c87ca3fce0f8df43ea47189b4212430e51e98a2564b8f9bd6a0e76881e4602238f65b2a22e3f5918251a16bc35fe10033ddcd390846048c4fcd72dcc8e61503da42b2692761e3e2c7559b2a51a57d129c66e2ffd66dac30e25ed4009a22644a84e0916680baad7bbb1af2ce914b201c5d453e17d6b89038cda66a3cb8ddf9a34431eca28a455eeda7ff240979f110907c38335550c16c67771576b855193bae2078d64019e4a552a92302f90b5520eb779cdec9079c581aa183d0a3cb5805792daae55138f1239f0084d2944609624316b933957a5993d71c75c24d3820fecb3d03e49eb7db5c8ebad03a3dbbf2808e0887e39a3707f189dd3ce9e706457785e53c27457019d17ca4df3b344757805b1a6ad49b206cd60b3addaff1ee1fa5f57de957a17c63de074c144a828c7c3d4d1b1b66b5ef35c5bc334126b0837fa937e3331b66f5b01d408d950066ef8c70fd98eeb60c9291000af1ba8321177b387aae728064606d95acb329e5a4e8ad45f5f1708bff496ef2cf03746a93c038316bb2b6b5a1fee131c9d866cf65eea4f78e3d5c36b25b13849867e89225e900c61653ab213332aac7255536f7d76ee08303cb0ee9092bfe59cb815d35e5bb2d2250ae6d2533a020ab70e24d09f96bbc8021f991cbe2ab1b777e14f656326c3a98b3fe7728d9c468d414c524c8693c5b09c4851452d157b5c77d9ae8bbb527138665ea779e1901eba4407d00f4067c92fca1db5f170773701cb23b3b180145cde5f22350e1fbbc0a280da39a9eccae5cac1a8a65d3bcbcb492dfe3d7fd5db1bcb5fc4041b5e8a06e45c94c3eb71139141e27e75b721448426c57967f00902ec9d05455db251763036492ffaacb36f5e523f4e6165a0869af2cc05627f158bbb01f31dd4c6650bb8aa0f2a80285dc0a52e9999347fb922ec4281b96f8cbf2f5789f54335a875580dcec1e8f57fd78896e6a8b260168d823435eb0fbf1adff1f36f764fba52619b3ba91108440997ad70ec12f1162f079a68c40fd29befa3eec440ca2aa7bd710f64a2844eb48a572d813a8fbba046982898d403ebc71c4a001f6c4bbe91c787cccb8fabed6f6d4ace12788383e6a13ab97f4f3020a223cf5094ccec40ee36af9d14f626c41b42ab730f966a163127a59770b2d55c62b8f31312ddfa9b0cb0de75267f678b5fbca030b10f7f3079174390ac9e6e574d74f3c2776cdb3d0de4f459090ab534277ad11f6055f76624735239254053dd864d4136007761a29ff5b76e8b57841e565e5932036f60bb4604592d49f2b820f4110e4b156a3ba60468b392cdab5fd3fa3b2f71b168c744337b44838c8138316bb60262d6186479a8bac017ac9c0b660b247e0eef6133d3f9fbe460470936297463827a3fec3b5843bb2ebdc7a52935b2293884685e1613777126ce17e2879183074c276561affa2a9468f4928c6df51a2644df3e194a246be517a4ae23351d4076b9f02835f8bebd8e3b3c976f72edd07dbc67caacd596647da0083a70db4c376b89cbcc3b4e122dd95b0a1d9f60c1e90a2b136fc90f54bfd5e14ba8084cad9eb7ad858c34f6f5de1841f4a425b93b998424461ca7c836e608ea0666efe5548d2e1dfa3b0eb7ea5baa44fac0fed8aacb3c2c6ad093f6e59cc4cb064708562af0443a86c2fc083996e07181c320c1d12c4c2b9f624fcae5709286ab87b42541c37716ada58584d1c258cc2177f083b6e9707d0b050567a9a938a244d18908a40e80b992d85c712b4059381351b7f3893b1ee1638d728ffd222d91ba983b3ef45eaea1d0a8da907f379f297459864029fe3945dbf3988228ec9130d7730d61de093fe35aec7c9b929ca43c1c152b25b01f88dd14349cc9748282380f61ebc885e4bf7e972f861db3f444b08acfafdb8a50ccd57cb80925f498da8a4a70877e0e7327db8dc800954d5c3c39bb2012dc7f99d3b6b1802ab4d07ba31fffc335306d1f754871fe3e57fc4ac19080f2a29d29002bf54140be717a4de93b77becc0427aca86bac0cf0a6b9e6827f202d71bb9374006c9b134a2365de87f12347980f25c4bc65a5bea1b0a96e8daf58443643c50a1b4b028e6bdcf7159479ed3c9378908872ec94f67f500caff23e69aee5484fbbbf9b300bdb494041b353ccb1c002d7fd280d873640eb2357ef5d09c4c883ba65475aa3d64543ed0a636e1c84c8e93178bf25aebc487bbfee9a8c1ddfef4106eceb7230d65727415f9ce1fa5285d5650bec7ec00c092469545c6a20c75c982a28b1b36cb2bb5a6fb6ce81a17cbda1f86616970a42928edeb5f07c3caacc6d7aa1923e4ee2ab956f4687fc381c7315e6a0874a53f7e00bf3538d01da59297e4d923c2fb0a8c96e1018bade8b844539e2c33c067b1fe1d79e68c40b833a565e8e8c483fa0ccc1f5ef85d88e19056904b297ecba7410dc63b15261cb940ccb7da2a55adb67104346520d88e10b6e83db3358d14211f9186ae00a6cc43757475b4f408039774e93441468a00e290d357878fd5771bdadac04f96ea3adbe9f0172fc5e0fea937f1df2ab340c6ec8712db4ebd892837af8d3a800aa6ec58eb91451f6c7d3a492ce69e346ff5de6f363a34629784af3116f7360e648f01f24794ae1ae25e9c00f9d0d7634d7ce45d7d0c47ffa06cf6726f7affeff037a51cc373e4de5de1a4f88def76dfd0f1d43f9a785da085c946f9c8de513d5fd52f5d90012e376bb0552672b60ed4198fe06986d539e6a3d0ae88da137fb618c8c360360dc81d0740bd90d25d81f62d6b32153ed76e036d85c64e4e4f5613add1cbe960b407c1f2e37194bdee27e351f696e16913ab9889e44a9af11b9deb2c0a0a31f745c6b7eb52a5f4553ede00fccc3f6665186b86e000a105091338f40f82c7ff52aba03461f212ce3489bee1706a3288177addb1d23e2ca68595934bead5241e67c0e3bca85679cdf387a8a0973d177f529dfd63582e89e61ed53192310d9ecf8c38117ae3cd4f581c808fb730fcfe41aaed69dd8b3bf922a7b7dd38982c9bdd62ac7b4a37e43f5bea46592dc0531a4b31fd63151df38efe8c46af2b9e8e372819c47aff9766432266c7035f76c0c9b16d739116072f95c23feb8476fe6b5105da5d4a68ea41d2aeae972cbfc24a516b4b177dc1d9eb905ef77110de65952e98af24403dd39989f04ce97a8b57a0ce7d7ec614e6702eecd285bcb526ebda2617bf0936f75dcbc61a071b38cae13d519835a9fd87f684dd0b19a2f0e0c536987f28272965af5490e6e4c4765d2dbddbe873cfbae1af1911e11a0fdb7b7cc26a0d11fa4e4a66031fcdc33cb3fcdab50a9731e98b8e55710c0849fd0a6134cf3dc31327fde7ef07b17c6b53011c6c8725377e50df9749b5250da7b988ec5d93f9ac75e05a266c5a2d7866ae7e5c02ca769d99aa31bdf9358073794dbf4e2a0fd866c03e1e35d8bbebd1eff5fd6abf5e3118747fbc6fbea409cc9636dece5e759f300da7c1edbd1d5c391e7f105405903c4d77aa7e47d0957f3680a724575065d3c5d9055bd17d7970c773adb99e50e8778b414cd5d85e3831fc63f190d508390619443a3fcfaf561111171fa4b7a82b4ce2b72549ed3ae162c275e51f79314f9bef2df08463e7a7c4e7ae90fa015229b92bbd0014548f6ebac46380fd00ace4973a770ca9e7b20c9701e482e380d9f49568e60c190031580de36a42913b665924c2454cab0244ad17072fe9e4f4a8c5a1cda5233abd3f050a983d0593afd0903ede085c9275aae99281efd5aee544a2447307f05821263dcaffa9bff3c331a2b3ced5cd352eca6291818390421dc438f643e10a662803149f38fa30356521c475a94bf23bdad90403a7a65d8c20a90d3dec7c9c8d35b163180d46a7a57d959c7de0026128dd229772dbe049fa77f0d57efdd84ac2b09dec2005afdf3e9d12473048deed024efa99b30dd441755bc6a30b29f4c44a2c5dd078e1aadd9ba5ec8dde521e5d57ff10e8801167a2125bee983f9911daa04926a9bb9182c07967c01f3c9a03a16e8da3ab2ff343bbd3a6f49cf2e6c5e3be052e990eb0beb17625c8e13640d5571a298b27a20dce26a79f0460af78f6262414890e13996135325e2ea0db19248a40f87582fef99c55941f32a60dbbb1787c11c8ea94a7c677525431992f0ebf6f82c2c6ad8c996424a91896dc2bf7c5d8d3148f9768063e7779db4a5c854b1a0edc40b004b6ceae9bff0fab7e218bf43848a0e90c06aa927f3abc48db1f584a3a8dc661789775c9b34b891b35538ca4efbc00a03bcef0b56f28d3f0d8302153e1fa5830919c975995e30bb127be75ce4e479816c9d1fa7b38fd55f033119852626e137291f25ee778059e2c9b62a03e599a9d4da5e39bdf044e10fbccf6c7a9bc19a8d7990e9b6adb3d2f11c86f7c56c1bf967fd21bfe49d8589f26f8642d63e374bdc886c1125b86de2ccb34e095a5d910a2464ba7703db19500fe63ec5d55ba2bde9937d028c20a1f443613e3d6f58e36ba67b188035a2c4e5f408bfb06cc5c2ebe14a6e1ed2f5fec06b9fbc1dc503a315d6426bf825ad55ece8a6069ab10b927444eccb1383ea7d279768a7edd3d243d8772f0634027860cf211f22d9fb86f72e5805a2b8c8309e4b92a640214baf3fca2961b67321b4ce11a4137aa18de457e6ff6863a79d3665ad40a992c51d244e944cb40906b8dff05bce55631e68b3eee9a18dfcca17e5cd68fc732b0aabd2122ee0c8750b7e3aaa79486fe39cd1d8ea699c5351290787186b75c3b0fedf5327d233b2833825e7cc428330335c1e6565ba8727d720741c1aa50162245e838ff07c17f22097dfeeed23cc751674aa588f770eea7bb5f6c8586caef84832886942306e2b5cc2e6b721f8f278ef547ad2734e7b28db94b18b49705ae5fc1f1b76d56cc9719552710eabbcde2ee41667f1d2dddda59bd0acf9ff3165422b83c6a6358bbf16bbd73f07a5ccf14429dcbdaf29794e65cd9460c1734df2625ccf2173319b8dcf07d6dfedf6e3cf3ad89c88dec3aa26ca76a1cc1fb26ab406c849731a7ddd0bded5ee640b43e518d940929f15a9a6d7452237b3f3757a754ab631946a8a818194019359c3f60a3eb16d7af9c448864bca83ee33da61aa493a199a6f45cbecb278c493c56ca50ce8a07a2b2095d68095bd97d3cb1b1243d1ad8c9f1cee5a2992c317125f5d5b60c2369be8d7e0e49d7048bc1e854c2ce9caa235579e5257c4e19ae35333e3bde97e4329a6a65777d55bbdf34b6ba880975775bc10907f9d9d4ad7376d42ad73905e972a61f3871b54dcd626178bce6b9bc8a9b5b5f0ca050384d8df1c28cac63ece6b8940dc74f194eba3e71847a3d38590e2398ba83f1792b1ca353d440e106df80310644cedc053cf8d45f881f1d215057e83e162a69795f0549e4ccc62b1c75f3ad937ed25d0027083b090345cd2f546b79cdcedabc5de7b5b8d3ce6a0dae6cd0aa3e3572021d5cb5ad3b209eeeaa86adf09518d497dc798682ac8f7d1e892d3bdc6c2e6d4900405abc1df7ae3d464c2d07a21d421969bff12d0dbb3bb50637dda2bbdf57d5af8aad8823d49d69772a51257abfc274670d4386486b7d5cb700bc0238cd966e69b31386a395a579f0f7b16e18ebd897b2a9110d55d1a90beddbfe878cdf8fdb05e5b6333c1583d7175ee11c228ce07f06595b908bf6c41737ee3a378c7a9b416f58d1a837e1affc3afb1f7f382c8ca63b373ad8c63fb0800196488ecc68ab05553c5ad5c620a3ae4ce34e858f4b27275d140b515fa3d6ccce393a53d13ddaeac4ddd4a20924b6a0313559c083d7ff0328a54dde7d6293b0162d61543a044e6aaad2fa728df97ffc93d132d72fd59d38ec7bc9c4ea366759874a0ed296f744a6463b7a358ce25b2f3aacd99904ee2c61c301ddd0cbec28fca4446d084ed7fc0f2d4fe62fb324ffc0b69aaaf52c6abf86ac62c0e44023fe124d2f19394a575339a261d11123a25740521cfb43686ddf106d187fe2e4364b5cdb318246f851f215d53a0fee4f15fd3991afc9243f13250f1ce781b9252fc5dc0954d9d437dc690ff6ad67606157c01ef3f66347eb1a44ce8b18987ed1bcc9495ccb22d3b565f99819132cc685d1b9f9e53b1c2d3b81dee3da85e61740287aa475aa8f9b31efd4d4b00b5c4b6f9507d7ed9cb6a7e73a2e9e5bea5d976805a17425f4c94adf8e4f2634073879ae5376a5d89521960e67140aea7d8877d81303e1f4fc05e5de64d4fc028e34818edc54792572e85b6b07a177da2bb3d7f52ef2bd34d7a499710588582aa2fdde3175d990aa4a03b88b1461798dd15c4698a619664be1bbb7c752cc2691f779dfe8df785805a15fc50548cfb5b86f3005c125272c30f96b56b6b314e8c1fea5fa470cba0dd4a9d7d8e024f3dc0fe5a0f29cbb6d9f77d0680c9d91de3528c58f85a9e7b61d96ca6684d34b0c847a29ac25a35e3fe5b704564bc9b70c5ae6df0ad72d1f9a450f6a4c807f69692b72403a18b5a9ccdaa3067907abb6239e2319196ea7fe3b9d21cdadd2ee715af09d99421e0c3ea23d5c2fe790c97d7669ec5e3a6cb35f4564b9475f7e4d91f0cbcb62b5dec9ff7e8b18dad0fd6e5c23e09950836b67986160203ab632472b7d160a7eefae5603409696e1d38a1ffa863216784bc93471d69ad2d8d0665461f8389fe8be9e48fda1313924510aa5901822a327749d4a82a096527dc26a9f3578d759b183d9e002a81deb5bde7f9ed69073f9b01f008755d58b0237eced0b107a98f18e69ce91854ad6f78899682c92a580be5570cafdee054cf00457d414df889827736de87916a978a8cf2cad1a7f1beb8bcee41a74609ecb5d630a64584ff8a6469777c749ac69d969e5f9d4f065a2773abf9138a98dda9369e420ae571efb3c722fdfab4849ed962be69980ab8999a3b1183da016cb07f3efab46ac0f6f5bb2fc683274c78326376bbb9400f183f7e7ef8166bd6cac19660a14c6be46caf33536771ddd94f4d8c576c797df07a3b31e7addcd87656f64007e26160f8e80de46e3dbfcb070039e9bcdc08f14616224af780f6f956e0fbd106417b2fed3d74b367ce26d378ff3446b35780c5ac8f1111e67a3dc9c4ae3c6ea1dd69739f434fcdf7cb100187ec89a9079d4929a7e58d5978c875a817df544616d7d0d2e6dedc770960931517770ff9f103341dd2252077c130f6d436c4839dcbadf8565d3d850e043c2811b7d9587d2144337eb5f5353626ce69ad19f0dd9f0c866f2440326692c413f145b8ae1f69ae47e3050143f4751699bd6593db8402178cd485cfb84e00ac39448f0646ebb6529bdde700d9983fb16b7709352c60cf5cf37acbf169c1e78bb5447f1a41671647ee57a8a689389c587088e724556218f7fac2c8b4912b6bc3e3a88034696f1350dcb35dc85c7ddb5b3f3394df3fe374acea4049ba0b13ef44858a8532f649847ac9262825c4264fd5f5269d13d72de992d790b1d9de8a764ffbb75cde0d23ade242f08c6764ee79b255a1685f3671bb38ca00dae55312efef3f2ee318a4999f977719a08ceea13d7c9783feb363db5e8fd257eb3f155a40d12e2f37757662d2050cca793ca6eb12380937a4f7b463f62e1bf2b706b5c1f165a5b633311742442646f171b79b586faf17166c60b60b2fa0cd046696e78fd2fda7fb9f81a0a1e2222eb10aff4c5794362cf06b8e57bb82e99f757cfcb4845eb016cb9437694d452711f46efbda35f2e6c92891613f48b5a6a85206fe37b2387869a93e21faf9e5f40385d71b4eafdf1d0c8ff5e282d9411a4bda291565850e54b4925eb56fb7986ba4d63d50d3cca72f77611432bbd7f7e807b51e7891c99fdf98f0954db06b158a35e7335c2d792729d8b645e9ed99afd10c4fb357268920cf1f8dca5f6ba974c2e07f0d0f4c35dc652658c0bc1e7d86df67a81ca622ae5f0daabebe2590e3d3047c82656bd71e0a0b4965a3eac7d5bfee99d34ba48717968f5c964ec73c40e8b9a4ee50c25de32fc03455e4f6b7d3ba8b02fb59c76a4d7b442d4379ca86f8e61a8eac2d60474718c2c0e60693c0d99e6d1800c8f6ea73f8333a1b356982a3f34cd08987cdf314ebf16b606ab397847edac1c22f59b016030013ab5ada71d987c5146143c10490e8433d341d16201865f35a6520ced5f9272e915994a9fb0ad081d315ce103363dbbce0a3e0982cdbd400f073f044d5f5b674981961e5552937edc2d9d9246fd948d486643276d60c69aaa7e80fbda1bfc115b321623232fb56c27551b5b4b59538530c0f2e0f129ab80e140591785edcc8fd8e882f5163e96d69e0e89a298b99cf94ba62e7983ec5b8a7c1acd495cd6d023bca3d9aa652ef109dc64bcf99639a55f58e9aff1dce6843b4a99d5802742b105049457ee3001683720d4c819fc041740869788baccac1eee569f44086db054f7fd402a1c94fbda3c092cf99ac8983e89e612361a57b83910a940d87ca7937ea93225438168bd682f0a212180598e777f5c5c1f5eb4792e0cbb8c0aa779b8848e515a70070b106f3368ee7a308523db576ac2719e6bb66711349fa794212fa62a24db57a142b4a2b19b7045c4d61b1ec8229fbfda4180d7c04a698f0448d2ffe12591305e46d2b95f911ce3b5485f74fffe199948ee9cea463d7c6d8c112395eb8cc73c6dee6047ed40a23e0ac2bbb1209852d7367c24db4b6398e8e807d5a58b90b732a1966a9b47c0d5ec012f89fb1c548c46d9694bc6c4c1f3dae0d2c8fb38f4b9c86f4f305bebdf9c7b8fe128488e2e2338e531604193fa9aa522f0e3b135816f0605c3b9f70b24d0bd1edb26991e06915bec57ff1f33a28b8908dbe03d145a1c359f32b588f6e5f6d33cce9f9a51896ae72d9733f2f69d560fa8c05469cd51a32bb5f0f00190fdfa88297b8d9cc9330cb5d391de91ce3dc023d8a091bf688fada019257f9452cf02f7f1b23f5f915afcae06d8ba709ba55da4fdf7cebc3d45c226cb1371b4744e45e09bdbf6c69ba433a7dc2a54fb1454a8d330483ca1dd369adfbf894938696028113217b9483e94f2655bc4b5dca0140355ab33540193d9a106330ec9c25aa27d1f0497dea5257cee60b1c01761dfc36fe0001a35caeddbee7c9f4617f42dba51bbd19ae46629ee64eb48fd74a4666caf30176a7cddcdce1bece3d921707e3e2e6a978d417fb9a2590fc082405f358d7039bb3bbf04463d8a3e9992d499c0f2c9ab9d2c89ce3f392fa686a760fc00224f8b6f9f05faf5a16e7b1226fdd05aaee19daf89fd98d350abfeb71a5210f92b101ad172a612bf0e8a038edfeadaa804deb8afcbd9cba60f00e28f5e312bf9b3ebb23016d4f7129241e8375a18f31073b326075c96cd9d481bf0cc04ac8ef8448ddb0275d9d3172fb39d70e7607830f9b6fb2f3c3bb201131a4795c3da5549f0ce920fabb43f4ee2d4797c56c2b661f4d9f08f0debf0405056b035ee606f6070a20a3ae5a0bf1c976dea91394c601daf1fa432086bb491408d459f927e7a08663781fb726e6d45d3a8b91b45d4b4a706061098c7a78776bec2bb32f03c1e6c5d8bbb90940d831333a2e0d28a96d9bd032471754175ecd64d1e53a0224acd8c9d133203f129d668e9fb9525c87c483b04b5c78ead4267d44bea9f21f0498d003bf153aaa7e2943f6f3e18d50440cb1f6238ded17b559003284fd2218a3136c019ff93387053b4e8b50c61f21f4abe2dffb4bfa545cce74ee939f184777003972828b4bbb401fcadf9224a0f1a9ae83342a50ff8736c9f6807a8d3cc6baf83892d52cd8faa833116306f709a4fc7a0d9b76c45ad085e1c20fe556e92b8cd31d69bc6723b386eb769d1f10cf40f56a8f15e624b5488b9946463538da138461f21b85e60d8e7500b987241f669995e23f9592984987558b91903463c53035f87752d63a7015d4fb1481df65baf1da97c4cc5ac6893b5c9ba9a38a6a7b149c1b47434f5adc771b5d52587baee8845c630ae6cbf5939c7c5e0ea92a417aebb3aa93168763d80d9c94b4c079c0b0cbc979ba5c3151007109f155fe04883cf7fe8c92707d3de934dac2e95fce25f0a8c342d9c8adce6b3e918a686e218af8f82b967321184bf389032b33bf15e70cfbf31213307260a4e4742fa0ef061103d9a6bcbf1b65c6e2c0e1934f2a12dd7930bc6f320c6f313f41156cb249051d5b8583799efeac6f74434dda3c49955fd46ce0d754301788ee7487e5dc6ca4045a9d3e8f3fa54554f891412e3e61a0b87d87313d90c83a451a1bfdbf193c30d7957ac493ed0e44cb7d2d1af7a035ac842f3352066e731f361f3c7f3dda1cf920aa813f7141980dc4ed8dcf3d75770ab1b78166a1bcad91f517b53df42520a8ca18185c274c0113b35d30a882e4dbf721ab2d1fd02e2f74c6bd26d5c89ff52c266014d724da4cb39905a790c8a51fbd3fdfd1ae2ac375463b23bb6df51200cae77a1d6c33254911e1026e80533a7abd850d6571f88fdf92b97a3786b857beb05475cea26e5ccfc7676b009ddf7a33c4e336d183870e886a6d31ecca6f2e610e06224ccdc25192a7c8ec050d46ca0e1b3802dfe0262fc717f3d38ba7de83db0373a0cb0b85b878885e0465aa65d9ce703ad3842f44b7e1bc3716f392c6c513aeb49bf204d05f04c7c057548be0c19f4890407b89cb129f3293d6ff818289a8034ec0f9ba0a69c2efac0dd36e857af9bbbc15b4597e1daa5304780a989a2054ecc59abfd77d079801f2006eab2d708281e61b0dd1217e7fa9d30b67e5787d536c02fdebaa9af35672e7b731e5d52182941febbe7c92b5f1a0bd336123ba1cb3ba8c02ef49a7a8be055ff24aeee66ce51927747b988adace85e73aaa8efa137475b2f1c888b2f5d83fef40a78cf239d63178a6081627f0ed90778951c5bca2fca848d2fd867393032dc69258d52063e0b06f60a622be5e91ee849c761b87926f425bd94f58b869c69c1872c30f79740bedaa751305173bd47e58ce2a54a1e01536997df228c9f8a3cbc537f3761ff26242a11e0030ee87a95dd393bb690ff606c56c4c2d1f2a27ae177e1eca22e7d12ff8c74ba1b1d8d91dd8b0295949f545edca15d848f4508ea0d2263147e0b904e0dd301176d83515a4a6accb10409c7c03137b16465dd8844e8a46c131333284cd28aa78d822cd3a33bcbb86b1bd2aa672de0cdcfc6dbb260670c67e5554958dffe0e1f6c3e60575fe20f2f5c4ece509f035cb641becd17e85dd4d5f7e67ff4b54a38e273fdb9f3a39a2ae23f9095af7a360482e14704774017c0a402a3a2e97209aae1417c05a2b6fc4004add62e9b765ad533904af85be81f185c8f47a1cd47e05c95e1db741c6d770d222277097c13ab7de6ab4770f2f34d96b99cab9a8d6c16c276b427af3d5dfc6531681fd80b1066d28a8de1421c9c3f9fd435b071a624dadb6005180cda29c22158c18a3baeb8e59e3fdc33e282a6a92670f3dbf76fc0ff7d341fde4730f2d89f76da241d6b0199f48b2a26c4c7056c900774e06d4815f0ea64ecf733a55969c1c3c3cd07a6a45b1c86549ecf320ba534bcf16930b0d492bdd813cd2efdf1023f74fec11e4100811e7938d503f760201b8f8441bc61e71160819e1296289a52f22c6fcb65ae52edb190f3dde92e7bc69fb5ad6151d3958352c82cd20401ba907e6ff3a7dfa4b342bceb7c38cdb77f48720409c1e7ce16d4893749a9a92e1d181e8fc1a52c0376557fd9e7e6b95fae81323ea0579a726248b8efce17a133c4e3f5d1df530e318c834e0a70c9f4a277598afd12d4a7b0fa7037c11f7b6c0316d68b7ec0a7fb7f8725aac55bb5520c388a39e29a9a24288dd5f21ecab37879ab133267c9959060151dd9a186ef73eb0a9e31b45adbb315ee2cc04643ce3d42cfc25316b103e2e87da401e6fae352ca176d87618c99f3a450ecc4fe0c8439b8d1b28d68c53a8e509c9c66e7bd82ac13bfc910ad2415cd14d293ecaa02c44aeb7b5ca7358357c052b2bfd918437ba1fd6401cac7247a0ee195593912b78f95d92c89fc117f5107d43bdcdd79bedf1998613f4fae88759f5e43d44ad777eed44e5ccecb41d5044a2de0476dd909b79cf88d20cb08a2a82496a6f1d4e193de70f4c5f266d0aebae6e1268dc2663bd6faa519579645e9fe3be14ea5901fb71b87c9e1dd828a554d5eedf4737f87ef19764a29d00e862056bc48f75ebfd949c7d65a7ccde82d202b0c0dccb394f54d0b96d9ff3657d9d17a9e79bff8e8f2df0e14a18e66240a60c479f4c0e443e1ec487d3980397291a942ab937dc098678ad106d21b499f8b9365efec9e36b260c78f0d506a636d1c451ff83c7bf28f0bb4bde99007cf1a0d51e1e4fd0a7ecd131f6424436b51c59645d23da2cfdc9962256aaa1781f8fa8437430155afd167c9cc47ca3c04549361ea3a360b9b5d6f0ef259eddf28e6add89bf3a352d30e760ea76de6304d12f3d7f319edaeeac2672233b375a0b8db3a949652c3fe8007837cd6f0cb221d4ed216c3ddc1c80eb75b3e5920296693430da0c0c513457ab80063745a53bf2d932c73c81d95aae54281c225acafde67f635a7f6d09261bf31f15c9f22c926958a0d34c26dc4a397136bdac54dcd2cdbd35d481885bee02c9d4098cc1d1384120377085a4c5cd806a2b11617522594108a2de99526d5b97fa6d06c352548a00c44f8c757f86c8a8d0c03b29506ee07e623e8eda5bffbb348615bc344f764a0f3dc7d59cade9adc059f55c372a6c90a63813aff791b996f78be024091c91dc9881834bda6871663552e237b50ad2c69790f3fc41a3709441539b475f96c89ba2016ff4cf55464a1c7aece1ee5b863eb07c0d13e7a924d9f32e39222613d05c6c2fdca21cca21ebf65fc231709e1d021924e763e4fe1964d852953075aa91122487ebf6572e523b2bab0872aa3a85885dd4bdde8e7b98cb50358c96923b22936a50e145fb48ad969fdb26da47c0cec33c41d3e134afa60b35071ce92c6e511c75255e1b029fcf9ecaef5ea25d0716f8b4ec5c05cdfc112249056c212d0d08d0adcd5ccaff2d74884913b3710194baf30f65468b45db2faf3449e284d55a69df4f0646f447aeb655fa28a6c5b7d5d4fbfa9c83a4be992d408dc800e1219d5c3ebe99b0a36169ab79fa2bcd749bb09cd16ce7a87fe4548ca20520e62a0562fc21a5700576037fa7b1e78433b6a3f1f9147783536c8c7e26eca16d5c9694999d667b2337cf7959c6c97d0832e6e60e6fe6b0b0e112ba6be47a33d8ae71f47ea4217af7d25db52e003dbd20e1af8e4e20d1cd5a8e2ccc63d5d39c67336998be104f2e3e46f5b909246bbf202cf396495d5a5c585cea58f040597937256c8847732cf676b2a293d7b4cba7931840e34e2d98b3b015605860253ee806f5e24d1888d52e654d512aeb1350a33ed17d914e9ad36dd6300e9ca1c06f9f8543ab82a6e6fae204be8eb2439a5f1b660b47d3abb8f2084e6ea8e9eb2917bd9c94c8decfbfe41d88c632672b984ca0ce974982320c489834ca4858db5ec0fadcf3668f56ba4d1d31120a5d50c7f22b553d320ccbed769eb461a569fc59db1e07129779d0b385c646aaa6a48cd005fcd74a13594628af4f34af613da3146d3f7a1ca01d0526576f72393258fe30580b53065d8ae57b717119371b7d4f3e7fcb4634ab1c34035336179348ef27d1e94cce24d9b0e516490531f671130d218c6ff3c85b9c7164ba8f684d68fb8df49a9b69f779e7ce3a424b6825116e7e18ea072d184772ac4172c8b611b9d0d110867fe90ee448d425849b63f741dc8201286afb2f4bd921e5c9cbbfc02019317c6296dc83c208fbcd99d3cb630d07f8e5f29e89454c7476943481d328e177ddfc4fa7c6f8ac3d24475cff138e172653784c6c75c11fe43579c47fc285019f7c600c3427ddd43dd4c871d215df2f30b5ee30aaa4f7b3cd74a80fdf7f67f6613e4936ee720d74050ecdd633cd3c07ca89feb1122b89008d22f8efcaf7bb20f1bda472b01bab123c364efeeb617fbcf006d53668d04253808700856028749ddc6e0d843fd26ae56376e05e5249e9c9cc94e050c21ed8a9f0afce6beccd26828a62af576a078659bf5be4aaa962f5737a39bb8bb2bda57007cac3c2b14f6ff6da384da0c37325198b71c726d02582b839780de429caea3f8772a4812b4a966aafb7841533ff3c8f984d82c1b5e7039eacadaaf476f4ed463df6386beda38209e75eabd336ef6dfbbc0a6bb58f4c5c296672c2831a3a33864ddbf093cb93c9d1a8201db0e661147d197b9f661b9cfb2f54a4ded9c4f6cadc42c757daeaa0425bfb346259943948178325fed6dfdc9a1a5d27ba51a096e4368ef787e83b08b71e74f6f2ff93553dcaf9c5ad8225ca6e902f9ed450e94dfe9ab2b27b35cd482ac45d2a737e64560c703fce67eb89edd985993646f07cf9d369f5a46c83d0427f18955ed893371d6debd862f6f2d93514fb42e7af899db6c9c27e8da55c61c57318c130f3572a092e836a2c77104d7c82aec65263d6bd3d95ca52c4f05e64fa1c81d1707a7f913f66eaeb84894379a35912c9d6efe3a4763e5d09a5c7297aa11870b3ea07923cc6e084d4c4decced31852525539ccb72917177bbb8d72092a6880514c5d38a2da3338a29e6345a7da7505bab9ce965ab3097d0c22eb394472f7268228dca68ee4408085e972d6c0350e7703f65a380b649d8946d732cf6f06751f67fdbc2b67687387e49e9a3bdeb76a1a24556cf02958ffdd27291eb3be91b44420cdec1a28c652d51750d3906111e4f68ebbe8f48b8cfacc8c70bc054a3564c517ab20670c7ff405c73d149d1b7ee823a63dbf7836524a4bc655877f9e92e23e2cd9c6b29b27a3260f9884bca707b286e8ea6010a309ed03e7b9b7459c2f6b2695647d1e9dcc259a5122294e3a0477641af21796f494a0a456f1476cc6df6696eb54b0cdacc97e4e40eea3060cf58801198d47b626d331b2bc265f0ce931a8fd4320d7e689b8b074e634dba8eed6ed773a71ce7e7d587e7a82cb18fd49fa2f04ff5f8bcdf120c8c2adda83ca428ac8d27c2e6ee1b032acc512a4165d18f3863ec1172067bdb908b7596a78dfd1aa33db85206fac0d2c489a8cc4eb92361dbc1cda3f285e3b44da597ef4e40d68915f3fffb4a22951782ed2b9bded5f90e71f270ca16d5c4e65085d31576840ec525a096c6db8d3e5679c40f942057d16e156313b01ac181586df714b9d9e00ef9bdd7d631c7cbcbd088afec3706c11075916ccdcd52697a55608084b2f73811a1bafff08076c50c9c78c34ee3aec6236cc21b71fbe319d9d0d1fb83c1d84daf5444d8666878eed629549553118db64bf5481c2988d817724479e4c54e29895d3934cf1dfa3462ace0a6f3c4064e2d4caa3c1e8f2e82ae291c634d330a702449b7d06d72dd5dd680dfff831fd2ab81cb47b6a6f355c1112eb0406db7e2965e3220624cd88ae47cc52b895b3a53888e6a153a4b97e71aa9ba4e04abeff03c48fed594618eb34471d718ae048edefe6b676b438d9298cfdaed2a43b66e021fb4f9fd4405b6ca4957d1d1b34c7214be87a5a109e35f66c604235c0027a01e453563da299b38483b866e0e6a8b2fd225e57a73225fa87ed56160e95ed0d05f7120cba1372a2f84e10bc377bcddee9bad14d6c27a7bb3cdcd1b0aac8a75e6609391cbf1bc985b83a26d7e661eb5f7be02596af2ff6f714bf55fbf07b7a817a157fdb853ae40e182d8cc4255b53fbd80d937e79d8ffa1262c2287dac13b83eee64b34d596f9f95c6cf2b02aca6e4ee59cdfb7a9570abc204b4d3364c227ecd125c0bdab967f5111230c3307d21b30468d017652510e423e9eb4fb616692fbfbbcd3d8facf777df72101b6717280c5492d88691ead0eed8bf2c04ca3a1d25974044223dcf0a6754d0c061b269f5efe79f72cc7bf603a262faa398974b496476a2b62f78f8321d68a8b6b014a8ac70670de8fbc441338d78932f6f670e8008d7c1542a540a5be46bebd9a502998ffa919df2ae5fa876eb356afb87f75c346082107879db42ef318c48088bd9c8bbf10162450d64ec9d0642b6d2e7c9db91bc0bdae793c11df4d6bac9e2980ee1677032bd0d5a218aec44a56f43c6f4ed919cca6298c213eacd28137efbcd5af2c379bb0a158ddae411a066c4b27c4d3a93b183e52faee919ad69b7eb4e6576c736e1dc511abdc4d13555faadfedb05f2f22bd86f64d7b1413a3d82e169f5ef59836bbe816406c4df882bbe32c41c59544375fd079399b81507e2c9ad5bfecdb99cb337d185d023091f041d3a5d0e5d2ff02cd2fefcfc633b9a69c7bbe514766bdd66742d2b7f1b1ab52c491ef50284a8f3f833d14612439b1b46bc7099d19c8de62ba0b9a2f8bab536b9f4af6910daa4f6722b595495ed4f9103ae582c07831a5d3eaf443bf424ff68941f6551b93200cb60bdb05b3920dc5291bda612d4138637eff62f634c456b37874a63ef5d9e894a9f632877bad30ee78747eee474ff8d52b1898f55d3d88e18c066491a0df02291107f98702a2f11349a564ae969d15ec51514a2c92d6efaa6e093f69aa783ecb4e0ccc296162be3cd7cc9d85fcc91fe36f5a216119ebb0f37f20b9e8b6c7aa7f7155eded1353fdd8e6093cceff81fc1cc6b7c7581dcc7201995df430b931c531b6de7930d528c74a4188ca65d15ad93a51c2a94a9cd697db35c4d220ef3703dfc7e322cfc010f25217de66b43466bbfd9fc5612bd4a37407fa98f7697d1dec3c335d06e386f672ef4f6adf8a28bf1d70ba1da7a46bb0c064ef51460f012ddd0eb3707d69c34869fe8275e2e406cee564ffd8eb1fd7c41c73414165fd210100ad1d41e6ec6567338549bfe747061c5505548f0caf80bf587e82aa9c8d7b60946321b3b402310a95563b0260214b08b7cadede482479f5a3246b0ae40ec75b90bb7a7c20ca2ce5363b76a5cff2f19a110a1e2ea59826bb9bf47d6e361cd253f6e42f766b674b5217e9e00ed46acf25da2aec2089e7a35ff8326467e7cfd26afbc3cc2eb02b1cc59e9a70b0ad152c0993f094debf35c9af349ed40044c6d7a3238a342fee71b91507af2f2b90c7d704d581b6791599e64e6c672c95a53e9e537aa74b63a6b257ae6ab6545aa5b26974309cfba3df817ce7592732dd862c96bf4291ed9fbfee05f856ad513184b56da81436ee0b0726162a9be526651f8844cf05dd97aaf482b80812b3e4ce2c318173c354131603aac9a518d887dfd6dc862dce1409e5709daed30ae3d9e580e8dfa1eeb299a66c718ef9303f903b0ad2d73e40dff2445809a4db32ebf9d357ee36435cf51bb8d9ed1b3a64661edbc895aeab5a82cc5057359f3454f304979e91a9f1b2c0fc95a1af91a127201b3e8ad205502baa213c049f7604f64aa6383ffe2d4f203e16d17f1df632caee201d4b7d97294a20eefbd5ee74991cd77fee637092f5769bf5212e4411135026930d6f5c5c5e13fd63482e9e70ab7f4d2f53b71e842f916800c2ebd215356c0c6ec598b4391731a49de39fe15f4c068264a65aeacaf0997211d22e13c5bfb04b05f1e58f6973b95cb1bdee3955bfa314621779e90887ff1d794b5c680b2aeead8db5ee8bac1b72510aef4de0490fcfcc4c4d492a19cd5862b554214752749f9c0625621e6eb9fa61db85730be5742bd12630594f27d3d1b61e5bc96fd7e4bc6fa72b5bac341035df4702eaa50f778fe1b7777cf05c3f3329df1a5d811cc3ea96dc3f09e15bcc42b2a4bc5eca6d5be2e770014a8d352c789729af996559ff601ffb02249fd0f92f0ad2b06468d32e22182dc8cd3b75009713c12d425c8e6bea1a6307d74d9a66c20b68986fc545e083db7f62ef75bb7e2c82fffb7c265a5ddc13bec836e495bf627f321b063368b338e019daa005671aadcafdff9430581d57f58b166bfe3d6b1c5b10eccfb8481ec60e0d9871ba7416b4dd7c03aea8464a5af26b16af9a4c7c6b78603ec115293fb223f48292d69e9b50cd2362647db09788c6bf834dacff13afba47df23bd9c9a0e8ad43e7f55795a19ac6ee94cf8137adc39b1fe59330c022cfe12c2e3f699f91b7f1d1844ca48a211ab948b1c59c3b519000750e807d44ea12b79078623b0a9e2ecc29d6a7467d1e5054ce2327e8dfbcc447ae4534de23a34d6abc5fd1ee913e3f37a302eb91bb839697bc69e29a273f42d57872d7f165e6e0539ba36b5ad2553e184fbe1f27edbbbbcba381a15cc8028f10931209a3957f1fdbbd75384c13077d4181be8404e2187585f983951752dfc05ec4da7794a7f35122717b9c31338532adaa723b85bad58c330198b5a058192ab7179bcf5d967a350bc8c004bc497eebed4efedee24dfbfcbf352fea9e6b551750b2a60e2f46bdb51d4c25dc74279dba66da46a3015f4e31e7d091d8d50a042ed26dd4356a09632c7b429bc717e662b10f08ca91511dd85213e3be9f4bf0e4d9cf097d1d719613023aaf2b6290f468b57d22aeb9495b21d64b4633b3fdb228feaa581ea7c7d634b49d234d6f3b27691ea2c6591cea27808fbab99e74128681a34c656ef0fd704c66e47029b485e41dff213bae0dfc36e7f261643eff4716ba77a63ce706a1dd07ce6784228989c6909d6d777027bd77e5487cc42c90b2cd8dcbe07b615eb90b5d1f72b1a1eb361f354138cef30450816316a4793b497e832815e5f1b601f76853a79d304f34b86de4bbb6187e2313398cb20633b07839b09f93c1444252ccd6b6fef77a1acb5827271fcae6f04b35174a5410374dac2680902c3e1b66be07a6876aa50e853e0970af63f5adb79734fe72e0cd76f00dbac318dbefe9a327a2dc56ac3ed18630b6b28608c4b903d3c792921684be6cdc16ab63b652e4797f498349a4d2e5fc9637784caa3340f3d1104334af54875f815832a2c22c5bffc1f2d76725c8a7f14d6a2603b4b2d59b22c9cea3bfb83eddd77c81464557c43a2d93be7095b81df54cbe8b698ec3494237cfceb331b6fef10f4f1667229ae5d7dc6704ab1a00932bbc59c76b8a6f6a91517ec2b7428bf0407bcad2134a3f06a8d2e82a92d5c6885411cfebe9f6fa69f6cb6096275bdab304d763b1bb2e3d6c5273b0f7a36e8ae9961179cb7503a12bb01482ace516966d2f7fac418527deb2eab997f11ef393e9069f253127959e3cc5c6d6495b05762cc140deacdda011269590cefb8edbd205f63863599938e930397d136ce70dcace4ee754c0a4f5e2b312d7559642455735d2b85cad36296320739b11b1877402fa34d28ebcf50899f29cf7bffbd52a1dea9f684737146766ba11d46c82279b326f8f6535e58e483a241342313a7d36e77013040a840209a48b72d14fdde6109a377b570448a8d964101efc873149110ce691bf7c4a652abfaab481fd6a792239a0a5a17869f873b674f4784fd2350ba13de61aa2b044d6cf53681c3ef0bb300e452d37a029d3b3cc96440836bf03e1ddc0ecc818e7faa180c9810c416ca91169f69d6ea6f5a803b2909bcf22a42bf97d613ae2241aaec071471cd85f8bed101fa38cdeeb59007eed86e9d2b4acf88aed0b0a83693dac8950d419cdb152c0e95db659b465a9e436931d5fedc91cc3a0d5fcddc4a8265f6f279f8f537301e775beae1fc6f42a81e644cf30bddc64bd4d96be0f57e9577c4a6a12d4cccb97f65f264b18cff087a490fe0c1809d2fdec70e786a97d706b1849b614f20dac8db39345543a8b7d0bc1c1a659ee4905622ca92785b48fc644943f46dee2a955070dfc3f2a04ca6dbfeb2f6b258f0e1e277a8ae92042d534d0f7baad66e1ea3747a06bc47c7dfbdd9bb946a3adf60dda7a26d42066271d37e03a798464d96d29dee7a816bd27c3249895069ebad4c3a926cb99c7d74a4ea77a6ed09b8b57483a0484bafbb21720085f5f8a06c2adcf5de4c4f96b0318b191aaa3d3fe8cb2d0884199aa78cf1b981207e22a04e51c9402124d2f74c67c1fab34bab8419ca3df4e02ecb20c49af9565c44ec45381530ec98d54cac56a8e350999ca14f027128c8eb2336a97c098bab68ec245f927661d2f263f9f6aba1ba55bff89c6c853674bed92d8ce9018a2b94ce07a3e2fa6173cda33c7fe59a92f184066cc146f663f713b06b17c05b8284ce55ed80f7ce71e6f7148aa23bcac339af8c274a5c1a6926f94158fe988bd09d9a68cc77a093565c31b8c80205836774e2cd6d48b843641e2a38a4f73d721b37af74b20515bdbb0a5a2864eb5cfea3ca08cb49e05cbaf4eb944a161dd682a706c1eeb904e61630adba6e1fff0a47ea8d24fe9b2bc4848bf6bd7e89449edd91fb1b7cf0cba5ed67e7f9787cfa0b16e50338d20f1cd711d74ec667ed7d5ad6addca2045d2e7af0b61c21d60bcc89f59afb4bb0625d97d086ad30269619852542f8aaa32ea3fe897511c225f534613ffa8e494565b8064eacf9cf07edd76e5232f10288ad73a9e74354a917d7069c63d31ad1a30c6af90f4bafb6cc0acbfc53dba729c52049b44b14ec7aee075ce9bcd87c2d786d949fcfea69c1946c32ebc0fb97f1ade7264e42fe69a6e0f6fd904dddcceb7cc970fdd86975afe649a28467098a913b77a180c0a2582384fede21acea442ccfdfe33aab9afab5034969074f0894382ed8b10718873d6d1b39e967db8519b507d31cd473d690caa65b22a5565924cfae96a33a9574e7857af877b4a40fa1fd82cfe585f2411f928058fe68f0f0a1abbbaf0510943c19b9b9282d5a5017e210a3db56647eb458f815261d50d9d53ec4f7351ebbbbe38c26bff973e54edc4930cdcc036b9ae6c8876df3b5fda84c79ca1429ff299e09b1ed1a8f960b4f139d839e4b26784001a8cdace77b495bff37ac67087d20abc30eb79429a926e42584cbdfbde475d8b56f431fba3ee538dacbbb5fa3c1a87065d1c86e550437ec92d4ba1ef833fcd49a6a1891c38bd4df3a87f46b2bed1c284fed7a42c9f616703e0c7a9c8ed4bbb7119369d3a6291fd4bf7d09286e759c62604d6f75e9de333edc6d19d8db90b630989398933292e8d9245ae48e9ed0867c2127e1173c5fb3dfb2e5516648ceb534b96286186d5eb3d7b93d3e6498fc6bf1776ef9383a1065841e10d3b5620d6a61c4020ec26996f8a49204a0a955f0b93ffd059eb97b5f5e428f49d5e3b90020cf25bafdbb2b0437fbd3e9662eee5caae009ae373a282f45bb5ff915e2f2bb83664a1ca87b69ddf986f310e984b92b18b5796016d7dea43ceceb00a3a7de82e06669627e7be3b30e5f65d269c309ec77ae169fc1036f81563af3c8660d3d768ffbd954aa84d189b0d42446b5cbef7c8696f09d1568527a08926733d6885f111af2d9c86df2c99410fdd0b2ac5a1aabb65e7172db92e58dca9406e570e9363436ba27f783541665d4750910696b6429b8ffc28bc94bae0bf49a9a3cd384d43d5996f682feee8051f86af271d42b0f4613cf4ae3939085b2015f01c5aa4df525b0c58c11152eb20a55fa62fcf41842485753fba8032d2b09584a51413de0934ce79b2ed06f33f5bf812cd1da71bf2817aade76f55502693fb393ebff28a35becfaf3e260f698d5cd6e81ccfe96c45a9311938f62a6b81f453fc5111a16a0c0590fea76c99ee62bbd733cec9531391430f84e1e06a892285bdec1693278b967916e3ba68004b3305541dc443f648e0cd2c0ab10cff2e3d979c128e499f01254fc0018d3d1eae4ac902215ed995beee639b4035a6d2eb3541751f3c9e560051449e49e49f76484bf82ce30cc50e62fb8054f7745b931dab09a9da2a3c85e8bfb26cb143e8abfa4d4ae2c0cee2342c1f79106f7e118e42f5e17a78c8652f088be11626840c6d47c9c0b5d710f2eea0c3d48e9fe9748391c7f4d91e195136fd3f0547a71ebcd27b60ececcf616a98e772982a747f5d99a9ce68e200bcae24cc5d7e879a9f7ba2a54ae8f5d343e4d687f2344b8e2d2374ae4fcf242275fbe767d5a66a6784d1aded5727441b12dd486c2fecba76251f7b7311864e50f920822fc3a963850715fdbaf218dc6c12dffe01f764bf2106cea261384f229bdda4a6c426826714b5af66a7e858450704c7dd47d6c968d30b291699149a6fbf4a691da401c92e552284c2f5c64b848a6a05f26fba7dcedd92af09ee72264a958031d70a93119f6177ca25ca363b435f36507a6e67698db8b850be2caee775ce66d47079566202ea9acb5c5d291841ba7139899b3c8ce4603522e76aae518670fb7035fe3b59832f0c9174b2e869623434a831a36ef5eac1c5e8575af71926a24a0af9c27ea38585bc37e3bd45dec92cbc986609d8fbef25fd9a395521802ce34429501b813af82779fd2df4dea89a4061a7419003290300f440aa070f0cc66888c0851e5430ef5d62a7f036852fafbba77538c986e2110ed6467c05cb4aad4e6f3f999efca1cf118bea650e00732562be8a837d3b509db141198c2c43c4b9d29a48f286fa6fdf7687573ff4c3b6192ceb4687acad2a616952002cb39aea837c9bdd95cb690b3a7ee0eb7e8ebd17b9eab5f6b147b86b4f60013366f80547071e9ec3e4fcdda670fca96a7def98d751d162027d212ff7e6ba8cdbb7d02cb353e1e4ba7388b0e0530c3c49a04ab16509444f95a15ab6a1c16ab895bdc86af1a9ab61d39918a1c646178f95e8ed581196657be3e0e9d888787a628677e60fba99259e8cfe74d10c8844302ab4d94a93fe407d6df6b78aacd7fe34ccd8e89ed9089b9a163dc6e01d3d46bc47752a399ae2e4e1a9b78879699cb23f9a2314a06f3a22782ae5a3d491474508eb9d77b755f56250ee9a57337837d2e331fbfefdd136252012a7e06d4dff7bf5451de5a8ebd6b30c973496799e1d89e79e0b9ab72acca8778a0a99030fac6b553dffde503fc80e8646874e8bd90b3849f78ed42f8f22072c50676953b987d26ca614bb07c79f4a6b2fa3311b77c2a13ecfb965fc3599bebd6e6e8fbc0f9e69ef51951e6b49a5a1b86e477c848c6b0371fc0d1366aa125b29d713d4d1a6e4501a4109ddfbdb3fc777aa590e2af60b6ec4b98e00ab3897d5bba34ace01f457ede24c3bb2870db361cb09faa59b64fc61c0c6e16c46a6a9d04b63462f25510ae7583581cfa5c36fb31acf9cfa674982d8f8001df4d6f9060562f3f3b5b7e91bb56a55efe6ba0cb41fbacfe39493bd2d4536272d681f641119a75b5a4089caaf95b426d48868849c4815b6c9819b92f8fc9a761bfbe1d7f33fc99deae63392ba2ccf5ea128ad48d54c874830c9615e8be016fa168e26c2f4708dc74eacd77d47ffd7d1958b4fb26001191091aeb3429a3668327f5ebac3446b379664786578ad5640efa680da5c97fb8514fa816924106ce746ef4e3dafa986acb9ccce20297046117a0e53f9bf25c26952f6965fc2f8ecfea48b1d262353497f6756882bb3c5bc84e44a0d7b2da96f1b1483e17ef737005afeb09e0b9796bf064f36af82238b53da49497006a0adeffc4c0c6be82c655f5b44cb42d01d781b9e31efc2ede9e8ab3bc09a78201d714f53feda4eaacdfbb03bb75d0c6808f5797cb14c205d40cf7304c96ffbf07ed62e2115e979fd13e4b82a0a04062ae8fabb8c0b31c30cec07435ab411c30706a31332a7dcb918d3f4773baf251bfd536ef16597bc9e7184cdf1ae1925823101e15bb091aa4dcaf0c5b5f6c4f510dbefab607a1fd99a12991171c37996e5b7a691dc158c4287bf878ba449a3e93928869b9ea332e405e386fe9173d82bb57995eb3f48b5c5c2caa210926d4665cccb3fe0af92bb2c685c673cfd5e76dd5e039dae17f2ab3b2d72bc6f4fb955885c50f4cda585f81b225b78a80d585ea5dc74849b652ccd5dca50fe914c0d2b419969837533528bcb22df90bf966d5524a8f4b1fbcf38e6f8c676b50301b348b0ec56459328c9b69825332ef3406c1cdbeb132a1d71a693075df3ac375a8f3efd319969bd877a61372a8e1d589ec6fd119f76a4f5d119174b8e2a0997b7b4a6e11e650c77f99bd4091730a33fe4085b47dca5238d0ae12bf621fc09840fba9b79cb6f7f639c9351ce33fc1262d90fc0203c77c9594a2d5ec7af0f1d71e7df6d138d77752d5a2ef123d743cbeaa6a83049ed8dd8588a033754c7d856fbb2a67894cfab0ff39ca333667d7d843154d340e76406c14c2e41d6715241f39c286fb577cc5e519850a109304ed67f9ed143dc932115e637d165242a2f545766cc0f7219af979e33027870e826bf2bd73ac2abac2732a62c972b1ba209bcb57b727c005fe84c2302d6b7cec72e0402ef6b4204514c6122e0e3c3cdda74992a257852206ea50b4c1a54cf6ee16f81418b20b97ffd964b69ea736bdef52ecd96012eaa46ec50f124aa0f7b0a275a2d18c30c431486b0b26fba97a22a5b18ff012c71dccce4a61bf9de2f170d5f0666eb25f7ec5d84f255a02c13f05c34b36834a33222776f919e2958bbe9823242855a6120da1e88fb523f0131f8084809dff9efdf51d773a58e38e526ba7d5393beb50ba4f58ba65c1d129183a2239607a047cc977a58f98036bfc4d856dc359522682acf39059b072e535a339700f81f1dd42ebc237b23960b7d4527dff27315e0d3ed8826cda8a883fa0a6ed938541a01b9a3c9edb66bcdc6e526b4d2dc968ea2555a5ca9884a5a106ccd157e6345f61ad002adfa60c7ae6f2095e4ad8c42d2ca5151f737fa9bf5ab041fac691b0477ffdc2ac594c56082b5bf797c15a5200b345f1e69dc5e6a972e47f18df871d844f0c2dcf96fffd59f9c99fd2818fb03a52e948da929850365d2ea714e9577b3f98e94f9087ef466c8052df78006d8d43a10e9577b8e7913d181e95dcd25724b93a15767e5c71e3ae5455b063d2e0c6cb7188c702e7add86fd605a2035ef3832daf291b63a143fd787dd249d0389f9877463dcf525b68711d749946a0e5945d853d2188150502e8983b4d450e460932b9ccc6fa80e5e0ad0a97e54575c770d18a5167b5c1a079da7d2707cb403dc70d74cb62f2ce84c6fc941a8dd3c3e41b719e8d182d362ea44baba784228a4a1aa3d9fd07b7a2bfe660b619e9abd469b4587239110260b4eb9da33a2bb6920b6d50b09d5c0ec60d2aebd0603e04b8dff284e4f920406cd1f183e525b0f3abce3e7391badf1a6c565216cf85cb8ac7a71b5dedee4c0bca2c05b073b7a0732a67b6028797c821e888c37201275ab60076797666e0adda514bd563450235c8cba112a93b6fba770d83ad716eb4bde95c095ad09b26e13320f626d5039de456d3cf35d10e21bd9582503486d7a15a932b7fdfe9ad22f529fa2f089c33df12459a779ac7a9f08863820d4ba566898a745a9bfb984ab7e59a4be11c4ef308d5d1b50ee557ac70f74fb11a8443698c1aa2b68e110fb22e788090ca3a777af181267822b2054d54ec49f8ebf3108be026eac61a72fe57e725ce34053eceaa9cce7da49b0ac7096833b10cc8c3af92e533d76f6bbbcbfa33dcab4efb3cdf3fe5beef3d46e826978118386929bec7f6d191914b631e7443cadc2d3c42fefa63ba0171793c4f2292fcdddcc44fa73f3f594b691ea66fdd7487c972988e988605d5c8e2eea20b7c93e8f903c86daebd2c97c4a8231020390dd29bffc38cbce964e8abc2b56b92d7a247f6a81b96af7ccd0810828fad7f4cc031da25a3316e1502b6316a2fb3bf4c9b75562c4504222d8ccde00e6efb96ff33554f14e1b20a9e04f16e28ed8a940170fe0c644887ca9f2ced56aa07115c25d746fed449152c614e4dfa6918657f357b241bc125c584be2cdcb3b4480d611788f5d23cbb806eeb22485f095b8b88d30193cc3262aa4049bff74d874fe28a8b566b6842e1f18c39f3de59a8c7103c25eb646b350c26eab8dd977fa8c8bc1708f9c9c6f9469e8b9829d867eef6bb6c925a3ec6dc8409a942dce53d454d1c2f2ffc82f43a91f10cefbadb7b220c0fab76f1d3a60ffb7ca6ace6c801a487877fe6591043c381b7c5caa064bc38697e9a56c75aa1e9bf166dbf04ab2f2d6ab81e91559db82766a0f682d3e0b5c8c2a31c7c4a0f922cfa5de1658eb466e04b679e6449ff51ffe64e4bbd083cf37194d0d768dc6a636999630dde8792b9dbd9d49c9c3c285a96593d96874d3a77e54ff4e8e55684bd1810262af46bf44c8de583bb68f9b2855b1b8148dd3514b34c095c47ca49928260ad30d5c8ea44220d7c8561d459ca1800497ebbcbc964c13eec862851eb7773e349749b0d3a5732aa2bb97c4e72cf818964c2b28ea8fd88ef70e363b0fa0068910a23fd37bbf374a375f80f4e3332af852f63ca6f0f6f8f7b2acfcd2faa72e94bb132092f579b17561fbd35a8df395c419f5684d30c8a65b404c24836b5815db556ebe918f6aae964cdc96fc55343023443167dac0e9a2e1a5bf31c0688835b6a2f460ec26ab1cc186cba00d90e670117ea2615cdc9c80f9a2428ee800bb617d1d67015034ed1a77a3d448ec5f95fb1c75a9f404859db903c496479436603f0ff40c961d1a96b7a1c7d59861143874e0eedc929f1d9f98b8e1d891470f87faa568bdded55d3665f141c18ec2f79b86e98ab3adc070b0468274e7707f787d1a0f3799fca74981fde2d5405209a34c3966d639acc072f7cc14397f45141071923f34f0f887fdb85b6306691abf172385316c63adf43223ebd7f3848e7a2858a129dfbf6aa35154c199cb7961a1d36c1a24f6dc4d65e6234d06838f0ed46cdd092d8d62112aaad86a2fbbbe745de8155c5212a0c1663a19227c058065cc5e53d08d1a4d4e35695f957d81c6e4849606e5ac754cb2572b70baf8007719d89fc13fac9c0d6b196f5dd22f4ebc6f5d6f79df3d1e9e7be3f7989cf0881400a3f368195740ee4093be6844767feb4eb7b2000e8a49bb481e14f244aeda532198553faba95a221ac10bf2e74b52f444326eb5f4125903e76754e844ffdb53ccd1f02a9fa7e1d303075a37301b9ec4808dfffd152c777501129864b7015578f052210f7a7f1caffc05aad577529457e8fccaf66411d8627aef189e92a61bd920bf1c104e83899f32faa8a1cc345ec270131c997224e18aaaa9ce8568f48807f76842ce5b9128dd240e0fa7bde2746ea90c955882706dff39673fd4a96f35fdbb270bb687e1a064e1a96f095be0469124986b4e5fe396b2b06cb74d13567280b0f632ba4ed2e1f4fbeeea1abad61a89ed6e5b70740c6fa47e26ad7799d1dd9c646557e5e8b14d41957f6e1177f1cc7f9e80ee09b75d0655e970bd780c6c0face8819299b02635f0242567b8b8fb973fcac8c04fcf7f2e4a2e7c535dcbda75da06c938c8a36cf88e49db8fa87dabcaeb1ca80f93a4270e0419790bfacfda6ff1ea00941b6c82783517c5d09af76e7cabc72a9a79ffbffd42cfd147a4fbde1794618c4e3ac952777a37efff86eb2b403979acf56b7e15892c6a217067f554856b329388a76b002c68d4f0c780f4f023ba055e3a53eb9561aef42470e4a2a409ad4d1a0d454d277763c683dd577d2da4a955fafd08e07ae84c5bc6b8282ea584e0d22ea9c5cb35a1801cd4c79b2ec595afaa545353c40cf02a433918b70bbe47069c94d9872fe1ee3760f163544c0bb81697cc2cd95741b3b19536c248fe5db29e637757d3cfe5fc4e8a3084fe5884941b3512a5fcc24b6e59477bae9ef3bf880f703c53816eb1993ab69603a3d95e94c5adc02a60aafc360ea035d143dbf36e1e89400907c00b95246b5e04a41323915ccc68791e6edcc159706eb8d3d5f3a61843a0c0773ccefc4d72b8a9a461363b8820083ac1a2c2a5a30f7e5718967b33cf3846036d5ade6f02f59ebc05cf93f9782b491bb29789e21258cb0aefaf9eefae551c4ad5d8e24b57c97182635089a2076145fc6903146b1446740e1b9f63d3423237ebd984a6330f552aa1f3dbcae8c37011ab37ca53754d17034f4295b8134e15790ed33df9ac9ed9377df72a7d5c2bce99508cba058b8bd2d8af050412b72d032ffc577c962b5e5c5c8dac4ddfd937b1c8208074f31a8cdfbd75cdad14d4cb6b2c85ecc311f08a12477735d332c4334582154954d05a9655dbf245a25c9fbc86a5d7a2724a36051f6156248ed9e044d264ca541b4a3a79ceeb0278b597dd6b6ec70a4bf59a5770a923a3b309d42c29c3e70d8b996d61a1fb633045e33ce33e7e53163a768f89be0d5245067e8b0a9cc6ae18d77138b49c945fdb0c2fdf9344c195f479e679e3b7d66860a25aae2adf62b421d04c07e5301343fd2961006d92224c348f6cb21e1e050b8248a8edeae36cedd25931a7ffe93bebe38b0de487b1fcf0f431346c093251317734441e2920e98db3bfdf8a4fdbbb2fd37da916cb8831919fcd87b6161d9f08a9bcad72d8ebfa610a52e8aecbc5d05690c19f23e1eab5992e4b4a0e2affc6f38071a290065c43635a22f1086465b49648d163f9b6f0ad0f72ab461a2b144a15a44e2fef72b7d109140a35644ca1d3b3437b9cff86dcab8d84d46d1d506f20047750a53f5d2a1f28c6ad2725df6a489c0f7bf54e0d2e5d87a84a466507d43d9b97880b85305d27fa0f1c6a17bdb8116cc7ff83cbb41f2d7d21eb1a4cb482ed36d613ddb4cbda4027c229cfb91b64d4456ea57b66e53ab24dce5f857a31a4d676d1afc80d93c4c439f397a907c8a7d7dab5d88ded07831eaee87ec25d4aedcffc4639cc1a8ae676471120e62f6b87b950ff08eee44262719125b14cc1f194c0fae9b02364cf5407ebf6f8e5a7964c7bb8e7867d0314042af3fef07c2b29deae775463d62e6ac30509b1db72b7474117edadbdc07c7eb55d2fabdb6e32fdbe82952e698a38c7fa7858b6cd36b23784c956ceebf304dba7fc7a0090b89f1d938d8bad72300e958f59e37f21eb42076c763c42937ef1d18b996db75f6fec5e71c5e6ef9456c0553d784cccc3aff946acb06ce833e245f822a820be1eea1280c9a416de822cda0f11d4a3f18aaeec3cbdc94a616da24a992501904bda9158e524295da48a5f4b25f438b3af39cac821a7c4c1e363a642a9fd035a40b7ee6bd777f7669ca2e2d3c890bbb0340e24f087161114414b7d57e87311c14480062061080592df9bc6768f3cb382036c367255e1759f0c2d0792aaa3adc3cfd5ecf7b817da9985ad737ce5dbfc195f08cbc29d46a4f4fc8a8ff0337c5f3c42fed0ad1fd9f782822b578f9094d912bd49aa3705a3d0607d6f351b2f889de55a8fa1e946a7437003608c8a7928c6d711a62b5d961742e1c629ed0d02c3b74502a02c8f9beee1b911701cecd9005bbc5781e0bf0b9dcdaf1eb6e882a6161620fcf6c21f308e79d24d2812a6d34e832bd6ca13bc802a853282420b2cff028b6c641bd166c23a5fe6365babd896c32123412b51a339db8d84b17c953ea1167078432ecf4726350f93a676f17836706f64b43717cf1503eb3b9857b435f47e38f0ed9d5983eafdcd5fa2a26b747387ebd512766259f63ab778f4fbcf37f9917f1564265f719a7d329bf3cfe32683bc399f9d715fa31775120e3d58f9fcb28c816e0c3e42f4e4581c4997fbc15d95dd7bd05db879bf2393aafbb7a68dff2a966e195c386eadc2f4721dd4c946dae0b2ece6bd8f231bbbd90fb7372f38cb869c6a1a56380b77a1ad81f0b35b2383cef385183a94e117849f270a61186f719bcd909d470c8522f95250f9d6b524cf42b1abcfec8dc8900fc0240877e040e3ae058177d4bc222e0848905447ddfdb8146c46402f042d1e79243fb4f20b9fdd71f3b8cff61f135a3801c2a18e393f830b69a78fcac44666e37dcab2e7349ca2748d569b60a0442ee092b1284275902d42603b4bc1adb5915a9b0afad1f242787abc3383e4ac8b648a9bebe4d291d698e7d9ca94a841a2b9689e8dcff3da6601eb1b7aa5e794552188285879dcc507a7c8dcebecefda5b499ae7e1a20e013fbb713b53caee3d2bf9212f73bfbd6d9591a5b5b164d86f7cc0a92015e91ecda1307e567c91f6225f40feb4810828958b9587ed4366464c84f12a09a9dd8f54822f376e1942671b4297f55fd4ec70c81ad006b8f5f5e9e8c0d6b8eb319a86aac4b9b3cca6ea8943d2a81e18cbd21fe726d2c338490f6bff54de69357163eb7b61f1833e5e326523ba42707a6d8e3688671f2e9254bf5ea22d6ddea6e6cd3d56171ddb90c015563f2fa27abb3238c36d89e014b70efae27beda04975ec5dbcfe58db6d2ae8b593229350165aae6d4bda0293b15f78b4fbb3ed97cdab23fbccee7a7a6ac99857de94968d2be724d70d37cd3b6f3720af5395841a3c78b3d44457474a62a58179d1528115b0e5d8ed374bf22ccff67bfee68d73cbe956adbeb404564f077e5e452b62b36628aebf7b23e4de530c9583c4dd74ea899fc03e1dd2dcc03081cb06e477f888467d341c83262a390980eaadba6e83c5446198f1acdf15d8ebfee6bc3f42bd409b568ec7de48aa86ff6bd73371a2af2838a84f5c5e467e984e5bec29b9cd127202e83c4cae39606b1fa80edb11f9b99dbe6a0f127b7b1e15fb1d14a0c7c5b6e9a04f13a659d0b8faee6b97dfc1eade99b2345523665638764ceac122072cb62a072d647b578e07b7a9cb9c674be999fde7bbf972f8c09a2463bf9045b33b0b7c59851b1d3b27c791797026ec1684caabd00048db5b4ff8177a08a706a9e6920f4e3d4767c1e67f4da12004ff55f403fcf319240abfe866743da5e3af22a91a86b5af94e3658a0e21e58d4a5d1542718d5718944ee729b97faf94e849ac33cf477a821600a85b1d218ad73395f93b1ba4befdb934ac4d50541fde9d42be206bb800adcfa8b3ccc0767f4c84038404df207474fa1f9ce9033fd22394823128cd822dc9394e5cb9ead97b88ee2591e1b9d2d294b61753966baacb1f6ba7c1d4f1ca5a31f83d564482b9e3b8b03b2d5ae94ea814f5101dac6314c870e8c60259585d9835a85070c26e94eb7f5a466bc822ffe3342e131b68f4cf973ada54c55e829ba7244d556b0d2268262d82667b17532d90081526153cc791a5ae0cc390da372dd91456d3f8ce13e5c50d13ca419d5e541f96c35a9968c47d4c5a966cc461c8b088265d21c229167e99b4fc5a107e097cb2b8c9a71879d39315067d06dd8e13210826818207d4f1dacee6aded8fb7da5cc5ef564852d70aed1e09fb50ce25ada95e462d9ca963f318caf7e390dd9fc27ddd70a37d5b00d7ce293880515db2a0affde7379e7648c3a47541e9dc1e984ccdc477748b80de2d14048ca3b66f0539a6a2c86e7446afcf825144c66e1a23afdc155548dd20455057961b2c0a862ab126a4e2e0b240e93b5c9a00f8d183e0b0ae113d28e62fff19ed3db17637331e36a7b0165c83bc442d36d3e3a316eb571917fd277c4dcc20b00563f4b6f63c8d84a118c986d26168079e30dddb296c6f6e2329a97b2f260cd8eb18f9ab829b35e8352ab9218548c813e0c2fa0b298995618480a33df5b53a4571eed8cfff98266123a4655749cf7a5dada4aa5edbf06c680ab2623173b9afc2e9b739634c025e59936ec53a922c690b967dd08cf1d0837f569c0d14ff1f7221f1223e62f0c711ae61e06ee2a41626855fd8a6ae0d68914b250f8d5cf2049b9869b6a5f203ec350bcb31aa58cb4323fd1b39c47cfc9053e888d19e4efb94acd7e2d6bb75a0e32b1d0c4593cf52589e76fdfcffa575b485c20e70de8c1e58656d8d793843be20cd77ae04639a986ada192f465150298575845dfbd5204ffcef6bf2db28c5414404db19b38b7f1102f0123848da46cd700b009fdbb3178b092f704dc7ca335ac76c1f996d754e62f2d3789a7da70fc9e214b7d71685c73570f3cfbcb8c7b962f62f573ccb9d4d0ae5728764c746638ca5a0e853a1ecb375a0ca24cc78e5dab88775c62c3a5302b7c79215e4b0bd2f09d33e12515e7f40766e5e8f9af18e878f829e3aa532fe5a5f7a5e5c61b9a2f81bd050fd0ccd38270d92d7aecec26d49ee81e78281d1d1db7228769b1e67137804642207d660cc9ffd83a9087296881581e2b3dfa8c55ee286c579daefd1cafda4f6dd6ebe53d1caa6e2ebdb2d426d8e156cd2deaff335f4a4dd828c22d276cf07838163ae2e68f4bf6cd048099d5b02464987783de662885e3e5066ec398765e7c467b8880b6ddb75c960ef46c712c4808560174a421a9155f2fe2c797834ae668593bf108c31af954c7b0a0703848149ff01f4a302624c5e28dd8da96b94cf3949b533260b04c90f6ad96c1aa12a3b5a89bbf1c111e97d2dcf3da776a30a8a0217abe8c7a7321957c36bca621a55d0a80358ec8212744b698962d86dd6cb1d514f220a6ede2b399df4d79cf9c604aa8f7819619e21f635fa5cea660a1831c397ee2a268a70469aa9d6aca90c23622ee9f8b7af843f3610fcaa02c17180a23313edf67e520de6f72d8792224ac1cc26b5a8de370ba5b040a32ef956891c6f98d38e31a4a7bf5a008b021bc51cdc9254e751b369d21e4138c4457990f23609a91fc768d1caecb2fa6fb1c5121d68dd559c94f7207fc8d80058e4052c37db18d87c97c5f224d0ff291b613d8d12bcd1c732e4811eb3bd92a1bf6b5c8ac3a9df421e62ccd9def682fc4c509a9e349a66361f0875fe4de1444a08fa9ce69ba4f9eee57c0fe486a540e7d1d3bc922115433d0384b5d353736393e3a72fedccff426237713cffbea1d00cad6f88661c479a3fde05345a2a1fde894e2c4a36f447a2128c8a7f99927280692e97c617c85297f2a0e8cd63a7e27514b9b3d05f131313039d397433ab266e0fc43b46e7fac144e5ca57149b3cac78d9facd4bed412ec28b42cb9ce923e0a29b6c6226ccf65528696fcd1040ef1a7cee58d6e8e7f1df99ae82dba8b5a7a8c4b8c5c6a8b6c84cef167eddecb796c2845c934858775c33cb32a8e705a574c33cc54b42cc05a70e2647c961d94076d6f20304c5b1654d866a2310d5eb8f5a407485b1da9bbe64ae63f18f8191eec04d63aa4944614fb8392b27fd6c8f15868e489ff60da85b9fc3941e68c24a58b3b0cebd9cc94b8f51dee1aeecbf3815a5fa032ce863b6c63102a7681b7b624f6a443d9205c5a9d48f49723540fd53545572ba41e01d0ed79fbfead546d635fcb0bd1c197a098472c8bd2fc08780b60502268e2514e20c674571201ac6aa719ca4c469aa3006266192c8ef17bf6bb7a8fdf107db56acb16ef524c835b6b0763ba0b6d432d3e0aa963536277709038e25b6c5bdcab8e456dda3ec5465fd990b29bcc1fc15db302610d565c8b675e79a13f5df2834992abc408d3adb41af81ddc44eaea81e5eee34ba344512e28485bc20bf22719ac17744142fea1d351043b5a620cd081c2147d952deb7ab4cfca2c58e517050ebcdaf07ee8b84687bbd495232d4092ffa55cc70d8df1b091bd626804fd99c7f597cca6ca0a22efd42e0b39b3c8ce8f42a95c8a72a761279fc9c27be98b06fcde323e6fefe9a37125adce94b3ac1d7172d9ef20873cc05955a3e465b7dbbae31306ddbde19224bb57dfa53eb1136951736a174a3cda68349a325b5c7e6697a2d4c21d6a76ed48caa4b28bd921c265174a4c9f10ecc54180b4fa80d6c5397726a33ba207aa9ca250d923f6b07429ccb1a5b1f6e6f7c84aa31d1925c187a405e7f9c63d3af5937e0e8136749850e792723539cc4a5764c24d42c88e0680d4c458a7a1de837c87aba804e25421d95857fe1019f61ee0fad9526d3975cec80d3017a915e39f553f9580477087ae9ed70727076a0935ca007364b687b58b3fbf66ff47714a420016f780c4121a7529413cfd84f1b3a628c6787ae6728bde529eb667a99ec7b5de4af9720a4bb2109db92ff1140dcdc7f0164441ada45de412702273849d0577b6bf85c841adb792324f006d5d38694594a0a45d7e66501873436c3ad9135380437596cc8f39d7444f25bfbd8be1ecae39fdd50bba9da38c4979f704acae9fdee0c72cdb5a4d11a2094e728f77a9efde77adf07ad3cda43368e45649240a5398e6a0efe3e5f7087a5f562ea2b164d14efb2b390ffd8e7b2d671027cbb57ec12837235f1e8f386e4a2f8cb8897071aab26c5436dcb50db8e6242fc6ba795764450bbadb05f493d6705270072787c227a83f3b906af118a49a31c00862ab3ce686147da327a2fb47657a0b61cd2007b930bbd4b07a82b7eff7349a7e09c289432b0fd0b6da18d4ddfd05a7bfce469a0ac79f44a0800122753e01912ff42c3a61a46d0ea8a54e8ddf5ea47fe6faa53a73bf97f29d817966f62096f62d29fd852c8a48c7a142f847a33aa7fd1f2d929e624c1b06cb43ec014376f1dd4425e12fbdad9a2b941483e6d17548477ef3475548707d61ff67d310c6c0f69853c39927c2617eb5fb8c33f3315198ee65fb1eeb22604b85dbbd84e7fc91019134213a4be5d9cf3a647c4866cd77f49012d29598ab937e895343d5974f352b939171124ee8cf9333d05366747030550d60381cdbefc1dd14864f24ef9d4ccac50d0b5374c2cb78ad797c70e0d52f1f155767205100e28581bb909e2477f320d48e1743cbae8a913187ac9ea52951f2a886d625103f8cd8a1e86bf29dad635cb2ba5207ec19294e242133024e052ab65c4cccacba855ca0604e69dca36297adb02bb7a75c6a705dedee81ee5bf04d8d90d611bc82b473d53b5bf4f1a6e3ceb68034c3e3b6c01e4138a152475f8be32953f4ff97d8a0caaeb4d9b94d4d36b0cba49c73fdf92057467abe7203bd5097b90f9b8b482312a8f588121225a5b97bcde718d8ffecb3735bd0d3ce4b55596f793aada8bdc9418c5e5737556ee7b6214f90e7d9a8717944cfd48237028da99c562cc32535ee63699bcd2051170b27d6c9ab9dfe00106ca7f8ac24f70a1934762da37c4653672d592e92093caf743206ea424e756783e3bf2a300727c5dae3d7f089ef5dbe49e9c0ca1fad2d3ae75928e34adc03c98ab0d0efd783edcaa10323b26bdb7825bb925890d5ab1bd05a02bd64be9f88c1e9c204c518b2659fe660ba49e16b53c7fec7a10cc9e25372f4e9c9aa0df0ad480324c2c66f63fefbb4aecfa708ce53b4ecbf854fe39a76f7ac08e86978a3fb33fe8df45acae1488d9fce11bebf2e00d6e0ea924a66eb695a47ab4f75c1648840764bd807effc3d1f7587bd16271e58de6fbe2f8744fae12d383ea1539a1e3db28342f01be333ab0fdb43de8ccaad9608a1c1092b0d960152c4f62fdc17762095f9c1d4a56ff13129886227844813cdd7030e58ffe1e127aadfabe091d9840806b5a954ef6c1a81a1940939ff07ab81a9cf4d4c2f23cf85f4ab510645dedc18bbb18db0d7d073f7be4bbbce556836fee6af6eaf874598c9d5a51bcd9a7665e7adf168e16787db36c1359c1922570316faadcdbd4b9836ae2fa2b847063c5133ed15b27f4fba40356a884650722f266a81e148ed31c09c8751496877c9c23392518a7cb0c34c4bacc9549dce02c017918261438a02b15c65fa3af0b1468838e76216a2264fdb38708de83e370c0316ba9c06209b351208ee8610d773afe6ab3b8872ffd863f8619057857c533a63603eb6e4bdc60e1cc957f60b753929ccae34170f731523a7a4d9704b23fcb70b8e11d210a8ff65fad18f0c7ea4f61adfc9707e2b69c1ef851a63968a4a9557d17b4ca0ff68c4983cdc392522fef1bd0757e21c709668138086448c033712d39b7d277756c43c2817f4e136236f65331bae1f56fc5f75a68332b215936b656af1723efd79059b0b843233fec82558e18ba39f529474006ba8e3f814caa932ad34ebb463619ad21de66f8dc64b72684aabdb650f420d9d097e0241a4e1915d7ab390e11b725d0f75b9fc5686f14968046080470ddca7ca332c207b12c98790a88a8f6e5e17cb89b7f476dbeeaead52ccc0fe40ec025a2ac42b4a8263c8aa890a00021aa2aba7b10bc6fa405fe6a7fb2bb5f6e13ff2322b00dfe4fea73a364b96ddcc2dbb26def57c9d3005718d965856c98ccd2c275c7ef1a939d1f8514a6ee65796ef5ed079122214c855ca30690e958c583b4c93466aac3bd813917ba88e2ec102efa78087234fb7119990231cabdd674bfff712285735de60e30521ee0b21ec83ed840fcfff6b4ad0dceb0fb1ff5f28873739923b0a6f89ba532b76a918bf30d7b6adbf2ee64f9be4a207536ac3f6d7d7e1fbb0f3398c0771f431bb2e6395f7b7413c67730820396f0657e561661fd59a17971168685b98f20b067f2c0f1c84a0bb0cf6ab02730a0176d27834d6c96b104db67e437469ed5229a785b7f582678314fda3233f6c4fe869f9917669c2eb90e41d66250017ec1d690f70a2d858d20ed1ff7946860ff5da203630e35d14dd3cc561a808dfad7388bb4d3921c2c416fb1c6a0877cc37ee694dfc4692a33989d6ca3ac19e876ed917fa5c5c2cbcb55f8ae03dfda2a578264e05c38e8f0afe69a07f2275888998d9bd9f03ac249a3743d6daf3c887bb6a19f91adc928a9dd9201e64baf50c4139c08a5b5ca2bb13c0c39f294ec1df9836a009bea9613c139c97378dee31c857b8fea00a2fb86e95fb1151e2490bdfeec5d9f13d9b6fa396f19ef535692e9a5912891604b5b9b0fe6f9dc92aa40f8676fd484f8890f6549f0bebd344c80f170e88f9329faffe19aa039cb31f48faa48c49db11661fe9fa5968363bf8695e773594c9495f39c2fd877fce2e8914fbe46cd6d06260dc3b2431afe0f67795099cd618b6060b8f5296dcf5626aa96fae1d523bcddc7db136f5d632fab06a1cad7290c744949031b4f6408924b382685a8b8c87bc98b8970aea0ed7ec06b7d8140fa634e5b0861bead1c0d6779ce76a96ec38e5e4c5218d6d39e858c8955a8e6ac7b6792086f7e993b3e23d8b61f22730966d786abe5a5dc5dc64cedaa655085da36066b8c6238fe3b00761dd47d20844d979e0f58ba5ce3ab040410cd83b386f68691ca687200f69226be629ad7a3f9f67e1d28ac24a9b03fabbb215c99476f6d052a93066b59508921a47ec598a9f06a0457e6ff75f5cda68056c80c775ea4d979eecfecbaa635abfd6c9fbaaa9fffc4b2646e4dc79d2cb7c7af40c9a9e8b15cfc84c86fc513dc4d7345b555d6536b64270b1c279b59ca4f8bca2785bfb3ae201f1d17f6179aac73bcf11e3c06ce95979af000c8f02603408123364f509f4fbbd9fe968939d9bfebdb060968f4c0955e697e3ae1b12139f9a9e45d0f296671cea252c6817d41fb73cd36688ff008bf446645e328af021aedb87feed096efd66b49a0cde2e82e8395d56d4d0efc323439fc0e977375b8c8ed5fc3f035af6db54c50126d7d6ed43dda1c90277d968aa4c68db5cdd62b62f2a6deacf1af55352750758fa0f8f171646c23e1be9502b8fe11fd16c0245ab68ee6459c66d5e76487d6448cbfdf7063da610edbb0be4cde37925e3cba4151e94d76ce463801887a6b2d6137d443b20441aea36b567fd455f08cdca42e7c3976c7cc51fad8b1cd4746803ed13b4f79dad3401e26f6c8cd22e14c9a719332693054482fd8c165ee17ad8ecc5dcf376b2c814bfbc448eaebc61a8bec094dcc0667ab844275fdd4ccdccb776825c358ba8cdf3cc624f24bdb146a400693682046ad78a70a3f58dbfe5b4599f13bcc4156ed8131f283bc1ce1bd949114757f2743858456ca0758bd1afaf749ce5e6131ee1b4bf2b3eeaeb8d863e83cf50ba2a80268b74173a0567189cfcd2b65287c66072efcb423f03eaed61168223ca231e05ed9a132bd5b464bd5cf19bc86f88fe9dd59949b6f4df280dc264e487dac6417e99a0a245f63a3f4554888216441ca151eec5ab15aa0aab083bf9fab05652f78d715d1ed923a87ddc6f1e0f4e7e728af259169facd12ff89c19766d2b28867b570fd21bab55ba62aa8fca6088b52bc988f4f187f8eeb28d9721df0db91c3715becca3d09bff4847ff10009e1cf60137fdd888227d21a490811a0147416a08347761776d890e177cc7c64330c5096c90ef0055ef950ec888d3490224df0911a53b0e6cf12de5a98fea06a66565cbc2dfc5c5740b6dad0343c18f71d6b3ddd7b91d6e537961df54cff0910e91435fa2cf18ecf8e02756bc4f1381d92e10e3ea457b2f38a9915f6c5eb153078b4ee65830456cd29173b44123e0b44311585f0bcf5b6b2cc0ce5643eda7d3ea3b06c13d114734287d037ceb1d4240152a497c866852f751f911c7ec415a4fbf04992ee50ba0411f96399dbed71f11adbb72827cf3db6d6e64cf64d16eee3532217f26c9f49bbe7cc95ed8df514a15ca27e7355153b12129f6e5e912894c85be4f02c49abd870e884fab89cbf072dd69d23eb1c6ca3ff849432adf6c193cd77b6e038ebeceda49b634ca5ddf8df3e15b23455f63b7aed808678fcb9663a1e15042d73188854f9293a9e5a1aa0e0d765de09de68ea4e3f1d4295d5a266069e27353bb2f673ab69dedf91c897ef3f621a0473287acf1fd0676dd65a619a1a6eb9964f39777ba7dfd74a01753bbf4982af31c1dc8879aea1fb40ce8fba91e8f326c1ba972f61f0c682be7beedf492850e11c4435b507fd8418dd485f72f18b7e4fc638d0b8c945dfc573bd903485858ffe6a4c91f5245b5c80610d4cb05fbf318cc67a6bf451eee148cd8e53036a72add9b1ce2ed568d967db69b64e48f06d1513f2cf833e89218f8568e13f28f5f3f5414e85384f3a4069b8622d35acf38c2917b4c1c09fd0b3186e9d146d872101f32676f8f055ccbb6a8c189ec6857237000236d14ec6c600a8fa84c44363b4ac8edfd693076b4e6b7daa3671a6e504dbcdc02614fcb0c5633fa5dfb0edf88b73770619ef753e1a06402c8312c0f073c752784114658ed4fa681fd39c47e44d60cdbf5877be4d8883f323de53bedcb171e7991c2aebcbb46fdd6ff075aa166e3a625f9e0de8dfb28c8f4fe3f19b94386d8364eabd774152bedfc2d60aca7b8cee85c49ac5c039afd04ac8c0dda8c08410f053e9b68ed92aec1ad61385a6ee7dbab56f962099dc555db119bba6a0feebe381ff2734f65349a27e5702937cf9a3e77df831b725a342347c342b167edf267e22d27c0508a769cc77a884cfbf626774dd7dfa484af7c36d2d15cda7e0fb1c32e87a9ecf6788a19f4282a51c3647c40caf89ba83ca94c88a6dd9b9de728027a09dd06e7531c1a0a31f7bf717da3df2c09da8a984bd955f26130ff66fdb8405769217d2dc1ff61cea3bb9c49ae246d8cb7c27c168298e79673a49d448aecbbf3e83e73a5e2d3f93d21b5fa5fb66d359117a794768c768291bb573d78e3e5e24abbbe19076f9aab11800bfd0538389828584be448daf8aa9cd0ef20d7c72e72be9e4c42c0d83025762dd1524633229a98f5dea6c32d07177e75c9d9a02f7ab3a9ad15f775ffb99ec88c67c3bdf30d643ff0158991026df3c66c0016a677bdddbdaead7f93ce66679acd6ddbaa55419a4f856383c2e55cd222cddc13376fac88531d22747ff9de60fdc67ef565321033ce83c0c7d84c3d127963c421775924ff17a9f28ca4d39905c6282623452e37f7810574c94115d5d606f69185cd44ca51b9247d05a60b838826c1c06e83528679bba507d704eff106eefd46fd13990339f248bc3f9a7c6b32889f10ef52fa2dc7ab0eda2316f2b3a0264c997dd7376801fde70c4abfafaf64f6834f011ff925501540ab6fd8e7c78cb6ff227eba003cd1334712305fb5286384e878dad585916a3246ce35774a242a12b9b14c99afba717bb4bb7a05c80fbbeb55e07e5023c520125ece770115a3333789c9f86ccc39ed801292a8b777c30922834ae540de513df622bfbb2a8987dc1a78bcd910813e7f81669185ba46c984926ab4d2a6dea1d7d6b9f3c4bf1e27843719e6d9cd3ea77463134c320cc19a7713379ea7244c80b2c2aca9c97ff50f58337bdb8f2828ab0c69d5e5e1a6657c5ccb8ea028386ae7f3f191d874cd10d5346740844f31af2408f5f151fe252b74ca4d882c00fdbe0703cfaf2ae47c38e6325d2f922c999963be797826ef5da0135dee146852516c8e15c369c16c53828c6f0b3ca44a93263b12f405007c306784268600eaaff47c8b7eabdd9a5afaedcb92ea1653c742c526df937c6604e25d358aede6d086f6bb5a434eede6ab1ca19625500b3d7f77096dbed29c37e1092548a78149349cae3f8316817363e02a6bd4e65b016ff43ae8120fb83d90abfb16c817070fa856c0fdf391e8b1cba0b42f813a7edbb08340bb7a8891bb29a98030c4cc045d30abbd55fc5555afa0cd05baf8571e2e116a83f730e3366d164d57992bf83a0b8525cd910f37ecb8eba5ecf5af498eeac5df0d8543ba3afaddff18baf764e0c669d797707782c5814cf7307ae1d2d7201ff49d3e0bbd61b0fa39a88f247fffb5e561640b721252529a6c0f63aa71b84d6add37c3168dd0f2001887e349da58a7e4de426c08cbb7edd7e4900e9be8ab94f987c302f62eedfce61adff67bbfeb75ae605d96b03fbbde5f9410c1114f43f28ab96a0b0c5ed8789d572086bc1f178a1dafeedfbe7722fe61b9f425a46536c0cd7cc888a10280b24e67cfcbae342cb1a910ef751c648d68912c298da4beb8de57d8e811fad22d26b296af13bb1295555ef7f8cca4ce572a5761592cb0bc65628d6a95b33b16ba619273104c566701145e3b373f4b1100d5fb252f5548e299a5ef268b7623135f31458616ae135cefbfbdbdbcf528da781151ed8f594a33e27f3ef7781929d5e385fc38dc94225f2ecf26e32ab770bd8acb6248f7e27a85ef48a80388abf86924a1098bd71fdac574bb47bbae88d71274f10ec2e6555442f4a3b85d5184c086168fb86556d940365e3085d4355393626884bc67f8650e5200456bc5391d89f859a283fe01612bcf5915bf295a4756329f4e25cf56e8646a1d30a5335425ce13e883aaa5b8f3298984d9c65f3ddd8f835f2a52c1aa9b90dcf6b7167d9d12155e107b8097d11b3e44be2ea57e395dfd207c977439d73af091897b2403dd38671354d064081c5cb775d54748b1aefaf98239ded33aa42389080e65ebbc604972759483a2e0c05c1da7e6c3710e6fd408faea2e88913aacfcd52c153d3563525a5e6240b0f40c37dde7eadd57d2c67afe1773eba1f4ae5f4d74ba1040d40d7530687c6325af966ca1312b364485f35defe1aeefe28a50da8b396d3bce792edcf75622b2487eb1eb297a74152fcf2b36229d6b1219cb6190ce966bf8b0f28d435d09362232fff0d450d8bd33a8f5fb935b35f8bb1d1855a24d0ac614ffcef4d662e0fd59c608b8705fb67d28e9687b2f3f10dae6d30e6425482e9e606fb76977b31a5a3c9cbb6057a1a7832c573bbab7e9cd6e37ba4689046f2532a790d30ee7db4758528594a2695ec18a9f5cef4e7bb677a64912ddf3cacfce7a77aec515990a9b090f23e92a3978ab8d8e3ad80aab40f5d6a3973aaf475e13ece997f47ce698390407d8d935882229b6ff209f6ac34f37a6638b78f8f3a2886ed2847928c3fa03c89ab5587256fc07e965fabd8febf684a24ed6db665a83f0ecf874750deeed81f26d6d8f22255bce35ef7d03dd87b24f988763bdcbf8381666538f6902137a9f783d2b43e93afbd6aaaf3ca1890b241416749a492dffb7713579c2983d538f6d0ad7230c299c3d83256b673febd34055836644ef87613c7ab6150238015054ceb6cf81d1fd17bd88aa962bc8d76da855e3f0c809ae96f6e58e0ad58ad50bdccee1dcb37985a8596c7ccaf9462f2742c5102168ca16e92b7cf0dfd527eafbb9f02b566211ad733f826eb2ad28150cd592e805d70d02b9e408f93374fa3730495f087b10403818e41a67ceb6830ab206f9156f6716a032767c24bb0f980343d037650ef1955bbeda7b7ef6950867020bb26657ec3e813b0916fd5bded560fdc7d22be00a92c8b9290bb30e754b236b6e4fec0196328a98598e91a9aca9ee08a922d83d696ec7845c4987baff684232e4e46bbeaf9b7c7151939ad9a396e32755d9ea1a51e2df7c5e0c36a50cf16eeb69776e033c420bbdbf73d067f0b53f654107704bb35f7fab46907ba121ba67f78f7e17fc401b361c1f03a00652f5f28026403e44fd25cfac4984dd711c98c7d5dc2dde9b7f6617df6476327d547fe7b2ce24d184e97e71058b95cab1678abb65baa546109b1816aee942e50a0e001deb42ac4ff654726a53c2d86792c1a584768af464d8111294f16a5c5c0fc1f014e311eb99facf576f5ea693afe8d0b0a0bad85d9131e57e99bb2a9d8da6953190283c5f76b9ef920c081762a70460cc2ff826c36b1fd20af53e452c13139653fe99c1ee792d4dac29dd8498788624cde950fe98da374112ce798f0fcc074fc3052968ada986fce093b01b0ecff2c7bc11e38a24153744597bf958dc8948801568fd3102ae2dd1e1ba522911bc5664920eb4b0c19b9a06a02562c149400f582c92317199876cc3c04c8b4c92f91ae9759609fd1707aedeb201d61b87e6a99440e0266cdace428567b76be6f2a94a13a724620f9775f034cd01fda9ccd91817d2541c6d33d6e961325434c0f4c384410e448994bf843cc34556fc7f6b5298c1dafcd9f8efab07374105f82120b47e07429b360da877dd264bec018e8dc49d844282b34558a968b0a2a836fc4dddf8d632d76e1b9a47b4c9a008c1cf321ca88be04484e071bd7121b8dfbd38fa354abe877170b95299dc089ab8c10a5e8d2b09a849bedf265ad16098aaabdc9c2af8383125485bd2565ac2831530892933ba82e46ade2641c19f1824537772f011ded735ef79bbc3a64b11fbda399a7d954c95bd1a401c00263c00f0bbabd4ba592cf57e1e69929e6c3b5d2c583c15233a7befc8fc8b51815b2e927f7e73c0136997d13f264f2a175d43a127503eb2611a6bec164114abc9d45bd150ec067403f3363c8f6aa9b5f01522ab0ee4133372e36c3fdf8740706902ac25cfc7bbb98dcad328e82a931f6cc490cbc229bcf006d6a0b2b29e670b7f76deb0c8fe5ccede4cc1d802a91aafad91bc4cd41cae79fb76104c35c60cf0ac7a4cbc08e8fbfb9a7ef912e65a39161d322d13bab058ea36e77a153dc6295e10046b37549789a360e63917025ad69d7f347ecb19f413a92222a7fe9334c094143fc892903ecc717811be80cc0651803ffe250969302045159240f96338bdd3c3b45ad2403a025cd3e0642a26c257775d4c2c319ec2ecd2d68e3fe68c51a52d2f5459735e80210b5eb3903101ae2a8839709a9027de523735516d6e9662e5e157122c07845d16c1f49e2582439f66616341ead3879fe6dc1b53cd22c3c3497c944b4ea194babdbda559570f8ec64ec6c7528fb93084a46a6ec148b28db45a927c1d0a9f917afa5089eefd6b52bb3113f90e7ae4d3074766a917b5b2f25d085eb5d56b6df0c2619afbd7b14d0872847fef797e3110f377f83046ad46d0c8de8894caedccbba7b12850d90641fd85ec4d9a11f0be718c63b89b09cf622d55d856f2b7f23bda160e0611538e13b1c8449428a70842ac4a64ee17bdece38105c5e2c099dccb59f0f96635fb67d6d19758f9022a42a42a825b9c899af730c661e2b0e16930c6dd81a1f7035af0f2b602dae70d81ac44363f454cea5d30c851a463cf7bd1ba47a0041e377a3deddc70fe5f6b70ce1f17c3a4e9fc3a75df1b8a5cfb2334e7ce67a4682129ae0f0968f039f1e93adca33dae668c6a4e7b828e0862adb2de70993f18299c69f884774ead77cfb99dc573d55a95205757fcabe9bb778d9cb605a5e346c889113886b4033ff230edf0924a7ac2a72340451f255a0e6fdc2b856de30dff277287f562f484ad9d575676404fea27c6278d428fade3256f358fe4f322a0b52ca458cb226c49074bd23642d3d2540cf9563f778dbf4d3c6bc29c5a18109fcf630683efcdc4ab1f1ffcd083715ff85ac7adede595af35d11176d36cd2af9f9027f0b0066c51c75e6f480984f9b0ab3ddfeec7845a9302c248a5ebab6ec1b1f4842c0392027728958a5622583ec2df1cd4aa7423d2d7c8f9fc317d9e0ed2442c7bd855d335481d5bc380854e31013bd45110a2b5834eaebad47d31bc5bf35f39a313e5da1a26fc593986736a3eed248283fc72dadb08d111d7ee5635a4c3dc96c3e4040866367b49f52aac9de98630f20680120b185c1e3aebd858a2583e3c017d14561b9d59d50294385ec06d98c9fab735e4f46265d80ea4a91924207a4cc74eb22f3f996fb041014f48db62ab4774660e124f63b1b6ae351c1b537a5a5096ebdd768b0650a4d46f57a32d8e9b5349a2d248d1c473d3d2f526cc1087df94fe6c4162d83bfce37861eb87ea25bbef47af10c78c8e789a677ad06bb937c9b56331a7e72e9592d3a7273b52d4e989697556f41dd71bb7144071e7f601c42c1baecae5aaf52f806dea1a448061ffa33659b60f78410c52c3005b89b31e76e6ae11afe17b62c74f9f3e7e7a59fe2eb945b5b42c13ad76372c036c2308a797b8906040602f0071af9cd8bb85bb4ffd1354987d55db647593b8bdf8b9f2ad145e546352a58798ab33bdd7dcc63b6bc2790cbf0d01eb7bea4f05759ecf4884a101d8fff4929e3dd763112eb7f5e543881ac269a8c040bf625faaf1571e34bf7a392ad8c0c9799804ff40737dd6d0751704c5080e35c8121f620c1cfb1d29e6eda3b7283a6ec7c9994d65b8e410ab4a6e12b373a1f5894fc75fd8d754b186b90a92e7083c2ffeba5222700c0464df72bf0ed700b0885f3a9b779c8589ee8f0a0425c21fbd06a4a9edba20d7a4dc9cbdf81e83d5164b245cee6746a63e0762dbdd0bf487a81a3d63b41b92da76d41480a31c86091c70ce427dc90cc727fbd03938dce47f33769c3427cddbef0de3b76209df0f4de9469750f429fb8b62e82028b02352366c01e8cfb6e31428665b5e06e772ee67dae49bcb03dae1231ec442d359cc481e2603688b6d7943693e6985549155ce9acb37bec9ebf630d42575b7e46aa7cb42984413551cca09a145d5791f9e1973a90968945e6f6d474a8482e8569d9b9d702aacacd01d23649dc5769b37a0760e09a326deb15fc3a727640b55564b2e1b9862058e6c0747dc50ef315ed78b373977a0497f4118a752d2efb8a327b937ad9f8920b8070006b2789284c2d56bba9acb958cdf8a8497c563c4815e7b9bbfad18d14f1143d64d374cea5773f41eeb24f657c55c7779929e975ba178165be218d780c0725be6c409127b97a430c57d5acbd49d68e8d65a7a4d6b7c6063f82f58d07658e92efc4ee9b2f95c5a0eb6fe15b84f736daece7bf226b9ef80abd8946d650c0480823cecb1ebfdab2e7e280f6408d879574a0551f4d7fdb5fecc8f5c6cd2b5b585ca8db0fa6ae3d3ed0af35d32d3a043c6ae02d0074ec0ada4dcf1e516c9263025328ac7c8f0a00d98cba9155f03e060fc0d1851304d5e0409b97b2432985424f363a7c6631e105ec0691fa49c1dca47567d961846cc5dcdd148490267b0325fbe2037f2a9f09ad91457b7e1ae398196fbabaa274e91cb84a2cfb053db79dc4bcdc1b8221bbc1b2fedc48bab84591defc9352756fcf40cfef271aec895b1f62e0c1f6ca9f3478655577a28ec5fc92df2e7a0f32c05608c2793e3b5d2ac2217b6f79e146e34e3343dd816eabf6f4ae02aff033f0dac4f5b66bc042c9c0274d58632819e8463e21db0e46aa4268d0556fb85a689782578506e4abf3491be66ca6e5e9907f9cd36d3d834df8e5d6f940ef8c781767084ff45c0242bbecbbc26d80d6a80dffe33b98e55e2cd9ad9c7bb31362e723860617addd4fb7ec81aa4b2fc9a056bd6bff3dcd9ca0e8d4a735e83a6c9e61e4291045a73469b0eed3e0a555dd79683dc3eaddad55ed8f24ff48cf7e19ed9cf5b4251a630d94f86957e6cb5eb53d5c34ceb85415a2ef7efb7e5f303f08c1fa5504f0b7c41fd3c7ea25b0cf5b29abc422afd77efb3495a636e7a078f9ec6d7abc5f3bc331270cb552a4d9a30ff1cd3e5f3d50ebadf04206101d5fc1fb4b2769c8006bfaefbcf61a9cb655bf74787e2a00b10280a3bf1b1d88947b361acd4041af8dcb9b433bb9c36c3bb3ca6852917a937ec33c652a8542309433d23ac07a1af80198868488523e309510171c46e974470b9861ac4d354e6f8530dd609ff471706f7ca2582335aafe22fb54cbde2876f9164bb3fe4cd2b472143be294301a2f50d8be5a238a02c09a020b25752425b5eb48d37b6b293ed110859c3045dcce927e276e0950f6efbcb9b51f4a1053fa6d3315e35374bc889ce81dcb0efc41e8776b944c15f8b2bd85201f38fbe1a8154d26f1ed8489b9f1b11b3bab93015dc4733a62e19b751694134b8e28be2f892f5892b41957390104095eeecd072115f4f79a81ab7fa8b4373e945b0af67284a8341e9afa6e7ccd0317e3ea6a2c80201748cbbfeabf37b1193b734c20b635eefa3ca32cd13b1bf09b97b2ecacf85219f4c2a8ddf53e6d9681311818028247ffe60c6eee7fa23fccd337d5b27539b9f5a26550068588cfd868aa33c32cd7d9ba0cd756f372f577597b506ac573bf2f22b182b2e4122ad2ee2cf35f665c9117b32b83359bfc5f8479ef78ee0dc06e618cbd1f2eaf1535c20d376694cca2b05285a4ca150f084a84ceaeb26ad58f58bdfc60c9a3c41641c48730a13d320bd9078919f3d53a9276561b5ef4db724c72e6eb871930f55c3f2f32237f6841fd484716805d1b9c046fbcd2b688c7a2fe26da7522d80796b14a8705126ebfa0e3b0e619dd5a6882c7e34908d839f74af0058c874006a6a7294e8ae6bc7cfa9e5d1c0f5e2f0656eea001cf37b5e86c8bf1922d56d7cb6232d32ef971245818d0b752cd2aa6c10e72c46a148a86a0327cf74fb8c90b09a8ef92dcd143811728c3a9e71d91ff2ed3bcb5ff5012f2d371e30147bd8f34596badf595753ead61048cb90fdecacbb5f059ac5d9e377938f97cc3234dab5a1cc51718264eacf097eee3934aa168d52dc528ea0e67c7542ada583be1d880d41355ff64cd93cb69fa8cdd7609b7a5678142c858260f44fa8315db435d6eeb9200d06a1ca77cd26e90f47ca88b4bfe3fb3113993dc33b440fe18085f3b2b8e1ca1c90fc42e998d6573da10828bee6a36fb2ca5d8e4b7ac32084056f0edc4ae449c790a423b06823b8369bfe4946a5cddf2497fac23e930bd051915c0fa306c27c8ea24b0f6facf090d93888c18288b8eea154de5e112e253f0e150c684cbfb01da4809b0c3494a3c21764da9e3fbfce6df370963dbdf4742b195dc15604d7efed68236a781e7c4201df10295d0f7b9026211519a9c30146cee530fce330535d89f6e8a99af0e52823c6d9c9eef400bdf5906a688e814815de2e5e70d45bf12a5636f7a68df06ac068473408be6406b6111c92aa5a605b871b998f5504110dd7d33d7a536d250dfb3abd6341e4402b53db54cb62a8998f7b94a0cb9409a046c2319a1ea83aae818d687fbd24f8dc749f5e6716666618d6fc359f13b38932a956f254181fba0c9d35b1936600548d30b7fbeb6cddbd8c1397fb6cd4baa49bef4fbea91cdff01107c8eccd1e6fc467c3915cdef7a1903ade39d08630ab9ca523c846f0d0861482ba3e636ba93a329fc5022221672aa79a4fdb7247f118009c2593fc24ac60ab6002c14411fc74d67ada9158077682f51dfda5e7be6ef360e70cba9ce0e47b9a6bd0de46b02ce676e84f5bb61b624dd87fc2c51ecf6bb21bdd5d21a2526673e673ef18c716c22e11c5c0d0df20f804fb97e7f7f851db2b0236f3fd026100a5737b6e4fd33299d9f710fcc14fbb87ef1165be737a95f2fe18a69efe1eba52eb45308c126e6387f22b0f426ee054049c23e8979e302a6d684b3c3f1716419b2debd2c2cdae4d4f44e382d7d602d748ba948d8c9b519c14d02d8fc10e80d1404c0fbebf234f2207015bceaa18884d1ac039ed4146966dfb358868ab63df01f6e007d6afef56fca187b50ebc02cda3748a06a134ef92ff1cd0b344bf8f454bf0cc510b980aea9438464298bf1a83e63c507427572deb5522f5c339784c8e4faa0d924c1ab25fa0966d9d708b75d39f486dde049e440eda63b5f6f8f2cc00741570863257003b582d9351775ef4b4be423b6dfdcd4a76d1be47975dae9824faa3ea1da7d2f086ef6454d291484d573d0232ecefa81755b60cf7b081e8852a0c67452b4fbc2a8622af59d2f5c0f485f38a164a8e04283a24775531659fcb2a754c0505782ca7cda5e2d4cc6413ecd6eb99d616941506935ae5668684534ebbbe2dc6e7e18312726d4a57ba256a340819e7611d0a9a2260a3579f6719f6f2e0e412e953c413dff1d5f601316fd6c180bb0a900b2bc699128f170db52b3fc197d1c8f534f23de7930d9df01fa6dc8b25419a0d7ec24c3f2216b757d077204530e7dd42a4e9158af760a22489408e82ed40fe64d4af6cebd1a68c86ecf7293e79f7682bb54aca51bc678f83d06614df3bd15f87ff91d16167233e16be51cfa7f33dba20477ea29bba7e719fe282dd2e3eb1222593ccc4e6214a6a6213aab1fa879f3592aaaea751b45778c152461084df0ef054e489d89ee139aabab23e07e01d662e9e498ae477bffd4a7ed665df078b91f49b14cbd0674b321ae4a0467fdd948369b4818989f529c05b538a3f27e52a8c316018414377b9b99fc94754d5e23836a61f9aff78d18e789949d106ce3a6dda42e2288c7edb99db4f0b2b5cd48ccc1a78971075bc1670be9ccbfb13c226feccd4bed5c57c7bcbd1ab79b22c470c2280e51ef1bac1a5ccc466c2081932d49f4f15ab69e8ee998bc9a0fd2c52150e5a8d62d82cbba7fb4321135f1486a5c89b679d4befd79b97cdda193489aa55f89861cd16dc36f426fd49a296febd64a1c65dd87d12af3225a8b512dfc054409104807e52182e2909c551935fe388098766abefa128000b8c3855ad2390583c3a2b7eb0d71e4bb9cb67ab95eba1cbd1fa75049d811acb17d9e9f08dbd26d6480e4ff96c9e79e339ba17acf4a456b76d46d658aa5070b4c5f7491089477bb2186c18cb4c6a26ea2b0aa615bdc1ef7d14b654134a6cd17dfc9e5aa54ca84e8a8923488640e48e95df189dbacd5bf73b392601777f71295b21947fc67e4f19831df78b20bd35686a5729da82e3f8ead35ab3a97315de8910beef78a7c0ce7f8a65f2040b05ac706fda6225603f30459b424c0a4a55d38052a5899b8e2da0771bd28da90db48c42519a3c1d9e14755b13deae8431284d1d9cad639a06e9c161beac4c260a8bc1007f3b1576b3977924f98ed92f9e879e65cccd200e1a3cb3f25e17d92cd97721c714aa2a3a5fd6bfc125a64ded9813dd665dec2171a8bfdd1d44a9402ab4031ee279a77c954be9b16944f3cefbd70887f9d433a57bcf612ea9c47eaaca5ce1f5d954d94892502a803e9fb94c32bb38f7ca8506ab33922abdd140b035a4329944cd289e2155397c01c430443ca2c1932a2346fccd28b3e46f41c39982a3143e031bb304eabc361d2968a11159a748068a55192fb66f8d4cc431c784c7a2116bff4106366212858480a5a7b0131b6ba8738b9525998fe0265608f3380577348dc6f617b2fe3f4ff9780085c79972e1936c7f4d999dec38e479384e7508e2e8ddc0ce537c5c6fa8051bc9e7f1da758e9664c179b9ba4b2f561c70662d5aff6dffc8cd8612f860b419346e10efd991ea8d0cfefa5f4f119dc35d7df31acb9bd7f2d3201fb9dce8ece17e4ba84fe33a4b56ff29b4f1e2870e5db6bbd7e7a4e5a202bb96ae78a03757cd436cbb5dff7f4fa49ea6343b1542ef82e72102293f216a212aa38f7686e3709db721199b0f007fb5eb975f01e5747c9f4c70a7027a3a64e98ee62f8316d458319fc568376a7357694cc715d9598140e69e347fbef07b02e35bd6c6319cd52a59ab9f9427c028bffc7309263c79639c4168014c0aef59ea5dc2a66468f8bb3d70979d3fc140aa336f91b3da5e9ddc1c79d2529db8a1662ff25bb49a5cff3e59d625b8aa8f78d576d7ca1fa9eab29b243e82da96bcc62c6e60ef26fffcf5622e1ae4fe642e018a3a915a12cfe48af99f816042c3ced00cbe412fd5a1948e29d30381dbc563f2696f68778fe9dea7fefa9b362203eabb8ff60c8382277f65934b086d201a583ac816807c1f4f51cb86e4540891601807b90415d4468ee6198b9bb7dff508a5f2dec693244d703c618eba0feaea3fb757d6f90daf90ebef1322fb92de2664a68c70e76f1a1828a4482af83c3d926d20a126190ca040d6e7c5b47678b4bcfa725cdde5150d1c2605caa479e5d914dd60a8e9894f5a70d5f72ec2df4d6d720badb9b86417a61655f72d99e94f442de3d8ecd65d872e853bc86c4f95c96e4a4142b2e8bb0817499e60bc32c0a810773b5bee7a864da3f3c69563e948dc7d46675eacc08b2014b8e35857dd704eed9db716c282f8bfa1c1a94e3e81ea598e5279aee0184b1d39aa2f5faee5c5cfd31d5d47f5a6ae79c7c4a0ac97c42140c5ea1c731e784dec7d683f09faa0bedbbe05ab767a63460f9d352e5a72398a184d8673f7544e21479072a75193d8cd0596fa17f26789ac9725e204d8fda9f0eb82ecd3614b24faf0d447428ae14be2ca09efe68479c644f0833a34aab3c9a9db128dcb92de2406df24f2b4d82b58e86262d0bb6be32cb909354d5197441ef30741a5ca5e3abc078b00f93d4d42441ea137f581f0576f688a7d27d2f35d785653e323e6a3e50415d23dce3f33a3295e3c87265b0f3068b1a331541a29d6f453a8b2811f6c3d7ce5ee61389ed75f86068986acfa75eace55a1abd9a93e26ff2cc130bccc663a38d98c58fdb07470886bb0c7a88ff7c3243960b9acd0145f9882c2cbe28f8b2d7b49de5ce914c092f80cc5d07cba369d16256a8e7f86c34771b31c40d2750cb428520f5c7f314cdbed7291e0d99a69228399227a44ab95704ef226e35ea82a38b5dd79d3376a38760b1dec400c482cd7ae68f9a5259f619fca74b3e503423b19a157ff6214c6cf7a602c4d4c679d26a4d49f25f166845de2ee078be6d330afef131781577712deb4b3870d6ce4936c6168f82cfd99c97bbc7de8c2cf6e8a8e11f9067db621c0c64b83cf1266cfc28898e766b0db93ffec9a26099831cd2212e4d28ac261355ecd79c78631d0ffc33a895025970b7560bce0ea1f798839e2132e93999ac01a86bd3bdcedffb739d8857767add5c1c2b64c47f5e2283c3db313442c986be711fff59002986dd7184f630939d531875e3a88d24ac92568d52f1d6b61c188b4fb8e3d9556733bedb73186b5bf82e484232a902429bb4a67b3969c4ab9e5e563d8e5561ea60a10da2bfd9fe2e286db29c6e490caf284c8b2fc53167a766b1441cdf6611279b27daf494621a544f5503bf5c77d96f75c444cd4ca990f9627e94c138334e2fe7922096adf16b639da9afda9ba6422f5f29a715b2087e7fb6d7326c45693ef27b01b79e2fb105a6854c8e0832e214278d2df181757fc9988c20f67b046ff05a5af92752d5c6463b3a323cc3ebe9813987ce0dbf954f6c615393c61ce12d0e00646c495d9373bb7bd99c8e091f23ddf11eff8051f7d5c43f4d9da4de7b6b49f84e2d06f5994559b4756d5ac2cbe75eee474058374824872c9d83e2b248f9aa5618516a3fac307ed191afe215d7a696e4af05324a76025b885010ad0cda4d93bada53f5a06f215fccc54712952fead70a256d9bb3ba2d71f1683f7783757fba390b868873e2a5dbbb31741773d0fb6bf6fffe27b55d8cc90f79b84457946f38dd63ca6083a955661f701a3ac1b21fbf332dcf6e0a63e3dc3fe354e0c2f9aefa74e016c92ba79100832905e25092ef4bfccf40c9ee48a1a31e94dd6c4ecc45394420680f9c3a49ca9acce43e45d0a0e2cbb115eda44c5e4c66eaf8770a8e85e475d2e1294e10c28f6594b5c97135dedd473385709d12f632ffafb036fc7b2634c65959ff10cab4001ba50cc6b2e82eaa254a5a299fa9e8b2d0296f51794149b833720fef01a377fe6cb55eb9bba9325519c61a6e2c76e829af83a89bf60ca1b800cad0882ec829870c80b72d6a5897511cebd0de795e73443a15eefa48c32f1ea3f4486fd7e4e2c2f09e9d55ddb4dbd2a70387d027d51c47c1bc993cb9c37c4e3861e713f06de8817e01de0d0cdd845cab6a8252a365449e0f5e0663f17302446a9afc7944510fbf3e1ab399932189c90d7c2eea593ce088d3242562ca97de5c147cc222b8c81c48f39a3ce2d9f82b6d49829803a7994dffd78be765daad1a9dcaaa7f2a16879b5022750b748bee89e0338efb37671ae931bdf92a965c8470b0366a4c72e3d36121fb7a8f6492beba396e6432f64e656fd29ffd9081842d7ea002d4c120d812cebbf97f9177af241ddfe0c89618235c1f2a5f553c07bd4860c49f57209fd5d67f76ebe9ecddbcc311d76f5239dd8d0bf2f3575d358820db285c72f7a10e9423b0c7bfe1244f6a4fc7c3e04da78207c9c02364206af1201d299dd47a701227fa76676d71622c12ad6428f75199b4c8452e8fe6181b45e75f05dc28b0830af1cd775a1d248e7b8a399b3be5959fa0ff3227e23b911f46e193a92b3200a23b9a23141fcf17ef43463917dc947a68c9a9a74681b16f9d60e41fa9f5aa664688775502d0f5247d085dce617867ed789728dc97ad1604014d580c24e9945e5faf6412eb235de6c4edbd4d0b3ee4bd31648ca8f7d46adda626be1f2a50914229d35c4ea8c27b2aa361875c12b003e72025c43d5b4896767f7d65d96e7aab27c51123f6a6cf38995fd37c7c31b4230f511b20cb3a41c0775d36532574ccaa99896690d30b6edc11009dbf2cefbc5198c4bda5546ff04783090fbeceb5564b3273e2093d1603b99b8a2f1c1c4f0582bd43f54dcc92e99f5334c5fa7e1153145b633df67b5cc38a565de8ff318fd8a77d3cd827fe12e9b0aa7b06f2ce04726daac849b5a734955b5ee54ec92fd83340c73ff5b5f1ba024e9b08472b3ab1b8f284318151a9f47dceda9ee1c0a47d13695e84778fda8fa50713204523926ae153e0a89995b8ecb34e450ec52b3370e4241d525291856b121747217ba5f01cc70e045345151f59feb3c732cc6f94dacac379a48a868018e529b1c41ca24823a862ac0771f0fffc050ef95d1e0e41db2a8f2008bda7f22e66c3843fafd86d52d076f1e5329b50896d8084cb6bb7322c3c8a79c817e63a69f79259cc9232b0998fb169b0881b2fcd5c8a9b541e4ba466b70ac224caeb64f7fa247e999e76ac6d95a9b8fe5f9b6c8b48a1289fae26ad4b6c6ff07d41e333d7bec52c060189380f5b3fb1daf942b44dc0184a7641ed43d00850c9ef5cecdff2b5478b7b08b11fbc153c68f959388f120db3a3304a6e33eac99e6ad500fad9b7836889ccb37bbd2e6fb2cd9180d9c81ce7ee6a71777076d857f1f2d6cc4156f098eccac4112be1ae52ba13575145c59a69cf568cb5015836da49a7011c5973a61e84533b7ddfac47b315acc7b81f0681b6a17645f3133a82a74aaf2e92cc9ee8dc5bea456a832343b1116d2026ae932a9e0bd0fe781e3266857995249ef34365b7b4968bdde10acf36a80e54dd996947eed342b73d167e13d1e028773b0776b21e4c7cd7827d076c03f2e9231a68e44657a3714c1c79dbbd337c48c9ff2593b54a241a04b55b9359c12241a82e1c356c04b912af269ba76f35a6bf226253fa1e05acf4a2258c1501c9a9a380b787688c61efe2baf369cd12b092fc703839bbc38d89cb1b6e5c97724060be111211fea5f4b5dc7311b33a18f6bd437d47c3f42d78f3408887a263a41dd5a719a7123159e50dccb20addb984d083f69ab886b3f480cc62a66eb97c99895b0fafe08685838608b7ab4427b2db9baaa7cb09632d9ea6bf558357c46644ee3b1560ff98798cd5aba92c308bff6c8610d1bfede35f51a200261408a3bb01847c929110e8806338b5d8437e8546b7be0a0eca8f1de82f704e52a5a61576eb4a583ce9ae4717f56acb06c178ae602cdf9eb5afaa1d388030fbb60e5e8dba94254e4a1421f598d906c6f24c69b338f614cd645a915ceaa23f3748af338383d7ba1829347a89c3046185fa8f0d941448b37f2659e6ebf75c4fe6402b2a24de17c2f7dba384b4261b5026ee739fa81e00338a0addac037197929683121a5678d5afc00d998b9e14373d9e3682590d35746abcae435efd387d2cec79fc35c635b80300b42e87e809940678f7b800ace45916dd3599e692a99f3951352c034e34247a743db61435783ef4725bbbe132c453a963a436ff1b802d52e6466578d2592c056f0ce969820508e33d188cbce4a10d13996242aba06b202dfcdfed4ff49e73c1b25c668ef636f04ad4d361e1d71c7fe2785989e5d4221f5944447901589c835726e420e624612d8129f07bf1e78db431736b1ae3f2cab5493a59dd1f09cdb924c5baa80a39fdc1d97e47cd9ec4e5b8b087a332c529b7acdbb852c8bf1eca23a3056aed4ce6cc64a759d6111870f6291689cee07b756f08774debff586c86c4970789b9ad849237343662852471dc697c4e12f7ecac81714b2d6556335a7a05ba5d9a5b1a88352d9e7389aed2a27ed1f37f100c6616ca6516b0febc7ba1cc326d164613b5dc0ed273856fc33ebc6503161721f9d501d9c2163ef18930683f0438fca83c15fb7eca4a73db4c9303a7885a5dcf9773a09659c5b5016bc80696aa1277470a52be7647b3a2a64b00e5bf7b4d2cef1add61aab68911c468cfb5591ba0d20bcea89d0a9f3b6cf37fe45fcc8bf9ef1bd4cc5fe57e87f31f2a0710820abac4a0858aad295646a8d9086f3d4f243be4f793e9789a74e7b043b155bb776a3ec89e7e270c87a06d8c86cd10fa623ab3057029067d0090037159bd71a5b8af68298ba1e1b7154c045552daf092ed30bfe3479f8d2eb5d026996fa4bb2562197c1ca5dfe9deca3787584d2caf997df3dc8263c6474ddce50cc246cd53242cef9142427cb4a88e6160dca56d2f984502346318b3aa528848da95352a3a166ad232718f3c695ee5941cf14924a7b4aabfd9ef7fe7ff294797fc60718a12a888d2c9e564df789cebe11b494aef4b8d2012ac07ec43787af0ecb272e540abd7658685eb925506a0733d31a91012484cf1f99e2a34738759aa5e0bea7dba66da349a1d278522a832aaefb18c597a5a38ce951e34b68b415e1f420ae76dcbf4c55c8361b659561f6a4839c72177fc2a08de1ab50bb9cf62140c24dc09fad5f6bd075fead138d3f8144c3a91fced5e51d5069ddf66269c39daf99e9d1a3a46d6bfcbe341d8f92a10e08d7dcefc41af4d65808e388738bee224e0ade80bb670858452840b37f1dc898f19addad09fe7f1a3076e6a96b7d5013d71b25b0e10c9875363a011e98323e7c6975ce6aac54077582b92bdde59f569f47ca6075c381aeafc8516968a556bc855b2742b6323b415cfff5a7d77f66b36dbcd60edd18d57fda3c9ef7766fb4f2ce18ab3fbeaff18eb671c44bfc25c99a88f779dd0bc4f1de8ef336c9d559f569fdb4390529bc9ee55073e7d70e046bbd809b0ce568299718ca6382bd2795654a1ed6cac883a07d492eea94e2baa457289c1785779dfbe9164e76d782b9b8a2207aa864d90990e9d6f8e82e9fe18637f32f0c4d7968ba89352408506918e43aa4e0b742e12ff004a380185c9e0c6b3fbe5d63ee011482ca77d27ba0d8350f2a3e0d79230af7295f563018cc0a730baee2b9ddc43443b17b1bbe285e4306d0cbb9d2d1fff9f9719d712dc423a4fbb0e083a29acc1bca5e34518a822b48af3cd59abee8ad7baeffa2ae710e2e1d6d530dc2d339b752f42f7688dc238122454e64b58aa94c75830bec364b28b81760cc1db41358395f6dab3dca4569baf5a5f2c5e95a1ad2f186139e9dafa00c2107c0e025af7385bc3a80979d7e6fc1b5085b3882b2c6907e9192638de257e13435ba7233315b206c9fd29b33df28ce661b5df3a667a1f230b5457e2d8a8ee85f1159aa43ae716c570719bf7fd5a50637163ab3c70f6fdf0dfd11a94b4be2242b5892ada952cb7de12ba6b0dda5c9610b61ae42569d727f9cf1fc01a0bbb6ea541a427396d7dc0e2492516d028bdf10623e9cd014ab643f28b8cca8d16540f682f1bf7bf439f6d32ca1a2d2b695645bb2b2f6254969bbbe51579f9d8577a2d3a749eade2f67b9c2a9c035542dd6e068ae7daba00b390205c71f1ac78a0dc887a2e6599294fc15768a21202a53c153f0b2721f639d8bab096d66a1fc99928522e4a3293299cf932a971c6895472cd80f14b118ad65168c984615f02b3dbf8dfb0df324456914e64fe907de3e32b5cb0a4ab4ab63414a546faae03a73037e00733e222e091f69780cbee6e435ab15b8e2172db7c587ad0572db9deb40eeb52544be85a1e8769a4d348976b365f361a456199030db07418ccac2afa6e8fadcc637078aab0337c951521609622f773df0b55e981ce8402aca0a535cb812918d841ed1585948256980f024702495aeeb2d80e4959b1cba33400abaa26c105a0c020bd7269bd6ced7acf0dee9a87283483eb848a47cbf1064e20f4052bc9a3b9ae6e0a840869ac567b9bd74ce4b08cec681e33935c9f1d58bc10e1afe9a6dd0152e87b90eac852a70526c2155639277b88cd0fdd94ce4503b4c5a6fc536423fc9cd521ea9c75f9809b50ffea5617d104a3b53a02307391c45652e63a06433eebb57d864214872ebdef015b52a1ce39e7595676f6dc048121609095321af03b246b69646ec1cacf8eef5ba6bc844c25494c541d1885e7e24fd96ebf9343725a283fa8746ee219983fdbc637c5e589e65fe51ee0d28daf8bf0946530dea4d7747227d22dc9c74166d8f5483b4327d733661d548e983f879f65b7f044a2dab44180e5be3aade5daf73cac4dae5a95741816071e5c819a0628ad9fddd5516121603cf1605c8601fd2cdbc67a5cbfcfc29cbb2ca515f0f280a5197a414e962121c4705cd1697ddbc671d6ed1decd0b45564ab0281167c198f8651e468f397b6256b2b31484f5dad671add08ab973bb9699eb4b549756ac7f483fbcbe4bfd80e032461628b46987b19f1223321ed0ea8ea7ad1038522500dabae5de605f7be9b56c875d002d23a4df5d3bb80cba9d13753a8d7dba06b9f863bbdda44bfd8391168461179b1c0178e58360c6af1249c91527fc7c513494b87fd3bc71ffe7c5cb928d9258f9f2e3d01d3376b47c0783026cc440e4d8453b8406d543890b384b84643fd9f9c4e5a383a5c96b6786e0dc82456e15727799161dcd0c445859a80da4f993d254aaff0e31ef9e2a0d98df1fa90e4e19528ffcec015ff862d68de7d23aa19c12608cbb41c1d1f0f6416db8f77ddb7ed3a0f39729a79faff34c89a44d436ebc8356ed01085637eca258f97959a21a19bd3d488f8a29ddcb8de8601270f2ccf13f7dc321b2d6e550041fc1c195858806b0e6e0b33ce8145b751c1e127f50470c228039ed7c51cdeb1785c48ae92bd8980b8c49b40c57d4e32605c2169f9af364f75cbf173d650628a4d76837f778523488e40193ab418f2e6341ffbd413bbfbe3d13c5aac5c17633a18ad1c2b93e71edba4596854a64bd1919e024a88cfbd99214120660e527c82cc44457b599645c0c6d3482ed01124487b0c46bfd68c469e930d65d9cf4ed2d36a7018c8f728040e8f01ee02cf359b7372056c71fb4032fd713fc066dc9d5da7e3c2fc78eaa4c11d68a392327c4069e47d017d573b793e47d6b8822864f123400c611c990ac067491113a1f55576607a581bda062faac5c47346e4e1159fbba3314ac4ce078452bdf10722bb2c2908aa732e9d92b9156702c29161e1d54df3528bd72157a8148746eaf8187d26223c42403c01fb6f85ac642a591df4e34f13d217a4e091cc7b1f1d5934da35758db340f8869779f616cfb05ebbfbd5f1d80eb782cdc0208d6ae018757ab4145c583fa8e6e2b6f4017a1e18bbe2345df0e73773e82ce9f37fb72fb5eb596bc3b28767f87832a48d9acfc1fe51e152c2423a1a1721d60f1b3a2e08913c6a046c747f229eff8c9a772c7838d814532e24f7499f53e7d8f710e749dcb78f3f074ec0733c7c37ae734a19aa56526333fd8434cef3b7382159c195f1c6703d3824341581b08e3f089af2d45f50cbeb6e63d06f3b417ebe892a37fb7b6f290db3fb871a8cfdcdb3adceb6240a896c9e46ea377f1fe0b4bbd8ba0487c2c45d20aa9accdec4fda2ef7e9363ffb8961aaebab41b75118a0c7d9ec81a568452919ef0c85479b5f8b35403b660786726a54ca0b9031bbacc60a8a71dfa416f8bcd49b2fab8b783a29efe31bc91a2996173deea5b721ad83538f8c47dfcc67e7d0855df4cc50710395ea5c43caefcab82b44472db849ccf1ffd3c19678d671d541d0193cc23e423ac3c187b27e0b1f08ed6316edd44b6542488b1cc0c329b926e3341408f29cdde063e652f525afe3d5b3da2fc75a76a88f2358657739f9545ffc4f57c36b256fdecc6f520724bd9444ffcc3b9f7ca192ef1acfdbd6c7b593810cbc48d7e5cdc8b3c1e7b1d7fa6cc9a37307aa717caf4a122c70cb36d6695a4895d0c24e144708b88913bcb5c359b6b22592414c8193fe7992852d287a7ce9ff95af003556c0e90326c44a602661b8b90f180be5eff5855359f16f4468dbb6074418af3d5aa303cee5c1e389fb4516f30c5016e50c00f80e34758221431fb89d38500f5fa71394e838bcc5bb80bad583bfe2ed72c813c360afef6bd8c6d3adb6abd005f3abe56a9d5fce5a5659c90631b4ac7e118f17481c3079332976c7015e93a657320aa471a90d7d17d74a6dc63e7c31f15b2a87ead8d0a4d69586bacbde2b7a5284c6b1e29426653e3c351fe50ae5dafac2dab0730947092bc24ff48c4dcb3c88852bb6ab4def13af83162a4c05e2888be13f316719a74819b7e235da0dc786cbad82821f823d163818c6e64dc5cdcd74f835b60f4b07fd8c1f1c10fb1b2ea03765e37be756b58ad4f374ae944ea2d0e82bfd04f0be73ee49b4efe8fe3a35b42b894f06d2a3184eb2b5095f1885652b9a59ed4de4500fbace5e9491011a9de8ac3ae3a62a64b2ab213e990d21bd10a1d4ff20961894240a4f4f0039663e93e46ba5681bf8d5586859b9864d0004c44a1a9bf6969ab13f3b2cdbf8f2611f1abdf70b2f40ec52ebd93a26cf0de153182f84292e6a45ac0db4e9519f396ed9e695cc1917ac3a400a459e9c059219b7f94350ec222876a27429f883473028292bbfeea26c6419b176df88043447d720300cca3dc3276f5270cf294e8904a41c0668cc66ec62e4c32d5495614d40d81a056f141fa66e7462d2665f860e774cf0b6b06f4bd3331108c79ed10a84cb91fefb361bc1b7195facb0360e57ce049c51db9fe9d2320a4d2c9a76c08ae6f824dd04a7da812f75b55c3a41af7f7ca8cd636cf05b80136f95dd8014b71140b491e9a6df49f8b698508df0fd9a85ca7a1687ebbc2e8d331a04b06774427729ce020723337c782ac631991b2fe09fc6e5c7e8390d740c6303805a25441323d8794c49c0f5f8579a2ba9eca58546d3ecc721ba001a411c52c2a92f950d24fce8f0a29541243ac48b0386bb16314b735953aece6f47c2aaecdd9c7fa069a2b1f0a0a48b6c1db023493d82d1d8ac2ff836a40420e140c794570890a7cc6a53c993e57b41cfae6f3d4029cea0255e80685079d676af59a5d15c837547d8704102f5e59c91432dbf136ce2f51dab2854197dfe60de17717da30209eaa2f9d1f3e2846346eb4bff896d05d56510b16cc0ec828124f66dea74ba189194fed0fd2b0e38e1738a91b5d34988efae12b909a4e2ed131c960105dbb96643b2967033b68764ad45273b660817f860827374f10b72d8e248a518af2b9a7257a15e8f892a8d24621028d06db8de0fc470f2fa8741ea246ce2d3524f60bba34327e2c0a5b2f7857b24dea167d3cad9f3848ddc5cb015f2459515875b63ebb35c7a320ba411bc57a4b271957a244a8d001beb6f1e3216c3c61278182cd7a67ea94bb85cf9fd70f189eb354c0885b3531c965504577a7551f07e710ea3e0e3535af182a8ec75f7a77556b217773858e74bc0e9f4a3264eb863ae2f9a97cb02bfd2df4993125b908928404e179b481ce46d2fc0c5beda742f7e778cd1be88831de82ca62816e28b2d82492efd6d97655878f20da6309cc0b2647f1df88c017b70d2a8c7c2ccdee20dd358b11eecc3ec58303b9db1466c63a383743e68b7591a3310a1c147b3711ab361481800ac1590221f163982d3d72c98b2973498b77e94c73128f03eedec21f6d9fa56a89a4cd88b6ac60b0913d020ca3bb1acbad01704ebf171987eb8c4331575614ae7ecdc594bdefd4a03afc434ca8649675ac3d2edd8f632a3907d69e3e02dd5aaf537e7741095b290f1c54e5c77501802d3b8ef0fcae8b4e2f10acdafc71e5eea08b8fe4ae9213f866ebb756178891c41e84bb6dd7fae791f16b1e2321954f36b5d9afcbaece00507b448bf92c4700e353a18c59d5673853abfa1cc676eada8f338d3c0f021804471c90ec8046b84841b463291f01f106415a1ec11920e3ceccdab6fd0e4ffe674d40482cbb7b6e9cfc68a7b44732d00096233680497a34171fed5d605b5d30ddc4c52a235b0bd281ba5d6ab59eaef309b2c824e78d944f4913e9abd918864de5ddb6a05dc62227781f6f08835b4d5ac23c88371b77f672449150788420dee85d5a06eefc5534c27acbf72e52d1c0dd8f300a571c30da58b70a65b6457d0a1a474b40072ec4c0251ae659e3f5d664179ee3d056cd9c06357de841e7ef6aa4b5ccf9d1cf3f096108e1b1fb7d700d2619bcefc6f765c579021083f19ae817531b8a4bccaae7f483e4df5dbb46fdc7e2245890528edc435c550273513aa7b39416e371fe1f7bea5e1165c397f868cb65fa69a73b400573be71836549f5be76892ec6751d28b1d35f6d0a72d6cf0e3ad37f910e2a564ca2ebdf67561cf4e72397403e6260bef423cdd476b547133beb674e0d12f658a959d56e9073a028a005404e400af37f1717f75394556a9d8b30e978242858962959b10cc0d81be337de06d8aa64381e475f3ed4a4b6e23dbbcdefb0500411eded31b1c3cd734ac583ddb20c205075702f862ebcc5ca0bb8105d1120db366db9e2d75154f601d92d20ac1367948d2c5aca05335b99d7623a976ffd07fa5b5bccaac34e9263fdaeeb305ef617232eef1a85cc6f2731ba91344881157fab53fc9ca2ab4d133cf4adc4942fae782f8fae0c502564d0f4ac271c788cfe5c7f831f2507775e30c4563563fed9c01e8c0458714c4dca88565df0c47a302f234628b2c6b72a2ea808966ee515d2718c26f3077b49cc4745b42c3f28d38923d9202b32b81dce1c5f08c3601fa0118e35294a876008c50fd1d637e4819637ee499fcaa9d0d247ad79d81445da8e959c6f082efe420c8b285c8d7e72369da6889b0f115703ffcabd267da695d62aeb2e4c983d5d4b3b3229378b091986117abb6331a994e2a0f7885341adfffc57f6e72ff8d1c905e204f0fdc84054d73f5fd3c53bf2800a8c1454d81970b8be7c3bc8e4c736a6324d77711f2171f99c73d448e7d078bf9e47de6c86e96e3ba506bdf886bf6a9e2a5995c464344bc06c26d61fe71b5201dc5340a1c84d0c4f2bc7ab825b0da4600854509c4022b26fc688d650e0818ea8e9947e647376ea263028ca66cd834a1df1dfa7ef1b4c0c3bef48840bf681f05b49a8e87c6b65150563605da4935e4eeb6eb73c12383ec459d5e2ee7ac54ecf80ff45d6d3925e2a556ddf7bdec9cf157c685e10a439f64202ee3dcbe1cffeaa7ba500a30115b8f0b4c7cdf92c61ed4ce5ae9e6ba9c24594b9632ee64970102b320f22d6243b58bbe194348116c8df5ea7a993ffcaf7733b296c32c03db2642b754a6c0304e4c4bb19d15227df04c4bc67f728b9361138d0c758df73eba81e44763754ffa7a55ba165e5ab910144e4b5d98e9456501ae65b3138d87a2c7183ab73d6da20b4ab4847b44fcb1ef1eba1a5a3f3fba06e112d6a9f4c4dfc397faca0baec5e20a2bff522a7c1cde623f1fd242d576a9615e025cc2e5c49a764fb46df0eaa8ff6e31f1ef58d9dac393c3464ed8965c2ba39290259700c89f45a38dc3ce904a82159b22294a1aefe630f082b65167c926456f70e16bbc2a6269dde39c92129aff118f49f75a48052c221e365cf7e8126ccedf8ac79ef184538896bdc9bcd81aac4214f804ca1ff83dd33b6c998cae0d3485f2eb6e832c76c5f8e7da9e118bcb71a2c4c1636ff5d8b5504a5b1a5c023c1083f5ca6aba0aa16586f8cc4afefaed36c389005b93bea61ce39b20c95926fec949367c23a1efcd9b60c0f7ad59aeceedb89342d58f753e151267e52ffc0c69b43aa833d13b4016c3ed6034d3e44c87e251b1df57ef5c0104ce665810acd703ce20a20660a21825fa261cb0f949cb4f9df474662cbbb08f40d454baa2d1a62671e33a3a9b5220974aa1aa49a2bff363e9a47373f26e5347047d32dd4a1f03566cbd8858a906b1885936d647e6368d2ffd60ab018aac5383cca57deee42a5d0f98f1d46603ffa9313f94960bd8f8979438e670b86e28881aaa7ca64c5433baca8416bd897077daf2a91c592ecd31b494f58511b6cb90022a11fbd6aff7c4f2490a8fe4f2e2dbb6dbdab86097403a4537c911e2234cbd1dc4f466871b37748044d9d37586cce2a85a761a67a83e2cb9ce8142422e2c0d38b2fea267c53b490a01ce5f14aaaff56a8345c915b941dd02583c16324bd1a0d27be24380481cda38ab9c9b48d9cd3c941e708cdcb783a74d33db9440ee3f0e5bf88927438663b5ff68284027e5fbd8a24b3d2fc1fa3f485a4500546a3dfb72e9cd52802dd60ea7455a4c9f0e79e98e59e473fab9ed6700867e2bde396db87710b428a55ed30a892842f9e5c1731f8b32f808132ad963064bcfb5e0e210184da354aef77c0411d1a6cdaf733120906379c1d892fee6758b8d537dcc2e0ae69ee9aeef60f6568d6ad137294bab539ff76b8db1e0a8393d5fc033cd8d76e9d83f903508cf9181afe83f7f36bfe669b13d1d639ee231cd8b5dc1b06210f28381272bb1c0e4a301cd74194815c71ad1ed80679733d58b83ce74c2494502efc2445912535ca376f9ff3eeb85a732d9c26641ff911b9c4f2f6145f87e8fcceca8f26335944b87bac356c09463dfcaaeba09c9c05e2ed2e81d640602b8335ac17634f6c2239e2c62e1acc711d164b765e6819c13dc80a9496dc37675f5c57db1991354eeb3bf21e143daea88e29a2472771980306fcfe908e489552c7c8bdda5786b5fe7ca9012b3ff9009c389475371b3bf9d10c53dc63f1d6ed2c434d3ccb7b6702ac88b342ec0cab853188054979021f0ff9884b9f065b4ad1b0d79c5a7a71edee6eed27e833509a3e3afa78ff19b0c37fd297d03e9bcb91874bd933c45738d4e0e1f1b781d61ab2f388d5a92753ad259220d97d25dd997fbc49e20fe40c97bf8f470a74cb222a61dc28797aec6a6694880205a333cb60518e9f9347e8da34941371b56870b843c555116f6a9bf5a991959de5ace0949ecb08be067aa81f7b7bf5ef02d60e3b033c195d05c997e27333ba7a0b976c5ffbc82a086c9c387dba8edb79e6f555cb8049a8756e85091c1167f9a99c735efb7e3ad924427e71a1e87c23eac992015b060b7b44d3d25f33ed37b5ac54e988da9675cb4abafa038e15fe7ae87622e89e235e116696c1515c98074d62e083029b04f8e454dfccf4a72e290413056baf2769d822ebbab9ee5fc39acc8169477e2d542080b37488deed4208c53d88f9c4a1bba8e9d2150bda3eb25588c287284ccf4fd4f4e08fd6c7231912fa11b9c8593fdb7cbe3b8df78fcae88c187ec3e6d3488feb6afe7db0cb2fc1ab6ebe8c907f34e2564b672e409d26cdc04fb90216666b2d99cd4f49b4991b276374eb74b2bf35a7f26af65f5b4a1a9fbfc9cd969b37d172138fc34acf3e564ad1c05f6979eb3e9e26921d4822b114f431963d2e8cfd4b4efa31fd35b67f97972760fe29b53b9bf769ff767102d2281a6f835a63f27e616cff859d6ff4dc6c1ad713d9e5035a56ce3c1080829aa4abf59a409062e26c4a187cc4285c4727adff986ffe899836040157bae0ea9cb9d4560b88c552bae4ea2110127bbffe338e27ef10d7088bca30e3915c87b2c3130d30446edc32ad5f189af557e00d9e575bbea4ebe4f1dd6a494a2c83acec6155fd4e226cbeb008491c4fbebaa887e795183276205c954476409bccfb7cda3bc3d53834c2166eb8be29d4e5ae6ba6161f85e61d1e3393dbf9ea20db2adae260d1e6c9b21063ab8ec7f972ea52b8b1a747baf4d00822c52e96b984573e927f51c505bb0458c6f44afd54455cec761f22f83014c9fd1e114ceafb8db9b1bcfe0084070a627295f2014376fb7602295e61679eeef9bb9fcfc3a150237624a1b671ad49102d3aa285cb8e917704bd67f4b5ea4e4df8c156107f31644b82578633fc317be2a547b3847ae324a8f4f16f22400b17e88faa02f16dc6998f20a9b7574cef0ac13f282de800d45b06b6764ba40fe51ad5e922ec201c1cdf7a224efa695673ba4be08f239f3bab3bb13677c35d9bca7419d8213b0e0f4b52721d992090d4bad5e944419e8a6e41a68c3cdd7b1fd7d4d10e5bcc7b40db08eb1f8cb98a1d06914d3df499e50ff8804c7f8eef590a933a6eedb7d7d4b5103134bf63277a505019a09760abe920143435be46b4d7455288bdd2b5cd72c6aa368616b778447945bba1543bacbd428777809e5f25c772aa8c312baa68418bd15641b030c7cb46517da61c7998680c30cd5e89f1c38b0a25412de33cdb752e2d2d739395c4212e119c48155ff1057eede0c36522bf3b00a707adc29beb502884cc2a6d6a7176001d255252aa58bf389872c6c12231b43539f13670aa7f9143c42aa5e11dde74634ac26182b96fa766a3434e64041c0af7103800a59a5731a9420d452b14ed25bcabe31b629f54afc17dbcf8e0f68d69f00c689e85eb9111157aba5a45c3aef010dac6d844c9ccf6c80e1d18e69122ac6aac2243732f967a1c9a68354d38acf510b8389e62e07d6e32270a031396b5476f8da4d560a66fe8dedc7d1408b424c5a7e6274ad1c2c639a3caa74ce1d35699e49bc018f05ae17c75c2af583289a8d5e5c4c06f8f44c00599c625f620335582e77f0826ba82a2251aa7c87a72729a1ffb7d2b3271a191f2835e934329b578ccf4129f6363d0a4f450e7fe3bb3081abce9d8e82442113839ee10c19b5c30eb3b5457763ba504d36f4c60a1a29e27b67be4e52704d5427051c9faad6403e87b45074bdf5d80341c1f14b7216df9dfe070cd118d7aef69f03a21bb0864e9b063e798288f4a82266a790d5f2cab3710144cd0733a9e540c920dfa84f297157e524bf21b2c7ed9d18c8c88627a7240494997998eea2f93e8478ed1ee16cbd004d64c1f2be4bae55f809fe0fc5b59b9c9cdba860519db26ddd86a0034f2e0707c7f9f935fe3579535b94c8177984aa7779d1d9e802181a7a03bfb87b56931bfa1172285390ea6efea6182fe6d33cb89ed2a9ed1f658e393581e5764d22f9224dda1070a0b7cb9b142ac0b30ac66bbc18e7d935e5a508a9acbb72ac0d3fea8f3ad66766bea7b524cbeeb56b2ef160ea4906052287f548736c62e3972469f2afbb13d493cd0554331abd59b64cff597b80064908fa0a17a78ddd4ba8ceab56c462b383c362bc0b67deb57a0a35d3edf743f3ad24e964b8841af768ad99bf3bf7e0c475c95675caeaf5e5737e572bfd2bdba34ed16318fa221cf4c1887334f75daaa2127bcb8f3a9489866943258e5e9291d9a779d6b98c71c2f66a5c8d2f71ac87a4fdbe9e93cceda07979d8bf8fda43595efe1d9ccf5eb3d9eb11921b653303cde3df6a78e9c30365332ec76251e6d425c4e77a9ce29f18873dff4f8208335013a55fb363eafa00fbb10ad0afe113df83e0ef99e594a9992d8824a33faa4806fc475493ae99e626bf0f8f823cc25b84d3677d68c18f1cc34e1141184c07b91f099d80b546f59678b7cecb8e630f83d9c2dfd6ccd710bd80f9b31ecbb47c828fd52db367ab4941739fb57b43649f01c9f1d1dc446d4d0c127723516a3c6a2b590ff8939dc6bbd9e3fff5ac53a098ed13394afd664954e92e88cd5a4b070da25f2165ea9ac64ac08b1c70042e815cd7e97d97a631628f281d99ac75087c1ba8d788e1de8dfd15fd6085eef80af5796bbaf0ad27060e20e254494efa0d5a83cfb61862341b5ecbe88b10f7a17a3d88c8647bf773bdb78358e5709760df3234df789deb6183936f6e07bafdc6f34cbe064f2a5b3ef19ffa6543817c7c04dc5c2ca8af11961b3efd4872c0e34917b2ca6095a40a8c559784812dcb8c3550344497f648a05e4128e13aa72473d3ad16a421cbe4cb30d5bc65f925aed63d964e41e9dbf761fdbc22aa898e4221c73008a3ab5ab1a186a9c2c62c6f6bcf4f4b2a4e917d5d6973e2bbc16a4313825fd5a23230b3b0c781e36c2cd6d491cf4369c603d003a2507302807146192a0e9ae975cedec00b5018a70f13a7ce91ff016ecd4c963c7059cd6fa131c1a2524addcc825d4caf2e86ad238755d09b5bc6665d34cf5209d5186b7a2067d18d7b9ebcea3f7eddf6f39f1f700945e9e8aa0387e56317a96f475630d5c7022d8a10a1f44e619eaf58fc4f45161899d23c9508baa5d4666a8aa3ac62ca66612007e8197531c7114d3cfccb70436b8f8af8c5faade4259529d27557cf5411f0c0096b59d3a890a7fa629f254d6aa504e0eb9987627ad3ac4b2cce6d8c1dad45e96d1ca4c094fa13ed2353d9479a8bf8bfbea832872597b2ca6652b85b401fe32240205f3c60c2e3c39ca9e89af272752b1f57c4cbbd14c8cff5dfc9adffe9e79eef933fbcd037bd6a47baaa16dc97b8eeb8263231ba7a57400d3e94801e42835f7f757cbaa669a0b36d55cfde7edf2f2f5b95898776c5a66a637f7a5e3b51e01a961e83a37a3e4ef69099d0dd4cd53bf1814f4f5ebdbfb9c97667f08d1437b68ec7297167b87777d88f5e8b8c6de573f5c6c834dacdbbdc7b324a45dffa41fe9ca7058819afbfd5875d236bb014510d2329f5f984f7d8fd92f278a1cad8e911867ef39b498f07819f07f4361dfe6b224a2f94a5db86970c2ac3667fae2c3953a670936c0924ba1b41e2920f0fa5f926ab238d605393a56e3180ebce60cea0228f88ecfdf9411218028164e0ef285ca6b32b89ba53c31f10290167b4bf2ac751ec89c83cb474b7062ccb8a5a9607745f69353f988e5716bd24815a7b2481406f4d06b18378cb68932b76abea41d119e4b4edb79d687a3b6163edd0c361045c021f942b5c795193173fc00780eefd911ccc894e5ac1fa68b20a611ecfb1e35122a4549659a67db88cf5213e462b8a165d43421d519096b50e4994f9a50e28f6fcc4770ba64b036d33772b12b9a95f2270c8e6891725b816966aa4a35673d9ef83f79fbbbca8af74ae9a75c9af5dc52cb85f4257bb6057e719face0ff5742173129ad1d2405f195def28546fb6d9894d258b449e1c4ae69a636fc362c36c6dca9cd40c2aab2ab81747c588af8603005d593464e3a332d2e9c6e46001deb4523c271f18dc7146a29bf79ae46211bb6906a3c2ad92ea0834a98e52ef5424693b9f9cc9b8cc805d01583f709dd4906330ff6fc8851e725e09c841e01735bde78951c9cb8cfb17488a1e1738e62377e34fdbd79e67e738714ca6a05cb647d714f5b7dfec476915f229a7d1ec36313e37569ef56f0fdcc002097166bddd69dfc49d5d45de3749a8ef73f2e666fa305356855bec0934a546e6dbfcfa6e3a8932a80c469845da2db09b30d7a17251fa303bd765beb014aaff73ba2fe778f4552dec1c3cca1cbe2ff13c1b8d18ed6d666dd233723c7c174932d970e79e06ffda2b501df2817fcf0a10c70206e56b061b77c60c523aec5be6cab16acf61ce7917710cd60aa1c84b4f2d0b71437f2c8d5b323b169df2784353929d0de1821e3c375a561a17422280179408679589dd949bfa81db4ebceabebe1f5ea2f0e1ee31e8aea2ccb98b5ab5add078501d29d3cb9cdbbc1d77c39e3d2c96f119c36d6999719525dc2ff3a1323f4d808a808ce765cba1df836a799a5268aa5fca5d30e34d54bc3c4420548440000f6046af5f96f2714487a6a601a4d67e105344cde9a11a9cbd110c7f96ce58255d9d0814d9444c59eeacb0d090a10b2501f9846ee75f806b99766830c9ff3af5d1d03ecec95e3049aaa3dcd7c7ee3c025b7fad0a6c11bb0f61b359c7be8975d654d2880a46d09ff2d5321daf5ea12dc9442115b81ac0c3b41852bf017eb5d8d3f821e98aa50f6fc61d35b3935d34dc5edaf4a76b67c3f3f82459bc05d6a2a4a891fea213785d9bad6a326b9b55c5164c41726b4cb93ab0f3a7246190f073cc781295622c1a9df7ca2b2b36f1cac4fec5919835e09d1dab4d9e28bf3d0c8090af0e337c7cb891921442c013f1de2e9bc13e3c57000af008096bcf6117d104014c1738fb3b6f5835e36f4a74739a3c40bed455f0f4260281cd8b790066e5f92b70da93ef136ea04e5143f4353f2909844ba30bf3ac45c10e58d5f0b05fe1cb9ec8dd4438995b14f5796ca70d8749585048008c106312fe90d2aa4bcad958741c00995b99d4fd09cc859bcbb19429da320ff8572b9828bdaadddc9d300502390f95c8aadbf6d885068ab9966333ab1a412664983a6f9e6e133e71ad828b69b98edf9d56e5007be1468ff2c3dff98d49abb5d53772679660137e9c2a18184a935f3c94764b9c5fea0032b5c19bcdc09ed8fe5310d382d987debc442eced2191c51b82b71ca1f8b778c238ef38b3d5a705b2936b44867fbcf6202cbed35789d276979a912a17a05c38c3f39ecf55941459961d187e9138968e7577747acb66fb3553331659dcee7dc6d64b4b1be7223762faa60cb605275b7f2cf8e3f313cdaa5dc4dd6a3cb15a1fa948456b8f74696a8bccaa5ab84893d0155d92124ae8cab273cdaa6be58a00ef8784d8ce984886303debbbc013462415aa374842205903a6afb6f150edb3f9c73525e1a73e1dc0fc0e9d33cd68b322e0c8be3b7e90aa42f2f086423f59d3af02792249f21525dab97e00aea87f3b26f59858944f60176b33b80a9a6fe4e374e425997c272389f0c268c8242025674e4d660e956216133db356f3d3898226fa7f3aa81d9240260efce64a106e0dc07a5dd72c2bd94eb97a172da12335e5d15858a9b45293a953c28267f225af9fac00658622ee8541954820f4a4999171e9f89f1e5a883d0d1c8311c2f993a6c4a82dbdea0e44a982cb620428984bcdeb661171466a626d18b89deeb4a2de5a6d3460846576fceb3b7979685137eb5aedcff4ce1973cc9eeaab357b0f6c443d05bd41fb86f99105aa90a06fea63906b510e5a677d85a9cc58140ea964c142c0393486f30dbf6e2dca22fe7b54aec34e65f50d2b9a66ac186b057190aa5c755937b0c1c2dcbf98c5a5804e3bf31eea3a6bb3dd006095a0a60de71a3b8d75f77743720469dc8c5b955751a707f2a9765ebb2f4b4083552d97d7f21c656c9abc927817404d9faa4c3186c88e7972ee52b9198c6a846d339c6d687e54aa0744bd67b3a1766a1f44ae57c2c5777568f9ebf1b82c4bded67fd34c43afb5e3e980891cd4d4bd73a8e62cedea9bd6c723e9a51748d6ec28f41bf8e51c322fcccf5b2b3fd1251e5a334419d5b3037033529c44be0d614aef55f3f143f535b7d66e3645d148bf6c4ee0e3884ffe146af44c97378b3e576c45f2b2083aa5185dac2b0a49b23a44b8b8fff708dcbddc3be03f4b3b7cc715b56fec582c76e3e486fe24bb52df3b45e89d8adf31aada66c779ce09c7425dabcee96db81a0b4cf8e2d0bf7db30bcaff48f323869edc35635ec81f3b5f97ab170315c24fef0525b152f5ac65bc6f4ee709fff437b28a8f0f774efecb11f4e7b9355bd16dd4db54ba2c22a8c0db28b7a4fe6868e60d9c5ab3865e2cfa100ab79cf8f2c75126f7c63131550daa2705778553ca103c69105009b3a4ebb769002d9191e46e44612fb11f58d5b3d848ee5fa2e5333f30fa1c6686e627c328e2da67a090e38b450d61e0af2cfa8540640730e7745d2fe2c108c372c649bd97b6a0b4060f97ac592df6919c994df1d28313ec989e94f4dde188566e329ac7f777ba4faa2b6c90dfd197cc9c24c3ab30c6a72d67fe9cf418d056f0cb280aef13886ee280affa6f42dba6b4738a3508b27cdd1f2414fdd3bd6d6e7b7f3efc4767cf44ac55555531f7b50e33ec02b68bdcd625e84b6ac1fcc9d66c7f11272766dda69c0ec0cb39110e29bca7aa25f61d288b9872a400db164e0398335185577917e3e9a3f6e24fa1da0c729bef15b497d3fa2135123e94d826a3ca36bff9706b08e71e2a8111fb6f94da6e0664423f0655b0da8d41b40b7b64c6414306559d3564ea8f24a4ac35236719e0eb13af906b8731ce1854b6da6953b16a67a0928e234052f7456a2c97885b6822fba68bdb88c5f50ca2fb1e34c2a5a6f1d3fc485c78b5c5b162ad4063562e40ce7ef9c8a455898a51025a08c9ea946828556ae7a167fd3237e8fd4fa0d0eb7966a9634fb6072552bdcd88db68a54c8ded771dab268ba09e92304c929cd2467de92e6be8972841a2fddbca8c8d5f20a10f6c5b80707ed80d734345cdd742cc9e8e4257428124336019d426cbee14409c5d2ffe39dafbc6e6e4141f0b25b24b8334233505d9b52d1a83e286bebb59dc8861bb1e0e8bde50c21f8474dc4808505c4fe1a3f14727b64db9a9bcbdad9019cc3fb7cbd3e884829428413d2da06067a8f66777b2d14343748bcfdd2dc179cec2451fd336c3e34ad7813b49969e83324570ca0afa8b67d72befe403517eb30f6be168f5b1caf31ab85a6922b7e386b5a8355e2d5fb208ef0d0544d5acf52017913ef9362b016add1b3f00ef34fc49a9fc0be37e15467bacd524152de4ed7affeb35341e63d860344227840d2fefba0fed72fb041caa9638b4d1a256e5cddcefa9033d50f41e796c6972ac258a9153c6b44fcf99dda18221488507dc26cf486b35084a0761dc59e0123f70be2a40468b53bab0aae386c9d74d22d0bb184c701967cc8e01976b2cbb2e46e580405625c49bb197bfb71a9bec85cfff2ba8317738ea15d2fd5be660f0bc59607015223ba7132d59b7dcf016e4a7f34723c0bcd8eecfe15419e69e64e808385c14dc138372510830ffc0174d87e48d8931926da751ece18d0f64ff74e5ddae0eed0e29c87edf2aeb24826c9659545d0803d59919a4470e5adb0127dbb6018cb5ee31ef534164c22a8f524373aefb97a8763f035768fb0f09f9f4a725212205d68edab6772b2d3398d45544d1ce5f0468e5048ca0072a12b4d7e93e565aa98e447750e25f209360172a62fac29b2215e545ee88c83c02606d7d601ce7700cc22046b44a260a3fca5fa37258d100a5a4d55abda37470d3f4c98310dcb5704beaca0afd5b8f98cffb7707ada7e5f9de353b8eaee96e116614a9bb7823f232c83f52273f5a788d53264aecb98aa5e059382ce585cd24387fbbcb28fa4ddf911f0b072f764e0445841b97032d8deb25a14f48c7664c081bf04027e2050510b2542afe5b9cfd8daba0cec238758c02b4d982a37cfda166782805a24bbd0262b041ab16a9d8c69f1c40d48cf4c0a04956cdd8646c98b03353b90023baf0efb598ff6fdaacfdd7bd6cc0a346fceba4ae492e54d1e84d1a71aa33a04b5e15690dac086dbbf8968412900faf3a02fbf19de62b6bc676f29b96f5d0dfb8680edeb11f238647c69302e6d5812e67d30d641e47a44f31944edfc751dbcae9905b9ae4b614d63e4c7e54d8fb406b6c0b073d3cc4d6302cd5cfc2331b1a6fc43da32917302953312559ef9ec49c46a1da5e339c9753635d35fff4ca4f48e22cdf977fc81df7dde3c171f12776ee18752c3a0a7b87234633b323a4da301585c2e01eb5b688a322156c743f5608c7a6e280a33d75cba002153680e96a27f431690f43e3f6dc854d4aa1af0380d1aba001f619ad8275d1344d4e28cf9d913b831de06f204999215d392091456532bbb54719b72404703f715d02215809ffda7c144cb6a0e170b281131c26042f2bbf77fbd568fb3109ae70933da9cc398de89ae6e6a36564365e5418677ef82966603ef5c57e368ec6d8a5c436a68b87e69002ea358d69a79b7b5c4f7239c3544ca1e1196414f2280ad22828e57786f093d68c087fa3c3c600d9b1f827877000186e5308da9e7eb1e4d664bc6272fd994db8c96be846a1fcff42ca8708eb4ff891e2f449cfd2aadd14f1cf10f2d41c09b7dacc95cc3932c0b09c7ef4b28996f7cba12cca429f6ca90e9b6fcd91b37834f3a4f93780f22750bc13a39d808464ae07fcfff1700a831542e4b6e8453509759ce8df42238b06379eb6f8e8a6a730576bd10c3512359d26ce5885696b58bbe00f2b007ccab550ceed521dff1adbd3b7ca9864a437a931070249c298fd3e13e4a5869635dab563950259284b6239332094c0f7a533fb9c7d41ce95dece3d744e1171482a3c56a84a3af12a5ad40209ba0f2afbef5b0a4939a08383bc3a557e39607af8b4080cdaea772dc7a313da71040e84aa693e6ba0e74792ab20571bfac96e14a841b3bef1ce30f183136083e4cc6e44218ea6dac2dd3512bb839887614a9cae2eb3c7fc10e9b562a6718b3af9a91c622b551abcbc33918dcb40d82f749ca733bfa683b688b1db5eec387996146c91cec997490c5d5b694698e5b7a7cef562e88c5fdca03b270e838a247987df6162afa6b1b063e9ede929a90d0683da0f00324938b3816549dc6eac9a01d4b4a593a894bfab82a8282d9ac9c99a06e8218a5be9227afe9f294ba589fffa09e89db7102916145cf8125a63b7842f1ebcab61e57d1ade55272c64916f1ce1cc96543290aaa363c3bc509ccc08afa956734e94773da9074a50d7893dc1101acbaddb1057c830a24865a4e687d318790d08de9b4b9cf7beda7b1e00c51671be31b04ca18579b279f76cdfb5d9b5b406eb1edf2b9061bc33756142a45c4cb63b71e815730267707b64be53316fe3102f635b0b071e274c93f6ee3bd2dc398492b2864091e5d66be9eb1e140969f50c7a6a755772238349f8ff4c410d3c31a3d51702c27dddcbc540e3d12f864ecfcacc47129e5077ebb0c0a15edacee0d9d33197417dc45b619f637b0071a96c7e6a11e5b27cac6b2ec595c9ffd8a8cf17fb0424fdfc9a9185358c7c4bf5eff1f83810630f8ed28e35f1c9fe72a4691a9b8e0c3996dee59badac736380a44c42eaaa8ec3ae1dbc6a874da6fd49290a2063729975e85db23276be6aaf0eaa5d8315ef2362b36e81cff04cbf527ca2751b9ae37e49adc09b4e61adb360ffbcbc0ec3b1fac27db83032079e29a33268b0982924db0362e2c660b7e2f5c4775941b31fdba4c72d8979fd4f7cc211c465d185a3c13fa9494ebac87d6ddc0b849a5bff755e23b35e90a49a397dae2022949a1e9bbdcc8e455f35e8bc96c5f7438f4928bfcb64bc1ecd397b1a8ae4eea3f258471f9c4243315645771880f57b03b096e9385bf6377c82056392d935065e9eb03dac75dc180fccf9229d947efc56ac98fbd11cf12b6cad9cae667dab5eb5b2f8e14e1e9506e99e3edf11093ce31fbad4c1643fa8ff50974180b455dd0d34fcc62cd6566c47f472a3ba43914aec97391d0d56f1aaac6c116a5e7e77fee46df635f669d614d1000019d0251b91f3dfe419cd01eaf90e579e58596f0185df57ecdf4d61c1fc984d70e6338545634aec9823a4e604236e1c209fd6c6f83d988f8f6b7f529a5986f5d69d414ec288b583573115c432d3b3b450acd44d4c28c516c40dce2819ac3b87dfc3f6bbf64fce8127d34ae237464fd85ce3d790119e46fad5265e657bd7c5ca33f8e036d010624466dbd8ff84145027f683336fa122cf8ce143526d8d71d05c230d0d817f938b951c9bf1bfc87e5a0d2605120798a578016837098bbe9917408e9c29d41896bcf363b769442f44a5d628490e9bbc77db156865be46bd1e448800f59913e35ca7976e66939106ba0def48ec98f0586aeae412fcfcc86d5c2a9833dffd9e2c9c43e54df466dcfd143e0b58fa13a645655d05eb1121c9fde4ad9b7e82e656b8a31826e3b90bdbcaeb6bb78222b126b21c51d2f632f55f6474fae3057b64c77fd4dacd1f1c58b8614e92ce6ad8afc046987990b3f40a151e969b19d7e81b7590a6618a295f1248efbd22dbd0d779f0b24b6b01c3b3804098933d0d6b81ac4c71b0c93921b905a3a029294f7a7d82d8d24c0f1cf54c01f9382010271525136ba0e33faabc4c66c8efbb36b94a187f9ad22434ded1f00a3ec859e386ed5356efd05f840efbce4b8ad67d0519e5adf58aaa13b0e11062388608d6f9a08018b1aebac54be4e5e938804ca0de1db9e8498782284d5deb7a216038c678bad45378f178354b544a570aa5d894a9f06838e9434c41baae76b3dd07fd12db6b27d58c449d1cb956acbe2134c48d8c403b0978900af2e1e4eff160b832c9b0e86eb619191fa7978014d9fa79bfd6dd921239139120a60d6ef516029031f79e93bc11cd09e17b099e98482093911622971fc377d73442c4533bd65b0bf45854188f1c61ff5537bf0eb16078d4e669d806ab7ec260c70f1c5ceea883b972b90aca6812282df91dcc3ab79d0959bf2d1efe7c5e63404cbc96435a45d7c37e7a68a4c4e9be82f6d0a4eec2170da6ae592989c3a9358200d8ee27b939b2c9f906b0822c763233453784bcedb237f51201fd6b947336fbe1783d05e018d48d4c45a9c64d38466bca0605705143ab493690c3551ab9b779c749021a6190737a20824630afb2e1b90e5ed9055344444094d3a5d59e5447d811b7c730abd1bee6dbe03ef92a9180bc20fed64b6ca748f129cd857257f7dfd74c7047c4e651954a07c35b103841bf880c72b6a036c7d20d0f35af0a5b8c57ebf275d946b2a34ac9c0155609a430caf63007e2385183437bb494b0abc9090f509858f621eeebd67bedce538dd355adab31cb1be684d9204742d766baffc5ba131107e881c69e86afe5fb6359c6d9688a8e5415dd37267fe5afaacd09fcbf8d10a372509076aacf5e18ced77feb7ad3b7c6e66a3b1f9f889504a9d4cc1bebe37f893c9a7a2ed5c8bb038f4c120d70fd0fff9ef84609e34700af62a363692fa7fe610a932c14dd82c6f73ee0005345482a4f7f57d595a97e5f23886b43539922e88ea5e723a282c3ed1536daa6e75b1fbce2104ee7acbfd02a823a76bf31302f5b48806dcd41f3d153e864742d8d36002d1a713c6844d81e5bd4a8f3223be6cb56837ed44e35b4d5721508dfa2a0b967b993547e59639dcbcd3bf84996009d6fc3718182874451eea170e739b3bdcb877e512e26421bc05297b0eae835e0c58f4b0a97ff678f1f12dfc4ef395c99fcd74e71cff0177d36e642fe8ef6fb9b2dca93c445cf186eea3a6edd53f0bc04a90b6b8393cb2c266e8f52b6a4252ef47f1d671f7474b53f3954dc7b797e6442bc8dc9d106408784d1fcf3bc9bf930fc1d8b0cb61965902516dc465e804f505758d13dda99331e61806ad8a37b11993e83aaf87d66e614c0bde37c0166c29efe5d210291cc59521ec5a49ee79a8333b10fafff3ece4323e94fcd35cdada9297c0dcee83af501978e9912dca0ecf2182974daed906eeb86d158e8d63e1732500c04317444c3535e70113e99bce7e61693f6fa84f8c2f3b1d69e8435f7947f5046e61c8bbcbb9d889811f30465b08ee69cf5b3d3a2dbe0406a2329e281e55657590bcd1e3ba3edad6cceb5db0370de17de639778b5c4ffba64bc0b872de00ae66d4e263645ca2fa04ddb1c731aeb1326a6517035123295e56f5457b70353c94a6e53e9ef3b7465816a97601554329c4bd18817d993547501898c4209a6e690e2e012dfbc0fe388e082fe16a5940aa23cebe3d9d73b14166be3300da756442e45e15d865320f9d1e777d8b2ecb44687c8e40b44450d1eaf57673f67d7a156dceaa7faaa170c0d32ec9a9217d66e329ddb863b3490f21d3bbec384ef9cd0c0fea31b0d733e4fd5f43337643260a4bdc760cf8d9b031afc7a22661a79dbc90016c22cc9ec2f16e043c0c61134594a18fe2cb9fea7c2c5ed834e991a708a89febfcf278487f99d5ef56d4557261d0d9ca4db1b23f4906eebb5672c41d08ea53ee540f1a0f479c76a0b9c9069d972224a66515d8910a6637128d73976d5acb3d4a8853656e91dfde4d279e11e97c8b952ad764abebaea35bac63c8becf29b392559f49d23f3d49cc4125b879efc122aab5ab93c588f241bafd56f4d642726ef0d96476b5fdfd62ddc8fd3da523ecb43b59f07b5a149008b742f60b1b80c7bb98c4bca962a5f5df79bd761923bfbd57aa86612fb6eefe32f8d395a53fb5561f497605d2e1415dddb63e2c09f6bf4e97a18421f917255f44e4f9e480728cbc8384ecf9001a7a67b8fc7641ef370811572bc1b91ec18259c08d266e8bc8cac2f4c49f400ea57a0189a8374941bd15978e6cffa66468e6cf59d3b0f207319226e3d28f014f63815cb9b4d479833cee19b5551297ea71d0abac93aa60efea4717fbea013df122db02e0f3f22a6058ee4612cc89df8c4338737c7e5e074f285a4bbdd0d96ac99b1a0e098f1036b0e4677567a935d30a7546b7f7da9e12de6f49c828b7b42cd4916a893df7ad77ecacf93427b4f4cd8d155df2d1e8563e8837adfa0811da8b2b1fdc2c07fc90605feef010fa8347f1ba8f02a12f1e89fdbda9ae84d2ca0d1a802f7027724d89d112a73c6553c7e5e34ef2d0acf465b3ec456db1498474aec10ab5fe33ec90e8f6f9a3592678c322794b4fe7c34e727221d6fe537323460db8f9f472fc8b39ad995d2445c61b46a815cbbfd10932f5c3c80b7488228b98cc19a51a822af94b33ba8bdad1cd12abcd27176fcbaf913f18260315219815fa0243c9ddfc26d3e386af9c2d14c20cc666617149a717f74b272e07a206ff6515520cecad944b8cafa197257d1a5c90bc4686e3638f1861c6ec0a0e7bc379637cabef1e1aadd2cc021b9cf46109a8f0437f26b435a02c3049a0473b455b21407f1361dc55d6e36b162d657dd2bb9d94d1bc7e20ff62fadb2d761afdffc1cd3fedba99ecdaa06029f968bff6d467f68156c66b57a2b3449ab14ba47fae19ba96000cb2b923712a66302f41ec9957a363129bb8b682601fc191652137addeaeeac39dade2282cf4f2d40b10108edcf0268823803337ce6b42aef9a705223949652cdd62a583ed20d6bc5bbf3ecfe1f4849ab91638f372102381d91d7b01dc3e5715386ccbd598cc579e506adc81e1133e43d52e5f4c2e71b440e39560e06e7435a5a9ddc5e92871ff0437b789a66403c6ea4a3a46bc13fba459955157a590c4ccaadd20d2e54882116ed47e5b6f6184e224c757deacda9cd2b0574d89980812d4f791d8f3f6f5d6ddbd943cd8da3ccfad7ec84328c9c38e7cda869f49c70a4d334d21dc135f5bb5fca5e05ba56bce8c81cc9b46f051fd1e0775e0798c70a65df105cc92e7699f51ce9625e68b48b1462d9b9b5756867c32632f0bd1388ba687bd77c4fdef17136e0dce073fb98f69847f3d4cd2866664996fd7990172fc1ab84e8f8236880927b8e49fe762177ee2f986ea20a829b3f89d8f4b7e1cc8a2e9e9c9b834370de5976243daca20a5e40fcc31f79b28bb646d4c4e4d8ce85e82083580b8af297014038e9bc7b317b3f83e254befd54076b527838d67c3df4c8a720044e326d4db6233133ff992def2d2f4dc4693c80d635f0fb0828f21bed9f23dde225865bb504ed551fb08da4154b8d2bc26683aaa43869a17e980d50448033a434f177c44b4c79dce51cc9fdb84b74f670c75d4383683e96445513c6b03cc8bed06eeb89307bfd616ad6918413bdb8cb52233d15cd34662a4c83fc28b777256c2c2cfec0c632cf735a6ea20b368dcbaddd46aa90c93c396f26b2d558d1c6d94a45f0ba5822418bf2ae3cc111552ed1b46b294f0bea03bd6e0418313a38504b55c0c88835627997c30835078b9aff2d5b7ff1ed944ebc061be00a3b988d46d4fea26f29daa831a7b79e70214f4ddfcc72280f149f268df83f4e72953980abfe3fde0755a0ce94c256149b492b21271a97351713ef9f339fdc1f65b6c7ac6a5a2b5720b36730e6b4f59111e81bffe7e6a95b8c1594cca20577ff7d25983f5e7cab2e70fd6dbf0474cd20aab5e2d3b7febbc4901a783b1624fb3520f071e328179a5d909b120c292c4e64d182b4a8c3108c96290a721d708e4355e172b6c8c103036584e51705791987b84f5b3c4d7362f6098d260b91f7323ad60b7cf45012b4b5e7bda130f86e5ca6edb52d092cbf26113ff08ed62ec1c719c7138225074566aab82fdefc914110f803e0c1f946653851e52727dcb2a3be0449d427e21f1fe5ff7616416d37836efcd783a89d84eb7fc5dabd292afed3032f84649e18c5b49bc2d43e590fc02cc3d5463c05050200273512dfa6d2b8550ad9ce93ff002109f15f6e0f9e024aa53b17d741d45d95cf1b26c3ba9b61a2dbf6701b6b0319ebdd1e0012fe081178d7c0c41079c510645fe897062723c1a37e642b8fedcdeaaba93ee7603441214bf6a9033493e846b9c8199923702401b3b1378411ef7e2b946c103c522d0b228eb5e89b143f6b2aa0cd2fd121cfb01e131b3b75118c77fc179a935c9dbd7210f9b8b06e7fce05be302800e363694036d11b44772b509a1769abb11e682a6c7483b0b07b78132aa3da28004fb290d1bbf43f2181bf488b5cf506a27a1f0b50f799a4cf14b99dc7c28207c4a6b47aa6044b9ad895611104be8d805628e2f46db4515595ab644650ecb2988edbcc42dd7af9634e979001cf82cebcaea650d503cf562374f53ba8ecb28bb78200addfd42c425e833fe273098628f180119db3d54e34eaf28f93f4bc56c91b9a3b716d4d7f8c6535c29705186d83d0b05c5e3b6e218de4541f6ac7edeb837b75ba841832fa499533c71759cb8a37c0733c60d73f3760d06e1cce43833eac0f1d624901f6aca2e39339b98a0d2e590b024de38ea76869fea83b12b73fc23f37a4ebcf17170aebda3510e71d28535d2d208d2fef6212bf2e05c8953308d4e3f7bcb00e82a2e899865c23881eee9a78cfbaa993ea1c6c37eda2d06a8997eb66db2c5dce5684749d1d4e8ba2551c80a278d7ca58a1845e98b4e53ba71dbc3559990e491792c86b399e665c2b36fee17613c7ebd21840d3dcb71d3799b09c7d8cad9475f396ad7cc2a9e69b70522df5d212b6d99cc3eff113a684433d0455e10adde29e21dadce812723efdea375fada4de311cd82e0d4faa232bb0b726869b579a8f546d5eb6fdaa609fab3baf3944c88e217a801f8ddf6ca80e02eb19e9bbb8580b64b1795664d094e4431459a1d2b557fc8d276206d5fcf8edd96ea36da42ae91e4eb1489b0e34ff5d86929c9b92d4612c7c5dbe24d91a1aa84f08e272e3f054176303948fdf392291da44da211f053bec0cfe5adf5813a906425da3e319706e88b22784678840821a42260711647ee58012d3bfd20e4f19b956b1632868e3cbf5af297123cc1c339e9e3be7a5e1d1c14ece16d64d3b6a956da56a13670556f22a95d1be49fdb0193f5539f1af3dd50ffd6edb6bf86e2b0535d0b36e1683982bf02b806b533e2c720c676ebab40193fc57f8bf0017951c7996829f02cea0708006e6d57d88429e289ec6cbc51188131030b5917c6fcc46b69e797118e1124e6a4b6182137e6c3bd6036323947b323487d0a3304f11aa9d14932b109ca66b14a9e23161d460f8c7798550a724ce92234fb4e2846cb6d46a5fee4a2c661ba12d752340a1ec2609087b5fb08914ad58eb63b964189bb5ab58bf51286db163abc25a9545fdbde35286a8752911d7a2e22795aadbff7f219fde8bccf0f34cd98370ff8ac771e3bd648c51dbe353aecf89635014819af77e9f23833fbbc12023ecef4fa89875f4015dd4c56a1ee44a15e60bf3d20a7eb25a9206164ff81b083dc291ca5d99f60957f48e34009868d250ee5bf7adb93aa49e7dd2b15561750107c9b7e94da9c3e1b5bc347fc1130547730412b48ad258dcdc549cbb3a3ee652fe11192ed52fd2aaa60873c623359e8ebeb7b6b61e7e91ff2bcb1354f920d0860c76c57d1e391c460a8721ba88130e154fa288273a919086c92dba84b48b3b59a5ca2aac6b684c3a4776a391c263e5cb5754e757396eda0b5a51ffd02694f0439c0863da66611658b321db0c7725e8a07cff4992a12117556b9173acb8a45d6b7f9896f5575756d13eb3d62df5391a92901cae0c7297fd0940e5332a4186629d0f534ff09b0720b14f910c0d6f86f112a917fef0b11b79335a65d9a75233843ed8ebca453926d214dff613fbe6399d5aa3396d234090a7d940653a6c4016474b11b8a655ef9c64c90f14d85c245fae35641eed8300a230f73444fabc621d36aa7ffc9a3cea7a86e77205e2dcdb21bb7eb1b7527576bd795ad4673f3b42702f54ad51d6180a151b00c7446de7d8c26810de3a504a355c86c59deec81a5c904b20e9f3e573c154e80e586b94f92b4847ed1382944173eda7e74d22cd775cf8461e4d6e70c948343d0ec43c1767bb0546e5f7f396fb7da9651d3265a8810b8f03b41f471c6617b3408de16ed64005a589fe507aa16b3361e19f524fd1992eb5b0cc87285769415a83559341b8958c88ee467e14df2bc3745d13344f09437bbb839278e57a0745cdca406478ea8c6dc7f428750677b87edac9b583a820240b698ffa97a5c80c1424a80463d7d259ae866226fcac7619a8e1cf7d1b881b6e12ce1b7814c115ea14d18a012862d336b8a76fc320db45336c2560adf19d54c1366956d47136d369ff6451090e713fcc3474620d1b23818c04f93c1c55f75fdf12c4284076f4e8ef0e8c1d1af664c953dd072fb827b5dfc6836e94aab0778938bae36c3f7d3526e6ced384a6bdb651d4e8fb9ba6c9668cdd0d0763dcdd7c0b197925e780540a6336bf8c8cd38c086152dc993b9c6de25505072d2b71ee2246b169165a869c3ef12616c47c1e2584133aa34bf68dccb67c448c2e16b3478815b8031e803fb12e6fa44a2d1dcc061c8eebefcaad179fe154a3e2db0d756bde7874f3c51d0504bcfdb328175c576ec222bdc985cea96828e69030238d034287ce844c254af32d232384b80975db6e5fbce0b3faa97522042b0015bbfc195012b6776ccc08c1310c23131bb6a52500cca01e8a48ba98f492c32c25dc865a6adf35185079cc94d80bcf5e9f578fd0c1f3144166661f6c92a4110f9a00b6f4c6b1d25736c4dabd53b4d9fbe1faed83c3e154a84ecb5301bb5f8930bddcd168340ef4fbf1ee164ac73049d1e8807cabc91b41d8b39746a03d8f53c42d6f4e35a50e940ae2f414aa486e6804a8eb94f2640e0100bc8e924226928f155097556053bbc2ba51096f8b99861b9cb8c83aca4dcc0a163d82baaa787f9fc61333fd9e0d55afce221f61bf7faaac356c7863169841b4f080cd4fe568a7dbbd85683741df6ad23927789b7b9bf31db9ac9a16d0c7daa4e1394020ef0a0da38b908975ed1b641e6cd8ae668dab2d68f233dd58eedbd8293fa9259fd4419ee96b18805093ca4f2c25b7922609210c3607f420eb58519e988ef2a72e7454623b1426b6d3c8a5d5fd7df37d6685132b7865bbe6289ab10676106af07ac48fde8ffaa94eb0362721f0be6b97c4c415587d499c5b4230421bad8555f7d56eed82adff83a813591b5553580e349d7e9578ecff9268bdc7a2b13f6cdbbeef9fd3fd3f6be56babeb58aed4af4db8ad0e92d3d919b960462e2d7be494ed7df83f5f965ac95a987aafe599105f971c80b15fb99cbfaa69a533d4b66f202d76e5f15ffc449a90dd2146ae5b660972fcd273f3ca8ba71d0748ed7f44c38db9d1ad3d8e9f91fdc4f986bd43be73a046c177f0938c963b755de5d22490a43d5498f8c66e4acce683a916fdf7fdccaea91ac8c78eadb607363afba76e5a1348c98aee0cbf3d5a16adcaea81ec5bd5311979254e3644b266d077bc6142b58783b0cb0a542e74036ffa458dfaf40653fb65369fa8c0363d5aab99ea8096daf24fbaa0e6818859927d7c3b671158c5b75dfa79103582796c6d761f3ff5e56be4465227005d997fafdaacb0b0c152ea3d2b58c1e746a2938ea10a8948fae13d9577d57e9a2ff31da6f77bf52b950c54a80743b24097271e4f87248af0245012ffc1bdc29628c5605214af82e5de0b614f83d6c4a8dc0ed9d4c25ddfd551dbedee82eebdff8fbd04e3b0f7956fc3fc2e5f523d56802fba19f8c8e6e2f64d909289a13f60142a6f4fd2883819763e6a3bdc695d313d7b3965dccef659c75095eaebb714d500564b09c2e8941336f640f4efec3149388902e31ecfed274cd9255e46402ffe3f618d963bde5de6246bb5690ee1e8743e33ed3f3a835d62721e6498c98a4ffca9bc9212719ca049ace4f7cd6136f3b8f3498cb96ee55b1919c1304a1ec27035e142bc15e974c2415a03a3e1bcbd5e30596aad0d14061e8fb314dd51fdc84104e5e0d760e872166310b407034f44fbbb7930172edc251e5624cfcdcd818f59c747ab3a723422680f1c946e7e68e51ccc1efe0aa8bf446f0152d05496b4c9635e18e23e2e659ed1c2fdc321f9089e3b06abc9bf59faca3cfba3caebe54cd61f9e23d64f57bba99c06b0ef32e5e8b59d86a82fe4df2db54eace684f88eb54cf0c7eca43a7a3b4b5b00e241203e05c5bfe117e30f4e69a431b0d4d73c7c6686f6e351662d09236c17ea9348d75ff85fb4b8af94afaf46342fbe46a32505db549a2559e43eaf72f948594305d1114a085a8bc658de0227e3017b091d5c291d64069a44e30b1ffe84fcdc2b75c797c67c5c8f6477805e4b1e8d50dbc251c0c4f53b7fcf0f8abf030c43c4547db5144f582aad47d60f388f313e6f3d9fb04ab1aaa9285f3aa1f09013548695d97236fe2ca2d49c9c23e4fce1dfd2909a617fb5898a3820316c592d7dbdf3d79b98afe70f978063cb054c39b3616d81e8c53d6b3856dda56a163aca4bc2d254e12230bda45ea24e0536b2f6185414f1fbba8a7a32349c76175e4c556b52889526bcf6654647347c9b55fd5d10abbe154b4ee1109223f02a28c36d7fd47e9b72746adaa3f9d752556354cef02b2d6894451fc338b254cb0edcd49bee00fb565a3c90cf6e4b540c60cc76f789c753efd203ea6c0182a7d1396825cbd3c9981ee5cc5dd019816cabba81e2ac769a026aa6eeb89f337e961d50c831ef8ae0500deb0225965fc1dbb5c0023fa40d0feb0ba2adfef568ec536f1e5d48fa3118f82f9ef06159841cd6ab53e6004437c995ce715536323a7b325494cf6bdf3273aff35beb91edc85da3185ac1e2ec6e4df012d857f8ff270e739b3d96a782ff2fa3c1cc473cbb0063d68bb4eef761084db6a31428c3f2d75059535ac2d420aea268e9ef0c58d12ef8292d759feb8e528540f2061755e5b9a715f83bc20d84a37c19aa52dfea71d6bc8246a2dfca98c975f8a023541787f3d9553cc3ae2ef1767ce4547dc8d016b239d667492d5f43fdb73ea0255fca401c081ffdd34dcf1f941afde1048b7fe1d7887ea87bb572d12a3043bcf46e7297a0bff951d680b19bb84268c6a526f087f311581c30f30dbf8819dba6611b6388d9ef353479b4fdd05b3d49455e9982c2d9740a8299a6dffb272e25391d446cfc742cab93bd4ad15ea7c610819576e549bb78c269df0258cae2f5ec384490bb6f179b738767a8c22498d3aeb6bcfa2f1dfc4490b95bdd11de58de137d4dcf78280f354d42dd5d530c42e0f3087db6d5a58c17d968e964b2f4eb5298191ea29ede0d6f92d1fef7ff24aff37a26c130f7aaf4ff672415698ead73802404bf07c1568de378d9b6368351c382c8be2dd436a360a0c8d158de55da97136c93c504e0fd882110b6ff4ea66e2c70635f50941a844e261f38c49a7fc083ba4501c309c9f2057ce0a09ea750fa49fa7dace318d6563d32b5687b2646b71cd76c22459ae3f9e8ada606b0c82e09cda5865f4139a81a3f8b722fae5983983a84c69fd8a13fa86f793ac3721df472811a6446936d3bfe2cb22e4c38f5a6541e437b9dbd1d4153135a3089f40a9e600d18015cebf556d58bd0366c8757967e02affaec04aa610e83f00412e9bd9022c9dd7de4755e89e9c7a6540e8a8718ae01303c0b4cd7c0a18604029f488eb81820065a13a542b8ed8d3f37c4bb24ad1f521745b9133f9b7b20fd340d555bf622fc7fd1326a0dcfb107e87aca2eb1298e85727ac4353bd3fdc82adaf4c2fe19eb29b739327698a25d876c7f9d03bcd27928fdb473a8e4d35f3190ff9a7bc635e838390e7671c5ec570ac9f5ab5e838736fd3902027bf334b3c6bcd75c228257ddc93cf5fbb3b9e4d9e4cf68684e3cca98b46bdaacf7ddad27b60ac633cbc7aca6a3662c676ee97f1468803cf85bbcc54ef9801c57e8aeb1223fba63b07a8d64c9a25581354bcc8a6e8bcb6447c6e685fa7c4c62f6b8e72eea4f9f424b05ed0b9d153acc762c401fb8961d723f4a1042b4f6814b69c949fccf348dfa1b1165dfb28e85df74e5adfa70c6a899c7e8ed1ba23f29e0d1359a74c60ab577b6ca1bec328613900b2b279a6918ef9847f1a85c4ca1ed1d70d1395229c4878673f0ae322d6d4bae82ccb4e69afce09e47d2c444a99e41f4ce69708cbdd367f8f032261871a4dbc6df4ac9cbadf33a7b491b94be070ae6d0569363e0747e9e81236f1606c910e9fbd4c0ea29d99e851b298ede8c5aff2f6008df2aa4ec1a258db8453a7a671fe66942ff623050c7f13edd82607b7a602201a4a91a13114bf4960994b5479f8bcf539149153057a092037f4ab0039eac28277f0bda761c2fbfb58717f5409195bf23c30a67352f7d4f69f36a3688e2b80c13a8c24966a87972b9b830e18d77a2b60892c9c51a1b962f76172e754ebabb4fe58cd5dc22bad9f30b57ad6037101e8a0bc2b64b33b7c0785d376dcfb91e69d6d706669b88ead1c81014208b387d4125981dd438e7be9ea713ed64cde415eb0f7fa3060d24baca6dad9d4a6756803f1b525a7eeeb7e3354bbae09290fffe5c9d7f74be0c5ce47e73a99ef6d75056f0d6fd2afaa28e4c82d12b71a2b584b59769f2c6f19ed15116d7b1cbc61ea0751da037fbf74a2de11d890cc1150e766bada2bedf293a313138a68a084c3ad3f42a2edfc4581ec0608ed06e5a283535c6a46fd6f0b66f5b309fbeab193fbcd725f230324a523a21f15cbe30d063dff4da0ce6d0a52f91efc83ff44587d25304c7349a87ae6cd6af4d17374001a8add09767fdc836ef8e6a7bcd90e6e4a3e85fdf3e10bc7d3fe30d0d5008a01e9265a67c77d6311f1263e41d16ddc7c7e0813ee48e96f1469cf248c2d80f8588d3770216e8b66a2b1a34189cd55182cdbf4a0827f87b8f542f5555b14de86b4aa23e74c160c0480f47113728e3ba6580843149afc94541c167436da62cfea120178dfd0c1e84f61b747fcd327734d1474526fcbc8290958d171f04eec8d9716c851d91182503c5fe3497bcf68ecbc92d60b8a2c37bdf8ee652e0a553ccceb4d3eec1e8f805856c38f53a7b7202d6fd068ec211bbe42b7a9591c9d680d612aea5b20ff9c5c55381262db466ec345a7bd7465a1666ac16d0c4c01c6e83e953287226661d293ed868e097f1571d1a737c8a710a1de230f2dfd08e2e7db7d79556e324c3a82e331c13e7de525d89c1dbe6db8e3b2f7281586c39559da4c35ea66e8360eaf08612def8277417f2d998a09a8bdff04fc2e10833c9c2d475ea1aa29fa2bc856179313108331b070a736b593c3216775f67aef3f58cd0bc7614e13c3692de9874d9ee18419fe66bf1d7f511b080b80f118d58b35abc0eea0149d1b5fe831b9e296081f0b31364594d7b8dbf104875da4c1199d6546ef9c41f11fad72b8ccbc5170886bf2d34436492f24205dec810bb0ce27a82c6d090030854f33f23ffc2fd6704e21487dbdcbf8ab4ef56c1bf2d7cc791416734b6a5a5c133a39fe1e6490535b4c93b44aae5d74a547958db9a79ddfe9c44a41950cae5e6cfc337111a155ae1a062e3353e6cf6d35cadc08d8947d01e0f1ee92c8d396cd621b277453a36dd4237bbf7339a11b419b2bd9078587eeea9172767cea4bfea5c1319c90dc2f58e4d2093cc2aa27fc03263bd2fa1dc40aa82d1a1e6bbeeafa78ac2d2eb049bf9fead931cb6e868bca810022256604c2f225cc90e4f7a40a778d1b71401cf9b1bb2cfadd1701618510476eef87583d0ab6d34e6ea18b83f0a53e02458a45b95aee9d270d64b21a0ed5fd3e4b2e4e56051a9e1732e8ac4bd8dd2c418037b66c16ccb5d1008c731859334a5f7f69f7e0c1b9adc38bc99fadf4cb5f6a0184d4044ed3341121262a9eab5daa99159057fb416a43f3033529ca0d7ac489e87dc320486f7b85ae92cfe24a77bbf7b79e9781eaeca8af59bdac8c00b8d4030466a6beda5f97b9e5ae0d0510e013ce9908eca85ee79581db02e98a6578336b3b561cf65d99d8556f20c37ef5f0d2d3170b815838402857399176466fb6bf7385631dbaea079bbd04ddfe0582fced6aa48db4827a9271fd11dffc83aa0f063c8c7975f0e5fdd0b4926a634dc786916250874add9e22279e72366149dede82bbb387c6f6a4a7915c5d8c2bd897d788e2c309d6c0931eedc2c60666988393fac740896c4ceded5812215af4a94eced1a321b26b9796065b02a2721532be54ee024a97a79dfcd71f111d175f88a56458f621322dc82ba48dc83bafa766adff17a353b828a7285fcf92abe92dca9aa745ce9c7cbf852df40e9c6ea568d1139f11c70fd50c27a960a1dab1988efcf6561cda07265fb251fc4915a32a53012477cf2b933160645e8b7874560fdbe88bc1b0be1d673a2ef1ea05ee7693b0234a8ba2901f1705518cfa461a24a6a6f1040e868bc85a5a7c75eaa657d83998c02fed8f5c8e8dfdc4b962cc3283e8251203f899b86a0948ae97c8ce34fe2110a44c8ee45a5196fbc96a78b8854caf2f71d96d735851db023fcf92eb175828a451a8df6cc594f1dce139b1da85bf33fcb9733c628fb401be9a26b9ad73c4c143c92819d22d580d539897f172121231664a7f359994d96ca04cb0a12dcc70b97993e139fcf93218c5c87107bbadeb04ac6b2bb23843d30c1349715d3594ec7496b4da6db28ceaec1bb720cef640291798c0e5c8c21ed2b9e5360f38163253e59797455d4cc1d9ac45cd69ad6835fe761e82aa04df71acb40c43b6b6a508bacccda3b121ccc9b2f51c71441c08d092d79c3299c092fc9fff39ec7b4f9145a553f9b995f0f616b44611bcfea48c77f8b2a67c1c4f18ab675d96c910163282ab2d2611273d2bd24fadbb6d6b2a0fb26a9516e4de457798745b550e663611ee4775a9bdb266ecf7dcbd8083f6a691ca905ffbca7102f80220105712475791f7a5492b66ecb3ae4b47b815d6edff5506b069f5ce8dd8816b95387dbe1be99ae9b00dea6dc0d6d5dc559ef790f27f18178c232abe9b8f48493b4567afe3bdf48bf8df6fdfccd64c75576a88b379622aec891c0cdd7d19be44440e328b0cd9afb6ef383260dc1824336a991e3280aeec1ce2c04f0283f89e6493fe58d823ffa8abea752ad7ed7390070f997464c3db340d129cdd6e90862202ed0bb777fb5e21952bf77c33c49544d04eac2dc6d4b1c5784c71a373c31a9ca260ee20886a1ef02c01cbdfd1876b172c164eb4f150e3b160d41057cbc616b0040902993e3fa3d1d775d7c5fe43d80a84a66a3d1a116630d580b4443e4185a1d6965c940656c7c06009a4022c9312d03abed90d85f94f441b6794d249fb2d129179db8a52ec884afcf864078f63033ff7fb9c2f31a1814e46c055e15ad4b763c67efbb42401a7e396d662fa842dd08687999aa43f2c8508f71f28c197ac7e194311a6267c84dda315006fe031dcceb9cba79408ca69fc4851cbb8d1340df36f9b0800df0ef1c6cf9d8359cbc4651372d3d7af852a1776e68f0241163b57e068aaa8b9fce7f572e3ca390c4f3c43fbcd5181a8716cd5dcd349349148e4e58d59e002473bcab1051f5f24c2addab52a7908c98ac343d9b3ae004177d883f764c2530abf36f0f89ea6f911eeb5f47ac0c710e595a8255278b3641c70f4877daedd7df7dbf6e3d8f2827311991b9c280849e006e759231fb99b15e0e03d9e1ebcb5a99364fd9d6b07e1e9dd32924b8fe3307663e76729a796bfe9a57e4668025ab4d7f49c96241471013bf3cc5160f312be5084e33be69d055a62a11bdcbe9b0e73ec25e87cbea40f9f382390d99e26c65960662e0209ccb56de0e49757444dfba100625a0246c896185d493384b25a5f062ef4f54600032be6e21b3fc1bd053f253b5b64997cf0e5f68f764e0b5b194687465d0c213e87160ac47679dff68d4c310cdce8229bcd41e03b738e61ad8f03edbbd80b651692a0ff0cc1495aebc0acb5402cb1ee35bf9b4b81d335d4a51d5c9b5f0a0b274f532cf1e9d9824b859175040fe2b855da68ee3288162a257747a5d7988206febea800dfb2bd965cbf0126857a054af4675d19b079f83bafc52b37a96fc35bf5414bddec3fc7efb6bf2b91354880046859dc2660281323a58a2d1edc5fd037d365d345f4c369eb8fd15ee7fca9badf66f8c81801c00d1926b75042d4910d05d2ebc0116e1ecc5bbd6588cc908d90065cce34ffd2c2fc11930dc3f5d38fe31ee4f5b7801bd2f2e73fb4bef2e91826f0b26d7a2f100e93b4e0545d99384520efece643b08566518f553f30f2cf70bab42a2cc1b888234e673df46f2dc6bc7974ecbf9cdc947a954c500fc8cec7dcf2b7b15ae5ac853d4826ec68d5a08786c781214152d6b3cae2df9595a05ba4f46fca94ceeda85b4a3315d7410f35d86e0d301b9177ce20f25a3fdbd811c273a8c9a52931675b63f21512085d9880b4ec2290c971648d13be63a5aed25d75cb4cebc10a6b312dc74678fca55cab8296e62f4f9a4533b9d46165d6a718ed38c8e65448d54dbbbda3a3490b1f7c98917b1731c059ece1f69a93695ac7283ec1f02c4bcf67d880d760877af7d0e88052b86e64bee7cbcca4c4dd11fa58ea21e8f225ddf2b52ea4ca2446991b8f89996043ddccec55c935d1f228e0a33ef3439dadbfcd772a7742c54a72a819799e636691c34def3efcf36426f8d0a9818b4c92b1066d53b3b07b1462d42a1267e1e87cfbc68c4732e6475a28291a29c8b95c3107303c43d6c3928f2290b99993ddfd5ef2ea7afdf7e118b524c28ce640399d8781d752de743c1b70efdde625c08d20dffe410da30dfeb75de14964a0f47c7816af022324dda70409a01544b25de19d0ccbc992c8ba5f70c593fcf1624620c4bf5f8390c4bbd752e8d9b129d15a57f9372170eca90f36493a440cb9158398f464c68efa07462bc45a4a1a1276b6c7d22ceed8cec8354d0e2b7d62e2b8c9b6787a72970ede692d0b6dcb83dbb726fd675a2398be6b65b44dfe6454d5be527aeb28cf67654b642e220f0dc82ec287c91c31fbc1abf0382d3fbac30aff111402a4ee39d923ef7af75ec0bea1118288b065544c48db24bd20c7e19345d295350b43861667a371528eb7d63c6ae395a04af1d9ff3068066f9bb7b435ea247f021a4b0241e0172417dabcb0bbe5320b55a786c858324a2eb5cc2116d8c1c2648b5186e3ff07fcb0f9a9dafd79fb1679650b5c4313211ad9cf880ec60a6562abdaa751c917b7ec984593a53281d980deefa504d7bf2ec4beb85cf75563129c98d55e72c91393230585e679b75e784ad8eef2b4af0eb5b52edee587ffb4faa62e22d694bd11dfc55f6878f12e2b5f009f410e943a08786818e1d954908aff96e778979919e42c6aad7e2c3c7bb002e231eed300e13661f6e825816ac06cf9a15b3628cc437a640061c93ad9dd9ae70ca8e2ab1b90d9de107084544b10ce0b021b488c8061b98443b3e05a5653a830f07939f54736e52827c21365df71c071eefe76ab28771e2c0c2d359318c5963207c2fd1614014bfde3859cc22f5d650bcc0e3a8933f59cfdaab216ebbff49a2f8099a7a5ec0d5557f0654fee91693652f278db308a02a5d26290bfde6f3484f2bf8f528b0a6d2fc5d6e03c8c46449fa6788549c4a812c3d0506140f3012c6012474319d0a7add2d042a27808198f8d1f91ecf83bc8ea2b463860506b2ecf2ae359fd860266517dfcbd53f0742800ac6c82a3ad05880d5ae8ece2f0b5fafbec4e5a506f66bb3b1e35ee73f7ec56388a6365083d0de7250c3ba8309dab70b13334798c7133fc2b1bb6ac6340ca6c68abda1037136c30c7b691ad04411f9ac249cc202ce9db8b94fdddea6de5f85c2fcbb2de6e4709a7527562f1c69e124e2cb659bdedc8e2a743c42c49e6cc50da3df7aeb233d45d0b00e0799d67fb2299951c900542c56683c2e89fb97ac73fee7771567166ef6bda098fecf1d0edfac75296982374308352c4186fe08426d6dce34245a4da255d5e1db0466000f9046bcaad9d1a0c046f26a286fa15cbe65799a7c39e1356351b5385058faa043a5f2a4f46f596799712083f8aa4533edfd02538022d681dfd725bfb403edf53de1618571e66fbc4743c620bdbd11a260bc285b5bb7e3fe73583faf3b80d627729aa0c0646510d318be143f49f8fea227c02e3f29f60c95aaf1b6e9e4c83bf8d88aca6f245213d2c02199733b372aac115144f7b074b30bb5ea75ba64b42edbb2eadebbbdb6a10d14ba944cabeb77c8a755d0562a2281beda23b16cb5724fd3c38bfea2665d3a81650473c5183c423ccd1390f2579a9a6b9e95b7a6c221a660472becc8e1f828df4a0dcaef6b2bc9d88bc1ec5e225dd066eb15cbb386ef63c7c429d9fc6c528cce4797a4c029912eb70601c844664f6f96c77a36b500891223e95fc977c35eb75e2c2204c70983a7ebdc7ce4fc921e7f3e4c792d8454a35d01678afedbce95251c53de922fbd8ba791f0c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，博主可能还没写完，所以这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> shiro </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> shiro </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>golang入门</title>
      <link href="/2022/03/31/golang%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/31/golang%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>对go语言挺感兴趣的,所以简单学习一下,这里是对go语言的初级入门</p><p>如果想要入门的话,也可以看看这个博主的,他的是和快速入门, <a href="https://luzhenyu.blog.csdn.net/article/details/122803041">戳这里</a></p><h3 id="golang的一些语法香的地方"><a href="#golang的一些语法香的地方" class="headerlink" title="golang的一些语法香的地方:"></a>golang的一些语法香的地方:</h3><ol><li><p>极简单的<strong>部署</strong>方式：可直接编译成机器码、不依赖其他库、直接运行即可部署。</p></li><li><p><strong>静态</strong>类型语言，编译的时候可以检查出大多数问题。</p></li><li><p>语言层面的<strong>并发</strong>：天生的基因支持、充分的利用多核</p></li></ol><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Go 语言实现并发的代码</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">goFunc</span><span class="params">(i <span class="type">int</span>)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;goroutine &quot;</span>, i, <span class="string">&quot; ...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> goFunc(i) <span class="comment">// 开启一个并发协程</span></span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于是个的结果如下:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">goroutine  9  ...</span><br><span class="line">goroutine  5  ...</span><br><span class="line">goroutine  0  ...</span><br><span class="line">goroutine  3  ...</span><br><span class="line">goroutine  2  ...</span><br><span class="line">goroutine  4  ...</span><br><span class="line">goroutine  8  ...</span><br><span class="line">goroutine  7  ...</span><br><span class="line">goroutine  6  ...</span><br><span class="line">goroutine  1  ...</span><br></pre></td></tr></table></figure><ol start="4"><li><p><strong>强大的标准库</strong>：runtime 系统调度机制、高效的 CG 垃圾回收、丰富的标准库</p><p>“大厂” 领军：Google、facebook、Tencent、Baidu、七牛、字节 …</p></li></ol><p>不同语言的斐波那契数列算法 编译 + 运行 时间对比：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220404184602983.png" alt="image-20220404184602983"></p><h3 id="Golang-的应用场景"><a href="#Golang-的应用场景" class="headerlink" title="Golang 的应用场景"></a>Golang 的应用场景</h3><p><strong>1、云计算基础设施领域</strong>：</p><p>代表项目：docker、kubernetes、etcd、consul、cloud flare CDN、七牛云存储 等。</p><p><strong>2、基础后端软件</strong>：</p><p>代表项目：tidb、influxdb、 cockroach 等。</p><p><strong>3、微服务</strong></p><p>代表项目：go-kit、 micro、 monzo bank 的 typhon、bilibili 等。</p><p><strong>4、互联网基础设施</strong></p><p>代表项目：以太坊、hyperledger 等</p><h3 id="Golang-的不足"><a href="#Golang-的不足" class="headerlink" title="Golang 的不足"></a>Golang 的不足</h3><p>1、包管理，大部分包都托管在 Github 上。</p><blockquote><p>像我们熟悉的 maven、npm 等都有专门的包管理组织；</p><p>托管在 Github 上的代码容易被作者个人操作影响到使用该项目的工程。</p></blockquote><p>2、无泛化类型。</p><blockquote><p>据说很快就会有了。</p></blockquote><p>3、所有 Exception 都用 Error 来处理（有争议）。</p><p>4、对 C 的降级处理，并非无缝，没有 C 降级到 asm 那么完美。（序列化问题）</p><h3 id="go语言中的占位符"><a href="#go语言中的占位符" class="headerlink" title="go语言中的占位符:"></a>go语言中的占位符:</h3><table><thead><tr><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>占位符</td><td>说明</td><td>举例</td><td>输出</td></tr><tr><td>%v</td><td>相应值的默认格式。</td><td>Printf(“%v”, name)</td><td>{小小}</td></tr><tr><td>%+v</td><td>打印结构体时，会添加字段名</td><td>Printf(“%+v”, name)</td><td>{Name:小小}</td></tr><tr><td>%#v</td><td>相应值的Go语法表示</td><td>Printf(“#v”, name)</td><td>main.Human{Name:“小小”}</td></tr><tr><td>%T</td><td>相应值的类型的Go语法表示</td><td>Printf(“%T”, name)</td><td>main.Human</td></tr><tr><td>%%</td><td>字面上的百分号，并非值的占位符</td><td>Printf(“%%”)</td><td>%</td></tr><tr><td>%t</td><td>true 或 false</td><td>Printf(“%t”, true)</td><td>TRUE</td></tr><tr><td>%b</td><td>二进制表示</td><td>Printf(“%b”, 5)</td><td>101</td></tr><tr><td>%c</td><td>相应Unicode码点所表示的字符</td><td>Printf(“%c”, 0x4E2D)</td><td>中</td></tr><tr><td>%d</td><td>十进制表示</td><td>Printf(“%d”, 0x12)</td><td>18</td></tr><tr><td>%o</td><td>八进制表示</td><td>Printf(“%d”, 10)</td><td>12</td></tr><tr><td>%q</td><td>单引号围绕的字符字面值，由Go语法安全地转义</td><td>Printf(“%q”, 0x4E2D)</td><td>‘中’</td></tr><tr><td>%x</td><td>十六进制表示，字母形式为小写 a-f</td><td>Printf(“%x”, 13)</td><td>d</td></tr><tr><td>%X</td><td>十六进制表示，字母形式为大写 A-F</td><td>Printf(“%x”, 13)</td><td>D</td></tr><tr><td>%U</td><td>Unicode格式：U+1234，等同于 “U+%04X”</td><td>Printf(“%U”, 0x4E2D)</td><td>U+4E2D</td></tr><tr><td>%b</td><td>无小数部分的，指数为二的幂的科学计数法， 与 strconv.FormatFloat 的 ‘b’ 转换格式一致。例如 -123456p-78</td><td></td><td></td></tr><tr><td>%e</td><td>科学计数法，例如 -1234.456e+78</td><td>Printf(“%e”, 10.2)</td><td>1.02E+01</td></tr><tr><td>%E</td><td>科学计数法，例如 -1234.456E+78</td><td>Printf(“%e”, 10.2)</td><td>1.02E+01</td></tr><tr><td>%f</td><td>有小数点而无指数，例如 123.456</td><td>Printf(“%f”, 10.2)</td><td>10.2</td></tr><tr><td>%g</td><td>根据情况选择 %e 或 %f 以产生更紧凑的（无末尾的0）输出</td><td>Printf(“%g”, 10.20)</td><td>10.2</td></tr><tr><td>%G</td><td>根据情况选择 %E 或 %f 以产生更紧凑的（无末尾的0）输出</td><td>Printf(“%G”, 10.20+2i)</td><td>(10.2+2i)</td></tr><tr><td>%s</td><td>输出字符串表示（string类型或[]byte)</td><td>Printf(“%s”, []byte(“Go语言”))</td><td>Go语言</td></tr><tr><td>%q</td><td>双引号围绕的字符串，由Go语法安全地转义</td><td>Printf(“%q”, “Go语言”)</td><td>“Go语言”</td></tr><tr><td>%x</td><td>十六进制，小写字母，每字节两个字符</td><td>Printf(“%x”, “golang”)</td><td>676f6c616e67</td></tr><tr><td>%X</td><td>十六进制，大写字母，每字节两个字符</td><td>Printf(“%X”, “golang”)</td><td>676F6C616E67</td></tr><tr><td>%p</td><td>十六进制表示，前缀 0x</td><td>Printf(“%p”, &amp;name)</td><td>0x4f57f0</td></tr><tr><td>+</td><td>总打印数值的正负号；对于%q（%+q）保证只输出ASCII编码的字符。</td><td>Printf(“%+q”, “中文”)</td><td>“\u4e2d\u6587”</td></tr><tr><td>-</td><td>在右侧而非左侧填充空格（左对齐该区域）</td><td></td><td></td></tr><tr><td>#</td><td>备用格式：为八进制添加前导 0（%#o） 为十六进制添加前导 0x（%#x）或 0X（%#X），为 %p（%#p）去掉前导 0x； 如果可能的话，%q（%#q）会打印原始 （即反引号围绕的）字符串； 如果是可打印字符，%U（%#U）会写出该字符的 Unicode 编码形式（如字符 x 会被打印成 U+0078 ‘x’）。</td><td>Printf(“%#U”, ‘中’)</td><td>U+4E2D</td></tr><tr><td>’ ’</td><td>(空格)为数值中省略的正负号留出空白（% d）； 以十六进制（% x, % X）打印字符串或切片时，在字节之间用空格隔开</td><td></td><td></td></tr><tr><td>0</td><td>填充前导的0而非空格；对于数字，这会将填充移到正负号之后</td><td></td><td></td></tr></tbody></table><h2 id="1）变量"><a href="#1）变量" class="headerlink" title="1）变量:"></a>1）变量:</h2><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331151042733.png" alt="image-20220331151042733"></p><p>变量练习:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.变量的声明</span></span><br><span class="line">        <span class="keyword">var</span> age <span class="type">int</span></span><br><span class="line">        <span class="comment">//2.变量的赋值</span></span><br><span class="line">        age = <span class="number">18</span></span><br><span class="line">        <span class="comment">//3.变量的使用</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;age = &quot;</span>,age);</span><br><span class="line">        <span class="comment">//声明和赋值可以合成一句：</span></span><br><span class="line">        <span class="keyword">var</span> age2 <span class="type">int</span> = <span class="number">19</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;age2 = &quot;</span>,age2);</span><br><span class="line">        <span class="comment">//不可以在赋值的时候给与不匹配的类型</span></span><br><span class="line">        <span class="keyword">var</span> num <span class="type">int</span> = <span class="number">12.56</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;num = &quot;</span>,num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一次性声明多个变量:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="comment">//全局变量：定义在函数外的变量</span></span><br><span class="line"><span class="keyword">var</span> n7 = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> n8 = <span class="number">9.7</span></span><br><span class="line"><span class="comment">//设计者认为上面的全局变量的写法太麻烦了，可以一次性声明：</span></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">        n9 = <span class="number">500</span></span><br><span class="line">        n10 = <span class="string">&quot;netty&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//定义在&#123;&#125;中的变量叫：局部变量</span></span><br><span class="line">        <span class="comment">//第一种：变量的使用方式：指定变量的类型，并且赋值，</span></span><br><span class="line">        <span class="keyword">var</span> num <span class="type">int</span> = <span class="number">18</span></span><br><span class="line">        fmt.Println(num)</span><br><span class="line">        <span class="comment">//第二种：指定变量的类型，但是不赋值，使用默认值 </span></span><br><span class="line">        <span class="keyword">var</span> num2 <span class="type">int</span></span><br><span class="line">        fmt.Println(num2)</span><br><span class="line">        <span class="comment">//第三种：如果没有写变量的类型，那么根据=后面的值进行判定变量的类型 （自动类型推断）</span></span><br><span class="line">        <span class="keyword">var</span> num3 = <span class="string">&quot;tom&quot;</span></span><br><span class="line">        fmt.Println(num3)</span><br><span class="line">        <span class="comment">//第四种：省略var，注意 := 不能写为 =   </span></span><br><span class="line">        sex := <span class="string">&quot;男&quot;</span></span><br><span class="line">        fmt.Println(sex)</span><br><span class="line">        fmt.Println(<span class="string">&quot;------------------------------------------------------------------&quot;</span>)</span><br><span class="line">        <span class="comment">//声明多个变量：</span></span><br><span class="line">        <span class="keyword">var</span> n1,n2,n3 <span class="type">int</span></span><br><span class="line">        fmt.Println(n1)</span><br><span class="line">        fmt.Println(n2)</span><br><span class="line">        fmt.Println(n3)</span><br><span class="line">        <span class="keyword">var</span> n4,name,n5 = <span class="number">10</span>,<span class="string">&quot;jack&quot;</span>,<span class="number">7.8</span></span><br><span class="line">        fmt.Println(n4)</span><br><span class="line">        fmt.Println(name)</span><br><span class="line">        fmt.Println(n5)</span><br><span class="line">        n6,height := <span class="number">6.9</span>,<span class="number">100.6</span></span><br><span class="line">        fmt.Println(n6)</span><br><span class="line">        fmt.Println(height)</span><br><span class="line">        fmt.Println(n7)</span><br><span class="line">        fmt.Println(n8)</span><br><span class="line">        fmt.Println(n9)</span><br><span class="line">        fmt.Println(n10)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="进制的介绍："><a href="#进制的介绍：" class="headerlink" title="进制的介绍："></a>进制的介绍：</h3><p>十进制整数，如：99, -500, 0<br>八进制整数，要求以 0 开头，如：015<br>十六进制数，要求 0x 或 0X 开头，如：0x15<br>二进制：要求0b或者0B开头，如：0b11</p><h3 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型:"></a>整数类型:</h3><p>整数类型介绍：简单的说，就是用于存放整数值的，比如10,-45,6712等等。</p><p><strong>有符号整数类型：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331152448629.png" alt="image-20220331152448629"></p><p>PS:127怎么算出来的？01111111 –&gt;二进制 —》转为十进制：  1<em>2^6  +  1</em>2^5  +  1<em>2^4  +  1</em>2^3  +  1<em>2^2  +  1</em>2^1  +   1*2^0 &#x3D; 64    +  32     +   16      +  8     +    4    +   2   +  1&#x3D; 127</p><p>PS：-128怎么算出来的？10000000 —&gt;二进制 —&gt;一看就是个负数<br>    10000000 –》负数的二进制减1：01111111取反：10000000   —》得到一个正数   2^7 &#x3D; 128加负号：-128</p><p><strong>无符号整数类型:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331152123024.png" alt="image-20220331152123024"></p><p>表数范围的边界计算：<br>11111111&#x3D; 2^7+127 &#x3D; 128 + 127 &#x3D; 25500000000 &#x3D; 0 </p><p><strong>其他整数类型:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331152516387.png" alt="image-20220331152516387"></p><p><strong>PS：Golang的整数类型，默认声明为int类型</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331152548742.png" alt="image-20220331152548742"></p><p><strong>Ps:变量占用的字节数:</strong></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;unsafe&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> num1 <span class="type">int8</span> = <span class="number">110</span></span><br><span class="line">fmt.Println(num1)</span><br><span class="line"><span class="keyword">var</span> num2 <span class="type">uint8</span> = <span class="number">130</span></span><br><span class="line">fmt.Println(num2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> num3 = <span class="number">28</span></span><br><span class="line"><span class="comment">//printf函数是格式化,%T就是填类型</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;num3 的类型是: %T&quot;</span>, num3)</span><br><span class="line">fmt.Println(unsafe.Sizeof(num3))</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>整数类型的选择:</strong></p><p>这么多整数类型，使用的时候该如何选择呢？<br>Golang程序中整型变量在使用时,遵守保小不保大的原则,<br>即:在保证程序正确运行下,尽量使用占用空间小的数据类型</p><h3 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型:"></a>浮点类型:</h3><p>【1】浮点类型介绍：<br>简单的说，就是用于存放小数值的，比如3.14、0.28、-7.19等等。<br>【2】浮点类型种类：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331153812121.png" alt="image-20220331153812121"></p><p>PS:底层存储空间和操作系统无关<br>PS：浮点类型底层存储：符号位+指数位+尾数位，所以尾数位只是存了 一个大概，很可能会出现精度的损失。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//定义浮点类型的数据：</span></span><br><span class="line">        <span class="keyword">var</span> num1 <span class="type">float32</span> = <span class="number">3.14</span></span><br><span class="line">        fmt.Println(num1)</span><br><span class="line">        <span class="comment">//可以表示正浮点数，也可以表示负的浮点数</span></span><br><span class="line">        <span class="keyword">var</span> num2 <span class="type">float32</span> = <span class="number">-3.14</span></span><br><span class="line">        fmt.Println(num2)</span><br><span class="line">        <span class="comment">//浮点数可以用十进制表示形式，也可以用科学计数法表示形式  E 大写小写都可以的</span></span><br><span class="line">        <span class="keyword">var</span> num3 <span class="type">float32</span> = <span class="number">314E-2</span> </span><br><span class="line">        fmt.Println(num3)</span><br><span class="line">        <span class="keyword">var</span> num4 <span class="type">float32</span> = <span class="number">314E+2</span></span><br><span class="line">        fmt.Println(num4)</span><br><span class="line">        <span class="keyword">var</span> num5 <span class="type">float32</span> = <span class="number">314e+2</span></span><br><span class="line">        fmt.Println(num5)</span><br><span class="line">        <span class="keyword">var</span> num6 <span class="type">float64</span> = <span class="number">314e+2</span></span><br><span class="line">        fmt.Println(num6)</span><br><span class="line">        <span class="comment">//浮点数可能会有精度的损失，所以通常情况下，建议你使用：float64 </span></span><br><span class="line">        <span class="keyword">var</span> num7 <span class="type">float32</span> = <span class="number">256.000000916</span></span><br><span class="line">        fmt.Println(num7)</span><br><span class="line">        <span class="keyword">var</span> num8 <span class="type">float64</span> = <span class="number">256.000000916</span></span><br><span class="line">        fmt.Println(num8)</span><br><span class="line">        <span class="comment">//golang中默认的浮点类型为：float64 </span></span><br><span class="line">        <span class="keyword">var</span> num9 = <span class="number">3.17</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;num9对应的默认的类型为：%T&quot;</span>,num9)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="go的字符"><a href="#go的字符" class="headerlink" title="go的字符:"></a>go的字符:</h3><p>【1】Golang中没有专门的字符类型，如果要存储单个字符(字母)，一般使用byte来保存。<br>【2】Golang中字符使用UTF-8编码<br>【3】ASCII码表：<br>左面是不可见字符 右面是可见字符</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331155403822.png" alt="image-20220331155403822"></p><p>【4】查看UTF-8编码表：<br><a href="http://www.mytju.com/classcode/tools/encode_utf8.asp">http://www.mytju.com/classcode/tools/encode_utf8.asp</a></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331155436775.png" alt="image-20220331155436775"></p><p>【5】代码实验：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//定义字符类型的数据：</span></span><br><span class="line">        <span class="keyword">var</span> c1 <span class="type">byte</span> = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">        fmt.Println(c1)<span class="comment">//97</span></span><br><span class="line">        <span class="keyword">var</span> c2 <span class="type">byte</span> = <span class="string">&#x27;6&#x27;</span></span><br><span class="line">        fmt.Println(c2)<span class="comment">//54</span></span><br><span class="line">        <span class="keyword">var</span> c3 <span class="type">byte</span> = <span class="string">&#x27;(&#x27;</span></span><br><span class="line">        fmt.Println(c3 + <span class="number">20</span>)<span class="comment">//40</span></span><br><span class="line">        <span class="comment">//字符类型，本质上就是一个整数，也可以直接参与运算，输出字符的时候，会将对应的码值做一个输出</span></span><br><span class="line">        <span class="comment">//字母，数字，标点等字符，底层是按照ASCII进行存储。</span></span><br><span class="line">        <span class="keyword">var</span> c4 <span class="type">int</span> = <span class="string">&#x27;中&#x27;</span></span><br><span class="line">        fmt.Println(c4)</span><br><span class="line">        <span class="comment">//汉字字符，底层对应的是Unicode码值</span></span><br><span class="line">        <span class="comment">//对应的码值为20013，byte类型溢出，能存储的范围：可以用int</span></span><br><span class="line">        <span class="comment">//总结：Golang的字符对应的使用的是UTF-8编码（Unicode是对应的字符集，UTF-8是Unicode的其中的一种编码方案）</span></span><br><span class="line">        <span class="keyword">var</span> c5 <span class="type">byte</span> = <span class="string">&#x27;A&#x27;</span></span><br><span class="line">        <span class="comment">//想显示对应的字符，必须采用格式化输出</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;c5对应的具体的字符为：%c&quot;</span>,c5)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【6】转义字符：<br>转义字符：将后面的字母表示为特殊含义</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331155842046.png" alt="image-20220331155842046"></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//练习转义字符：</span></span><br><span class="line">        <span class="comment">//\n  换行</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;aaa\nbbb&quot;</span>)</span><br><span class="line">        <span class="comment">//\b 退格</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;aaa\bbbb&quot;</span>)</span><br><span class="line">        <span class="comment">//\r 光标回到本行的开头，后续输入就会替换原有的字符</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;aaaaa\rbbb&quot;</span>)</span><br><span class="line">        <span class="comment">//\t 制表符</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;aaaaaaaaaaaaa&quot;</span>)</span><br><span class="line">        fmt.Println(<span class="string">&quot;aaaaa\tbbbbb&quot;</span>)</span><br><span class="line">        fmt.Println(<span class="string">&quot;aaaaaaaa\tbbbbb&quot;</span>)</span><br><span class="line">        <span class="comment">//\&quot;</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;\&quot;Golang\&quot;&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="bool类型："><a href="#bool类型：" class="headerlink" title="bool类型："></a>bool类型：</h3><p>【1】布尔类型也叫bool类型，bool类型数据只允许取值true和false<br>【2】布尔类型占1个字节。<br>【3】布尔类型适于逻辑运算，一般用于程序流程控制<br>【4】代码：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//测试布尔类型的数值：</span></span><br><span class="line">        <span class="keyword">var</span> flag01 <span class="type">bool</span> = <span class="literal">true</span></span><br><span class="line">        fmt.Println(flag01)</span><br><span class="line">        <span class="keyword">var</span> flag02 <span class="type">bool</span> = <span class="literal">false</span></span><br><span class="line">        fmt.Println(flag02)</span><br><span class="line">        <span class="keyword">var</span> flag03 <span class="type">bool</span> = <span class="number">5</span> &lt; <span class="number">9</span></span><br><span class="line">        fmt.Println(flag03)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="string类型："><a href="#string类型：" class="headerlink" title="string类型："></a>string类型：</h3><p>基本介绍:</p><p>【1】介绍：<br>字符串就是一串固定长度的字符连接起来的字符序列。对于字符串操作的 4 个包：<strong>bytes、strings、strconv、unicode</strong></p><p>【2】字符串的使用：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//1.定义一个字符串：</span></span><br><span class="line"><span class="keyword">var</span> s1 <span class="type">string</span> = <span class="string">&quot;你好全面拥抱Golang&quot;</span></span><br><span class="line">fmt.Println(s1)</span><br><span class="line"><span class="comment">//2.字符串是不可变的：指的是字符串一旦定义好，其中的字符的值不能改变</span></span><br><span class="line"><span class="keyword">var</span> s2 <span class="type">string</span> = <span class="string">&quot;abc&quot;</span></span><br><span class="line"><span class="comment">//s2 = &quot;def&quot;</span></span><br><span class="line"><span class="comment">//s2[0] = &#x27;t&#x27;</span></span><br><span class="line">fmt.Println(s2)</span><br><span class="line"><span class="comment">//3.字符串的表示形式：</span></span><br><span class="line"><span class="comment">//（1）如果字符串中没有特殊字符，字符串的表示形式用双引号</span></span><br><span class="line"><span class="comment">//var s3 string = &quot;asdfasdfasdf&quot;</span></span><br><span class="line"><span class="comment">//（2）如果字符串中有特殊字符，字符串的表示形式用反引号 ``</span></span><br><span class="line"><span class="keyword">var</span> s4 <span class="type">string</span> = <span class="string">`</span></span><br><span class="line"><span class="string">左右同形，左小右大</span></span><br><span class="line"><span class="string">上下同形，上小下大</span></span><br><span class="line"><span class="string">左右等长，错位书写</span></span><br><span class="line"><span class="string">左边小时要偏上</span></span><br><span class="line"><span class="string">右边小时要下落</span></span><br><span class="line"><span class="string">点下有竖，点竖直对</span></span><br><span class="line"><span class="string">下有横竖横高竖低</span></span><br><span class="line"><span class="string">下有撇点，撇高点低</span></span><br><span class="line"><span class="string">    package main</span></span><br><span class="line"><span class="string">        import &quot;fmt&quot;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        func main()&#123;</span></span><br><span class="line"><span class="string">                //测试布尔类型的数值：</span></span><br><span class="line"><span class="string">                var flag01 bool = true</span></span><br><span class="line"><span class="string">                fmt.Println(flag01)</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">                var flag02 bool = false</span></span><br><span class="line"><span class="string">                fmt.Println(flag02)</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">                var flag03 bool = 5 &lt; 9</span></span><br><span class="line"><span class="string">                fmt.Println(flag03)</span></span><br><span class="line"><span class="string">        &#125;`</span></span><br><span class="line">fmt.Println(s4)</span><br><span class="line"><span class="comment">//4.字符串的拼接效果：</span></span><br><span class="line"><span class="keyword">var</span> s5 <span class="type">string</span> = <span class="string">&quot;abc&quot;</span> + <span class="string">&quot;def&quot;</span></span><br><span class="line">s5 += <span class="string">&quot;hijk&quot;</span></span><br><span class="line">fmt.Println(s5)</span><br><span class="line"><span class="comment">//当一个字符串过长的时候：注意：+保留在上一行的最后</span></span><br><span class="line"><span class="keyword">var</span> s6 <span class="type">string</span> = <span class="string">&quot;abc&quot;</span> + <span class="string">&quot;def&quot;</span> + <span class="string">&quot;abc&quot;</span> + <span class="string">&quot;def&quot;</span> + <span class="string">&quot;abc&quot;</span> + <span class="string">&quot;def&quot;</span> + <span class="string">&quot;abc&quot;</span> +</span><br><span class="line"><span class="string">&quot;def&quot;</span> + <span class="string">&quot;abc&quot;</span> + <span class="string">&quot;def&quot;</span> + <span class="string">&quot;abc&quot;</span> + <span class="string">&quot;def&quot;</span> + <span class="string">&quot;abc&quot;</span> + <span class="string">&quot;def&quot;</span> + <span class="string">&quot;abc&quot;</span> + <span class="string">&quot;def&quot;</span> +</span><br><span class="line"><span class="string">&quot;abc&quot;</span> + <span class="string">&quot;def&quot;</span> + <span class="string">&quot;abc&quot;</span> + <span class="string">&quot;def&quot;</span> + <span class="string">&quot;abc&quot;</span> + <span class="string">&quot;def&quot;</span> + <span class="string">&quot;abc&quot;</span> + <span class="string">&quot;def&quot;</span> + <span class="string">&quot;abc&quot;</span> +</span><br><span class="line"><span class="string">&quot;def&quot;</span> + <span class="string">&quot;abc&quot;</span> + <span class="string">&quot;def&quot;</span> + <span class="string">&quot;abc&quot;</span> + <span class="string">&quot;def&quot;</span> + <span class="string">&quot;abc&quot;</span> + <span class="string">&quot;def&quot;</span> + <span class="string">&quot;abc&quot;</span> + <span class="string">&quot;def&quot;</span> +</span><br><span class="line"><span class="string">&quot;abc&quot;</span> + <span class="string">&quot;def&quot;</span> + <span class="string">&quot;abc&quot;</span> + <span class="string">&quot;def&quot;</span></span><br><span class="line">fmt.Println(s6)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="字符串的常用包使用展示"><a href="#字符串的常用包使用展示" class="headerlink" title="(*)字符串的常用包使用展示:"></a>(*)字符串的常用包使用展示:</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介:"></a>简介:</h3><ul><li><strong>bytes</strong> 包操作 <code>[]byte</code>。因为字符串是只读的，因此逐步构创建字符串会导致很多分配和复制，使用 <code>bytes.Buffer</code> 类型会更高。</li><li><strong>strings</strong> 包提供 切割、索引、前缀、查找、替换 等功能。</li><li><strong>strconv</strong> 包提供 布尔型、整型数、浮点数 和对应字符串的相互转换，还提供了双引号转义相关的转换。</li><li><strong>unicode</strong> 包提供了 IsDigit、IsLetter、IsUpper、IsLower 等类似功能，用于给字符分类。</li></ul><p>如果 string 中包含汉字，要注意：</p><ul><li>UTF-8 编码中，<strong>一个汉字需要 3 个字节</strong>，通过 <code>len()</code> 获取的是字符串占据的<strong>字节数</strong>。</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">str1 := <span class="string">&quot;hello 世界&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>(str1)) <span class="comment">// 12</span></span><br></pre></td></tr></table></figure><ul><li>如果想要得到<strong>字符串本身的长度</strong>，可以将 string 转为 rune 数组再计算：</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">str2 := <span class="string">&quot;hello 世界&quot;</span></span><br><span class="line">fmt.Println(<span class="built_in">len</span>([]<span class="type">rune</span>(str2))) <span class="comment">// 8</span></span><br></pre></td></tr></table></figure><h3 id="字符串遍历"><a href="#字符串遍历" class="headerlink" title="字符串遍历"></a>字符串遍历</h3><blockquote><p><strong>byte</strong> 是 <strong>uint8</strong> 的别名</p><p><strong>rune</strong> 是 <strong>int32</strong> 的别名，相当于 Go 里面的 <strong>char</strong></p></blockquote><p>如果包含汉字，以下遍历方式会出现乱码：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">str := <span class="string">&quot;你好世界！&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(str); i++ &#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;%c&quot;</span>, str[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ä½ å¥½ä¸çï¼% </span></span><br></pre></td></tr></table></figure><ul><li><strong>解决方案1</strong>：转成 rune 切片再遍历</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">str := <span class="string">&quot;你好世界！&quot;</span></span><br><span class="line">newStr := []<span class="type">rune</span>(str)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(newStr); i++ &#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;%c&quot;</span>, newStr[i])</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 你好世界！</span></span><br></pre></td></tr></table></figure><ul><li><strong>解决方案2</strong>：使用 range 来遍历</li></ul><blockquote><p>range 按照字符遍历，前面的 for 按照字节遍历</p></blockquote><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">str := <span class="string">&quot;你好世界123&quot;</span></span><br><span class="line"><span class="keyword">for</span> index, value := <span class="keyword">range</span> str &#123;</span><br><span class="line">  fmt.Printf(<span class="string">&quot;index = %d value = %c\n&quot;</span>, index, value)</span><br><span class="line">&#125;</span><br><span class="line">index = <span class="number">0</span> value = 你</span><br><span class="line">index = <span class="number">3</span> value = 好</span><br><span class="line">index = <span class="number">6</span> value = 世</span><br><span class="line">index = <span class="number">9</span> value = 界</span><br><span class="line">index = <span class="number">12</span> value = <span class="number">1</span></span><br><span class="line">index = <span class="number">13</span> value = <span class="number">2</span></span><br><span class="line">index = <span class="number">14</span> value = <span class="number">3</span></span><br></pre></td></tr></table></figure><h3 id="strings包-简单操作"><a href="#strings包-简单操作" class="headerlink" title="strings包(简单操作)"></a>strings包(简单操作)</h3><p><strong>字符串比较</strong>：使用 <code>strings.Compare</code> 比较两个字符串的字典序</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">strings.Compare(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>) <span class="comment">// -1</span></span><br><span class="line">strings.Compare(<span class="string">&quot;baa&quot;</span>, <span class="string">&quot;abb&quot;</span>) <span class="comment">// 1</span></span><br><span class="line">strings.Compare(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;aaa&quot;</span>) <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p><strong>查找函数</strong>：使用 <code>strings.Index</code> 查找字符串中子串的位置（第 1 个），不存在返回 -1</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">strings.Index(<span class="string">&quot;hello world&quot;</span>, <span class="string">&quot;o&quot;</span>) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>类似的，使用 <code>strings.LastIndex</code> 查找字符串子串出现的最后一个位置，不存在返回 -1</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">strings.Index(<span class="string">&quot;hello world&quot;</span>, <span class="string">&quot;o&quot;</span>) <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p><strong>Count、Repeat</strong>：</p><p>使用 <code>strings.Count</code> 统计子串在整体中出现的次数：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">strings.Count(<span class="string">&quot;abc abc abab abc&quot;</span>, <span class="string">&quot;abc&quot;</span>) <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>使用 <code>strings.Repeat</code> 将字符串重复指定次数：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">strings.Repeat(<span class="string">&quot;abc&quot;</span>, <span class="number">3</span>) <span class="comment">// abcabcabc</span></span><br></pre></td></tr></table></figure><p><strong>Replace、Split、Join</strong>：</p><p><code>strings.Replace</code> 实现字符串替换</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">str := <span class="string">&quot;acaacccc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 局部替换 param3: 替换次数，&lt; 0 则全部替换</span></span><br><span class="line">strings.Replace(str, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="number">2</span>)  <span class="comment">// bcbacccc</span></span><br><span class="line">strings.Replace(str, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="number">-1</span>) <span class="comment">// bcbbcccc</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全部替换</span></span><br><span class="line">strings.ReplaceAll(str, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>)  <span class="comment">// bcbbcccc</span></span><br></pre></td></tr></table></figure><p><code>strings.Split</code> 实现字符串切割</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">str := <span class="string">&quot;abc,bbc,bbd&quot;</span></span><br><span class="line"></span><br><span class="line">slice := strings.Split(str, <span class="string">&quot;,&quot;</span>)</span><br><span class="line">fmt.Println(slice) <span class="comment">// [abc bbc bbd]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>strings.Join</code> 实现字符串拼接</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">slice := []<span class="type">string</span>&#123;<span class="string">&quot;aab&quot;</span>, <span class="string">&quot;aba&quot;</span>, <span class="string">&quot;baa&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">str := strings.Join(slice, <span class="string">&quot;,&quot;</span>)</span><br><span class="line">fmt.Println(str <span class="comment">// aab,aba,baa</span></span><br></pre></td></tr></table></figure><p>go语言好美啊!</p><h3 id="bytes-包-buffer"><a href="#bytes-包-buffer" class="headerlink" title="bytes 包(buffer)"></a>bytes 包(buffer)</h3><p>Buffer 是 bytes 包中定义的 <code>type Buffer struct &#123;...&#125;</code>，Bufer 是一个变长的可读可写的缓冲区。buffer缓冲区好神奇!</p><p><strong>创建缓冲器</strong>：<code>bytes.NewBufferString</code>、<code>bytes.NewBuffer</code></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">buf1 := bytes.NewBufferString(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">buf2 := bytes.NewBuffer([]<span class="type">byte</span>(<span class="string">&quot;hello&quot;</span>))</span><br><span class="line">buf3 := bytes.NewBuffer([]<span class="type">byte</span>&#123;<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;o&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v,%v,%v\n&quot;</span>, buf1, buf2, buf3)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v,%v,%v\n&quot;</span>, buf1.Bytes(), buf2.Bytes(), buf3.Bytes())</span><br><span class="line"></span><br><span class="line">buf4 := bytes.NewBufferString(<span class="string">&quot;&quot;</span>)</span><br><span class="line">buf5 := bytes.NewBuffer([]<span class="type">byte</span>&#123;&#125;)</span><br><span class="line">fmt.Println(buf4.Bytes(), buf5.Bytes())</span><br><span class="line">&#125;</span><br><span class="line">hello,hello,hello</span><br><span class="line">[<span class="number">104</span> <span class="number">101</span> <span class="number">108</span> <span class="number">108</span> <span class="number">111</span>],[<span class="number">104</span> <span class="number">101</span> <span class="number">108</span> <span class="number">108</span> <span class="number">111</span>],[<span class="number">104</span> <span class="number">101</span> <span class="number">108</span> <span class="number">108</span> <span class="number">111</span>]</span><br><span class="line">[] []</span><br></pre></td></tr></table></figure><p><strong>写入缓冲器</strong>：<code>Write</code>、<code>WriteString</code>、<code>WriteByte</code>、<code>WriteRune</code>、<code>WriteTo</code></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">buf := bytes.NewBufferString(<span class="string">&quot;a&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%v, %v\n&quot;</span>, buf.String(), buf.Bytes())</span><br><span class="line"><span class="comment">// a, [97]</span></span><br><span class="line"></span><br><span class="line">buf.Write([]<span class="type">byte</span>(<span class="string">&quot;b&quot;</span>)) <span class="comment">// Write</span></span><br><span class="line">buf.WriteString(<span class="string">&quot;c&quot;</span>)   <span class="comment">// WriteString</span></span><br><span class="line">buf.WriteByte(<span class="string">&#x27;d&#x27;</span>)     <span class="comment">// WriteByte</span></span><br><span class="line">buf.WriteRune(<span class="string">&#x27;e&#x27;</span>)     <span class="comment">// WriteRune</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;%v, %v\n&quot;</span>, buf.String(), buf.Bytes())</span><br><span class="line"><span class="comment">// abcde, [97 98 99 100 101]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>缓冲区原理介绍</strong>：Go 字节缓冲区底层以字节切片做存储，切片存在长度 len 与容量 cap</p><ul><li>缓冲区从长度 len 的位置开始写，当 len &gt; cap 时，会自动扩容</li><li>缓冲区从内置标记 off 位置开始读（off 始终记录读的起始位置）</li><li>当 off &#x3D;&#x3D; len 时，表明缓冲区已读完，读完就重置缓冲区 len &#x3D; off &#x3D; 0</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">byteSlice := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">20</span>)</span><br><span class="line">byteSlice[<span class="number">0</span>] = <span class="number">1</span>                                  <span class="comment">// 将缓冲区第一个字节置1</span></span><br><span class="line">byteBuffer := bytes.NewBuffer(byteSlice)          <span class="comment">// 创建20字节缓冲区 len = 20 off = 0</span></span><br><span class="line">c, _ := byteBuffer.ReadByte()                     <span class="comment">// off+=1</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;len:%d, c=%d\n&quot;</span>, byteBuffer.Len(), c) <span class="comment">// len = 20 off =1   打印c=1</span></span><br><span class="line">byteBuffer.Reset()                                <span class="comment">// len = 0 off = 0</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;len:%d\n&quot;</span>, byteBuffer.Len())          <span class="comment">// 打印len=0</span></span><br><span class="line">byteBuffer.Write([]<span class="type">byte</span>(<span class="string">&quot;hello byte buffer&quot;</span>))     <span class="comment">// 写缓冲区  len+=17</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;len:%d\n&quot;</span>, byteBuffer.Len())          <span class="comment">// 打印len=17</span></span><br><span class="line">byteBuffer.Next(<span class="number">4</span>)                                <span class="comment">// 跳过4个字节 off+=4</span></span><br><span class="line">c, _ = byteBuffer.ReadByte()                      <span class="comment">// 读第5个字节 off+=1</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;第5个字节:%d\n&quot;</span>, c)                       <span class="comment">// 打印:111(对应字母o)    len=17 off=5</span></span><br><span class="line">byteBuffer.Truncate(<span class="number">3</span>)                            <span class="comment">// 将未字节数置为3        len=off+3=8   off=5</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;len:%d\n&quot;</span>, byteBuffer.Len())          <span class="comment">// 打印len=3为未读字节数  上面len=8是底层切片长度</span></span><br><span class="line">byteBuffer.WriteByte(<span class="number">96</span>)                          <span class="comment">// len+=1=9 将y改成A</span></span><br><span class="line">byteBuffer.Next(<span class="number">3</span>)                                <span class="comment">// len=9 off+=3=8</span></span><br><span class="line">c, _ = byteBuffer.ReadByte()                      <span class="comment">// off+=1=9    c=96</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;第9个字节:%d\n&quot;</span>, c)                       <span class="comment">// 打印:96</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>缓冲区：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">buf := &amp;bytes.Buffer&#123;&#125;</span><br><span class="line"><span class="comment">// 写缓冲区</span></span><br><span class="line">buf.WriteString(<span class="string">&quot;abc?def&quot;</span>)</span><br><span class="line"><span class="comment">// 从缓冲区读（分隔符为 ?）</span></span><br><span class="line">str, _ := buf.ReadString(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;str = &quot;</span>, str)</span><br><span class="line">fmt.Println(<span class="string">&quot;buff = &quot;</span>, buf.String())</span><br><span class="line">&#125;</span><br><span class="line">str =  abc?</span><br><span class="line">buff =  def</span><br></pre></td></tr></table></figure><p><strong>缓冲区读数据</strong>：<code>Read</code>、<code>ReadByte</code>、<code>ReadByes</code>、<code>ReadString</code>、<code>ReadRune</code>、<code>ReadFrom</code></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">log.SetFlags(log.Lshortfile)</span><br><span class="line">buff := bytes.NewBufferString(<span class="string">&quot;123456789&quot;</span>)</span><br><span class="line">log.Println(<span class="string">&quot;buff = &quot;</span>, buff.String()) <span class="comment">// buff = 123456789</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//先创建一个四个字节的数组s</span></span><br><span class="line">s := <span class="built_in">make</span>([]<span class="type">byte</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">// 从缓冲区读取4个字节</span></span><br><span class="line">n, _ := buff.Read(s)</span><br><span class="line">log.Println(<span class="string">&quot;buff = &quot;</span>, buff.String()) <span class="comment">// buff =  56789</span></span><br><span class="line">log.Println(<span class="string">&quot;s = &quot;</span>, <span class="type">string</span>(s))        <span class="comment">// s =  1234</span></span><br><span class="line">log.Println(<span class="string">&quot;n = &quot;</span>, n)                <span class="comment">// n =  4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从缓冲区读取4个字节</span></span><br><span class="line">n, _ = buff.Read(s)</span><br><span class="line">log.Println(<span class="string">&quot;buff = &quot;</span>, buff.String()) <span class="comment">// buff =  9</span></span><br><span class="line">log.Println(<span class="string">&quot;s = &quot;</span>, <span class="type">string</span>(s))        <span class="comment">// s =  5678</span></span><br><span class="line">log.Println(<span class="string">&quot;n = &quot;</span>, n)                <span class="comment">// n =  4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 再读四个的话,会发现缓冲区本来只有一个9了,锁一个数组s就第一个被重新写入</span></span><br><span class="line">n, _ = buff.Read(s)</span><br><span class="line">log.Println(<span class="string">&quot;buff = &quot;</span>, buff.String()) <span class="comment">// buff =</span></span><br><span class="line">log.Println(<span class="string">&quot;s = &quot;</span>, <span class="type">string</span>(s))        <span class="comment">// s =  9678</span></span><br><span class="line">log.Println(<span class="string">&quot;n = &quot;</span>, n)                <span class="comment">// n = 1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">buff.Reset()</span><br><span class="line">buff.WriteString(<span class="string">&quot;abcdefg&quot;</span>)</span><br><span class="line">log.Println(<span class="string">&quot;buff = &quot;</span>, buff.String()) <span class="comment">// buff =  abcdefg</span></span><br><span class="line"></span><br><span class="line">b, _ := buff.ReadByte()</span><br><span class="line">log.Println(<span class="string">&quot;b = &quot;</span>, <span class="type">string</span>(b))        <span class="comment">// b =  a</span></span><br><span class="line">log.Println(<span class="string">&quot;buff = &quot;</span>, buff.String()) <span class="comment">// buff =  bcdefg</span></span><br><span class="line"></span><br><span class="line">b, _ = buff.ReadByte()</span><br><span class="line">log.Println(<span class="string">&quot;b = &quot;</span>, <span class="type">string</span>(b))        <span class="comment">// b =  b</span></span><br><span class="line">log.Println(<span class="string">&quot;buff = &quot;</span>, buff.String()) <span class="comment">// buff =  cdefg</span></span><br><span class="line"></span><br><span class="line">bs, _ := buff.ReadBytes(<span class="string">&#x27;e&#x27;</span>)</span><br><span class="line">log.Println(<span class="string">&quot;bs = &quot;</span>, <span class="type">string</span>(bs))      <span class="comment">// bs =  cde</span></span><br><span class="line">log.Println(<span class="string">&quot;buff = &quot;</span>, buff.String()) <span class="comment">// buff =  fg</span></span><br><span class="line"></span><br><span class="line">buff.Reset()</span><br><span class="line">buff.WriteString(<span class="string">&quot;编译输出GO&quot;</span>)</span><br><span class="line">r, l, _ := buff.ReadRune()</span><br><span class="line">log.Println(<span class="string">&quot;r = &quot;</span>, r, <span class="string">&quot;, l = &quot;</span>, l, <span class="string">&quot;, string(r) = &quot;</span>, <span class="type">string</span>(r))</span><br><span class="line"><span class="comment">// r =  32534 , l =  3 , string(r) =  编</span></span><br><span class="line"></span><br><span class="line">buff.Reset()</span><br><span class="line">buff.WriteString(<span class="string">&quot;qwer&quot;</span>)</span><br><span class="line">str, _ := buff.ReadString(<span class="string">&#x27;?&#x27;</span>)</span><br><span class="line">log.Println(<span class="string">&quot;str = &quot;</span>, str)            <span class="comment">// str =  qwer</span></span><br><span class="line">log.Println(<span class="string">&quot;buff = &quot;</span>, buff.String()) <span class="comment">// buff =</span></span><br><span class="line"></span><br><span class="line">buff.WriteString(<span class="string">&quot;qwer&quot;</span>)</span><br><span class="line">str, _ = buff.ReadString(<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">log.Println(<span class="string">&quot;str = &quot;</span>, str)            <span class="comment">// str =  qw</span></span><br><span class="line">log.Println(<span class="string">&quot;buff = &quot;</span>, buff.String()) <span class="comment">// buff =  er</span></span><br><span class="line"></span><br><span class="line">file, _ := os.Open(<span class="string">&quot;doc.go&quot;</span>)</span><br><span class="line">buff.Reset()</span><br><span class="line">buff.ReadFrom(file)</span><br><span class="line">log.Println(<span class="string">&quot;doc.go = &quot;</span>, buff.String()) <span class="comment">// doc.go =  123</span></span><br><span class="line"></span><br><span class="line">buff.Reset()</span><br><span class="line">buff.WriteString(<span class="string">&quot;中国人&quot;</span>)</span><br><span class="line">cbyte := buff.Bytes()</span><br><span class="line">log.Println(<span class="string">&quot;cbyte = &quot;</span>, cbyte) <span class="comment">// cbyte =  [228 184 173 229 155 189 228 186 186]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="strconv-包-转换-包括类型转化"><a href="#strconv-包-转换-包括类型转化" class="headerlink" title="strconv 包(转换,包括类型转化)"></a>strconv 包(转换,包括类型转化)</h3><p><strong>字符串转 []byte</strong>：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">sum := []<span class="type">byte</span>(<span class="string">&quot;hello&quot;</span>)</span><br></pre></td></tr></table></figure><p><strong>字符串 —&gt; 整数</strong>：使用 <code>strconv.Atoi</code> 或 <code>strconv.ParseInt</code></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 按照 10进制 转换，返回 int 类型</span></span><br><span class="line">i, _ := strconv.Atoi(<span class="string">&quot;33234&quot;</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, i) <span class="comment">// int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// param1：要转化的字符串</span></span><br><span class="line"><span class="comment">// param2：转换的进制，如 2,8,16,32</span></span><br><span class="line"><span class="comment">// param3：返回bit的大小（注意，字面量显示还是 int64）</span></span><br><span class="line">i2, _ := strconv.ParseInt(<span class="string">&quot;33234&quot;</span>, <span class="number">10</span>, <span class="number">0</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T\n&quot;</span>, i2) <span class="comment">// int64</span></span><br></pre></td></tr></table></figure><p><strong>字符串 —&gt; 浮点数</strong>：使用 <code>strconv.ParseFloat</code></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 参数类似 ParseInt</span></span><br><span class="line">val, _ := strconv.ParseFloat(<span class="string">&quot;33.33&quot;</span>, <span class="number">32</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;type: %T\n&quot;</span>, val) <span class="comment">// type: float64</span></span><br><span class="line"></span><br><span class="line">val2, _ := strconv.ParseFloat(<span class="string">&quot;33.33&quot;</span>, <span class="number">64</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;type: %T\n&quot;</span>, val2) <span class="comment">// type: float64</span></span><br></pre></td></tr></table></figure><p><strong>整数 —&gt; 字符串</strong>：使用 <code>strconv.Iota</code> 或 <code>strconv.FormatInt</code></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">num := <span class="number">180</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认按照10进制转换</span></span><br><span class="line">f1 := strconv.Itoa(num)</span><br><span class="line"></span><br><span class="line"><span class="comment">// param1: 要转换的数字(必须是int64类型)</span></span><br><span class="line"><span class="comment">// param2: 转换的进制</span></span><br><span class="line">f2 := strconv.FormatInt(<span class="type">int64</span>(num), <span class="number">10</span>)</span><br></pre></td></tr></table></figure><p><strong>浮点数 —&gt; 整数</strong>：使用 <code>strconv.FormatFloat</code></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">num := <span class="number">23423134.323422</span></span><br><span class="line">fmt.Println(strconv.FormatFloat(<span class="type">float64</span>(num), <span class="string">&#x27;f&#x27;</span>, <span class="number">-1</span>, <span class="number">64</span>)) <span class="comment">// 普通模式</span></span><br><span class="line">fmt.Println(strconv.FormatFloat(<span class="type">float64</span>(num), <span class="string">&#x27;b&#x27;</span>, <span class="number">-1</span>, <span class="number">64</span>)) <span class="comment">// 二进制模式</span></span><br><span class="line">fmt.Println(strconv.FormatFloat(<span class="type">float64</span>(num), <span class="string">&#x27;e&#x27;</span>, <span class="number">-1</span>, <span class="number">64</span>)) <span class="comment">// 科学记数法</span></span><br><span class="line">fmt.Println(strconv.FormatFloat(<span class="type">float64</span>(num), <span class="string">&#x27;E&#x27;</span>, <span class="number">-1</span>, <span class="number">64</span>)) <span class="comment">// 同上，显示为E</span></span><br><span class="line">fmt.Println(strconv.FormatFloat(<span class="type">float64</span>(num), <span class="string">&#x27;g&#x27;</span>, <span class="number">-1</span>, <span class="number">64</span>)) <span class="comment">// 指数大时用科学记数，否则普通模式</span></span><br><span class="line">fmt.Println(strconv.FormatFloat(<span class="type">float64</span>(num), <span class="string">&#x27;G&#x27;</span>, <span class="number">-1</span>, <span class="number">64</span>)) <span class="comment">// 同上，显示为E</span></span><br><span class="line"></span><br><span class="line"><span class="number">23423134.323422</span></span><br><span class="line"><span class="number">6287599743057036</span>p<span class="number">-28</span></span><br><span class="line"><span class="number">2.3423134323422e+07</span></span><br><span class="line"><span class="number">2.3423134323422E+07</span></span><br><span class="line"><span class="number">2.3423134323422e+07</span></span><br><span class="line"><span class="number">2.3423134323422E+07</span></span><br></pre></td></tr></table></figure><p><strong>字符串 和 bool 类型转换</strong>：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// string --&gt; bool</span></span><br><span class="line">flagBool, _ := strconv.ParseBool(<span class="string">&quot;true&quot;</span>)</span><br><span class="line"><span class="comment">// It accepts 1, t, T, TRUE, true, True, 0, f, F, FALSE, false, False.</span></span><br><span class="line"><span class="comment">// Any other value returns an error.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// bool --&gt; string</span></span><br><span class="line">flagStr := strconv.FormatBool(<span class="literal">true</span>)</span><br></pre></td></tr></table></figure><h3 id="unicode包-就是判断字符串的一些性质的"><a href="#unicode包-就是判断字符串的一些性质的" class="headerlink" title="unicode包(就是判断字符串的一些性质的)"></a>unicode包(就是判断字符串的一些性质的)</h3><p><code>/src/unicode/letter.go</code>：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断字符 r 是否为大写格式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsUpper</span><span class="params">(r <span class="type">rune</span>)</span></span> <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断字符 r 是否为小写格式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsLower</span><span class="params">(r <span class="type">rune</span>)</span></span> <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断字符 r 是否为 Unicode 规定的 Title 字符</span></span><br><span class="line"><span class="comment">// 大部分字符的 Title 格式就是其大写格式</span></span><br><span class="line"><span class="comment">// 只有少数字符的 Title 格式是特殊字符</span></span><br><span class="line"><span class="comment">// 这里判断的就是特殊字符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsTitle</span><span class="params">(r <span class="type">rune</span>)</span></span> <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ToUpper 将字符 r 转换为大写格式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ToUpper</span><span class="params">(r <span class="type">rune</span>)</span></span> <span class="type">rune</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ToLower 将字符 r 转换为小写格式</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ToLower</span><span class="params">(r <span class="type">rune</span>)</span></span> <span class="type">rune</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ToTitle 将字符 r 转换为 Title 格式</span></span><br><span class="line"><span class="comment">// 大部分字符的 Title 格式就是其大写格式</span></span><br><span class="line"><span class="comment">// 只有少数字符的 Title 格式是特殊字符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ToTitle</span><span class="params">(r <span class="type">rune</span>)</span></span> <span class="type">rune</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// To 将字符 r 转换为指定的格式</span></span><br><span class="line"><span class="comment">// _case 取值：UpperCase、LowerCase、TitleCase</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">To</span><span class="params">(_case <span class="type">int</span>, r <span class="type">rune</span>)</span></span> <span class="type">rune</span></span><br><span class="line"><span class="number">1234567891011121314151617181920212223242526</span></span><br></pre></td></tr></table></figure><p><code>/src/unicode/digit.go</code>：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IsDigit 判断 r 是否为一个十进制的数字字符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsDigit</span><span class="params">(r <span class="type">rune</span>)</span></span> <span class="type">bool</span></span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p><code>/src/unicode/graphic.go</code>：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// IsNumber 判断 r 是否为一个数字字符 (类别 N)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsNumber</span><span class="params">(r <span class="type">rune</span>)</span></span> <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IsLetter 判断 r 是否为一个字母字符 (类别 L)</span></span><br><span class="line"><span class="comment">// 汉字也是一个字母字符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsLetter</span><span class="params">(r <span class="type">rune</span>)</span></span> <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IsSpace 判断 r 是否为一个空白字符</span></span><br><span class="line"><span class="comment">// 在 Latin-1 字符集中，空白字符为：\t, \n, \v, \f, \r,</span></span><br><span class="line"><span class="comment">// 空格, U+0085 (NEL), U+00A0 (NBSP)</span></span><br><span class="line"><span class="comment">// 其它空白字符的定义有“类别 Z”和“Pattern_White_Space 属性”</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsSpace</span><span class="params">(r <span class="type">rune</span>)</span></span> <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IsControl 判断 r 是否为一个控制字符</span></span><br><span class="line"><span class="comment">// Unicode 类别 C 包含更多字符，比如代理字符</span></span><br><span class="line"><span class="comment">// 使用 Is(C, r) 来测试它们</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsControl</span><span class="params">(r <span class="type">rune</span>)</span></span> <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IsGraphic 判断字符 r 是否为一个“图形字符”</span></span><br><span class="line"><span class="comment">// “图形字符”包括字母、标记、数字、标点、符号、空格</span></span><br><span class="line"><span class="comment">// 他们分别对应于 L、M、N、P、S、Zs 类别</span></span><br><span class="line"><span class="comment">// 这些类别是 RangeTable 类型，存储了相应类别的字符范围</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsGraphic</span><span class="params">(r <span class="type">rune</span>)</span></span> <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IsPrint 判断字符 r 是否为 Go 所定义的“可打印字符”</span></span><br><span class="line"><span class="comment">// “可打印字符”包括字母、标记、数字、标点、符号和 ASCII 空格</span></span><br><span class="line"><span class="comment">// 他们分别对应于 L, M, N, P, S 类别和 ASCII 空格</span></span><br><span class="line"><span class="comment">// “可打印字符”和“图形字符”基本是相同的，不同之处在于</span></span><br><span class="line"><span class="comment">// “可打印字符”只包含 Zs 类别中的 ASCII 空格（U+0020）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsPrint</span><span class="params">(r <span class="type">rune</span>)</span></span> <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IsPunct 判断 r 是否为一个标点字符 (类别 P)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsPunct</span><span class="params">(r <span class="type">rune</span>)</span></span> <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IsSymbol 判断 r 是否为一个符号字符</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsSymbol</span><span class="params">(r <span class="type">rune</span>)</span></span> <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IsMark 判断 r 是否为一个 mark 字符 (类别 M)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsMark</span><span class="params">(r <span class="type">rune</span>)</span></span> <span class="type">bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// IsOneOf 判断 r 是否在 set 范围内</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">IsOneOf</span><span class="params">(set []*RangeTable, r <span class="type">rune</span>)</span></span> <span class="type">bool</span></span><br></pre></td></tr></table></figure><h3 id="基本数据类型的默认值："><a href="#基本数据类型的默认值：" class="headerlink" title="基本数据类型的默认值："></a>基本数据类型的默认值：</h3><p>【1】在Golang中数据类型都有一个默认值，当程序员没有赋值时，就会保留默认值(默认值又叫零值)。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331161022555.png" alt="image-20220331161022555"></p><h3 id="基本类型之间的转换："><a href="#基本类型之间的转换：" class="headerlink" title="基本类型之间的转换："></a>基本类型之间的转换：</h3><p>【1】Go在不同类型的变量之间赋值时需要显式转换，并且只有显式转换(强制转换)。<br>【2】语法：<br>表达式T(v)将值v转换为类型T<br>T : 就是数据类型<br>v : 就是需要转换的变量的一个值</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//进行类型转换：</span></span><br><span class="line">        <span class="keyword">var</span> n1 <span class="type">int</span> = <span class="number">100</span></span><br><span class="line">        <span class="comment">//var n2 float32 = n1  在这里自动转换不好使，比如显式转换</span></span><br><span class="line">        fmt.Println(n1)</span><br><span class="line">        <span class="comment">//fmt.Println(n2)</span></span><br><span class="line">        <span class="keyword">var</span> n2 <span class="type">float32</span> = <span class="type">float32</span>(n1)</span><br><span class="line">        fmt.Println(n2)</span><br><span class="line">        <span class="comment">//注意：n1的类型其实还是int类型，只是将n1的值100转为了float32而已，n1还是int的类型</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;%T&quot;</span>,n1)  <span class="comment">//int</span></span><br><span class="line">        fmt.Println()</span><br><span class="line">        <span class="comment">//将int64转为int8的时候，编译不会出错的，但是会数据的溢出</span></span><br><span class="line">        <span class="keyword">var</span> n3 <span class="type">int64</span> = <span class="number">888888</span></span><br><span class="line">        <span class="keyword">var</span> n4 <span class="type">int8</span> = <span class="type">int8</span>(n3)</span><br><span class="line">        fmt.Println(n4)<span class="comment">//56</span></span><br><span class="line">        <span class="keyword">var</span> n5 <span class="type">int32</span> = <span class="number">12</span></span><br><span class="line">        <span class="keyword">var</span> n6 <span class="type">int64</span> = <span class="type">int64</span>(n5) + <span class="number">30</span>  <span class="comment">//一定要匹配=左右的数据类型</span></span><br><span class="line">        fmt.Println(n5)</span><br><span class="line">        fmt.Println(n6)</span><br><span class="line">        <span class="keyword">var</span> n7 <span class="type">int64</span> = <span class="number">12</span></span><br><span class="line">        <span class="keyword">var</span> n8 <span class="type">int8</span> = <span class="type">int8</span>(n7) + <span class="number">127</span>  <span class="comment">//编译通过，但是结果可能会溢出</span></span><br><span class="line">        <span class="comment">//var n9 int8 = int8(n7) + 128 //编译不会通过</span></span><br><span class="line">        fmt.Println(n8)</span><br><span class="line">        <span class="comment">//fmt.Println(n9)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="基本数据类型转换成string"><a href="#基本数据类型转换成string" class="headerlink" title="基本数据类型转换成string"></a>基本数据类型转换成string</h3><p>【1】基本数据类型和string的转换介绍在程序开发中，我们经常需要将基本数据类型转成string类型。或者将string类型转成基本数据类型。</p><p>【2】基本类型转string类型方式1:fmt.Sprintf(“%参数”,表达式)   —》 重点练习这个，推荐方式方式2:使用strconv包的函数<br>【3】代码测试：</p><p>方式一:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">fmt.Sprintf(<span class="string">&quot;%参数&quot;</span>,参数)</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> n1 <span class="type">int</span> = <span class="number">19</span></span><br><span class="line"><span class="keyword">var</span> n2 <span class="type">float32</span> = <span class="number">4.78</span></span><br><span class="line"><span class="keyword">var</span> n3 <span class="type">bool</span> = <span class="literal">false</span></span><br><span class="line"><span class="keyword">var</span> n4 <span class="type">byte</span> = <span class="string">&#x27;a&#x27;</span></span><br><span class="line"><span class="keyword">var</span> s1 <span class="type">string</span> = fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, n1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;s1对应的类型是：%T ，s1 = %q \n&quot;</span>, s1, s1)</span><br><span class="line"><span class="keyword">var</span> s2 <span class="type">string</span> = fmt.Sprintf(<span class="string">&quot;%f&quot;</span>, n2)</span><br><span class="line">fmt.Printf(<span class="string">&quot;s2对应的类型是：%T ，s2 = %q \n&quot;</span>, s2, s2)</span><br><span class="line"><span class="keyword">var</span> s3 <span class="type">string</span> = fmt.Sprintf(<span class="string">&quot;%t&quot;</span>, n3)</span><br><span class="line">fmt.Printf(<span class="string">&quot;s3对应的类型是：%T ，s3 = %q \n&quot;</span>, s3, s3)</span><br><span class="line"><span class="keyword">var</span> s4 <span class="type">string</span> = fmt.Sprintf(<span class="string">&quot;%c&quot;</span>, n4)</span><br><span class="line">fmt.Printf(<span class="string">&quot;s4对应的类型是：%T ，s4 = %q \n&quot;</span>, s4, s4)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s5 <span class="type">string</span> = fmt.Sprintf(<span class="string">&quot;%d&quot;</span>, <span class="number">12</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;s4对应的类型是：%T ，s5 = %q \n&quot;</span>, s5, s5)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>方式二</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331162349039.png" alt="image-20220331162349039"></p><p>用了一下go包</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> n1 <span class="type">int</span> = <span class="number">18</span></span><br><span class="line"><span class="keyword">var</span> s1 <span class="type">string</span> = strconv.FormatInt(<span class="type">int64</span>(n1), <span class="number">10</span>) <span class="comment">//参数：第一个参数必须转为int64类型 ，第二个参数指定字面值的进制形式为十进制</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s1对应的类型是：%T ，s1 = %q \n&quot;</span>, s1, s1)</span><br><span class="line"><span class="keyword">var</span> n2 <span class="type">float64</span> = <span class="number">4.29</span></span><br><span class="line"><span class="keyword">var</span> s2 <span class="type">string</span> = strconv.FormatFloat(n2, <span class="string">&#x27;f&#x27;</span>, <span class="number">9</span>, <span class="number">64</span>)</span><br><span class="line"><span class="comment">//第二个参数：&#x27;f&#x27;（-ddd.dddd）  第三个参数：9 保留小数点后面9位  第四个参数：表示这个小数是float64类型</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;s2对应的类型是：%T ，s2 = %q \n&quot;</span>, s2, s2)</span><br><span class="line"><span class="keyword">var</span> n3 <span class="type">bool</span> = <span class="literal">true</span></span><br><span class="line"><span class="keyword">var</span> s3 <span class="type">string</span> = strconv.FormatBool(n3)</span><br><span class="line">fmt.Printf(<span class="string">&quot;s3对应的类型是：%T ，s3 = %q \n&quot;</span>, s3, s3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="string转换成基本数据类型"><a href="#string转换成基本数据类型" class="headerlink" title="string转换成基本数据类型"></a>string转换成基本数据类型</h3><p>【1】string类型转基本类型方式:使用strconv包的函数  </p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331162624566.png" alt="image-20220331162624566"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331163142685.png" alt="image-20220331163142685"></p><p>ParseBool的源码:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> strconv</span><br><span class="line"></span><br><span class="line"><span class="comment">// ParseBool returns the boolean value represented by the string.</span></span><br><span class="line"><span class="comment">// It accepts 1, t, T, TRUE, true, True, 0, f, F, FALSE, false, False.</span></span><br><span class="line"><span class="comment">// Any other value returns an error.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ParseBool</span><span class="params">(str <span class="type">string</span>)</span></span> (<span class="type">bool</span>, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> str &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;1&quot;</span>, <span class="string">&quot;t&quot;</span>, <span class="string">&quot;T&quot;</span>, <span class="string">&quot;true&quot;</span>, <span class="string">&quot;TRUE&quot;</span>, <span class="string">&quot;True&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>, <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;0&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;F&quot;</span>, <span class="string">&quot;false&quot;</span>, <span class="string">&quot;FALSE&quot;</span>, <span class="string">&quot;False&quot;</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>, syntaxError(<span class="string">&quot;ParseBool&quot;</span>, str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有返回error,可以用<code>_</code>来忽略掉</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//string--&gt;&gt;&gt;bool</span></span><br><span class="line"><span class="keyword">var</span> s1 <span class="type">string</span> = <span class="string">&quot;true&quot;</span></span><br><span class="line"><span class="keyword">var</span> b <span class="type">bool</span></span><br><span class="line"><span class="comment">//ParseBool这个函数的返回值有两个：(value bool, err error)</span></span><br><span class="line"><span class="comment">//value就是我们得到的布尔类型的数据，err出现的错误</span></span><br><span class="line"><span class="comment">//我们只关注得到的布尔类型的数据，err可以用_直接忽略</span></span><br><span class="line">b, _ = strconv.ParseBool(s1)</span><br><span class="line">fmt.Printf(<span class="string">&quot;b的类型是：%T,b=%v \n&quot;</span>, b, b)</span><br><span class="line"><span class="comment">//string---&gt;&gt;&gt;int64</span></span><br><span class="line"><span class="keyword">var</span> s2 <span class="type">string</span> = <span class="string">&quot;19&quot;</span></span><br><span class="line"><span class="keyword">var</span> num1 <span class="type">int64</span></span><br><span class="line">num1, _ = strconv.ParseInt(s2, <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;num1的类型是：%T,num1=%v \n&quot;</span>, num1, num1)</span><br><span class="line"><span class="comment">//string--&gt;&gt;&gt;float32/float64</span></span><br><span class="line"><span class="keyword">var</span> s3 <span class="type">string</span> = <span class="string">&quot;3.14&quot;</span></span><br><span class="line"><span class="keyword">var</span> f1 <span class="type">float64</span></span><br><span class="line">f1, _ = strconv.ParseFloat(s3, <span class="number">64</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;f1的类型是：%T,f1=%v \n&quot;</span>, f1, f1)</span><br><span class="line"><span class="comment">//注意：string向基本数据类型转换的时候，一定要确保string类型能够转成有效的数据类型，否则最后得到的结果就是按照对应类型的默认值输出</span></span><br><span class="line"><span class="keyword">var</span> s4 <span class="type">string</span> = <span class="string">&quot;golang&quot;</span></span><br><span class="line"><span class="keyword">var</span> b1 <span class="type">bool</span></span><br><span class="line">b1, _ = strconv.ParseBool(s4)</span><br><span class="line">fmt.Printf(<span class="string">&quot;b1的类型是：%T,b1=%v \n&quot;</span>, b1, b1)</span><br><span class="line"><span class="keyword">var</span> s5 <span class="type">string</span> = <span class="string">&quot;golang&quot;</span></span><br><span class="line"><span class="keyword">var</span> num2 <span class="type">int64</span></span><br><span class="line">num2, _ = strconv.ParseInt(s5, <span class="number">10</span>, <span class="number">64</span>)</span><br><span class="line">fmt.Printf(<span class="string">&quot;num2的类型是：%T,num2=%v \n&quot;</span>, num2, num2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ps:前面都是主要讲得基本数据类型</p><h3 id="复杂数据类型"><a href="#复杂数据类型" class="headerlink" title="复杂数据类型:"></a>复杂数据类型:</h3><h4 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h4><p>【1】基本数据类型和内存：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line">        <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> age <span class="type">int</span> = <span class="number">18</span></span><br><span class="line">        <span class="comment">//&amp;符号+变量 就可以获取这个变量内存的地址</span></span><br><span class="line">        fmt.Println(&amp;age) <span class="comment">//0xc0000a2058</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331163606242.png" alt="image-20220331163606242"></p><p>【2】指针变量：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line">        <span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> age <span class="type">int</span> = <span class="number">18</span></span><br><span class="line">        <span class="comment">//&amp;符号+变量 就可以获取这个变量内存的地址</span></span><br><span class="line">        fmt.Println(&amp;age) <span class="comment">//0xc0000a2058</span></span><br><span class="line">        <span class="comment">//定义一个指针变量：</span></span><br><span class="line">        <span class="comment">//var代表要声明一个变量</span></span><br><span class="line">        <span class="comment">//ptr 指针变量的名字</span></span><br><span class="line">        <span class="comment">//ptr对应的类型是：*int 是一个指针类型 （可以理解为 指向int类型的指针）</span></span><br><span class="line">        <span class="comment">//&amp;age就是一个地址，是ptr变量的具体的值</span></span><br><span class="line">        <span class="keyword">var</span> ptr *<span class="type">int</span> = &amp;age</span><br><span class="line">        fmt.Println(ptr)</span><br><span class="line">        fmt.Println(<span class="string">&quot;ptr本身这个存储空间的地址为：&quot;</span>,&amp;ptr)</span><br><span class="line">        <span class="comment">//想获取ptr这个指针或者这个地址指向的那个数据：</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;ptr指向的数值为：%v&quot;</span>,*ptr) <span class="comment">//ptr指向的数值为：18</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331163620487.png" alt="image-20220331163620487"></p><p>【3】可以通过指针改变指向值</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> num <span class="type">int</span> = <span class="number">10</span></span><br><span class="line">        fmt.Println(num)</span><br><span class="line">        <span class="keyword">var</span> ptr *<span class="type">int</span> = &amp;num</span><br><span class="line">        *ptr = <span class="number">20</span></span><br><span class="line">        fmt.Println(num)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br><span class="line">20</span><br></pre></td></tr></table></figure><p>【4】指针变量接收的一定是地址值</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331163907215.png" alt="image-20220331163907215"></p><p>【5】指针变量的地址不可以不匹配</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331163933235.png" alt="image-20220331163933235"></p><p>PS:*float32意味着这个指针指向的是float32类型的数据，但是&amp;num对应的是int类型的不可以。</p><p>就是和c语言的指针一样的，<del>我c也学得不是很好</del></p><h3 id="标识符："><a href="#标识符：" class="headerlink" title="标识符："></a>标识符：</h3><p>【1】标识符：读音  biao zhi fu</p><p>【2】什么是标识符？      变量，方法等,只要是起名字的地方,那个<strong>名字</strong>就是标识符  var age int &#x3D; 19  var price float64 &#x3D; 9.8</p><p>【3】标识符定义规则：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.三个可以（组成部分）：数字，字母，下划线_  </span><br><span class="line">2.四个不可以：不可以以数字开头，严格区分大小写，不能包含空格，不可以使用Go中的保留关键字 </span><br><span class="line">3.见名知意：增加可读性</span><br><span class="line">4.下划线&quot;_&quot;本身在Go中是一个特殊的标识符，称为空标识符。可以代表任何其它的标识符，但是它对应的值会被忽略(比如:忽略某个返回值)。所以仅能被作为**占位符**使用，不能单独作为标识符使用。</span><br><span class="line">就像刚刚用`_`来忽略error的返回值</span><br><span class="line">5.可以用如下形式，但是不建议： var int int = 10  (int,float32,float64等不算是保留关键字，但是也尽量不要使用)</span><br><span class="line">6.长度无限制，但是不建议太长  asdfasdfasdfasdfasdfasdfasdfasdfasdfasdfasfd</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="起名规则"><a href="#起名规则" class="headerlink" title="起名规则:"></a>起名规则:</h4><p>（1）包名:尽量保持package的名字和目录保持一致，尽量采取有意义的包名，简短，有意义，和标准库不要冲突</p><p>1.为什么之前在定义源文件的时候，一般我们都用package main 包 ？main包是一个程序的入口包，所以你main函数它所在的包建议定义为main包，如果不定义为main包，那么就不能得到可执行文件。</p><p>2.尽量保持package的名字和目录保持一致</p><p>3.和标准库不要冲突</p><p>（2）变量名、函数名、常量名 : 采用驼峰法。</p><p>就是单词按照大写区分开 </p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stuNameDetail <span class="type">string</span> = <span class="string">&#x27;lili&#x27;</span></span><br></pre></td></tr></table></figure><p>（3）如果变量名、函数名、常量名首字母大写，则可以被其他的包访问;<br>         如果首字母小写，则只能在本包中使用  <strong>（利用首字母大写小写完成权限控制）</strong></p><p>注意：<br>import导入语句通常放在文件开头包声明语句的下面。<br>导入的包名需要使用双引号包裹起来。<br>包名是从GOPATH后开始计算的，使用&#x2F;进行路径分隔。</p><p>要导包的程序:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;helloworld/test02/demo1&quot;</span><span class="comment">//这里就是导包路径</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(demo1.N3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>被导的包:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//package main</span></span><br><span class="line"><span class="keyword">package</span> demo1</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n1 = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> n2 = <span class="number">1.89</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">N3 = <span class="number">699</span></span><br><span class="line">n4 = <span class="string">&quot;ladidol&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>【1】关键字就是程序发明者规定的有特殊含义的单词，又叫保留字。<br>go语言中一共有25个关键字。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331180311229.png" alt="image-20220331180311229"></p><p>【2】预定义标识符：一共36个预定标识符，包含基础数据类型和系统内嵌函数 </p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331180342537.png" alt="image-20220331180342537"></p><h2 id="2）运算符"><a href="#2）运算符" class="headerlink" title="2）运算符"></a>2）运算符</h2><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><p>【1】算术运算符：+ ，-，*，&#x2F;，%，++，–</p><p>【2】介绍：算术运算符是对数值类型的变量进行运算的，比如，加减乘除。</p><p>【3】代码展示：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//+加号：</span></span><br><span class="line"><span class="comment">//1.正数 2.相加操作  3.字符串拼接</span></span><br><span class="line"><span class="keyword">var</span> n1 <span class="type">int</span> = +<span class="number">10</span></span><br><span class="line">fmt.Println(n1)</span><br><span class="line"><span class="keyword">var</span> n2 <span class="type">int</span> = <span class="number">4</span> + <span class="number">7</span></span><br><span class="line">fmt.Println(n2)</span><br><span class="line"><span class="keyword">var</span> s1 <span class="type">string</span> = <span class="string">&quot;abc&quot;</span> + <span class="string">&quot;def&quot;</span></span><br><span class="line">fmt.Println(s1)</span><br><span class="line"><span class="comment">// /除号：</span></span><br><span class="line">fmt.Println(<span class="number">10</span> + <span class="number">123</span>)</span><br><span class="line">fmt.Println(n1 + n2)</span><br><span class="line">fmt.Println(<span class="number">10</span> / <span class="number">3</span>)   <span class="comment">//两个int类型数据运算，结果一定为整数类型</span></span><br><span class="line">fmt.Println(<span class="number">10.0</span> / <span class="number">3</span>) <span class="comment">//浮点类型参与运算，结果为浮点类型</span></span><br><span class="line"><span class="comment">// % 取模  等价公式： a%b=a-a/b*b</span></span><br><span class="line">fmt.Println(<span class="number">10</span> % <span class="number">3</span>) <span class="comment">// 10%3= 10-10/3*3 = 1</span></span><br><span class="line">fmt.Println(<span class="number">-10</span> % <span class="number">3</span>)</span><br><span class="line">fmt.Println(<span class="number">10</span> % <span class="number">-3</span>)</span><br><span class="line">fmt.Println(<span class="number">-10</span> % <span class="number">-3</span>)</span><br><span class="line"><span class="comment">//++自增操作：</span></span><br><span class="line"><span class="keyword">var</span> a <span class="type">int</span> = <span class="number">10</span></span><br><span class="line">a++</span><br><span class="line">fmt.Println(a)</span><br><span class="line">a--</span><br><span class="line">fmt.Println(a)</span><br><span class="line"><span class="comment">//++ 自增 加1操作，--自减，减1操作</span></span><br><span class="line"><span class="comment">//go语言里，++，--操作非常简单，只能单独使用，不能参与到运算中去</span></span><br><span class="line"><span class="comment">//go语言里，++，--只能在变量的后面，不能写在变量的前面 --a  ++a  错误写法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>【1】赋值运算符:&#x3D;,+&#x3D;，-&#x3D;，*&#x3D;，&#x2F;&#x3D;,%&#x3D;</p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><p>【1】关系运算符:&#x3D;&#x3D;,!&#x3D;,&gt;,&lt;,&gt; &#x3D;，&lt;&#x3D;    关系运算符的结果都是bool型，也就是要么是true，要么是false</p><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><p>【1】逻辑运算符:&amp;&amp;(逻辑与&#x2F;短路与)，||（逻辑或&#x2F;短路或），!（逻辑非）</p><p>没有<code>|</code>or<code>&amp;</code>的运算符,现在还不知道怎么使用</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331185602966.png" alt="image-20220331185602966"></p><h3 id="等等"><a href="#等等" class="headerlink" title="等等"></a>等等</h3><h3 id="运算符优先级表"><a href="#运算符优先级表" class="headerlink" title="运算符优先级表"></a>运算符优先级表</h3><p>Go语言有几十种运算符，被分成十几个级别，有的运算符优先级不同，有的运算符优先级相同，请看下表。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331190443469.png" alt="image-20220331190443469"></p><p><strong>一句话：为了提高优先级，可以加（）</strong></p><h3 id="终端输入函数"><a href="#终端输入函数" class="headerlink" title="终端输入函数"></a>终端输入函数</h3><p>【1】介绍：在编程中，需要接收用户输入的数据，就可以使用键盘输入语句来获取。<br>【2】API：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331190619737.png" alt="image-20220331190619737"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331190629503.png" alt="image-20220331190629503"></p><p>【3】代码练习：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//实现功能：键盘录入学生的年龄，姓名，成绩，是否是VIP</span></span><br><span class="line">        <span class="comment">//方式1：Scanln</span></span><br><span class="line">        <span class="keyword">var</span> age <span class="type">int</span></span><br><span class="line">        <span class="comment">// fmt.Println(&quot;请录入学生的年龄：&quot;)</span></span><br><span class="line">        <span class="comment">//传入age的地址的目的：在Scanln函数中，对地址中的值进行改变的时候，实际外面的age被影响了</span></span><br><span class="line">        <span class="comment">//fmt.Scanln(&amp;age)//录入数据的时候，类型一定要匹配，因为底层会自动判定类型的</span></span><br><span class="line">        <span class="keyword">var</span> name <span class="type">string</span></span><br><span class="line">        <span class="comment">// fmt.Println(&quot;请录入学生的姓名：&quot;)</span></span><br><span class="line">        <span class="comment">// fmt.Scanln(&amp;name)</span></span><br><span class="line">        <span class="keyword">var</span> score <span class="type">float32</span></span><br><span class="line">        <span class="comment">// fmt.Println(&quot;请录入学生的成绩：&quot;)</span></span><br><span class="line">        <span class="comment">// fmt.Scanln(&amp;score)</span></span><br><span class="line">        <span class="keyword">var</span> isVIP <span class="type">bool</span></span><br><span class="line">        <span class="comment">// fmt.Println(&quot;请录入学生是否为VIP：&quot;)</span></span><br><span class="line">        <span class="comment">// fmt.Scanln(&amp;isVIP)</span></span><br><span class="line">        <span class="comment">//将上述数据在控制台打印输出：</span></span><br><span class="line">        <span class="comment">//fmt.Printf(&quot;学生的年龄为：%v,姓名为：%v,成绩为：%v,是否为VIP:%v&quot;,age,name,score,isVIP)</span></span><br><span class="line">        <span class="comment">//方式2：Scanf</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;请录入学生的年龄，姓名，成绩，是否是VIP，使用空格进行分隔&quot;</span>)</span><br><span class="line">        fmt.Scanf(<span class="string">&quot;%d %s %f %t&quot;</span>,&amp;age,&amp;name,&amp;score,&amp;isVIP)</span><br><span class="line">        <span class="comment">//将上述数据在控制台打印输出：</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;学生的年龄为：%v,姓名为：%v,成绩为：%v,是否为VIP:%v&quot;</span>,age,name,score,isVIP)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3）流程控制："><a href="#3）流程控制：" class="headerlink" title="3）流程控制："></a>3）流程控制：</h2><p>和C语言很类似，就是少了小括号：</p><h3 id="if语句："><a href="#if语句：" class="headerlink" title="if语句："></a>if语句：</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">var</span> score <span class="type">int</span> = <span class="number">18</span></span><br><span class="line"><span class="keyword">if</span> score &gt; <span class="number">10</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> score &gt; <span class="number">6</span>&#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;bbb&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch语句："><a href="#switch语句：" class="headerlink" title="switch语句："></a>switch语句：</h3><p>go语言中的switch自动带有break</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//实现功能：根据给出的学生分数，判断学生的等级：</span></span><br><span class="line">        <span class="comment">// &gt;=90  -----A</span></span><br><span class="line">        <span class="comment">// &gt;=80  -----B</span></span><br><span class="line">        <span class="comment">// &gt;=70  -----C</span></span><br><span class="line">        <span class="comment">// &gt;=60  -----D</span></span><br><span class="line">        <span class="comment">// &lt;60   -----E</span></span><br><span class="line">        <span class="comment">//给出一个学生分数：</span></span><br><span class="line">        <span class="keyword">var</span> score <span class="type">int</span> = <span class="number">187</span></span><br><span class="line">        <span class="comment">//根据分数判断等级：</span></span><br><span class="line">        <span class="comment">//switch后面是一个表达式，这个表达式的结果依次跟case进行比较，满足结果的话就执行冒号后面的代码。</span></span><br><span class="line">        <span class="comment">//default是用来“兜底”的一个分支，其它case分支都不走的情况下就会走default分支</span></span><br><span class="line">        <span class="comment">//default分支可以放在任意位置上，不一定非要放在最后。</span></span><br><span class="line">        <span class="keyword">switch</span> score/<span class="number">10</span> &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">10</span> :</span><br><span class="line">                        fmt.Println(<span class="string">&quot;您的等级为A级&quot;</span>)</span><br><span class="line">                <span class="keyword">case</span> <span class="number">9</span> :</span><br><span class="line">                        fmt.Println(<span class="string">&quot;您的等级为A级&quot;</span>)</span><br><span class="line">                <span class="keyword">case</span> <span class="number">8</span> :</span><br><span class="line">                        fmt.Println(<span class="string">&quot;您的等级为B级&quot;</span>)</span><br><span class="line">                <span class="keyword">case</span> <span class="number">7</span> :</span><br><span class="line">                        fmt.Println(<span class="string">&quot;您的等级为C级&quot;</span>)</span><br><span class="line">                <span class="keyword">case</span> <span class="number">6</span> :</span><br><span class="line">                        fmt.Println(<span class="string">&quot;您的等级为D级&quot;</span>)</span><br><span class="line">                <span class="keyword">case</span> <span class="number">5</span> :</span><br><span class="line">                        fmt.Println(<span class="string">&quot;您的等级为E级&quot;</span>)</span><br><span class="line">                <span class="keyword">case</span> <span class="number">4</span> :</span><br><span class="line">                        fmt.Println(<span class="string">&quot;您的等级为E级&quot;</span>)</span><br><span class="line">                <span class="keyword">case</span> <span class="number">3</span> :</span><br><span class="line">                        fmt.Println(<span class="string">&quot;您的等级为E级&quot;</span>)</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line">                        fmt.Println(<span class="string">&quot;您的等级为E级&quot;</span>)</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span> :</span><br><span class="line">                        fmt.Println(<span class="string">&quot;您的等级为E级&quot;</span>)</span><br><span class="line">                <span class="keyword">case</span> <span class="number">0</span> :</span><br><span class="line">                        fmt.Println(<span class="string">&quot;您的等级为E级&quot;</span>)</span><br><span class="line">                <span class="keyword">default</span>:</span><br><span class="line">                        fmt.Println(<span class="string">&quot;您的成绩有误&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用switch来做的一个很神奇的类型判断:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">justifyType</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> v := x.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;x is a string，value is %v\n&quot;</span>, v)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;x is a int is %v\n&quot;</span>, v)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">bool</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;x is a bool is %v\n&quot;</span>, v)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;unsupport type！&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构:"></a>循环结构:</h3><h4 id="原始for循环"><a href="#原始for循环" class="headerlink" title="原始for循环"></a>原始for循环</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for 初始表达式; 布尔表达式; 迭代因子 &#123;</span><br><span class="line">          循环体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常格式:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> sum <span class="type">int</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++ &#123;</span><br><span class="line">sum += i</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>格式灵活:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        i := <span class="number">1</span> <span class="comment">//变量的初始化</span></span><br><span class="line">        <span class="keyword">for</span> i&lt;=<span class="number">5</span> &#123;<span class="comment">//条件表达式。判断条件</span></span><br><span class="line">                fmt.Println(<span class="string">&quot;你好 Golang&quot;</span>)<span class="comment">//循环体</span></span><br><span class="line">                i++<span class="comment">//迭代</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果进入死循环可以:</p><p><strong>在控制台中结束死循环：ctrl+c</strong></p><h4 id="键值遍历for循环："><a href="#键值遍历for循环：" class="headerlink" title="键值遍历for循环："></a>键值遍历for循环：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">for 遍历者i脚标, i所代表的值 := range 被遍历的字符串 &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//定义一个字符串：</span></span><br><span class="line"><span class="keyword">var</span> str <span class="type">string</span> = <span class="string">&quot;hello golang你好&quot;</span></span><br><span class="line"><span class="comment">//方式1：普通for循环：按照字节进行遍历输出的 （暂时先不使用中文）</span></span><br><span class="line"><span class="comment">// for i := 0;i &lt; len(str);i++ &#123;//i:理解为字符串的下标</span></span><br><span class="line"><span class="comment">// fmt.Printf(&quot;%c \n&quot;,str[i])</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">//方式2：for range</span></span><br><span class="line"><span class="keyword">for</span> i , value := <span class="keyword">range</span> str &#123;</span><br><span class="line">fmt.Printf(<span class="string">&quot;索引为：%d,具体的值为：%c \n&quot;</span>,i,value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="流程控制中的关键字"><a href="#流程控制中的关键字" class="headerlink" title="流程控制中的关键字:"></a>流程控制中的关键字:</h3><p>break,continue,goto(依旧是不建议用),return</p><h2 id="4）函数"><a href="#4）函数" class="headerlink" title="4）函数"></a>4）函数</h2><h3 id="基本函数"><a href="#基本函数" class="headerlink" title="基本函数:"></a>基本函数:</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">func   函数名（形参列表)（返回值类型列表）&#123;</span><br><span class="line">                        执行语句..</span><br><span class="line">                        return + 返回值列表</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>（1）函数名：<br>遵循标识符命名规范:见名知意 addNum,驼峰命名addNum<br>首字母不能是数字<br>首字母大写该函数可以被本包文件和其它包文件使用(类似public)<br>首学母小写只能被本包文件使用，其它包文件不能使用(类似private)</p><p>（2）形参列表：<br>形参列表：个数：可以是一个参数，可以是n个参数，可以是0个参数<br>形式参数列表：作用：接收外来的数据<br>实际参数：实际传入的数据</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331214309880.png" alt="image-20220331214309880"></p><p>（3）返回值类型列表：函数的返回值对应的类型应该写在这个列表中<br>返回0个：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331215144622.png" alt="返回多个："></p><p>返回1个:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331215800943.png" alt="image-20220331215800943"></p><p>返回多个：<img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331215407262.png" alt="image-20220331215407262"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331215553070.png" alt="image-20220331215553070"></p><p><strong>golang不支持重载</strong></p><p>基本数据类型和数组<strong>默认都是值传递</strong>的，即进行值拷贝。在函数内修改，不会影响到原来的值。</p><p>以值传递方式的数据类型，如果希望在函数内的变量能修改函数外的变量，可以传入变量的地址&amp;，函数内以指针的方式操作变量。从效果来看类似引用传递。</p><p>如下,直接传入地址,test函数在拿到地址后的对上面的值进行修改:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331220044176.png" alt="image-20220331220044176"></p><p>（4）在Go中，函数也是一种数据类型，可以赋值给一个变量，则该变量就是一个函数类型的变量了。通过该变量可以对函数调用。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="comment">//定义一个函数：</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(num <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">        fmt.Println(num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//函数也是一种数据类型，可以赋值给一个变量</span></span><br><span class="line">        a := test<span class="comment">//变量就是一个函数类型的变量</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;a的类型是：%T,test函数的类型是：%T \n&quot;</span>,a,test)<span class="comment">//a的类型是：func(int),test函数的类型是：func(int)</span></span><br><span class="line">        <span class="comment">//通过该变量可以对函数调用</span></span><br><span class="line">        a(<span class="number">10</span>) <span class="comment">//等价于  test(10)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">a的类型是：<span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span>,test函数的类型是：<span class="function"><span class="keyword">func</span><span class="params">(<span class="type">int</span>)</span></span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><p>（5）函数既然是一种数据类型，因此在Go中，函数可以作为形参，并且调用（把函数本身当做一种数据类型）</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="comment">//定义一个函数：</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">(num <span class="type">int</span>)</span></span>&#123;</span><br><span class="line">        fmt.Println(num)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个函数，把另一个函数作为形参：</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test02</span> <span class="params">(num1 <span class="type">int</span> ,num2 <span class="type">float32</span>, testFunc <span class="keyword">func</span>(<span class="type">int</span>)</span></span>)&#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;-----test02&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//函数也是一种数据类型，可以赋值给一个变量</span></span><br><span class="line">        a := test<span class="comment">//变量就是一个函数类型的变量</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;a的类型是：%T,test函数的类型是：%T \n&quot;</span>,a,test)<span class="comment">//a的类型是：func(int),test函数的类型是：func(int)</span></span><br><span class="line">        <span class="comment">//通过该变量可以对函数调用</span></span><br><span class="line">        a(<span class="number">10</span>) <span class="comment">//等价于  test(10)</span></span><br><span class="line">        <span class="comment">//调用test02函数：</span></span><br><span class="line">        test02(<span class="number">10</span>,<span class="number">3.19</span>,test)</span><br><span class="line">        test02(<span class="number">10</span>,<span class="number">3.19</span>,a)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a的类型是：func(int),test函数的类型是：func(int)</span><br><span class="line">10</span><br><span class="line">-----test02</span><br><span class="line">-----test02</span><br></pre></td></tr></table></figure><p>一些对函数更神奇的操作；</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331221149310.png" alt="image-20220331221149310"></p><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数:"></a>匿名函数:</h3><p>【1】Go支持匿名函数，如果我们某个函数只是希望使用一次，可以考虑使用匿名函数<br>【2】匿名函数使用方式：<br>（1）在定义匿名函数时就直接调用，这种方式匿名函数只能调用一次（用的多）</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//定义匿名函数同时使用</span></span><br><span class="line">result := <span class="function"><span class="keyword">func</span><span class="params">(num1 <span class="type">int</span>, num2 <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> num1 + num2</span><br><span class="line">&#125;(<span class="number">12</span>, <span class="number">5</span>)</span><br><span class="line">fmt.Println(result)<span class="comment">//17</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）将匿名函数赋给一个变量(该变量就是函数变量了)，再通过该变量来调用匿名函数（用的少）</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331225421214.png" alt="image-20220331225421214"></p><p>【3】如何让一个匿名函数，可以在整个程序中有效呢?将匿名函数给一个全局变量就可以了</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">var</span> Func01 = <span class="function"><span class="keyword">func</span> <span class="params">(num1 <span class="type">int</span>,num2 <span class="type">int</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num1 * num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//定义匿名函数：定义的同时调用</span></span><br><span class="line">        result := <span class="function"><span class="keyword">func</span> <span class="params">(num1 <span class="type">int</span>,num2 <span class="type">int</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> num1 + num2</span><br><span class="line">        &#125;(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line">        fmt.Println(result)</span><br><span class="line">        <span class="comment">//将匿名函数赋给一个变量，这个变量实际就是函数类型的变量</span></span><br><span class="line">        <span class="comment">//sub等价于匿名函数</span></span><br><span class="line">        sub := <span class="function"><span class="keyword">func</span> <span class="params">(num1 <span class="type">int</span>,num2 <span class="type">int</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> num1 - num2</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//直接调用sub就是调用这个匿名函数了</span></span><br><span class="line">        result01 := sub(<span class="number">30</span>,<span class="number">70</span>)</span><br><span class="line">        fmt.Println(result01)</span><br><span class="line">        result02 := sub(<span class="number">30</span>,<span class="number">70</span>)</span><br><span class="line">        fmt.Println(result02)</span><br><span class="line">        result03 := Func01(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">        fmt.Println(result03)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="闭包-有点复杂了"><a href="#闭包-有点复杂了" class="headerlink" title="闭包(有点复杂了):"></a>闭包(有点复杂了):</h3><p>【1】什么是闭包：闭包就是一个函数和与其相关的引用环境组合的一个整体</p><p>【2】案例展示：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="comment">//函数功能：求和</span></span><br><span class="line"><span class="comment">//函数的名字：getSum 参数为空</span></span><br><span class="line"><span class="comment">//getSum函数返回值为一个函数，这个函数的参数是一个int类型的参数，返回值也是int类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSum</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span> <span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> sum <span class="type">int</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">func</span> <span class="params">(num <span class="type">int</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">                sum = sum + num </span><br><span class="line">                <span class="keyword">return</span> sum</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//闭包：返回的匿名函数+匿名函数以外的变量num</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        f := getSum()</span><br><span class="line">        fmt.Println(f(<span class="number">1</span>))<span class="comment">//1 </span></span><br><span class="line">        fmt.Println(f(<span class="number">2</span>))<span class="comment">//3</span></span><br><span class="line">        fmt.Println(f(<span class="number">3</span>))<span class="comment">//6</span></span><br><span class="line">        fmt.Println(f(<span class="number">4</span>))<span class="comment">//10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例二:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">a</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line">b := <span class="function"><span class="keyword">func</span><span class="params">()</span></span> <span class="type">int</span> &#123;</span><br><span class="line">i++</span><br><span class="line">fmt.Println(i)</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//这里的c就是返回的一个,函数</span></span><br><span class="line">c := a()</span><br><span class="line"><span class="comment">//这里的i一直在变而已</span></span><br><span class="line">c() <span class="comment">// 1</span></span><br><span class="line">c() <span class="comment">// 2</span></span><br><span class="line">c() <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line">a() <span class="comment">// 返回的是一个函数的地址,所以无输出</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>感受：匿名函数中引用的那个变量会一直保存在内存中，可以一直使用</p><p>【3】闭包的本质：<br>闭包本质依旧是一个匿名函数，只是这个函数引入外界的变量&#x2F;参数<br>匿名函数+引用的变量&#x2F;参数 &#x3D; 闭包</p><p>【4】特点：<br>（1）返回的是一个匿名函数，但是这个匿名函数引用到函数外的变量&#x2F;参数 ,因此这个匿名函数就和变量&#x2F;参数形成一个整体，构成闭包。<br>（2）闭包中使用的变量&#x2F;参数会一直保存在内存中，所以会一直使用—》意味着闭包不可滥用（对内存消耗大）</p><p>【5】不使用闭包可以吗？</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="comment">//函数功能：求和</span></span><br><span class="line"><span class="comment">//函数的名字：getSum 参数为空</span></span><br><span class="line"><span class="comment">//getSum函数返回值为一个函数，这个函数的参数是一个int类型的参数，返回值也是int类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSum</span><span class="params">()</span></span> <span class="function"><span class="keyword">func</span> <span class="params">(<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> sum <span class="type">int</span> = <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">func</span> <span class="params">(num <span class="type">int</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">                sum = sum + num </span><br><span class="line">                <span class="keyword">return</span> sum</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//闭包：返回的匿名函数+匿名函数以外的变量num</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        f := getSum()</span><br><span class="line">        fmt.Println(f(<span class="number">1</span>))<span class="comment">//1 </span></span><br><span class="line">        fmt.Println(f(<span class="number">2</span>))<span class="comment">//3</span></span><br><span class="line">        fmt.Println(f(<span class="number">3</span>))<span class="comment">//6</span></span><br><span class="line">        fmt.Println(f(<span class="number">4</span>))<span class="comment">//10</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;----------------------&quot;</span>)</span><br><span class="line">        fmt.Println(getSum01(<span class="number">0</span>,<span class="number">1</span>))<span class="comment">//1</span></span><br><span class="line">        fmt.Println(getSum01(<span class="number">1</span>,<span class="number">2</span>))<span class="comment">//3</span></span><br><span class="line">        fmt.Println(getSum01(<span class="number">3</span>,<span class="number">3</span>))<span class="comment">//6</span></span><br><span class="line">        fmt.Println(getSum01(<span class="number">6</span>,<span class="number">4</span>))<span class="comment">//10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getSum01</span><span class="params">(sum <span class="type">int</span>,num <span class="type">int</span>)</span></span> <span class="type">int</span>&#123;</span><br><span class="line">        sum = sum + num</span><br><span class="line">        <span class="keyword">return</span> sum</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不使用闭包的时候：我想保留的值，不可以反复使用</span></span><br><span class="line"><span class="comment">//闭包应用场景：闭包可以保留上次引用的某个值，我们传入一次就可以反复使用了</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="defer关键字-推迟"><a href="#defer关键字-推迟" class="headerlink" title="defer关键字(推迟):"></a>defer关键字(推迟):</h3><p>【1】defer关键字的作用：<br>在函数中，程序员经常需要创建资源，为了在函数执行完毕后，及时的释放资源，Go的设计者提供defer关键字</p><p>【2】案例展示：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331230433411.png" alt="image-20220331230433411"></p><p>【3】代码变动一下，再次看结果：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331230447543.png" alt="image-20220331230447543"></p><p>发现：遇到defer关键字，会将后面的代码语句压入栈中，也会将相关的值同时拷贝入栈中，不会随着函数后面的变化而变化。</p><p>【4】defer应用场景：比如你想关闭某个使用的资源，在使用的时候直接随手defer，因为defer有延迟执行机制（函数执行完毕再执行defer压入栈的语句），所以你用完随手写了关闭，比较省心，省事</p><h3 id="系统常用函数"><a href="#系统常用函数" class="headerlink" title="系统常用函数:"></a>系统常用函数:</h3><h4 id="1-字符串相关的函数"><a href="#1-字符串相关的函数" class="headerlink" title="(1)字符串相关的函数:"></a>(1)字符串相关的函数:</h4><p>【1】统计字符串的长度,按字节进行统计：        </p><p>len(str) 使用内置函数也不用导包的，直接用就行</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402113235609.png" alt="image-20220402113235609"></p><p>【2】字符串遍历：</p><p>​        (1)利用方式1：for-range键值循环：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402113307496.png" alt="image-20220402113307496"></p><p>​        （2）r:&#x3D;[]rune(str), 进行数组遍历</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402113423499.png" alt="image-20220402113423499"></p><p>【3】字符串转整数： <code>n, err := strconv.Atoi(&quot;66&quot;) </code></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">n, err := strconv.Atoi(<span class="string">&quot;66&quot;</span>)</span><br><span class="line">fmt.Println(n, err)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">66 &lt;nil&gt;</span><br></pre></td></tr></table></figure><p>【4】整数转字符串：<code>str = strconv.Itoa(6887)</code></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;strconv&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> str = strconv.Itoa(<span class="number">6887</span>)</span><br><span class="line">fmt.Println(str)</span><br><span class="line">fmt.Printf(<span class="string">&quot;这个str的类型是%T&quot;</span>, str)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6887</span><br><span class="line">这个str的类型是string</span><br></pre></td></tr></table></figure><p>【5】查找子串是否在指定的字符串中: <code> strings.Contains(&quot;javaandgolang&quot;, &quot;go&quot;)</code></p><p>【6】统计一个字符串有几个指定的子串:<code>strings.Count(&quot;javaandgolang&quot;,&quot;a&quot;) </code></p><p>【7】不区分大小写的字符串比较:<code> strings.EqualFold(&quot;go&quot; , &quot;Go&quot;)</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402114008225.png" alt="image-20220402114008225"></p><p>【8】返回子串在字符串第一次出现的索引值，如果没有返回-1:<code>strings.lndex(&quot;javaandgolang&quot; , &quot;a&quot;) </code></p><p>【9】字符串的替换：<code>strings.Replace(&quot;goandjavagogo&quot;, &quot;go&quot;, &quot;golang&quot;, n) </code><br>n可以指定你希望替换几个,如果n&#x3D;-1表示全部替换，替换两个n就是2</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402114151693.png" alt="image-20220402114151693"></p><p>【10】按照指定的某个字符，为分割标识，将一个学符串拆分成字符串数组<code>strings.Split(&quot;go-python-java&quot;, &quot;-&quot;)</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402114218490.png" alt="image-20220402114218490"></p><p>【11】将字符串的字母进行大小写的转换:<br><code>strings.ToLower(&quot;Go&quot;)// go </code><br><code>strings.ToUpper&quot;go&quot;)//Go</code></p><p>【12】将字符串左右两边的空格去掉:<br><code>strings.TrimSpace(&quot;     go and java    &quot;)</code></p><p>【13】将字符串左右两边指定的字符去掉:<br><code>strings.Trim(&quot;~golang~ &quot;, &quot; ~&quot;)  </code></p><p>【14】将字符串左边指定的字符去掉:<br><code>strings.TrimLeft(&quot;~golang~&quot;, &quot;~&quot;)</code></p><p>【15】将字符串右边指定的字符去掉:<br><code>strings.TrimRight(&quot;~golang~&quot;, &quot;~&quot;)</code></p><p>【16】判断字符串是否以指定的字符串开头:<br><code>strings.HasPrefix(&quot;http://java.sun.com/jsp/jstl/fmt&quot;, &quot;http&quot;)</code></p><p>【17】判断字符串是否以指定的字符串结束:<br><code>strings.HasSuffix(&quot;demo.png&quot;, &quot;.png&quot;)</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402114411216.png" alt="image-20220402114411216"></p><h4 id="2-日期时间相关函数"><a href="#2-日期时间相关函数" class="headerlink" title="(2)日期时间相关函数:"></a>(2)日期时间相关函数:</h4><p>【1】时间和日期的函数，需要到入time包，所以你获取当前时间，就要调用函数Now函数：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">        <span class="string">&quot;fmt&quot;</span></span><br><span class="line">        <span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//时间和日期的函数，需要到入time包，所以你获取当前时间，就要调用函数Now函数：</span></span><br><span class="line">        now := time.Now()</span><br><span class="line">        <span class="comment">//Now()返回值是一个结构体，类型是：time.Time</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;%v ~~~ 对应的类型为：%T\n&quot;</span>,now,now)</span><br><span class="line">        <span class="comment">//2021-02-08 17:47:21.7600788 +0800 CST m=+0.005983901 ~~~ 对应的类型为：time.Time</span></span><br><span class="line">        <span class="comment">//调用结构体中的方法：</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;年：%v \n&quot;</span>,now.Year())</span><br><span class="line">        fmt.Printf(<span class="string">&quot;月：%v \n&quot;</span>,now.Month())<span class="comment">//月：February</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;月：%v \n&quot;</span>,<span class="type">int</span>(now.Month()))<span class="comment">//月：2</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;日：%v \n&quot;</span>,now.Day())</span><br><span class="line">        fmt.Printf(<span class="string">&quot;时：%v \n&quot;</span>,now.Hour())</span><br><span class="line">        fmt.Printf(<span class="string">&quot;分：%v \n&quot;</span>,now.Minute())</span><br><span class="line">        fmt.Printf(<span class="string">&quot;秒：%v \n&quot;</span>,now.Second())</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>go你好优美呀!</p><p>【2】日期的格式化：<br>（1）将日期以年月日时分秒按照格式输出为字符串：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Printf将字符串直接输出：</span></span><br><span class="line">fmt.Printf(<span class="string">&quot;当前年月日： %d-%d-%d 时分秒：%d:%d:%d  \n&quot;</span>,now.Year(),now.Month(),</span><br><span class="line">now.Day(),now.Hour(),now.Minute(),now.Second())</span><br><span class="line"><span class="comment">//Sprintf可以得到这个字符串，以便后续使用：</span></span><br><span class="line">datestr := fmt.Sprintf(<span class="string">&quot;当前年月日： %d-%d-%d 时分秒：%d:%d:%d  \n&quot;</span>,now.Year(),now.Month(),</span><br><span class="line">now.Day(),now.Hour(),now.Minute(),now.Second())</span><br><span class="line">fmt.Println(datestr)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当前年月日： 2022-4-2 时分秒：11:46:46</span><br><span class="line">当前年月日： 2022-4-2 时分秒：11:46:46</span><br></pre></td></tr></table></figure><p>（2）按照指定格式：自动识别格式</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个参数字符串的各个数字必须是固定的，必须这样写</span></span><br><span class="line">      datestr2 := now.Format(<span class="string">&quot;2006/01/02 15/04/05&quot;</span>)</span><br><span class="line">      fmt.Println(datestr2)</span><br><span class="line">      <span class="comment">//选择任意的组合都是可以的，根据需求自己选择就可以（自己任意组合）。</span></span><br><span class="line">      datestr3 := now.Format(<span class="string">&quot;2006 15:04&quot;</span>)</span><br><span class="line">      fmt.Println(datestr3)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2022/04/02 11/47/52</span><br><span class="line">2022 11:47</span><br></pre></td></tr></table></figure><h4 id="3-内置函数"><a href="#3-内置函数" class="headerlink" title="(3)内置函数:"></a>(3)内置函数:</h4><p>【1】什么是内置函数&#x2F;内建函数：<br>Golang设计者为了编程方便，提供了一些函数，这些函数不用导包可以直接使用，我们称为Go的内置函数&#x2F;内建函数。</p><p>【2】内置函数存放位置：<br>在builtin包下，使用内置函数的，直接用就行</p><p>【3】常用函数：<br>（1）len函数：<br>统计字符串的长度,按字节进行统计</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402115041102.png" alt="image-20220402115041102"></p><p>（2）new函数：分配内存，主要用来分配值类型（int系列, float系列, bool, string、数组和结构体struct）</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402115237661.png" alt="image-20220402115237661"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402115247683.png" alt="image-20220402115247683"></p><p>（3）make函数：<br>分配内存，主要用来分配引用类型（指针、slice切片、map、管道chan、interface 等）</p><h2 id="5）包的引入："><a href="#5）包的引入：" class="headerlink" title="5）包的引入："></a>5）包的引入：</h2><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220404193512823.png" alt="image-20220404193512823"></p><p>制作报的时候,项目路径如下:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">GOPATH/GolangStudy/5-init/</span> </span><br><span class="line">├── lib1/</span><br><span class="line">│ └── lib1.go</span><br><span class="line">├── lib2/</span><br><span class="line">│ └── lib2.go </span><br><span class="line">└── main.go</span><br></pre></td></tr></table></figure><p>【1】使用包的原因：</p><p>（1）我们不可能把所有的函数放在同一个源文件中，可以分门别类的把函数放在不同的原文件中 </p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331223101289.png" alt="image-20220331223101289"></p><p>（2）解决同名问题：两个人都想定义一个同名的函数，在同一个文件中是不可以定义相同名字的函数的。此时可以用包来区分 </p><p>【2】案例展示包：项目的结构：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331223219281.png" alt="image-20220331223219281"></p><p>demo8代码:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;helloworld/test02/demo1&quot;</span> <span class="comment">//这里就是导包路径</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(demo1.N3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>demo1代码:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//package main</span></span><br><span class="line"><span class="keyword">package</span> demo1</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> n1 = <span class="number">100</span></span><br><span class="line"><span class="keyword">var</span> n2 = <span class="number">1.89</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">N3 = <span class="number">699</span></span><br><span class="line">n4 = <span class="string">&quot;ladidol&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>1.package进行包的声明，建议：包的声明这个包和所在的文件夹同名</p><p>2.main包是程序的入口包，一般main函数会放在这个包下 main函数一定要放在main包下，否则不能编译执行</p><p>3.包名和文件夹的名字，可以不一样</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331223645204.png" alt="image-20220331223645204"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331223652897.png" alt="image-20220331223652897"></p><p>4.一个目录下的同级文件归属一个包同级别的源文件的包的声明必须一致</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331223733548.png" alt="image-20220331223733548"></p><p>5.包到底是什么：<br>（1）在程序层面，所有使用相同  package 包名  的源文件组成的代码模块<br>（2）在源文件层面就是一个文件夹</p><p>6.可以给包取别名，取别名后，原来的包名就不能使用了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331223833452.png" alt="image-20220331223833452"></p><h2 id="6）初始化函数init-："><a href="#6）初始化函数init-：" class="headerlink" title="6）初始化函数init()："></a>6）初始化函数init()：</h2><p><strong>类似于java中的构造函数</strong></p><p>【1】init函数：初始化函数，可以用来进行一些初始化的操作<br>每一个源文件都可以包含一个init函数，该函数会在main函数执行前，被Go运行框架调用。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331223954751.png" alt="image-20220331223954751"></p><p>【2】全局变量定义，init函数，main函数的执行流程？</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331224122916.png" alt="image-20220331224122916"></p><p>【3】多个源文件都有init函数的时候，如何执行：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331224337791.png" alt="image-20220331224337791"></p><p>执行结果:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331224352592.png" alt="image-20220331224352592"></p><p>由此可知:</p><p>先对import包里面的东西进行初始化,再对main包进行操作;</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220331224410742.png" alt="image-20220331224410742"></p><h2 id="7）错误处理"><a href="#7）错误处理" class="headerlink" title="7）错误处理"></a>7）错误处理</h2><h4 id="【1】错误处理-x2F-捕获机制："><a href="#【1】错误处理-x2F-捕获机制：" class="headerlink" title="【1】错误处理&#x2F;捕获机制："></a>【1】错误处理&#x2F;捕获机制：</h4><p>go中追求代码优雅，引入机制：defer+recover机制处理错误<br>内置函数recover:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">test()</span><br><span class="line">fmt.Println(<span class="string">&quot;已经执行上面的除法方法&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := <span class="built_in">recover</span>()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;错误已经捕获到了&quot;</span>)</span><br><span class="line">fmt.Println(<span class="string">&quot;err是：&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">num1 := <span class="number">10</span></span><br><span class="line">num2 := <span class="number">0</span></span><br><span class="line">result := num1 / num2</span><br><span class="line">fmt.Println(result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结构:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">错误已经捕获到了</span><br><span class="line">err是： runtime error: integer divide by zero</span><br><span class="line">已经执行上面的除法方法     </span><br></pre></td></tr></table></figure><p>优点：提高程序健壮性</p><p>先简单介绍一下这个异常</p><h4 id="【2】自定义错误："><a href="#【2】自定义错误：" class="headerlink" title="【2】自定义错误："></a>【2】自定义错误：</h4><p>需要调用errors包下的New函数：函数返回error类型</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402122252229.png" alt="image-20220402122252229"></p><p>代码：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := test()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;自定义错误: &quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;上面的除法函数执行了...&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line">num1 := <span class="number">10</span></span><br><span class="line">num2 := <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> num2 == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;除数不能为0!&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result := num1 / num2</span><br><span class="line">fmt.Println(result)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">自定义错误:  除数不能为0!</span><br><span class="line">上面的除法函数执行了...</span><br></pre></td></tr></table></figure><h4 id="【3】终止函数进行"><a href="#【3】终止函数进行" class="headerlink" title="【3】终止函数进行:"></a>【3】终止函数进行:</h4><p>有一种情况：程序出现错误以后，后续代码就没有必要执行，想让程序中断，退出程序：借助：builtin包下内置函数：<code>panic</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402122830223.png" alt="image-20220402122830223"></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;errors&quot;</span></span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := test()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;自定义错误: &quot;</span>, err)</span><br><span class="line"><span class="built_in">panic</span>(err)<span class="comment">//终止程序进行</span></span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">&quot;上面的除法函数执行成功了...&quot;</span>)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">test</span><span class="params">()</span></span> (err <span class="type">error</span>) &#123;</span><br><span class="line">num1 := <span class="number">10</span></span><br><span class="line">num2 := <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> num2 == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">&quot;除数不能为0!&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result := num1 / num2</span><br><span class="line">fmt.Println(result)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">自定义错误:  除数不能为0!</span><br><span class="line">panic: 除数不能为0!  </span><br></pre></td></tr></table></figure><h2 id="8）数组"><a href="#8）数组" class="headerlink" title="8）数组"></a>8）数组</h2><h3 id="数组的引入"><a href="#数组的引入" class="headerlink" title="数组的引入:"></a>数组的引入:</h3><p><code>var 数组名 [数组大小]数据类型</code></p><p>例子:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//实现的功能：给出五个学生的成绩，求出成绩的总和，平均数：</span></span><br><span class="line">        <span class="comment">//给出五个学生的成绩：---&gt;数组存储：</span></span><br><span class="line">        <span class="comment">//定义一个数组：</span></span><br><span class="line">        <span class="keyword">var</span> scores [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">        <span class="comment">//将成绩存入数组：</span></span><br><span class="line">        scores[<span class="number">0</span>] = <span class="number">95</span></span><br><span class="line">        scores[<span class="number">1</span>] = <span class="number">91</span></span><br><span class="line">        scores[<span class="number">2</span>] = <span class="number">39</span></span><br><span class="line">        scores[<span class="number">3</span>] = <span class="number">60</span></span><br><span class="line">        scores[<span class="number">4</span>] = <span class="number">21</span></span><br><span class="line">        <span class="comment">//求和：</span></span><br><span class="line">        <span class="comment">//定义一个变量专门接收成绩的和：</span></span><br><span class="line">        sum := <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>;i &lt; <span class="built_in">len</span>(scores);i++ &#123;<span class="comment">//i: 0,1,2,3,4 </span></span><br><span class="line">                sum += scores[i]</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//平均数：</span></span><br><span class="line">        avg := sum / <span class="built_in">len</span>(scores)</span><br><span class="line">        <span class="comment">//输出</span></span><br><span class="line">        fmt.Printf(<span class="string">&quot;成绩的总和为：%v,成绩的平均数为：%v&quot;</span>,sum,avg)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>地址分配和C语言差不多:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402214343969.png" alt="image-20220402214343969"></p><p>数组优点：访问&#x2F;查询&#x2F;读取 速度快</p><h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历:"></a>数组的遍历:</h3><p>【1】普通for循环【2】键值循环（键值循环） for range结构是Go语言特有的一种的迭代结构，在许多情况下都非常有用，for range 可以遍历数组、切片、字符串、map 及通道，for range 语法上类似于其它语言中的 foreach 语句，一般形式为：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> key, val := <span class="keyword">range</span> coll &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：<br>（1）coll就是你要的数组<br>（2）每次遍历得到的索引用key接收，每次遍历得到的索引位置上的值用val<br>（3）key、value的名字随便起名  k、v   key、value<br>（4）key、value属于在这个循环中的局部变量<br>（5）你想忽略某个值：用_就可以了：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//实现的功能：给出五个学生的成绩，求出成绩的总和，平均数：</span></span><br><span class="line">        <span class="comment">//给出五个学生的成绩：---&gt;数组存储：</span></span><br><span class="line">        <span class="comment">//定义一个数组：</span></span><br><span class="line">        <span class="keyword">var</span> scores [<span class="number">5</span>]<span class="type">int</span></span><br><span class="line">        <span class="comment">//将成绩存入数组：(循环 + 终端输入)</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(scores);i++ &#123;<span class="comment">//i：数组的下标</span></span><br><span class="line">                fmt.Printf(<span class="string">&quot;请录入第个%d学生的成绩&quot;</span>,i + <span class="number">1</span>)</span><br><span class="line">                fmt.Scanln(&amp;scores[i])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//展示一下班级的每个学生的成绩：（数组进行遍历）</span></span><br><span class="line">        <span class="comment">//方式1：普通for循环：</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="built_in">len</span>(scores);i++ &#123;</span><br><span class="line">                fmt.Printf(<span class="string">&quot;第%d个学生的成绩为：%d\n&quot;</span>,i+<span class="number">1</span>,scores[i])</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(<span class="string">&quot;-------------------------------&quot;</span>)</span><br><span class="line">        <span class="comment">//方式2：for-range循环</span></span><br><span class="line">        <span class="keyword">for</span> key,value := <span class="keyword">range</span> scores &#123;</span><br><span class="line">                fmt.Printf(<span class="string">&quot;第%d个学生的成绩为：%d\n&quot;</span>,key + <span class="number">1</span>,value)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402214549747.png" alt="image-20220402214549747"></p><h3 id="数组常用的初始化方法"><a href="#数组常用的初始化方法" class="headerlink" title="数组常用的初始化方法:"></a>数组常用的初始化方法:</h3><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一种：类似于数组间的赋值</span></span><br><span class="line">        <span class="keyword">var</span> arr1 [<span class="number">3</span>]<span class="type">int</span> = [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>&#125;</span><br><span class="line">        fmt.Println(arr1)</span><br><span class="line">        <span class="comment">//第二种：自动识别的那种赋值</span></span><br><span class="line">        <span class="keyword">var</span> arr2 = [<span class="number">3</span>]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>&#125;</span><br><span class="line">        fmt.Println(arr2)</span><br><span class="line">        <span class="comment">//第三种：这也是,我猜这是最常用的</span></span><br><span class="line">        <span class="keyword">var</span> arr3 = [...]<span class="type">int</span>&#123;<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>&#125;</span><br><span class="line">        fmt.Println(arr3)</span><br><span class="line">        <span class="comment">//第四种：这令人感觉到sweet的</span></span><br><span class="line">        <span class="keyword">var</span> arr4 = [...]<span class="type">int</span>&#123;<span class="number">2</span>:<span class="number">66</span>,<span class="number">0</span>:<span class="number">33</span>,<span class="number">1</span>:<span class="number">99</span>,<span class="number">3</span>:<span class="number">88</span>&#125;</span><br><span class="line">        fmt.Println(arr4)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[3 6 9]</span><br><span class="line">[1 4 7]      </span><br><span class="line">[4 5 6 7]    </span><br><span class="line">[33 99 66 88]</span><br></pre></td></tr></table></figure><h3 id="一些注意地方"><a href="#一些注意地方" class="headerlink" title="一些注意地方:"></a>一些注意地方:</h3><p>【1】长度属于类型的一部分 ：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402214933429.png" alt="image-20220402214933429">【2】Go中数组属值类型，在默认情况下是值传递，因此会进行值拷贝。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402215016806.png" alt="image-20220402215016806">【3】如想在其它函数中，去修改原来的数组，可以使用引用传递(指针方式)。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402215107617.png" alt="image-20220402215107617"></p><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组:"></a>二维数组:</h3><p>【1】二维数组的定义，并且有默认初始值：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr [<span class="number">2</span>][<span class="number">3</span>]<span class="type">int16</span></span><br></pre></td></tr></table></figure><p>【2】二维数组内存：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402215257424.png" alt="image-20220402215257424"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402215303108.png" alt="image-20220402215303108"></p><p>【4】二维数组的初始化：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402215322207.png" alt="image-20220402215322207"></p><h3 id="二维数组的遍历"><a href="#二维数组的遍历" class="headerlink" title="二维数组的遍历:"></a>二维数组的遍历:</h3><p>【1】普通for循环<br>【2】键值循环（for range）</p><p>go中println函数可以直接打印数组的值</p><p>代码：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//定义二维数组：</span></span><br><span class="line">        <span class="keyword">var</span> arr [<span class="number">3</span>][<span class="number">3</span>]<span class="type">int</span> = [<span class="number">3</span>][<span class="number">3</span>]<span class="type">int</span>&#123;&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>&#125;,&#123;<span class="number">2</span>,<span class="number">5</span>,<span class="number">8</span>&#125;,&#123;<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>&#125;&#125;</span><br><span class="line">        fmt.Println(arr)<span class="comment">//好美妙啊,</span></span><br><span class="line">        fmt.Println(<span class="string">&quot;------------------------&quot;</span>)</span><br><span class="line">        <span class="comment">//方式1：普通for循环：</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>;i &lt; <span class="built_in">len</span>(arr);i++&#123;</span><br><span class="line">                <span class="keyword">for</span> j := <span class="number">0</span>;j &lt; <span class="built_in">len</span>(arr[i]);j++ &#123;</span><br><span class="line">                        fmt.Print(arr[i][j],<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                fmt.Println()</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(<span class="string">&quot;------------------------&quot;</span>)</span><br><span class="line">        <span class="comment">//方式2：for range循环：</span></span><br><span class="line">        <span class="keyword">for</span> key,value := <span class="keyword">range</span> arr &#123;</span><br><span class="line">                <span class="keyword">for</span> k,v := <span class="keyword">range</span> value &#123;</span><br><span class="line">                        fmt.Printf(<span class="string">&quot;arr[%v][%v]=%v\t&quot;</span>,key,k,v)</span><br><span class="line">                &#125;</span><br><span class="line">                fmt.Println()</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[[1 4 7] [2 5 8] [3 6 9]]</span><br><span class="line">------------------------</span><br><span class="line">1       4       7</span><br><span class="line">2       5       8</span><br><span class="line">3       6       9</span><br><span class="line">------------------------</span><br><span class="line">arr[0][0]=1     arr[0][1]=4     arr[0][2]=7</span><br><span class="line">arr[1][0]=2     arr[1][1]=5     arr[1][2]=8</span><br><span class="line">arr[2][0]=3     arr[2][1]=6     arr[2][2]=9</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="9）切片"><a href="#9）切片" class="headerlink" title="9）切片"></a>9）切片</h2><h3 id="切片简介"><a href="#切片简介" class="headerlink" title="切片简介:"></a>切片简介:</h3><p>【1】切片(slice)是golang中一种特有的数据类型<br>【2】数组有特定的用处，但是却有一些呆板(数组长度固定不可变)，所以在 Go 语言的代码里并不是特别常见。相对的切片却是随处可见的，切片是一种建立在数组类型之上的抽象，它构建在数组之上并且提供更强大的能力和便捷。<br>【3】切片(slice)是对数组一个连续片段的引用，所以切片是一个引用类型。这个片段可以是整个数组，或者是由起始和终止索引标识的一些项的子集。需要注意的是，终止索引标识的项不包括在切片内。切片提供了一个相关数组的<strong>动态窗口</strong>。<br>【4】代码：<br>切片的语法：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 切片名 []类型 = 数组[beginindex,endindex]</span><br><span class="line">或者下面</span><br><span class="line"><span class="keyword">var</span> slice = arr[<span class="number">0</span>:end]  ----&gt; <span class="keyword">var</span> slice = arr[:end]</span><br><span class="line"><span class="keyword">var</span> slice = arr[start:<span class="built_in">len</span>(arr)]  ----&gt;  <span class="keyword">var</span> slice = arr[start:]</span><br><span class="line"><span class="keyword">var</span> slice = arr[<span class="number">0</span>:<span class="built_in">len</span>(arr)]   ----&gt; <span class="keyword">var</span> slice = arr[:]</span><br></pre></td></tr></table></figure><p>切片的运用:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402215916135.png" alt="image-20220402215916135"></p><p>动态变化的大小</p><h3 id="切片的内存分析"><a href="#切片的内存分析" class="headerlink" title="切片的内存分析:"></a>切片的内存分析:</h3><p>切片有3个字段的数据结构：一个是指向底层数组的指针，一个是切片的长度，一个是切片的容量。</p><p>是一个结构体</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402220203565.png" alt="image-20220402220203565"></p><h3 id="切片的遍历"><a href="#切片的遍历" class="headerlink" title="切片的遍历:"></a>切片的遍历:</h3><p>和数组差不多:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> key, val := <span class="keyword">range</span> coll &#123;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>coll就是你的切片咯</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//定义切片：</span></span><br><span class="line">        slice := <span class="built_in">make</span>([]<span class="type">int</span>,<span class="number">4</span>,<span class="number">20</span>)</span><br><span class="line">        slice[<span class="number">0</span>] = <span class="number">66</span></span><br><span class="line">        slice[<span class="number">1</span>] = <span class="number">88</span></span><br><span class="line">        slice[<span class="number">2</span>] = <span class="number">99</span></span><br><span class="line">        slice[<span class="number">3</span>] = <span class="number">100</span></span><br><span class="line">        <span class="comment">//方式1：普通for循环</span></span><br><span class="line">        <span class="keyword">for</span> i := <span class="number">0</span>;i &lt; <span class="built_in">len</span>(slice);i++ &#123;</span><br><span class="line">                fmt.Printf(<span class="string">&quot;slice[%v] = %v \t&quot;</span> ,i,slice[i])</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(<span class="string">&quot;\n------------------------------&quot;</span>)</span><br><span class="line">        <span class="comment">//方式2：for-range循环：</span></span><br><span class="line">        <span class="keyword">for</span> i,v := <span class="keyword">range</span> slice &#123;</span><br><span class="line">                fmt.Printf(<span class="string">&quot;下标：%v ，元素：%v\n&quot;</span> ,i,v)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="切片的注意事项"><a href="#切片的注意事项" class="headerlink" title="切片的注意事项:"></a>切片的注意事项:</h3><p>没啥注意事项,就把它当一个数组就行</p><h4 id="切片可以动态增长"><a href="#切片可以动态增长" class="headerlink" title="切片可以动态增长"></a>切片可以动态增长</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//定义数组：</span></span><br><span class="line">        <span class="keyword">var</span> intarr [<span class="number">6</span>]<span class="type">int</span> = [<span class="number">6</span>]<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>&#125;</span><br><span class="line">        <span class="comment">//定义切片：</span></span><br><span class="line">        <span class="keyword">var</span> slice []<span class="type">int</span> = intarr[<span class="number">1</span>:<span class="number">4</span>] <span class="comment">//4,7,3</span></span><br><span class="line">        fmt.Println(<span class="built_in">len</span>(slice))</span><br><span class="line">        slice2 := <span class="built_in">append</span>(slice,<span class="number">88</span>,<span class="number">50</span>)</span><br><span class="line">        fmt.Println(slice2) <span class="comment">//[4 7 3 88 50]</span></span><br><span class="line">        fmt.Println(slice)</span><br><span class="line">        <span class="comment">//底层原理：</span></span><br><span class="line">        <span class="comment">//1.底层追加元素的时候对数组进行扩容，老数组扩容为新数组：</span></span><br><span class="line">        <span class="comment">//2.创建一个新数组，将老数组中的4,7,3复制到新数组中，在新数组中追加88,50</span></span><br><span class="line">        <span class="comment">//3.slice2 底层数组的指向 指向的是新数组 </span></span><br><span class="line">        <span class="comment">//4.往往我们在使用追加的时候其实想要做的效果给slice追加：</span></span><br><span class="line">        slice = <span class="built_in">append</span>(slice,<span class="number">88</span>,<span class="number">50</span>)</span><br><span class="line">        fmt.Println(slice)</span><br><span class="line">        <span class="comment">//5.底层的新数组 不能直接维护，需要通过切片间接维护操作。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以通过append函数将切片追加给切片：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402221247784.png" alt="image-20220402221247784"></p><h4 id="切片的拷贝："><a href="#切片的拷贝：" class="headerlink" title="切片的拷贝："></a>切片的拷贝：</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//定义切片：</span></span><br><span class="line">        <span class="keyword">var</span> a []<span class="type">int</span> = []<span class="type">int</span>&#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">9</span>&#125;</span><br><span class="line">        <span class="comment">//再定义一个切片：</span></span><br><span class="line">        <span class="keyword">var</span> b []<span class="type">int</span> = <span class="built_in">make</span>([]<span class="type">int</span>,<span class="number">10</span>)</span><br><span class="line">        <span class="comment">//拷贝：</span></span><br><span class="line">        <span class="built_in">copy</span>(b,a) <span class="comment">//将a中对应数组中元素内容复制到b中对应的数组中</span></span><br><span class="line">        fmt.Println(b)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="10）map类型："><a href="#10）map类型：" class="headerlink" title="10）map类型："></a>10）map类型：</h2><h3 id="map的简介"><a href="#map的简介" class="headerlink" title="map的简介:"></a>map的简介:</h3><p><strong>基本语法:</strong></p><p>1</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span></span><br><span class="line">name = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>,<span class="number">10</span>)</span><br></pre></td></tr></table></figure><p>2</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">name := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>)</span><br></pre></td></tr></table></figure><p>3</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">name := <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>&#123;</span><br><span class="line">      <span class="number">20095452</span> : <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">      <span class="number">20098765</span> : <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意点:</strong></p><p>PS：key、value的类型：bool、数字、string、指针、channel 、还可以是只包含前面几个类型的接口、结构体、数组<br>PS：key通常为int 、string类型，value通常为数字（整数、浮点数）、string、map、结构体<br>PS：key：slice、map、function不可以</p><p><strong>一些小特点:</strong></p><p>（1）map集合在使用前一定要make<br>（2）map的key-value是无序的<br>（3）key是不可以重复的，如果遇到重复，后一个value会替换前一个value<br>（4）value可以重复的</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//方式1：</span></span><br><span class="line">        <span class="comment">//定义map变量：</span></span><br><span class="line">        <span class="keyword">var</span> a <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span></span><br><span class="line">        <span class="comment">//只声明map内存是没有分配空间</span></span><br><span class="line">        <span class="comment">//必须通过make函数进行初始化，才会分配空间：</span></span><br><span class="line">        a = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>,<span class="number">10</span>) <span class="comment">//map可以存放10个键值对</span></span><br><span class="line">        <span class="comment">//将键值对存入map中：</span></span><br><span class="line">        a[<span class="number">20095452</span>] = <span class="string">&quot;张三&quot;</span></span><br><span class="line">        a[<span class="number">20095387</span>] = <span class="string">&quot;李四&quot;</span></span><br><span class="line">        <span class="comment">//输出集合</span></span><br><span class="line">        fmt.Println(a)</span><br><span class="line">        <span class="comment">//方式2：</span></span><br><span class="line">        b := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>)</span><br><span class="line">        b[<span class="number">20095452</span>] = <span class="string">&quot;张三&quot;</span></span><br><span class="line">        b[<span class="number">20095387</span>] = <span class="string">&quot;李四&quot;</span></span><br><span class="line">        fmt.Println(b)</span><br><span class="line">        <span class="comment">//方式3：</span></span><br><span class="line">        c := <span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>&#123;</span><br><span class="line">                <span class="number">20095452</span> : <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">                <span class="number">20098765</span> : <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        c[<span class="number">20095387</span>] = <span class="string">&quot;王五&quot;</span></span><br><span class="line">        fmt.Println(c)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">map[20095387:李四 20095452:张三]</span><br><span class="line">map[20095387:李四 20095452:张三]</span><br><span class="line">map[20095387:王五 20095452:张三 20098765:李四]</span><br></pre></td></tr></table></figure><h3 id="map的一些操作"><a href="#map的一些操作" class="headerlink" title="map的一些操作"></a>map的一些操作</h3><p>【1】增加和更新操作:</p><p>map[“key”]&#x3D; value  ——》 如果key还没有，就是增加，如果key存在就是修改。</p><p>【2】删除操作：<br>delete(map，”key”) , delete是一个内置函数，如果key存在，就删除该key-value，如果k的y不存在，不操作，但是也不会报错</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402222209466.png" alt="image-20220402222209466"></p><p>【3】清空操作：<br>（1）如果我们要删除map的所有key ,没有一个专门的方法一次删除，可以遍历一下key,逐个删除<br>（2）或者map &#x3D; make(…)，make一个新的，让原来的成为垃圾，被gc回收</p><p>【4】查找操作：<br>value ,bool &#x3D; map[key]<br>value为返回的value，bool为是否返回 ，要么true 要么false </p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//定义map</span></span><br><span class="line">        b := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>)</span><br><span class="line">        <span class="comment">//增加：</span></span><br><span class="line">        b[<span class="number">20095452</span>] = <span class="string">&quot;张三&quot;</span></span><br><span class="line">        b[<span class="number">20095387</span>] = <span class="string">&quot;李四&quot;</span></span><br><span class="line">        <span class="comment">//修改：</span></span><br><span class="line">        b[<span class="number">20095452</span>] = <span class="string">&quot;王五&quot;</span></span><br><span class="line">        <span class="comment">//删除：</span></span><br><span class="line">        <span class="built_in">delete</span>(b,<span class="number">20095387</span>)</span><br><span class="line">        <span class="built_in">delete</span>(b,<span class="number">20089546</span>)</span><br><span class="line">        fmt.Println(b)</span><br><span class="line">        <span class="comment">//查找：</span></span><br><span class="line">        value,flag := b[<span class="number">200</span>]</span><br><span class="line">        fmt.Println(value)</span><br><span class="line">        fmt.Println(flag)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>【5】获取长度：len函数</p><p>【6】遍历：for-range</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//定义map</span></span><br><span class="line">        b := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>)</span><br><span class="line">        <span class="comment">//增加：</span></span><br><span class="line">        b[<span class="number">20095452</span>] = <span class="string">&quot;张三&quot;</span></span><br><span class="line">        b[<span class="number">20095387</span>] = <span class="string">&quot;李四&quot;</span></span><br><span class="line">        b[<span class="number">20098833</span>] = <span class="string">&quot;王五&quot;</span></span><br><span class="line">        <span class="comment">//获取长度：</span></span><br><span class="line">        fmt.Println(<span class="built_in">len</span>(b))</span><br><span class="line">        <span class="comment">//遍历：</span></span><br><span class="line">        <span class="keyword">for</span> k,v := <span class="keyword">range</span> b &#123;</span><br><span class="line">                fmt.Printf(<span class="string">&quot;key为：%v value为%v \t&quot;</span>,k,v)</span><br><span class="line">        &#125;</span><br><span class="line">        fmt.Println(<span class="string">&quot;---------------------------&quot;</span>)</span><br><span class="line">        <span class="comment">//加深难度：</span></span><br><span class="line">        a := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>)</span><br><span class="line">        <span class="comment">//赋值：</span></span><br><span class="line">        a[<span class="string">&quot;班级1&quot;</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>,<span class="number">3</span>)</span><br><span class="line">        a[<span class="string">&quot;班级1&quot;</span>][<span class="number">20096677</span>] = <span class="string">&quot;露露&quot;</span></span><br><span class="line">        a[<span class="string">&quot;班级1&quot;</span>][<span class="number">20098833</span>] = <span class="string">&quot;丽丽&quot;</span></span><br><span class="line">        a[<span class="string">&quot;班级1&quot;</span>][<span class="number">20097722</span>] = <span class="string">&quot;菲菲&quot;</span></span><br><span class="line">        a[<span class="string">&quot;班级2&quot;</span>] = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">int</span>]<span class="type">string</span>,<span class="number">3</span>)</span><br><span class="line">        a[<span class="string">&quot;班级2&quot;</span>][<span class="number">20089911</span>] = <span class="string">&quot;小明&quot;</span></span><br><span class="line">        a[<span class="string">&quot;班级2&quot;</span>][<span class="number">20085533</span>] = <span class="string">&quot;小龙&quot;</span></span><br><span class="line">        a[<span class="string">&quot;班级2&quot;</span>][<span class="number">20087244</span>] = <span class="string">&quot;小飞&quot;</span></span><br><span class="line">        <span class="keyword">for</span> k1,v1:= <span class="keyword">range</span> a &#123;</span><br><span class="line">                fmt.Println(k1)</span><br><span class="line">                <span class="keyword">for</span> k2,v2:= <span class="keyword">range</span> v1&#123;</span><br><span class="line">                        fmt.Printf(<span class="string">&quot;学生学号为：%v 学生姓名为%v \t&quot;</span>,k2,v2)</span><br><span class="line">                &#125;</span><br><span class="line">                fmt.Println()</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个好屌啊</p><p>map和slice都是指针指向,就像引用类型一样</p><h2 id="11）面向对象"><a href="#11）面向对象" class="headerlink" title="11）面向对象"></a>11）面向对象</h2><h3 id="面向对象的引入："><a href="#面向对象的引入：" class="headerlink" title="面向对象的引入："></a>面向对象的引入：</h3><p>【1】Golang语言面向对象编程说明：<br>（1）Golang也支持面向对象编程(OOP)，但是和传统的面向对象编程有区别，并不是纯粹的面向对象语言。所以我们说Golang支持面向对象编程特性是比较准确的。<br>（2）Golang没有类(class)，<strong>Go语言的结构体(struct)和其它编程语言的类(class)有同等的地位</strong>，你可以理解Gelang是基于struct来实现OOP特性的。<br>（3）Golang面向对象编程非常简洁，<strong>去掉了传统OOP语言的方法重载、构造函数和析构函数、隐藏的this指针等等</strong><br>（4）<strong>Golang仍然有面向对象编程的继承，封装和多态的特性，只是实现的方式和其它OOP语言不一样</strong>，比如继承:Golang没有extends 关键字，继承是通过匿名字段来实现。 </p><p>【2】结构体的引入：</p><p>具体的对象：<br>一位老师：珊珊老师： 姓名：赵珊珊   年龄：31岁   性别 ：女 …… </p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="comment">//定义老师结构体，将老师中的各个属性  统一放入结构体中管理：</span></span><br><span class="line"><span class="keyword">type</span> Teacher <span class="keyword">struct</span>&#123;</span><br><span class="line">        <span class="comment">//变量名字大写外界可以访问这个属性</span></span><br><span class="line">        Name <span class="type">string</span></span><br><span class="line">        Age <span class="type">int</span></span><br><span class="line">        School <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建老师结构体的实例、对象、变量：</span></span><br><span class="line">        <span class="keyword">var</span> t1 Teacher <span class="comment">// var a int</span></span><br><span class="line">        fmt.Println(t1) <span class="comment">//在未赋值时默认值：&#123; 0 &#125;</span></span><br><span class="line">        t1.Name = <span class="string">&quot;兴趣使然的小小&quot;</span></span><br><span class="line">        t1.Age = <span class="number">20</span></span><br><span class="line">        t1.School = <span class="string">&quot;成都信息工程大学&quot;</span></span><br><span class="line">        fmt.Println(t1)</span><br><span class="line">        fmt.Println(t1.Age + <span class="number">10</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; 0 &#125;</span><br><span class="line">&#123;兴趣使然的小小 20 成都信息工程大学&#125;</span><br><span class="line">30      </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402223248910.png" alt="image-20220402223248910"></p><h3 id="结构体的实例创建方式"><a href="#结构体的实例创建方式" class="headerlink" title="结构体的实例创建方式:"></a>结构体的实例创建方式:</h3><p>注意结构体传的是值,所以一般都是要传指针进去;</p><p>【1】方式1：直接创建：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402223406805.png" alt="image-20220402223406805"></p><p>【2】方式2：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402223420964.png" alt="image-20220402223420964"></p><p>【3】方式3：返回的是结构体指针：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402223448562.png" alt="image-20220402223448562"></p><p>【4】方式4：返回的是结构体指针：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402223509934.png" alt="image-20220402223509934"></p><h3 id="结构体之间的转换"><a href="#结构体之间的转换" class="headerlink" title="结构体之间的转换:"></a>结构体之间的转换:</h3><p>【1】结构体是用户单独定义的类型，和其它类型进行转换时需要有完全相同的字段(名字、个数和类型)</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Person <span class="keyword">struct</span> &#123;</span><br><span class="line">Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">//var s Student = Student&#123;10&#125;</span></span><br><span class="line"><span class="keyword">var</span> p Person = Person&#123;<span class="number">10</span>&#125;</span><br><span class="line">s := Student(p)</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T&quot;</span>, s)</span><br><span class="line">fmt.Println()</span><br><span class="line">fmt.Printf(<span class="string">&quot;%T&quot;</span>, p)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">main.Student</span><br><span class="line">main.Person</span><br></pre></td></tr></table></figure><p>emmm这个:</p><p>【2】结构体进行type重新定义(相当于取别名)，Golang认为是新的数据类型，但是相互间可以强转</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">        Age <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">type</span> Stu Student</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">var</span> s1 Student = Student&#123;<span class="number">19</span>&#125;</span><br><span class="line">        <span class="keyword">var</span> s2 Stu = Stu&#123;<span class="number">19</span>&#125;</span><br><span class="line">        s1 = Student(s2)</span><br><span class="line">        fmt.Println(s1)</span><br><span class="line">        fmt.Println(s2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来的还要看这个视频<a href="https://www.bilibili.com/video/BV1gf4y1r79E?p=15&t=1.3">传送门</a></p><h3 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h3><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>利用 type 可以声明某个类型的别名（理解为声明一种新的数据类型）</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> myint <span class="type">int</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="keyword">var</span> a myint = <span class="number">10</span></span><br><span class="line">fmt.Println(<span class="string">&quot;a = &quot;</span>, a)</span><br><span class="line">fmt.Printf(<span class="string">&quot;type of a = %T\n&quot;</span>, a)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a =  <span class="number">10</span></span><br><span class="line"><span class="keyword">type</span> of a = main.myint</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h4><p><strong>方法</strong>：包含了接受者的函数，接受者可以是命名类型或结构体类型的值或者指针。</p><p><strong>方法和普通函数的区别</strong>：</p><ul><li>对于普通函数，参数为值类型时，不能将指针类型的数据直接传递，反之亦然。</li><li>对于方法，接收者为值类型时，可以直接用指针类型的变量调用方法（反过来也可以）。</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.普通函数</span></span><br><span class="line"><span class="comment">// 接收值类型参数的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">valueIntTest</span><span class="params">(a <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> a + <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收指针类型参数的函数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">pointerIntTest</span><span class="params">(a *<span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> *a + <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">structTestValue</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := <span class="number">2</span></span><br><span class="line">fmt.Println(<span class="string">&quot;valueIntTest:&quot;</span>, valueIntTest(a))</span><br><span class="line"><span class="comment">// 函数的参数为值类型，则不能直接将指针作为参数传递</span></span><br><span class="line"><span class="comment">// fmt.Println(&quot;valueIntTest:&quot;, valueIntTest(&amp;a))</span></span><br><span class="line"><span class="comment">// compile error: cannot use &amp;a (type *int) as type int in function argument</span></span><br><span class="line"></span><br><span class="line">b := <span class="number">5</span></span><br><span class="line">fmt.Println(<span class="string">&quot;pointerIntTest:&quot;</span>, pointerIntTest(&amp;b))</span><br><span class="line"><span class="comment">// 同样，当函数的参数为指针类型时，也不能直接将值类型作为参数传递</span></span><br><span class="line"><span class="comment">// fmt.Println(&quot;pointerIntTest:&quot;, pointerIntTest(b))</span></span><br><span class="line"><span class="comment">// compile error:cannot use b (type int) as type *int in function argument</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对象的方法: <strong>golang中,就好似吧类的属性和方法给分开来写了</strong></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.方法</span></span><br><span class="line"><span class="keyword">type</span> PersonD <span class="keyword">struct</span> &#123;</span><br><span class="line">id   <span class="type">int</span></span><br><span class="line">name <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收者为值类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p PersonD)</span></span> valueShowName() &#123;</span><br><span class="line">fmt.Println(p.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接收者为指针类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(p *PersonD)</span></span> pointShowName() &#123;</span><br><span class="line">fmt.Println(p.name)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">structTestFunc</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 与普通函数不同，接收者为指针类型和值类型的方法，指针类型和值类型的变量均可相互调用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 值类型调用方法</span></span><br><span class="line">personValue := PersonD&#123;<span class="number">101</span>, <span class="string">&quot;hello world&quot;</span>&#125;</span><br><span class="line">personValue.valueShowName()</span><br><span class="line">personValue.pointShowName()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 指针类型调用方法</span></span><br><span class="line">personPointer := &amp;PersonD&#123;<span class="number">102</span>, <span class="string">&quot;hello golang&quot;</span>&#125;</span><br><span class="line">personPointer.valueShowName()</span><br><span class="line">personPointer.pointShowName()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一道 struct 与指针面试题：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> student <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">age  <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="type">string</span>]*student)</span><br><span class="line">stus := []student&#123;</span><br><span class="line">&#123;name: <span class="string">&quot;aaa&quot;</span>, age: <span class="number">18</span>&#125;,</span><br><span class="line">&#123;name: <span class="string">&quot;bbb&quot;</span>, age: <span class="number">23</span>&#125;,</span><br><span class="line">&#123;name: <span class="string">&quot;ccc&quot;</span>, age: <span class="number">28</span>&#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, stu := <span class="keyword">range</span> stus &#123;</span><br><span class="line">m[stu.name] = &amp;stu</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> k, v := <span class="keyword">range</span> m &#123;</span><br><span class="line">fmt.Println(k, <span class="string">&quot;=&gt;&quot;</span>, v.name)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aaa =&gt; ccc</span><br><span class="line">bbb =&gt; ccc</span><br><span class="line">ccc =&gt; ccc</span><br></pre></td></tr></table></figure><p><strong>一般一个包就是一个类</strong></p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>Golang 中，类名、属性名、⽅法名 <strong>首字⺟大写</strong> 表示对外（其他包）可以访问，否则只能够在本包内访问。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果类名首字母大写，表示其他包也能够访问</span></span><br><span class="line"><span class="keyword">type</span> Hero <span class="keyword">struct</span> &#123;</span><br><span class="line"><span class="comment">// 如果类的属性首字母大写, 表示该属性是对外能够访问的，否则的话只能够类的内部访问</span></span><br><span class="line">Name  <span class="type">string</span></span><br><span class="line">Ad    <span class="type">int</span></span><br><span class="line">level <span class="type">int</span> <span class="comment">// 只能本包访问</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Hero)</span></span> Show() &#123;<span class="comment">//类似toString方法</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Name = &quot;</span>, h.Name)</span><br><span class="line">fmt.Println(<span class="string">&quot;Ad = &quot;</span>, h.Ad)</span><br><span class="line">fmt.Println(<span class="string">&quot;Level = &quot;</span>, h.level)</span><br><span class="line">fmt.Println(<span class="string">&quot;---------&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Hero)</span></span> GetName() <span class="type">string</span> &#123;<span class="comment">//get方法</span></span><br><span class="line"><span class="keyword">return</span> h.Name</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不用指针则传递的是副本，无法赋值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Hero)</span></span> SetName(newName <span class="type">string</span>) &#123;<span class="comment">//set方法</span></span><br><span class="line">h.Name = newName</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">hero := Hero&#123;Name: <span class="string">&quot;zhang3&quot;</span>, Ad: <span class="number">100</span>&#125;</span><br><span class="line">hero.Show()</span><br><span class="line"></span><br><span class="line">hero.SetName(<span class="string">&quot;li4&quot;</span>)</span><br><span class="line">hero.Show()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">Name =  zhang3</span><br><span class="line">Ad =  <span class="number">100</span></span><br><span class="line">Level =  <span class="number">0</span></span><br><span class="line">---------</span><br><span class="line">Name =  li4</span><br><span class="line">Ad =  <span class="number">100</span></span><br><span class="line">Level =  <span class="number">0</span></span><br><span class="line">---------</span><br></pre></td></tr></table></figure><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>Golang 通过<strong>匿名字段</strong>实现继承的效果：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="keyword">type</span> Human <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">sex  <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Human)</span></span> Eat() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Human.Eat()...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *Human)</span></span> Walk() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Human.Walk()...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="keyword">type</span> SuperMan <span class="keyword">struct</span> &#123;</span><br><span class="line">Human <span class="comment">// SuperMan类继承了Human类的方法</span></span><br><span class="line">level <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重定义父类的方法Eat()</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SuperMan)</span></span> Eat() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;SuperMan.Eat()...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子类的新方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *SuperMan)</span></span> Fly() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;SuperMan.Fly()...&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  <span class="comment">// 定义一个子类对象</span></span><br><span class="line">  <span class="comment">// s := SuperMan&#123;Human&#123;&quot;li4&quot;, &quot;female&quot;&#125;, 88&#125;</span></span><br><span class="line">  <span class="keyword">var</span> s SuperMan</span><br><span class="line">  s.name = <span class="string">&quot;li4&quot;</span></span><br><span class="line">  s.sex = <span class="string">&quot;male&quot;</span></span><br><span class="line">  s.level = <span class="number">88</span></span><br><span class="line"></span><br><span class="line">  s.Walk() <span class="comment">// 父类的方法</span></span><br><span class="line">  s.Eat()  <span class="comment">// 子类的方法</span></span><br><span class="line">  s.Fly()  <span class="comment">// 子类的方法 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Human.Walk()...</span><br><span class="line">SuperMan.Eat()...</span><br><span class="line">SuperMan.Fly()...</span><br></pre></td></tr></table></figure><h3 id="多态"><a href="#多态" class="headerlink" title="多态:"></a>多态:</h3><blockquote><p>Go 中接口相关文章：理解<em>Duck Typing</em>（鸭子模型）</p><ul><li><a href="https://www.zhihu.com/question/318138275/answer/699989214">如何理解Golang中的接口？ - 波罗学的回答 - 知乎</a></li></ul></blockquote><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>回答结束，做个简单总结。理解 Go 接口要记住一点，接口是一组方法的集合，这句话非常重要，理解了这句话，再去理解 Go 的其他知识，比如类型、多态、空接口、反射、类型检查与断言等就会容易很多。</p><p>Golang 中多态的基本要素：</p><ul><li>有一个父类（有接口）</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 本质是一个指针</span></span><br><span class="line"><span class="keyword">type</span> AnimalIF <span class="keyword">interface</span> &#123;</span><br><span class="line">Sleep()</span><br><span class="line">GetColor() <span class="type">string</span> <span class="comment">//  获取动物的颜色</span></span><br><span class="line">GetType() <span class="type">string</span>  <span class="comment">// 获取动物的种类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>有子类（实现了父类的全部接口）</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 具体的类</span></span><br><span class="line"><span class="keyword">type</span> Cat <span class="keyword">struct</span> &#123;</span><br><span class="line">color <span class="type">string</span> <span class="comment">// 猫的颜色</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Cat)</span></span> Sleep() &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Cat is Sleep&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Cat)</span></span> GetColor() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.color</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Cat)</span></span> GetType() <span class="type">string</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Cat&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>父类类型的变量（指针）指向（引用）子类的具体数据变量</li></ul><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 接口的数据类型，父类指针</span></span><br><span class="line"><span class="keyword">var</span> animal AnimalIF</span><br><span class="line">animal = &amp;Cat&#123;<span class="string">&quot;Green&quot;</span>&#125;</span><br><span class="line">animal.Sleep() <span class="comment">// 调用的就是Cat的Sleep()方法, 多态</span></span><br></pre></td></tr></table></figure><h4 id="不同接收者实现接口"><a href="#不同接收者实现接口" class="headerlink" title="不同接收者实现接口"></a>不同接收者实现接口</h4><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Mover <span class="keyword">interface</span> &#123;</span><br><span class="line">move()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> dog <span class="keyword">struct</span> &#123;</span><br><span class="line">name <span class="type">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>值类型接收者实现接口</strong>：可以同时接收 值类型 和 指针类型。</p><blockquote><p>Go 语言中有对指针类型变量求值的语法糖，dog 指针 <code>dog2</code> 内部会自动求值 <code>*dog2</code></p></blockquote><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可以同时接收 值类型 和 指针类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d dog)</span></span> move() &#123;</span><br><span class="line">fmt.Println(d.name, <span class="string">&quot;is moving&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> m Mover</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog1 = dog&#123;<span class="string">&quot;dog1&quot;</span>&#125;</span><br><span class="line">m = dog1 <span class="comment">// 可以接收值类型</span></span><br><span class="line">m.move()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog2 = &amp;dog&#123;<span class="string">&quot;dog2&quot;</span>&#125;</span><br><span class="line">m = dog2 <span class="comment">// 可以接收指针类型</span></span><br><span class="line">m.move()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>指针类型接收者实现接口</strong>：只能接收指针类型。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只能接收指针类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(d *dog)</span></span> move() &#123;</span><br><span class="line">fmt.Println(d.name, <span class="string">&quot;is moving&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> m Mover</span><br><span class="line"></span><br><span class="line"><span class="comment">// 无法接收指针类型</span></span><br><span class="line"><span class="comment">// var dog1 = dog&#123;&quot;dog1&quot;&#125;</span></span><br><span class="line"><span class="comment">// m = dog1</span></span><br><span class="line"><span class="comment">//m.move()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog2 = &amp;dog&#123;<span class="string">&quot;dog2&quot;</span>&#125;</span><br><span class="line">m = dog2</span><br><span class="line">m.move()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一道面试题：以下代码能否通过编译？</strong></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> People <span class="keyword">interface</span> &#123;</span><br><span class="line">Speak(<span class="type">string</span>) <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(stu *Student)</span></span> Speak(think <span class="type">string</span>) (talk <span class="type">string</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> think == <span class="string">&quot;sb&quot;</span> &#123;</span><br><span class="line">talk = <span class="string">&quot;你是个大帅比&quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">talk = <span class="string">&quot;您好&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> peo People = Student&#123;&#125;</span><br><span class="line">think := <span class="string">&quot;bitch&quot;</span></span><br><span class="line">fmt.Println(peo.Speak(think))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>不能</strong>。修改 <code>var peo People = Student&#123;&#125;</code> 为 <code>var peo People = &amp;Student&#123;&#125;</code> 即可。</p><p>这里新发现了一个语法糖: 就是方法中的<code>func (stu *Student) Speak(think string) (talk string) &#123;</code></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(stu *Student)</span></span> Speak(think <span class="type">string</span>) (talk <span class="type">string</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> think == <span class="string">&quot;sb&quot;</span> &#123;</span><br><span class="line">talk = <span class="string">&quot;你是个大帅比&quot;</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">talk = <span class="string">&quot;您好&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>talk可以在第一行就进行声明了,因为它就是当返回值来着</strong></p><p><strong>多态就可以引出一个,类似泛型的东西:就是下面的通用万能类型</strong></p><h4 id="通用万能类型"><a href="#通用万能类型" class="headerlink" title="通用万能类型"></a>通用万能类型</h4><p><code>interface&#123;&#125;</code> 表示空接口，可以用它引用任意类型的数据类型。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// interface&#123;&#125;是万能数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myFunc</span><span class="params">(arg <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">fmt.Println(arg)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Book <span class="keyword">struct</span> &#123;</span><br><span class="line">auth <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">book := Book&#123;<span class="string">&quot;Golang&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">myFunc(book)</span><br><span class="line">myFunc(<span class="number">100</span>)</span><br><span class="line">myFunc(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">myFunc(<span class="number">3.14</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="断言"><a href="#断言" class="headerlink" title="断言:"></a>断言:</h3><p>Golang 给 <code>interface&#123;&#125;</code> 提供类型断言机制，用来区分此时引用的类型：</p><blockquote><p><strong>注意断言这个操作会有两个返回值</strong></p></blockquote><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// interface&#123;&#125;是万能数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">myFunc</span><span class="params">(arg <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line"><span class="comment">// 类型断言</span></span><br><span class="line">value, ok := arg.(<span class="type">string</span>)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;arg is not string type&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;arg is string type, value = &quot;</span>, value)</span><br><span class="line">fmt.Printf(<span class="string">&quot;value type is %T\n&quot;</span>, value)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Book <span class="keyword">struct</span> &#123;</span><br><span class="line">auth <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">book := Book&#123;<span class="string">&quot;Golang&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">myFunc(book)</span><br><span class="line">myFunc(<span class="number">100</span>)</span><br><span class="line">myFunc(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line">myFunc(<span class="number">3.14</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">arg is not string type</span><br><span class="line">arg is not string type</span><br><span class="line">arg is string type, value =  abc</span><br><span class="line">value type is string</span><br><span class="line">arg is not string type</span><br></pre></td></tr></table></figure><p>一个接口的值（简称接口值）是由一个 <strong>具体类型</strong> 和 <strong>具体类型的值</strong> 两部分组成的。</p><p>这两部分分别称为接口的动态类型和动态值。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> w io.Writer<span class="comment">//默认为空</span></span><br><span class="line">w = os.Stdout<span class="comment">//这里指的是引用了其他的,就不为空了</span></span><br><span class="line">w = <span class="built_in">new</span>(bytes.Buffer)<span class="comment">//这里也是,就不为空了</span></span><br><span class="line">w = <span class="literal">nil</span></span><br></pre></td></tr></table></figure><p>为了更好理解:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">    <span class="string">&quot;fmt&quot;</span></span><br><span class="line">    <span class="string">&quot;io&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">show</span><span class="params">()</span></span> &#123;</span><br><span class="line">    fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> buf io.Writer = <span class="literal">nil</span></span><br><span class="line">    <span class="comment">// buf = new(bytes.Buffer)</span></span><br><span class="line">    interfaceParam(buf)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">interfaceParam</span><span class="params">(bufItf io.Writer)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> bufItf != <span class="literal">nil</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;吃鲸!&quot;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        fmt.Println(<span class="string">&quot;预期结果!&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// fmt.Println(reflect.ValueOf(bufItf).Kind())</span></span><br><span class="line">    <span class="comment">// fmt.Println(reflect.ValueOf(bufItf).Type())</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220404203901033.png" alt="image-20220404203901033"></p><p>switch判断多个断言:</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">justifyType</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">    <span class="keyword">switch</span> v := x.(<span class="keyword">type</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="type">string</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;x is a string，value is %v\n&quot;</span>, v)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">int</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;x is a int is %v\n&quot;</span>, v)</span><br><span class="line">    <span class="keyword">case</span> <span class="type">bool</span>:</span><br><span class="line">        fmt.Printf(<span class="string">&quot;x is a bool is %v\n&quot;</span>, v)</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        fmt.Println(<span class="string">&quot;unsupport type！&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>golang基础篇完结</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> go后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 入门 </tag>
            
            <tag> go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将jar包部署到docker上</title>
      <link href="/2022/03/30/%E5%B0%86jar%E5%8C%85%E9%83%A8%E7%BD%B2%E5%88%B0docker%E4%B8%8A%E5%B9%B6%E8%BF%90%E8%A1%8C/"/>
      <url>/2022/03/30/%E5%B0%86jar%E5%8C%85%E9%83%A8%E7%BD%B2%E5%88%B0docker%E4%B8%8A%E5%B9%B6%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<p>对于springboot,可以通过java -jar的方式运行,如果想要到docker上面去运行</p><p><a href="https://blog.csdn.net/qq_39934154/article/details/121985650?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_default&utm_relevant_index=2">这里有大佬的多种打包方式</a></p><p><a href="https://blog.csdn.net/lovely__RR/article/details/109380510">对于tomcat无法访问的问题,可能是防火墙没有打开的原因</a></p><p>简单记录一下docker上部署jar,听说以后手动的方式应用应该不多!</p><p>现在微服务大多数用集群方式部署</p><p><strong>现在我们打包一个简单的springboot工程:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220330193148490.png" alt="image-20220330193148490"></p><p>用maven打包一下:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220330193222449.png" alt="image-20220330193222449"></p><p>这里直接将打包好的jar包用Xftp上传到服务器上面的一个自己建的文件夹mydocker上面:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220330193344979.png" alt="image-20220330193344979"></p><p><strong>在服务器的同目录下再见一个Dockerfile文件:</strong></p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> ladidol</span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> springboot01helloworld-0.0.1-SNAPSHOT.jar demo.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8999</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;demo.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>然后通过Dockerfile文件build镜像,<strong>一定要注意后面有一个英文的句号  .</strong></p><blockquote><p>docker build -t mydemo .</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZ2vc5bu6hb90ck1lw0pdtZ mydocker]<span class="comment"># docker build -t mydemo .</span></span><br><span class="line">Sending build context to Docker daemon  17.58MB</span><br><span class="line">Step 1/5 : FROM java:8</span><br><span class="line"> ---&gt; d23bdf5b1b1b</span><br><span class="line">Step 2/5 : MAINTAINER ladidol</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 1f76519d1968</span><br><span class="line">Step 3/5 : ADD springboot01helloworld-0.0.1-SNAPSHOT.jar demo.jar</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; fbefa64fcfa4</span><br><span class="line">Step 4/5 : EXPOSE 8999</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; c4104f977093</span><br><span class="line">Step 5/5 : ENTRYPOINT [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;demo.jar&quot;</span>]</span><br><span class="line"> ---&gt; Using cache</span><br><span class="line"> ---&gt; 1369046aeb89</span><br><span class="line">Successfully built 1369046aeb89</span><br><span class="line">Successfully tagged mydemo:latest</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220330194048106.png" alt="image-20220330194048106"></p><p>然后用docker run命令创建并运行一下容器:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run  -d --name ladidolspringboot -p 8999:8999 mydemo</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@iZ2vc5bu6hb90ck1lw0pdtZ mydocker]# docker run  -d --name ladidolspringboot -p 8999:8999 mydemo</span><br><span class="line">3e1627721795be8d6c246897c5173b0dbdd869c35ecb2e47c765a3b02682cf77</span><br></pre></td></tr></table></figure><p>命令解释如下:</p><table><thead><tr><th>命令</th><th>功能</th></tr></thead><tbody><tr><td>docker run</td><td>创建并启动容器</td></tr><tr><td>–name</td><td>指定一个容器名称</td></tr><tr><td>-d</td><td>后台运行容器，并返回容器ID</td></tr><tr><td>-p</td><td>指定端口</td></tr><tr><td>user</td><td>需要启动的镜像（名称+版本）不指定版本默认最新版本</td></tr><tr><td>：</td><td>符号左边为宿主机，右边为容器空间</td></tr></tbody></table><p>浏览器访问一下:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220330194527607.png" alt="image-20220330194527607"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220330194541967.png" alt="image-20220330194541967"></p><p><strong>运行成功!</strong></p><p><strong>这里附上几个关于服务器防火墙相关的指令:</strong></p><p>服务器上面将我们的想要开的窗口给打开:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --permanent --add-port=8999/tcp</span><br></pre></td></tr></table></figure><p>将端口开放之后我们需要将该效果重新刷新,通过以下命令就可以实现:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>重新刷新之后我们通过下面的命令查看已经开通的端口号:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --list-all </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220330194906096.png" alt="image-20220330194906096"></p><p>这样表示已经打开了想要的端口</p><p>文章部分内容来自<a href="https://blog.csdn.net/weixin_42054155/article/details/90815393">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分治练习题集</title>
      <link href="/2022/03/29/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5D%E5%88%86%E6%B2%BB%E7%BB%83%E4%B9%A0%E9%A2%98%E9%9B%86/"/>
      <url>/2022/03/29/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5D%E5%88%86%E6%B2%BB%E7%BB%83%E4%B9%A0%E9%A2%98%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="53-最大子数组和"><a href="#53-最大子数组和" class="headerlink" title="53.最大子数组和"></a><a href="https://leetcode-cn.com/problems/maximum-subarray/">53.最大子数组和</a></h2><blockquote><p>将原数组划分为左右两个数组后，原数组中拥有最大和的连续子数组的位置有三张情况。<br>情况1. 原数组中拥有最大和的连续子数组的元素都在左边的子数组中。<br>情况2. 原数组中拥有最大和的连续子数组的元素都在右边的子数组中。<br>情况3. 原数组中拥有最大和的连续子数组的元素跨越了左右数组。<br>分别求出，3中情况的最大和，取最大，就是原数组的连续子数组的最大和。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328171650503.png" alt="image-20220328171650503"></p><p>所以在具体考虑的时候需要将无法递归得到结果的中间那个最大值串的结果也算出来参与左侧、右侧值得比较。所以对中间值的取法有很多种;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果子数组只有一个元素，这个元素就是子树组的最大和。</span></span><br><span class="line">        <span class="keyword">if</span> (low == high) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[low];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 求左数组的最大和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">leftMax</span> <span class="operator">=</span> getMax(nums, low, mid);</span><br><span class="line">        <span class="comment">// 求右数组的最大和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rightMax</span> <span class="operator">=</span> getMax(nums, mid + <span class="number">1</span>, high);</span><br><span class="line">        <span class="comment">// 求跨越情况的最大和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">crossMax</span> <span class="operator">=</span> getCrossMax(nums, low, mid, high);</span><br><span class="line">        <span class="comment">// 返回最大</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(Math.max(leftMax, rightMax), crossMax);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 求跨越情况的最大和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCrossMax</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> low, <span class="type">int</span> mid, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="comment">//初始化</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lowSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">lowMax</span> <span class="operator">=</span> nums[mid];</span><br><span class="line">        <span class="type">int</span> <span class="variable">highSum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">highMax</span> <span class="operator">=</span> nums[mid];</span><br><span class="line">        <span class="comment">// 从中间向左走，一直累加，每次累计后都取最大值，最后得到的就是从中间向左累加可得到最大和</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mid; i &gt;= low; i--) &#123;</span><br><span class="line">            lowSum += nums[i];</span><br><span class="line">            lowMax = Math.max(lowSum, lowMax);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从中间向右走，一直累加，每次累计后都取最大值，最后得到的就是从中间向右累加可得到最大和</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mid; i &lt;= high; i++) &#123;</span><br><span class="line">            highSum += nums[i];</span><br><span class="line">            highMax = Math.max(highSum, highMax);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> highMax + lowMax - nums[mid];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getMax(nums, <span class="number">0</span>, nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="169-多数元素"><a href="#169-多数元素" class="headerlink" title="169. 多数元素"></a><a href="https://leetcode-cn.com/problems/majority-element/">169. 多数元素</a></h2><p>题解<a href="https://leetcode-cn.com/problems/majority-element/solution/acm-xuan-shou-tu-jie-leetcode-169-duo-sh-y1sr/">传送门</a></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class 多数元素fenzhi &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">count</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;<span class="comment">//计数target有多少个函数</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= end; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == target)&#123;</span><br><span class="line">                count ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="type">int</span> <span class="title function_">majorityElementRec</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> start, <span class="type">int</span> end)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(start == end)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums[start];</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> start + (end - start) / <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> majorityElementRec(nums, start, mid);</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> majorityElementRec(nums, mid + <span class="number">1</span>, end);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(left == right)&#123;</span><br><span class="line">            <span class="comment">//两边都相等的话,就随便返回一个</span></span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//到这里就说说明,left和right不相等,有分歧;</span></span><br><span class="line">        <span class="comment">//所以合并left和right数组,再来看谁最多;</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">leftCount</span> <span class="operator">=</span> count(nums, left, start, end);</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightCount</span> <span class="operator">=</span> count(nums, right, start, end);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> leftCount &gt; rightCount ? left: right;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">majorityElement</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> majorityElementRec(nums, <span class="number">0</span>, nums.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springMVC</title>
      <link href="/2022/03/28/SpringMVC/"/>
      <url>/2022/03/28/SpringMVC/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><h1 id="什么是SpringMVC"><a href="#什么是SpringMVC" class="headerlink" title="什么是SpringMVC"></a>什么是SpringMVC</h1><p><a href="https://blog.csdn.net/xiangminlu/article/details/105680357?utm_source=app&app_version=5.1.1&code=app_1562916241&uLinkId=usr1mkqgl919blen">传送门</a></p><p>跟着狂神的笔记走</p><h2 id="1、回顾MVC"><a href="#1、回顾MVC" class="headerlink" title="1、回顾MVC"></a>1、回顾MVC</h2><h3 id="1-1、什么是MVC"><a href="#1-1、什么是MVC" class="headerlink" title="1.1、什么是MVC"></a>1.1、什么是MVC</h3><ul><li>MVC是模型(Model)、视图(View)、控制器(Controller)的简写，是一种软件设计规范。</li><li>是将业务逻辑、数据、显示分离的方法来组织代码。</li><li>MVC主要作用是<strong>降低了视图与业务逻辑间的双向偶合</strong>。</li><li>MVC不是一种设计模式，<strong>MVC是一种架构模式</strong>。当然不同的MVC存在差异。</li></ul><p><strong>Model（模型）：</strong>数据模型，提供要展示的数据，因此包含数据和行为，可以认为是领域模型或JavaBean组件（包含数据和行为），不过现在一般都分离开来：Value Object（数据Dao） 和 服务层（行为Service）。也就是模型提供了模型数据查询和模型数据的状态更新等功能，包括数据和业务。</p><p><strong>View（视图）：</strong>负责进行模型的展示，一般就是我们见到的用户界面，客户想看到的东西。</p><p><strong>Controller（控制器）：</strong>接收用户请求，委托给模型进行处理（状态改变），处理完毕后把返回的模型数据返回给视图，由视图负责展示。也就是说控制器做了个调度员的工作。</p><p><strong>最典型的MVC就是JSP + servlet + javabean的模式。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328105750587.png" alt="image-20220328105750587"></p><h3 id="1-2、Model1时代"><a href="#1-2、Model1时代" class="headerlink" title="1.2、Model1时代"></a>1.2、Model1时代</h3><ul><li>在web早期的开发中，通常采用的都是Model1。</li><li>Model1中，主要分为两层，视图层和模型层。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328105813905.png" alt="image-20220328105813905"></p><p>Model1优点：架构简单，比较适合小型项目开发；</p><p>Model1缺点：JSP职责不单一，职责过重，不便于维护；</p><h3 id="1-3、Model2时代"><a href="#1-3、Model2时代" class="headerlink" title="1.3、Model2时代"></a>1.3、Model2时代</h3><p>Model2把一个项目分成三部分，包括<strong>视图、控制、模型。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328105829629.png" alt="image-20220328105829629"></p><ol><li>用户发请求</li><li>Servlet接收请求数据，并调用对应的业务逻辑方法</li><li>业务处理完毕，返回更新后的数据给servlet</li><li>servlet转向到JSP，由JSP来渲染页面</li><li>响应给前端更新后的页面</li></ol><p><strong>职责分析：</strong></p><p><strong>Controller：控制器</strong></p><ol><li>取得表单数据</li><li>调用业务逻辑</li><li>转向指定的页面</li></ol><p><strong>Model：模型</strong></p><ol><li>业务逻辑</li><li>保存数据的状态</li></ol><p><strong>View：视图</strong></p><ol><li>显示页面</li></ol><p>Model2这样不仅提高的代码的复用率与项目的扩展性，且大大降低了项目的维护成本。Model 1模式的实现比较简单，适用于快速开发小规模项目，Model1中JSP页面身兼View和Controller两种角色，将控制逻辑和表现逻辑混杂在一起，从而导致代码的重用性非常低，增加了应用的扩展性和维护的难度。Model2消除了Model1的缺点。</p><h3 id="1-4、回顾Servlet"><a href="#1-4、回顾Servlet" class="headerlink" title="1.4、回顾Servlet"></a>1.4、回顾Servlet</h3><ol><li><p>新建一个Maven工程当做父工程！pom依赖！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>建立一个Moudle：springmvc-01-servlet ， 添加Web app的支持！</p></li><li><p>导入servlet 和 jsp 的 jar 依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写一个Servlet类，用来处理用户的请求</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.servlet;</span><br><span class="line"><span class="comment">//实现Servlet接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       <span class="comment">//取得参数</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;method&quot;</span>);</span><br><span class="line">       <span class="keyword">if</span> (method.equals(<span class="string">&quot;add&quot;</span>))&#123;</span><br><span class="line">           req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;执行了add方法&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">if</span> (method.equals(<span class="string">&quot;delete&quot;</span>))&#123;</span><br><span class="line">           req.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;执行了delete方法&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="comment">//业务逻辑</span></span><br><span class="line">       <span class="comment">//视图跳转</span></span><br><span class="line">       req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/Hello.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       doGet(req,resp);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写Hello.jsp，在WEB-INF目录下新建一个jsp的文件夹，新建hello.jsp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Ladidol&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>在web.xml中注册Servlet</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.feng.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span>xml</span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/user<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>项目结构为:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328184716136.png" alt="image-20220328184716136"></p></li><li><p>配置Tomcat，并启动测试</p></li><li><ul><li>localhost:8080&#x2F;user?method&#x3D;add</li><li>localhost:8080&#x2F;user?method&#x3D;delete</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328193043592.png" alt="image-20220328193043592"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328193025347.png" alt="image-20220328193025347"></p></li></ol><h3 id="MVC框架要做哪些事情"><a href="#MVC框架要做哪些事情" class="headerlink" title="MVC框架要做哪些事情"></a><strong>MVC框架要做哪些事情</strong></h3><ol><li>将url映射到java类或java类的方法 .</li><li>封装用户提交的数据 .</li><li>处理请求–调用相关的业务处理–封装响应数据 .</li><li>将响应的数据进行渲染 . jsp &#x2F; html 等表示层数据 .</li></ol><p><strong>说明：</strong></p><p>​    常见的服务器端MVC框架有：Struts、Spring MVC、ASP.NET MVC、Zend Framework、JSF；常见前端MVC框架：vue、angularjs、react、backbone；由MVC演化出了另外一些模式如：MVP、MVVM 等等….</p><h2 id="2、什么是SpringMVC"><a href="#2、什么是SpringMVC" class="headerlink" title="2、什么是SpringMVC"></a>2、什么是SpringMVC</h2><h3 id="2-1、概述"><a href="#2-1、概述" class="headerlink" title="2.1、概述"></a>2.1、概述</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328185108528.png" alt="image-20220328185108528"></p><p>Spring MVC是Spring Framework的一部分，是基于Java实现MVC的轻量级Web框架。</p><p>查看官方文档：<a href="https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web">https://docs.spring.io/spring/docs/5.2.0.RELEASE/spring-framework-reference/web.html#spring-web</a></p><p><strong>我们为什么要学习SpringMVC呢?</strong></p><p> Spring MVC的特点：</p><ol><li>轻量级，简单易学</li><li>高效 , 基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活</li></ol><p>Spring的web框架围绕<strong>DispatcherServlet</strong> [ 调度Servlet ] 设计。</p><p>DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解形式进行开发，十分简洁；</p><p>正因为SpringMVC好 , 简单 , 便捷 , 易学 , 天生和Spring无缝集成(使用SpringIoC和Aop) , 使用约定优于配置 . 能够进行简单的junit测试 . 支持Restful风格 .异常处理 , 本地化 , 国际化 , 数据验证 , 类型转换 , 拦截器 等等……所以我们要学习 .</p><p><strong>最重要的一点还是用的人多 , 使用的公司多 .</strong> </p><h3 id="2-2、中心控制器"><a href="#2-2、中心控制器" class="headerlink" title="2.2、中心控制器"></a>2.2、中心控制器</h3><p>​    Spring的web框架围绕DispatcherServlet设计。DispatcherServlet的作用是将请求分发到不同的处理器。从Spring 2.5开始，使用Java 5或者以上版本的用户可以采用基于注解的controller声明方式。</p><p>​    Spring MVC框架像许多其他MVC框架一样, <strong>以请求为驱动</strong> , <strong>围绕一个中心Servlet分派请求及提供其他功能</strong>，**DispatcherServlet是一个实际的Servlet (它继承自HttpServlet 基类)**。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328185204226.png" alt="image-20220328185204226"></p><p>SpringMVC的原理如下图所示：</p><p>​    当发起请求时被前置的控制器拦截到请求，根据请求参数生成代理请求，找到请求对应的实际控制器，控制器处理请求，创建数据模型，访问数据库，将模型响应给中心控制器，控制器使用模型与视图渲染视图结果，将结果返回给中心控制器，再将结果返回给请求者。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328185451543.png" alt="image-20220328185451543"></p><h3 id="2-3、SpringMVC执行原理"><a href="#2-3、SpringMVC执行原理" class="headerlink" title="2.3、SpringMVC执行原理"></a>2.3、SpringMVC执行原理</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328185537134.png" alt="image-20220328185537134"></p><p>图为SpringMVC的一个较完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p><ol><li><p>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接收请求并拦截请求。</p><p>我们假设请求的url为 : <a href="http://localhost:8080/SpringmvcFeng/hello">http://localhost:8080/SpringmvcFeng/hello</a></p><p><strong>如上url拆分成三部分：</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://localhost:8080表示服务器域名</span><br><span class="line">SpringMVC表示部署在服务器上的web站点</span><br><span class="line">hello表示控制器</span><br></pre></td></tr></table></figure><p>通过分析，如上url表示为：请求位于服务器localhost:8080上的SpringMVC站点的hello控制器。</p></li><li><p>HandlerMapping为处理器映射。DispatcherServlet调用HandlerMapping,HandlerMapping根据请求url查找Handler。</p></li><li><p>HandlerExecution表示具体的Handler,其主要作用是根据url查找控制器，如上url被查找控制器为：hello。</p></li><li><p>HandlerExecution将解析后的信息传递给DispatcherServlet,如解析控制器映射等。</p></li><li><p>HandlerAdapter表示处理器适配器，其按照特定的规则去执行Handler。</p></li><li><p>Handler让具体的Controller执行。</p></li><li><p>Controller将具体的执行信息返回给HandlerAdapter,如ModelAndView。</p></li><li><p>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet。</p></li><li><p>DispatcherServlet调用视图解析器(ViewResolver)来解析HandlerAdapter传递的逻辑视图名。</p></li><li><p>视图解析器将解析的逻辑视图名传给DispatcherServlet。</p></li><li><p>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图。</p></li><li><p>最终视图呈现给用户。</p></li></ol><p>在这里先听一遍原理，不理解没有关系，我们马上来写一个对应的代码实现大家就明白了，如果不明白，那就写10遍，没有笨人，只有懒人！</p><h1 id="第一个MVC程序"><a href="#第一个MVC程序" class="headerlink" title="第一个MVC程序"></a>第一个MVC程序</h1><h3 id="xml配置版"><a href="#xml配置版" class="headerlink" title="xml配置版"></a>xml配置版</h3><p>1、新建一个Moudle ， springmvc02hello ， 添加web的支持！</p><p>2、确定导入了SpringMVC 的依赖！</p><p>3、配置web.xml  ， 注册DispatcherServlet</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--1.注册DispatcherServlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--关联一个springmvc的配置文件:【servlet-name】-servlet.xml--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--启动级别-1--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--/ 匹配所有的请求；（不包括.jsp）--&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--/* 匹配所有的请求；（包括.jsp）--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springmvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、编写SpringMVC 的 配置文件！名称：springmvc-servlet.xml  : [servletname]-servlet.xml</p><p>说明，这里的名称要求是按照官方来的,注意这个是放在resources目录下</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--处理映射器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--处理适配器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--将自己的类交给SpringIOC容器，注册bean--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--Handler--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.controller.HelloController&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、添加 处理映射器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理映射器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>6、添加 处理器适配器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--处理适配器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>7、添加 视图解析器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--视图解析器:DispatcherServlet给他的ModelAndView--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span> <span class="attr">id</span>=<span class="string">&quot;InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--前缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--后缀--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>8、编写我们要操作业务Controller ，要么实现Controller接口，要么增加注解；需要返回一个ModelAndView，装数据，封视图；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.mvc.Controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意：这里我们先导入Controller接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">//ModelAndView 模型和视图</span></span><br><span class="line">       <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//封装对象，放在ModelAndView中。Model</span></span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;Hello,ladidol&#x27;s SpringMVC!&quot;</span>);</span><br><span class="line">       <span class="comment">//封装要跳转的视图，放在ModelAndView中</span></span><br><span class="line">       mv.setViewName(<span class="string">&quot;hello&quot;</span>); <span class="comment">//: /WEB-INF/jsp/hello.jsp</span></span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9、将自己的类交给SpringIOC容器，注册bean</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--将自己的类交给SpringIOC容器，注册bean--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Handler--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;/hello&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.controller.HelloController&quot;</span>/&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>10、写要跳转的jsp页面，显示ModelandView存放的数据，以及我们的正常页面；</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;ladidol&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>11、项目结构:</p><p><img src="C:\Users\冯小强\AppData\Roaming\Typora\typora-user-images\image-20220328195124714.png" alt="image-20220328195124714"></p><p>12、配置Tomcat 启动测试！</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328195043632.png" alt="image-20220328195043632"></p><h3 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h3><p><strong>1、新建一个Moudle，springmvc03helloannotation 。添加web支持！</strong></p><p>2、由于Maven可能存在资源过滤的问题，我们将配置完善</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、在pom.xml文件引入相关的依赖：主要有Spring框架核心库、Spring MVC、servlet , JSTL等。我们在父依赖中已经引入了！</p><p><strong>4、配置web.xml</strong></p><p>注意点：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>&#x2F; 和 &#x2F;* 的区别：</strong>&lt; url-pattern &gt; &#x2F; &lt;&#x2F; url-pattern &gt; 不会匹配到.jsp， 只针对我们编写的请求；即：.jsp 不会进入spring的 DispatcherServlet类 。&lt; url-pattern &gt; &#x2F;* &lt;&#x2F; url-pattern &gt; 会匹配 *.jsp，会出现返回 jsp视图 时再次进入spring的DispatcherServlet 类，导致找不到对应的controller所以报404错。</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 注意web.xml版本问题，要最新版！</span><br><span class="line">- 注册DispatcherServlet</span><br><span class="line">- 关联SpringMVC的配置文件</span><br><span class="line">- 启动级别为1</span><br><span class="line">- 映射路径为 / 【不要用/*，会404】</span><br></pre></td></tr></table></figure><p> <strong>5、添加Spring MVC配置文件</strong></p><p> 在resource目录下添加springmvc-servlet.xml配置文件，配置的形式与Spring容器配置基本类似，为了支持基于注解的IOC，设置了自动扫描包的功能，具体配置信息如下：</p> <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 自动扫描包，让指定包下的注解生效,由IOC容器统一管理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.feng.controller&quot;</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 让Spring MVC不处理静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    支持mvc注解驱动</span></span><br><span class="line"><span class="comment">        在spring中一般采用@RequestMapping注解来完成映射关系</span></span><br><span class="line"><span class="comment">        要想使@RequestMapping注解生效</span></span><br><span class="line"><span class="comment">        必须向上下文中注册DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">        和一个AnnotationMethodHandlerAdapter实例</span></span><br><span class="line"><span class="comment">        这两个实例分别在类级别和方法级别处理。</span></span><br><span class="line"><span class="comment">        而annotation-driven配置帮助我们自动完成上述两个实例的注入。</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 在视图解析器中我们把所有的视图都存放在&#x2F;WEB-INF&#x2F;目录下，这样可以保证视图安全，因为这个目录下的文件，客户端不能直接访问。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 让IOC的注解生效</span><br><span class="line">- 静态资源过滤 ：HTML . JS . CSS . 图片 ， 视频 .....</span><br><span class="line">- MVC的注解驱动</span><br><span class="line">- 配置视图解析器</span><br></pre></td></tr></table></figure><p><strong>6、创建Controller</strong></p><p>编写一个Java控制类：com.kuang.controller.HelloController , 注意编码规范</p> <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/HelloController&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//真实访问地址 : 项目名/HelloController/hello</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">       <span class="comment">//向模型中添加属性msg与值，可以在JSP页面中取出并渲染</span></span><br><span class="line">       model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;hello,SpringMVC by ladidol&#x27;s annotation&quot;</span>);</span><br><span class="line">       <span class="comment">//web-inf/jsp/hello.jsp</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@Controller是为了让Spring IOC容器初始化时自动扫描到；<ul><li>@RequestMapping是为了映射请求路径，这里因为类与方法上都有映射所以访问时应该是&#x2F;HelloController&#x2F;hello；</li><li>方法中声明Model类型的参数是为了把Action中的数据带到视图中；</li><li>方法返回的结果是视图的名称hello，加上配置文件中的前后缀变成WEB-INF&#x2F;jsp&#x2F;<strong>hello</strong>.jsp。</li></ul></li></ul><p>7、<strong>创建视图层</strong></p><p>在WEB-INF&#x2F; jsp目录中创建hello.jsp ， 视图可以直接取出并展示从Controller带回的信息；</p><p> 可以通过EL表示取出Model中存放的值，或者对象；</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;springmvcAnnotation&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>8、项目结构:</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328201444753.png" alt="image-20220328201444753"></p><p><strong>配置Tomcat运行</strong></p><p>配置Tomcat ，  开启服务器 ， 访问 对应的请求路径！</p><p>注意tomcat中打包的站路径不要和之前的重复了;</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328201315318.png" alt="image-20220328201315318"></p><p><strong>OK，运行成功！</strong></p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>实现步骤其实非常的简单：</p><ol><li>新建一个web项目</li><li>导入相关jar包</li><li>编写web.xml , 注册DispatcherServlet</li><li>编写springmvc配置文件</li><li>接下来就是去创建对应的控制类 , controller</li><li>最后完善前端视图和controller之间的对应</li><li>测试运行调试.</li></ol><p>使用springMVC必须配置的三大件：</p><p><strong>处理器映射器、处理器适配器、视图解析器</strong></p><p>通常，我们只需要<strong>手动配置视图解析器</strong>，而<strong>处理器映射器</strong>和<strong>处理器适配器</strong>只需要开启<strong>注解驱动</strong>即可，而省去了大段的xml配置</p><p>再来回顾下原理吧~</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328202420580.png"></p><h1 id="RestFul和控制器"><a href="#RestFul和控制器" class="headerlink" title="RestFul和控制器"></a>RestFul和控制器</h1><h3 id="控制器Controller"><a href="#控制器Controller" class="headerlink" title="控制器Controller"></a>控制器Controller</h3><ul><li><p>控制器复杂提供访问应用程序的行为，通常通过接口定义或注解定义两种方法实现。</p></li><li><p>控制器负责解析用户的请求并将其转换为一个模型。</p></li><li><p>在Spring MVC中一个控制器类可以包含多个方法</p></li><li><p>在Spring MVC中，对于Controller的配置方式有很多种</p></li></ul><h3 id="实现Controller接口"><a href="#实现Controller接口" class="headerlink" title="实现Controller接口"></a>实现Controller接口</h3><p>Controller是一个接口，在org.springframework.web.servlet.mvc包下，接口中只有一个方法；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实现该接口的类获得控制器功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">   <span class="comment">//处理请求且返回一个模型与视图对象</span></span><br><span class="line">   ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest var1, HttpServletResponse var2)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><ol><li><p>新建一个Moudle，springmvc-04-controller 。将刚才的03 拷贝一份, 我们进行操作！</p></li><li><ul><li>删掉HelloController</li><li>mvc的配置文件只留下 视图解析器！</li></ul></li><li><p>编写一个Controller类，ControllerTest1</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义控制器</span></span><br><span class="line"><span class="comment">//注意点：不要导错包，实现Controller接口，重写方法；</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest1</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;Test1Controller&quot;</span>);</span><br><span class="line">       mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写完毕后，去Spring配置文件中注册请求的bean；name对应请求路径，class对应处理请求的类</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;/t1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.controller.ControllerTest1&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>编写前端test.jsp，注意在WEB-INF&#x2F;jsp目录下编写，对应我们的视图解析器</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;ladidol&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">$&#123;msg&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>配置Tomcat运行测试，我这里没有项目发布名配置的就是一个 &#x2F; ，所以请求不用加项目名，OK！</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328203553161.png" alt="image-20220328203553161"></p></li></ol><p><strong>说明：</strong></p><ul><li><p>实现接口Controller定义控制器是较老的办法</p></li><li><p>缺点是：一个控制器中只有一个方法，如果要多个方法则需要定义多个Controller；定义的方式比较麻烦；</p></li></ul><h3 id="使用注解-Controller"><a href="#使用注解-Controller" class="headerlink" title="使用注解@Controller"></a>使用注解@Controller</h3><ul><li><p>@Controller注解类型用于声明Spring类的实例是一个控制器（在讲IOC时还提到了另外3个注解）；</p></li><li><p>Spring可以使用扫描机制来找到应用程序中所有基于注解的控制器类，为了保证Spring能找到你的控制器，需要在配置文件中声明组件扫描。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.feng.controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>增加一个ControllerTest2类，使用注解实现；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Controller注解的类会自动添加到Spring上下文中</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest2</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//映射访问路径</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/t2&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">       <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">       model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;ControllerTest2&quot;</span>);</span><br><span class="line">       <span class="comment">//返回视图位置</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>运行tomcat测试</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328203612734.png" alt="image-20220328203612734"></p></li></ul><p><strong>可以发现，我们的两个请求都可以指向一个视图，但是页面结果的结果是不一样的，从这里可以看出视图是被复用的，而控制器与视图之间是弱偶合关系。</strong></p><p><strong>注解方式是平时使用的最多的方式！</strong></p><h3 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="RequestMapping"></a>RequestMapping</h3><p><strong>@RequestMapping</strong></p><ul><li><p>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法。可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。</p></li><li><p>为了测试结论更加准确，我们可以加上一个项目名测试 myweb</p></li><li><p>只注解在方法上面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/h1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问路径：<a href="http://localhost:8080/">http://localhost:8080</a> &#x2F; 项目名 &#x2F; h1</p></li><li><p>同时注解类与方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/h1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问路径：<a href="http://localhost:8080/">http://localhost:8080</a> &#x2F; 项目名&#x2F; admin &#x2F;h1  , 需要先指定类的路径再指定方法的路径；</p></li></ul><h3 id="RestFul-风格"><a href="#RestFul-风格" class="headerlink" title="RestFul 风格"></a>RestFul 风格</h3><p><strong>概念</strong></p><p>Restful就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制。</p><p><strong>功能</strong></p><p>资源：互联网所有的事物都可以被抽象为资源</p><p>资源操作：使用POST、DELETE、PUT、GET，使用不同方法对资源进行操作。</p><p>分别对应 添加、 删除、修改、查询。</p><p><strong>传统方式操作资源</strong>  ：通过不同的参数来实现不同的效果！方法单一，post 和 get</p><p>​    <a href="http://127.0.0.1/item/queryItem.action?id=1">http://127.0.0.1/item/queryItem.action?id=1</a> 查询,GET</p><p>​    <a href="http://127.0.0.1/item/saveItem.action">http://127.0.0.1/item/saveItem.action</a> 新增,POST</p><p>​    <a href="http://127.0.0.1/item/updateItem.action">http://127.0.0.1/item/updateItem.action</a> 更新,POST</p><p>​    <a href="http://127.0.0.1/item/deleteItem.action?id=1">http://127.0.0.1/item/deleteItem.action?id=1</a> 删除,GET或POST</p><p><strong>使用RESTful操作资源</strong> ：可以通过不同的请求方式来实现不同的效果！如下：请求地址一样，但是功能可以不同！</p><p>​    <a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 查询,GET</p><p>​    <a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 新增,POST</p><p>​    <a href="http://127.0.0.1/item">http://127.0.0.1/item</a> 更新,PUT</p><p>​    <a href="http://127.0.0.1/item/1">http://127.0.0.1/item/1</a> 删除,DELETE</p><p><strong>学习测试</strong></p><ol><li><p>在新建一个类 RestFulController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestFulController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在Spring MVC中可以使用  @PathVariable 注解，让方法参数的值对应绑定到一个URI模板变量上。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RestFulController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//映射访问路径</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> p1, <span class="meta">@PathVariable</span> <span class="type">int</span> p2, Model model)</span>&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> p1+p2;</span><br><span class="line">       <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">       model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果：&quot;</span>+result);</span><br><span class="line">       <span class="comment">//返回视图位置</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">       </span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们来测试请求查看下</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328204123412.png" alt="image-20220328204123412"></p></li><li><p>思考：使用路径变量的好处？</p></li><li><ul><li><p>使路径变得更加简洁；</p></li><li><p>获得参数更加方便，框架会自动进行类型转换。</p></li><li><p>通过路径变量的类型可以约束访问参数，如果类型不一样，则访问不到对应的请求方法，如这里访问是的路径是&#x2F;commit&#x2F;1&#x2F;a，则路径与方法不匹配，而不会是参数转换失败。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328204134399.png" alt="image-20220328204134399"></p></li></ul></li><li><p>我们来修改下对应的参数类型，再次测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//映射访问路径</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/commit/&#123;p1&#125;/&#123;p2&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> p1, <span class="meta">@PathVariable</span> String p2, Model model)</span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> p1+p2;</span><br><span class="line">   <span class="comment">//Spring MVC会自动实例化一个Model对象用于向视图中传值</span></span><br><span class="line">   model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;结果：&quot;</span>+result);</span><br><span class="line">   <span class="comment">//返回视图位置</span></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328204157121.png" alt="image-20220328204157121"></p></li></ol><p><strong>使用method属性指定请求类型</strong></p><p>用于约束请求的类型，可以收窄请求范围。指定请求谓词的类型如GET, POST, HEAD, OPTIONS, PUT, PATCH, DELETE, TRACE等</p><p>我们来测试一下：</p><ul><li><p>增加一个方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//映射访问路径,必须是POST请求</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.POST&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index2</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">   model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>我们使用浏览器地址栏进行访问默认是Get请求，会报错405：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328204220050.png" alt="image-20220328204220050"></p></li><li><p>如果将POST修改为GET则正常了；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//映射访问路径,必须是Get请求</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/hello&quot;,method = &#123;RequestMethod.GET&#125;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">index2</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">   model.addAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;hello!&quot;</span>);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328204232218.png" alt="image-20220328204232218"></p></li></ul><p><strong>小结：</strong></p><p>对于model的理解<a href="https://blog.csdn.net/Hello_ChenLiYan/article/details/106411452">传送门</a></p><p>Spring MVC 的 @RequestMapping 注解能够处理 HTTP 请求的方法, 比如 GET, PUT, POST, DELETE 以及 PATCH。</p><p><strong>所有的地址栏请求默认都会是 HTTP GET 类型的。</strong></p><p>方法级别的注解变体有如下几个：组合注解</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@GetMapping</span><br><span class="line">@PostMapping</span><br><span class="line">@PutMapping</span><br><span class="line">@DeleteMapping</span><br><span class="line">@PatchMapping</span><br></pre></td></tr></table></figure><p>@GetMapping 是一个组合注解，平时使用的会比较多！</p><p>它所扮演的是 @RequestMapping(method &#x3D;RequestMethod.GET) 的一个快捷方式。</p><h1 id="数据处理及跳转"><a href="#数据处理及跳转" class="headerlink" title="数据处理及跳转"></a>数据处理及跳转</h1><h2 id="结果跳转方式"><a href="#结果跳转方式" class="headerlink" title="结果跳转方式"></a>结果跳转方式</h2><h3 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h3><p>设置ModelAndView对象 , 根据view的名称 , 和视图解析器跳到指定的页面 .</p><p>页面 : {视图解析器前缀} + viewName +{视图解析器后缀}</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">     <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应的controller类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest1</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ControllerTest1&quot;</span>);</span><br><span class="line">       mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ServletAPI"><a href="#ServletAPI" class="headerlink" title="ServletAPI"></a>ServletAPI</h3><p>通过设置ServletAPI , 不需要视图解析器 .</p><p>1、通过HttpServletResponse进行输出</p><p>2、通过HttpServletResponse实现重定向</p><p>3、通过HttpServletResponse实现转发</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultGo</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       rsp.getWriter().println(<span class="string">&quot;Hello,Spring BY servlet API&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t2&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test2</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       rsp.sendRedirect(<span class="string">&quot;/index.jsp&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/result/t3&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test3</span><span class="params">(HttpServletRequest req, HttpServletResponse rsp)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       req.setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;/result/t3&quot;</span>);</span><br><span class="line">       req.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/test.jsp&quot;</span>).forward(req,rsp);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h3><p><strong>通过SpringMVC来实现转发和重定向 - 无需视图解析器；</strong></p><p>测试前，需要将视图解析器注释掉</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultSpringMVC</span> &#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t2&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//转发二</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;forward:/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm/t3&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test3</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//重定向</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过SpringMVC来实现转发和重定向 - 有视图解析器；</strong></p><p>重定向 , 不需要视图解析器 , 本质就是重新请求一个新地方嘛 , 所以注意路径问题.</p><p>可以重定向到另外一个请求实现 .</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultSpringMVC2</span> &#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm2/t1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test1</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//转发</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/rsm2/t2&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test2</span><span class="params">()</span>&#123;</span><br><span class="line">       <span class="comment">//重定向</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">       <span class="comment">//return &quot;redirect:hello.do&quot;; //hello.do为另一个请求/</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="数据显示到前端"><a href="#数据显示到前端" class="headerlink" title="数据显示到前端"></a>数据显示到前端</h3><p><strong>第一种 : 通过ModelAndView</strong></p><p>我们前面一直都是如此 . 就不过多解释</p><p>&#x2F;&#x2F;这里是继承的Controller,所以,就需要在spring中注册bean</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerTest1</span> <span class="keyword">implements</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> ModelAndView <span class="title function_">handleRequest</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">//返回一个模型视图对象</span></span><br><span class="line">       <span class="type">ModelAndView</span> <span class="variable">mv</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">       mv.addObject(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;ControllerTest1&quot;</span>);</span><br><span class="line">       mv.setViewName(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> mv;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二种 : 通过ModelMap</strong></p><p>ModelMap</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, ModelMap model)</span>&#123;</span><br><span class="line">   <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">   <span class="comment">//相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">   model.addAttribute(<span class="string">&quot;name&quot;</span>,name);</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第三种 : 通过Model</strong></p><p>Model</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/ct2/hello&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">(<span class="meta">@RequestParam(&quot;username&quot;)</span> String name, Model model)</span>&#123;</span><br><span class="line">   <span class="comment">//封装要显示到视图中的数据</span></span><br><span class="line">   <span class="comment">//相当于req.setAttribute(&quot;name&quot;,name);</span></span><br><span class="line">   model.addAttribute(<span class="string">&quot;msg&quot;</span>,name);</span><br><span class="line">   System.out.println(name);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="乱码问题"><a href="#乱码问题" class="headerlink" title="乱码问题"></a>乱码问题</h3><p>测试步骤：</p><p>1、我们可以在首页编写一个提交的表单</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/e/t&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line"> &lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line"> &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>2、后台编写对应的处理类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Encoding</span> &#123;</span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/e/t&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(Model model,String name)</span>&#123;</span><br><span class="line">       model.addAttribute(<span class="string">&quot;msg&quot;</span>,name); <span class="comment">//获取表单提交的值</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;test&quot;</span>; <span class="comment">//跳转到test页面显示输入的值</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、输入中文测试，发现乱码</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328213005939.png" alt="image-20220328213005939"></p><p>不得不说，乱码问题是在我们开发中十分常见的问题，也是让我们程序猿比较头大的问题！</p><p>以前乱码问题通过过滤器解决 , 而SpringMVC给我们提供了一个过滤器 , 可以在web.xml中配置 .</p><p>修改了xml文件需要重启服务器！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是我们发现 , 有些极端情况下.这个过滤器对get的支持不好 .</p><p>处理方法 :</p><p>1、修改tomcat配置文件 ：设置编码！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">URIEncoding</span>=<span class="string">&quot;utf-8&quot;</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>2、自定义过滤器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequestWrapper;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 解决get和post请求 全部乱码的过滤器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GenericEncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">       <span class="comment">//处理response的字符编码</span></span><br><span class="line">       HttpServletResponse myResponse=(HttpServletResponse) response;</span><br><span class="line">       myResponse.setContentType(<span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 转型为与协议相关对象</span></span><br><span class="line">       <span class="type">HttpServletRequest</span> <span class="variable">httpServletRequest</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">       <span class="comment">// 对request包装增强</span></span><br><span class="line">       <span class="type">HttpServletRequest</span> <span class="variable">myrequest</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MyRequest</span>(httpServletRequest);</span><br><span class="line">       chain.doFilter(myrequest, response);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义request对象，HttpServletRequest的包装类</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyRequest</span> <span class="keyword">extends</span> <span class="title class_">HttpServletRequestWrapper</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">   <span class="comment">//是否编码的标记</span></span><br><span class="line">   <span class="keyword">private</span> <span class="type">boolean</span> hasEncode;</span><br><span class="line">   <span class="comment">//定义一个可以传入HttpServletRequest对象的构造函数，以便对其进行装饰</span></span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">MyRequest</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">       <span class="built_in">super</span>(request);<span class="comment">// super必须写</span></span><br><span class="line">       <span class="built_in">this</span>.request = request;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 对需要增强方法 进行覆盖</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> Map <span class="title function_">getParameterMap</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="comment">// 先获得请求方式</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">       <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">&quot;post&quot;</span>)) &#123;</span><br><span class="line">           <span class="comment">// post请求</span></span><br><span class="line">           <span class="keyword">try</span> &#123;</span><br><span class="line">               <span class="comment">// 处理post乱码</span></span><br><span class="line">               request.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">               <span class="keyword">return</span> request.getParameterMap();</span><br><span class="line">          &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">               e.printStackTrace();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">&quot;get&quot;</span>)) &#123;</span><br><span class="line">           <span class="comment">// get请求</span></span><br><span class="line">           Map&lt;String, String[]&gt; parameterMap = request.getParameterMap();</span><br><span class="line">           <span class="keyword">if</span> (!hasEncode) &#123; <span class="comment">// 确保get手动编码逻辑只运行一次</span></span><br><span class="line">               <span class="keyword">for</span> (String parameterName : parameterMap.keySet()) &#123;</span><br><span class="line">                   String[] values = parameterMap.get(parameterName);</span><br><span class="line">                   <span class="keyword">if</span> (values != <span class="literal">null</span>) &#123;</span><br><span class="line">                       <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; values.length; i++) &#123;</span><br><span class="line">                           <span class="keyword">try</span> &#123;</span><br><span class="line">                               <span class="comment">// 处理get乱码</span></span><br><span class="line">                               values[i] = <span class="keyword">new</span> <span class="title class_">String</span>(values[i]</span><br><span class="line">                                      .getBytes(<span class="string">&quot;ISO-8859-1&quot;</span>), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">                          &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                               e.printStackTrace();</span><br><span class="line">                          &#125;</span><br><span class="line">                      &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">               hasEncode = <span class="literal">true</span>;</span><br><span class="line">          &#125;</span><br><span class="line">           <span class="keyword">return</span> parameterMap;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">super</span>.getParameterMap();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//取一个值</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getParameter</span><span class="params">(String name)</span> &#123;</span><br><span class="line">       Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">       String[] values = parameterMap.get(name);</span><br><span class="line">       <span class="keyword">if</span> (values == <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> values[<span class="number">0</span>]; <span class="comment">// 取回参数的第一个值</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//取所有值</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String[] getParameterValues(String name) &#123;</span><br><span class="line">       Map&lt;String, String[]&gt; parameterMap = getParameterMap();</span><br><span class="line">       String[] values = parameterMap.get(name);</span><br><span class="line">       <span class="keyword">return</span> values;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个也是我在网上找的一些大神写的，一般情况下，SpringMVC默认的乱码处理就已经能够很好的解决了！</p><p><strong>然后在web.xml中配置这个过滤器即可！</strong></p><p>乱码问题，需要平时多注意，在尽可能能设置编码的地方，都设置为统一编码 UTF-8！</p><h1 id="整合SSM框架"><a href="#整合SSM框架" class="headerlink" title="整合SSM框架"></a>整合SSM框架</h1><h2 id="整合SSM"><a href="#整合SSM" class="headerlink" title="整合SSM"></a>整合SSM</h2><blockquote><p>环境要求</p></blockquote><p>环境：</p><ul><li>IDEA 2020.1</li><li>MySQL 8.0.27</li><li>Tomcat 9</li><li>Maven 3.8</li></ul><p> 要求：</p><ul><li>需要熟练掌握MySQL数据库，Spring，JavaWeb及MyBatis知识，简单的前端知识；</li></ul><blockquote><p>数据库环境</p></blockquote><p>创建一个存放书籍数据的数据库表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `ssmbuild`;</span><br><span class="line"></span><br><span class="line">USE `ssmbuild`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `books`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `books` (</span><br><span class="line">`bookID` <span class="type">INT</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;书id&#x27;</span>,</span><br><span class="line">`bookName` <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;书名&#x27;</span>,</span><br><span class="line">`bookCounts` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;数量&#x27;</span>,</span><br><span class="line">`detail` <span class="type">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;描述&#x27;</span>,</span><br><span class="line">KEY `bookID` (`bookID`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> `books`(`bookID`,`bookName`,`bookCounts`,`detail`)<span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">&#x27;Java&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;从入门到放弃&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">&#x27;MySQL&#x27;</span>,<span class="number">10</span>,<span class="string">&#x27;从删库到跑路&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">&#x27;Linux&#x27;</span>,<span class="number">5</span>,<span class="string">&#x27;从进门到进牢&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>基本环境搭建</p></blockquote><p>1、新建一Maven项目！ssmbuild ， 添加web的支持</p><p>2、导入相关的pom依赖！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--Junit--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--数据库驱动--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 数据库连接池 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mchange<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Servlet - JSP --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Mybatis--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--Spring--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、Maven资源过滤设置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、建立基本结构和配置框架！</p><ul><li><p>com.feng.pojo</p></li><li><p>com.feng.dao</p></li><li><p>com.feng.service</p></li><li><p>com.feng.controller</p></li><li><p>mybatis-config.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>Mybatis层编写</p></blockquote><p>1、数据库配置文件 <strong>database.properties</strong></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssmbuild?useSSL=true&amp;useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">这里是密码</span></span><br></pre></td></tr></table></figure><p>2、IDEA关联数据库</p><p>3、编写MyBatis的核心配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">       <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.feng.pojo&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/feng/dao/BookMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、编写数据库对应的实体类 com.kuang.pojo.Books</p><p>使用lombok插件！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Books</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> bookID;</span><br><span class="line">   <span class="keyword">private</span> String bookName;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> bookCounts;</span><br><span class="line">   <span class="keyword">private</span> String detail;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、编写Dao层的 Mapper接口！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//增加一个Book</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">addBook</span><span class="params">(Books book)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据id删除一个Book</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">deleteBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//更新Book</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">updateBook</span><span class="params">(Books books)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">   Books <span class="title function_">queryBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">   List&lt;Books&gt; <span class="title function_">queryAllBook</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、编写接口对应的 Mapper.xml 文件。需要导入MyBatis的包；</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">       <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">       <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.feng.dao.BookMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--增加一个Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;addBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      insert into ssmbuild.books(bookName,bookCounts,detail)</span><br><span class="line">      values (#&#123;bookName&#125;, #&#123;bookCounts&#125;, #&#123;detail&#125;)</span><br><span class="line">   <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--根据id删除一个Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBookById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">      delete from ssmbuild.books where bookID=#&#123;bookID&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--更新Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateBook&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      update ssmbuild.books</span><br><span class="line">      set bookName = #&#123;bookName&#125;,bookCounts = #&#123;bookCounts&#125;,detail = #&#123;detail&#125;</span><br><span class="line">      where bookID = #&#123;bookID&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--根据id查询,返回一个Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryBookById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      select * from ssmbuild.books</span><br><span class="line">      where bookID = #&#123;bookID&#125;</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--查询全部Book--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAllBook&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Books&quot;</span>&gt;</span></span><br><span class="line">      SELECT * from ssmbuild.books</span><br><span class="line">   <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7、编写Service层的接口和实现类</p><p>接口：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.feng.pojo.Books;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//BookService:底下需要去实现,调用dao层</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">   <span class="comment">//增加一个Book</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">addBook</span><span class="params">(Books book)</span>;</span><br><span class="line">   <span class="comment">//根据id删除一个Book</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">deleteBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">   <span class="comment">//更新Book</span></span><br><span class="line">   <span class="type">int</span> <span class="title function_">updateBook</span><span class="params">(Books books)</span>;</span><br><span class="line">   <span class="comment">//根据id查询,返回一个Book</span></span><br><span class="line">   Books <span class="title function_">queryBookById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">   <span class="comment">//查询全部Book,返回list集合</span></span><br><span class="line">   List&lt;Books&gt; <span class="title function_">queryAllBook</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.feng.dao.BookMapper;</span><br><span class="line"><span class="keyword">import</span> com.feng.pojo.Books;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//调用dao层的操作，设置一个set接口，方便Spring管理</span></span><br><span class="line">   <span class="keyword">private</span> BookMapper bookMapper;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookMapper</span><span class="params">(BookMapper bookMapper)</span> &#123;</span><br><span class="line">       <span class="built_in">this</span>.bookMapper = bookMapper;</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">addBook</span><span class="params">(Books book)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.addBook(book);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteBookById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.deleteBookById(id);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateBook</span><span class="params">(Books books)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.updateBook(books);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> Books <span class="title function_">queryBookById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.queryBookById(id);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> List&lt;Books&gt; <span class="title function_">queryAllBook</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> bookMapper.queryAllBook();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>OK，到此，底层需求操作编写完毕！</strong></p><blockquote><p>Spring层</p></blockquote><p>1、配置<strong>Spring整合MyBatis</strong>，我们这里数据源使用c3p0连接池；</p><p>2、我们去编写Spring整合Mybatis的相关的配置文件；spring-dao.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置整合mybatis --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 1.关联数据库文件 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:database.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 2.数据库连接池 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--数据库连接池</span></span><br><span class="line"><span class="comment">       dbcp 半自动化操作 不能自动连接</span></span><br><span class="line"><span class="comment">       c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）</span></span><br><span class="line"><span class="comment">   --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置连接池属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- c3p0连接池的私有属性 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;minPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 关闭连接后不自动commit --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;autoCommitOnClose&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 获取连接超时时间 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;checkoutTimeout&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10000&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 当获取连接失败重试次数 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;acquireRetryAttempts&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 3.配置SqlSessionFactory对象 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入sqlSessionFactory --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactoryBeanName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 给出需要扫描Dao接口包 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.kuang.dao&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、<strong>Spring整合service层</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 扫描service相关的bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.feng.service&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--BookServiceImpl注入到IOC容器中--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;BookServiceImpl&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.service.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookMapper&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookMapper&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 注入数据库连接池 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring层搞定！再次理解一下，Spring就是一个大杂烩，一个容器！对吧！</p><blockquote><p>SpringMVC层</p></blockquote><p>1、<strong>web.xml</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--DispatcherServlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="comment">&lt;!--一定要注意:我们这里加载的是总的配置文件，之前被这里坑了！--&gt;</span>  </span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--encodingFilter--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span></span><br><span class="line">          org.springframework.web.filter.CharacterEncodingFilter</span><br><span class="line">       <span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">&lt;!--Session过期时间--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>15<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、<strong>spring-mvc.xml</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">   http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">   https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 配置SpringMVC --&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 1.开启SpringMVC注解驱动 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 2.静态资源默认servlet配置--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 3.配置jsp 显示ViewResolver视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 4.扫描web相关的bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.feng.controller&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、<strong>Spring配置整合文件，applicationContext.xml</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;/spring/spring-dao.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;/spirng/spring-service.xml&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;/spring/spring-mvc.xml&quot;</span>/&gt;</span></span><br><span class="line">   </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置文件，暂时结束！Controller 和 视图层编写</strong></p><p>1、BookController 类编写 ， 方法一：查询全部书籍</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/book&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="meta">@Qualifier(&quot;BookServiceImpl&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/allBook&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">list</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">       List&lt;Books&gt; list = bookService.queryAllBook();</span><br><span class="line">       model.addAttribute(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;allBook&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、编写首页 <strong>index.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span> %&gt;</span><br><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;首页&lt;/title&gt;</span><br><span class="line">   &lt;style type=<span class="string">&quot;text/css&quot;</span>&gt;</span><br><span class="line">       a &#123;</span><br><span class="line">           text-decoration: none;</span><br><span class="line">           color: black;</span><br><span class="line">           font-size: 18px;</span><br><span class="line">      &#125;</span><br><span class="line">       h3 &#123;</span><br><span class="line">           width: 180px;</span><br><span class="line">           height: 38px;</span><br><span class="line">           margin: 100px auto;</span><br><span class="line">           text-align: center;</span><br><span class="line">           line-height: 38px;</span><br><span class="line">           background: deepskyblue;</span><br><span class="line">           border-radius: 4px;</span><br><span class="line">      &#125;</span><br><span class="line">   &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h3&gt;</span><br><span class="line">   &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/allBook&quot;</span>&gt;点击进入列表页&lt;/a&gt;</span><br><span class="line">&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>3、书籍列表页面 <strong>allbook.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;书籍列表&lt;/title&gt;</span><br><span class="line">   &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">   &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">   &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div class=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">       &lt;div class=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">           &lt;div class=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">               &lt;h1&gt;</span><br><span class="line">                   &lt;small&gt;书籍列表 —— 显示所有书籍&lt;/small&gt;</span><br><span class="line">               &lt;/h1&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div class=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">       &lt;div class=<span class="string">&quot;col-md-4 column&quot;</span>&gt;</span><br><span class="line">           &lt;a class=<span class="string">&quot;btn btn-primary&quot;</span> href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/toAddBook&quot;</span>&gt;新增&lt;/a&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div class=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">       &lt;div class=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">           &lt;table class=<span class="string">&quot;table table-hover table-striped&quot;</span>&gt;</span><br><span class="line">               &lt;thead&gt;</span><br><span class="line">               &lt;tr&gt;</span><br><span class="line">                   &lt;th&gt;书籍编号&lt;/th&gt;</span><br><span class="line">                   &lt;th&gt;书籍名字&lt;/th&gt;</span><br><span class="line">                   &lt;th&gt;书籍数量&lt;/th&gt;</span><br><span class="line">                   &lt;th&gt;书籍详情&lt;/th&gt;</span><br><span class="line">                   &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">               &lt;/tr&gt;</span><br><span class="line">               &lt;/thead&gt;</span><br><span class="line"></span><br><span class="line">               &lt;tbody&gt;</span><br><span class="line">               &lt;c:forEach <span class="keyword">var</span>=<span class="string">&quot;book&quot;</span> items=<span class="string">&quot;$&#123;requestScope.get(&#x27;list&#x27;)&#125;&quot;</span>&gt;</span><br><span class="line">                   &lt;tr&gt;</span><br><span class="line">                       &lt;td&gt;$&#123;book.getBookID()&#125;&lt;/td&gt;</span><br><span class="line">                       &lt;td&gt;$&#123;book.getBookName()&#125;&lt;/td&gt;</span><br><span class="line">                       &lt;td&gt;$&#123;book.getBookCounts()&#125;&lt;/td&gt;</span><br><span class="line">                       &lt;td&gt;$&#123;book.getDetail()&#125;&lt;/td&gt;</span><br><span class="line">                       &lt;td&gt;</span><br><span class="line">                           &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/toUpdateBook?id=$&#123;book.getBookID()&#125;&quot;</span>&gt;更改&lt;/a&gt; |</span><br><span class="line">                           &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/del/$&#123;book.getBookID()&#125;&quot;</span>&gt;删除&lt;/a&gt;</span><br><span class="line">                       &lt;/td&gt;</span><br><span class="line">                   &lt;/tr&gt;</span><br><span class="line">               &lt;/c:forEach&gt;</span><br><span class="line">               &lt;/tbody&gt;</span><br><span class="line">           &lt;/table&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>4、BookController 类编写 ， 方法二：添加书籍</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toAddBook&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toAddPaper</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;addBook&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/addBook&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addPaper</span><span class="params">(Books books)</span> &#123;</span><br><span class="line">   System.out.println(books);</span><br><span class="line">   bookService.addBook(books);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、添加书籍页面：<strong>addBook.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;新增书籍&lt;/title&gt;</span><br><span class="line">   &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">   &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">   &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div class=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">       &lt;div class=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">           &lt;div class=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">               &lt;h1&gt;</span><br><span class="line">                   &lt;small&gt;新增书籍&lt;/small&gt;</span><br><span class="line">               &lt;/h1&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/addBook&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">      书籍名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookName&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">      书籍数量：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookCounts&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">      书籍详情：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;detail&quot;</span>&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;</span><br><span class="line">       &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;添加&quot;</span>&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>6、BookController 类编写 ， 方法三：修改书籍</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/toUpdateBook&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toUpdateBook</span><span class="params">(Model model, <span class="type">int</span> id)</span> &#123;</span><br><span class="line">   <span class="type">Books</span> <span class="variable">books</span> <span class="operator">=</span> bookService.queryBookById(id);</span><br><span class="line">   System.out.println(books);</span><br><span class="line">   model.addAttribute(<span class="string">&quot;book&quot;</span>,books );</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;updateBook&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/updateBook&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">updateBook</span><span class="params">(Model model, Books book)</span> &#123;</span><br><span class="line">   System.out.println(book);</span><br><span class="line">   bookService.updateBook(book);</span><br><span class="line">   <span class="type">Books</span> <span class="variable">books</span> <span class="operator">=</span> bookService.queryBookById(book.getBookID());</span><br><span class="line">   model.addAttribute(<span class="string">&quot;books&quot;</span>, books);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7、修改书籍页面  <strong>updateBook.jsp</strong></p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;修改信息&lt;/title&gt;</span><br><span class="line">   &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">   &lt;!-- 引入 Bootstrap --&gt;</span><br><span class="line">   &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;div class=<span class="string">&quot;row clearfix&quot;</span>&gt;</span><br><span class="line">       &lt;div class=<span class="string">&quot;col-md-12 column&quot;</span>&gt;</span><br><span class="line">           &lt;div class=<span class="string">&quot;page-header&quot;</span>&gt;</span><br><span class="line">               &lt;h1&gt;</span><br><span class="line">                   &lt;small&gt;修改信息&lt;/small&gt;</span><br><span class="line">               &lt;/h1&gt;</span><br><span class="line">           &lt;/div&gt;</span><br><span class="line">       &lt;/div&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">   &lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/book/updateBook&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">       &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;bookID&quot;</span> value=<span class="string">&quot;$&#123;book.getBookID()&#125;&quot;</span>/&gt;</span><br><span class="line">      书籍名称：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookName&quot;</span> value=<span class="string">&quot;$&#123;book.getBookName()&#125;&quot;</span>/&gt;</span><br><span class="line">      书籍数量：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;bookCounts&quot;</span> value=<span class="string">&quot;$&#123;book.getBookCounts()&#125;&quot;</span>/&gt;</span><br><span class="line">      书籍详情：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;detail&quot;</span> value=<span class="string">&quot;$&#123;book.getDetail() &#125;&quot;</span>/&gt;</span><br><span class="line">       &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>/&gt;</span><br><span class="line">   &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>8、BookController 类编写 ， 方法四：删除书籍</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/del/&#123;bookId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteBook</span><span class="params">(<span class="meta">@PathVariable(&quot;bookId&quot;)</span> <span class="type">int</span> id)</span> &#123;</span><br><span class="line">   bookService.deleteBookById(id);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;redirect:/book/allBook&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置Tomcat，进行运行！</strong></p><p>到目前为止，这个SSM项目整合已经完全的OK了，可以直接运行进行测试！这个练习十分的重要，大家需要保证，不看任何东西，自己也可以完整的实现出来！</p><p><strong>项目结构图</strong> </p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220329095502043.png" alt="image-20220329095502043"></p><p>运行时结果:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220329094339229.png" alt="image-20220329094339229"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220329094429036.png" alt="image-20220329094429036"></p><blockquote><p>小结及展望</p></blockquote><p>这个是同学们的第一个SSM整合案例，一定要烂熟于心！</p><p>SSM框架的重要程度是不言而喻的，学到这里，大家已经可以进行基本网站的单独开发。但是这只是增删改查的基本操作。可以说学到这里，大家才算是真正的步入了后台开发的门。也就是能找一个后台相关工作的底线。</p><p>或许很多人，工作就做这些事情，但是对于个人的提高来说，还远远不够！</p><p>我们后面还要学习一些 SpringMVC 的知识！</p><ul><li>Ajax  和  Json</li><li>文件上传和下载</li><li>拦截器</li></ul><h1 id="Json交互处理"><a href="#Json交互处理" class="headerlink" title="Json交互处理"></a>Json交互处理</h1><blockquote><p>什么是JSON？</p></blockquote><ul><li>JSON(JavaScript Object Notation, JS 对象标记) 是一种轻量级的数据交换格式，目前使用特别广泛。</li><li>采用完全独立于编程语言的<strong>文本格式</strong>来存储和表示数据。</li><li>简洁和清晰的层次结构使得 JSON 成为理想的数据交换语言。</li><li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li></ul><p>在 JavaScript 语言中，一切都是对象。因此，任何JavaScript 支持的类型都可以通过 JSON 来表示，例如字符串、数字、对象、数组等。看看他的要求和语法格式：</p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p><strong>JSON 键值对</strong>是用来保存 JavaScript 对象的一种方式，和 JavaScript 对象的写法也大同小异，键&#x2F;值对组合中的键名写在前面并用双引号 “” 包裹，使用冒号 : 分隔，然后紧接着值：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;QinJiang&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3&quot;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;sex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;男&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>很多人搞不清楚 JSON 和 JavaScript 对象的关系，甚至连谁是谁都不清楚。其实，可以这么理解：</p><p>JSON 是 JavaScript 对象的字符串表示法，它使用文本表示一个 JS 对象的信息，本质是一个字符串。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;World&#x27;</span>&#125;; <span class="comment">//这是一个对象，注意键名也是可以使用引号包裹的</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>; <span class="comment">//这是一个 JSON 字符串，本质是一个字符串</span></span><br></pre></td></tr></table></figure><p><strong>JSON 和 JavaScript 对象互转</strong></p><p>要实现从JSON字符串转换为JavaScript 对象，使用 JSON.parse() 方法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span>);</span><br><span class="line"><span class="comment">//结果是 &#123;a: &#x27;Hello&#x27;, b: &#x27;World&#x27;&#125;</span></span><br></pre></td></tr></table></figure><p>要实现从JavaScript 对象转换为JSON字符串，使用 JSON.stringify() 方法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;<span class="attr">a</span>: <span class="string">&#x27;Hello&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;World&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">//结果是 &#x27;&#123;&quot;a&quot;: &quot;Hello&quot;, &quot;b&quot;: &quot;World&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure><p><strong>代码测试</strong></p><p>1、新建一个module ，springmvc-05-json ， 添加web的支持</p><p>2、在web目录下新建一个 json-1.html ， 编写测试内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">   &lt;title&gt;JSON_秦疆&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">   //编写一个js的对象</span><br><span class="line">   var user = &#123;</span><br><span class="line">       name:&quot;秦疆&quot;,</span><br><span class="line">       age:3,</span><br><span class="line">       sex:&quot;男&quot;</span><br><span class="line">  &#125;;</span><br><span class="line">   //将js对象转换成json字符串</span><br><span class="line">   var str = JSON.stringify(user);</span><br><span class="line">   console.log(str);</span><br><span class="line">   </span><br><span class="line">   //将json字符串转换为js对象</span><br><span class="line">   var user2 = JSON.parse(str);</span><br><span class="line">   console.log(user2.age,user2.name,user2.sex);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>3、在IDEA中使用浏览器打开，查看控制台输出！</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328214618508.png" alt="image-20220328214618508"></p><blockquote><p>Controller返回JSON数据</p></blockquote><p>Jackson应该是目前比较好的json解析工具了</p><p>当然工具不止这一个，比如还有阿里巴巴的 fastjson 等等。</p><p>我们这里使用Jackson，使用它需要导入它的jar包；</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置SpringMVC需要的配置</p><p>web.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--1.注册servlet--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--通过初始化参数指定SpringMVC配置文件的位置，进行关联--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc-servlet.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 启动顺序，数字越小，启动越早 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!--所有请求都会被springmvc拦截 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>SpringMVC<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>springmvc-servlet.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们随便编写一个User的实体类，然后我们去编写我们的测试Controller；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要导入lombok</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">   <span class="keyword">private</span> String sex;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们需要两个新东西，一个是@ResponseBody，一个是ObjectMapper对象，我们看下具体的用法</p><p>编写一个Controller；</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/json1&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">       <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">       <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">       <span class="comment">//创建一个对象</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆1号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line">       <span class="comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span></span><br><span class="line">       <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置Tomcat ， 启动测试一下！</p><p><a href="http://localhost:8080/json1">http://localhost:8080/json1</a></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328214804085.png" alt="image-20220328214804085"></p><p>发现出现了乱码问题，我们需要设置一下他的编码格式为utf-8，以及它返回的类型；</p><p>通过@RequestMaping的produces属性来实现，修改下代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//produces:指定响应体返回类型和编码</span></span><br><span class="line"><span class="meta">@RequestMapping(value = &quot;/json1&quot;,produces = &quot;application/json;charset=utf-8&quot;)</span></span><br></pre></td></tr></table></figure><p>再次测试， <a href="http://localhost:8080/json1">http://localhost:8080/json1</a> ， 乱码问题OK！</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328214812309.png" alt="image-20220328214812309"></p><p>【注意：使用json记得处理乱码问题】</p><blockquote><p>代码优化</p></blockquote><p><strong>乱码统一解决</strong></p><p>上一种方法比较麻烦，如果项目中有许多请求则每一个都要添加，可以通过Spring配置统一指定，这样就不用每次都去处理了！</p><p>我们可以在springmvc的配置文件上添加一段消息StringHttpMessageConverter转换配置！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:message-converters</span> <span class="attr">register-defaults</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;UTF-8&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.MappingJackson2HttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;objectMapper&quot;</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean&quot;</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;failOnEmptyBeans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>返回json字符串统一解决</strong></p><p>在类上直接使用 <strong>@RestController</strong> ，这样子，里面所有的方法都只会返回 json 字符串了，不用再每一个都添加@ResponseBody ！我们在前后端分离开发中，一般都使用 @RestController ，十分便捷！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//produces:指定响应体返回类型和编码</span></span><br><span class="line">   <span class="meta">@RequestMapping(value = &quot;/json1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">json1</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">       <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">       <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">       <span class="comment">//创建一个对象</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆1号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line">       <span class="comment">//由于@ResponseBody注解，这里会将str转成json格式返回；十分方便</span></span><br><span class="line">       <span class="keyword">return</span> str;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动tomcat测试，结果都正常输出！</p><blockquote><p>测试集合输出</p></blockquote><p>增加一个新的方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/json2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">json2</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建一个jackson的对象映射器，用来解析数据</span></span><br><span class="line">   <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">   <span class="comment">//创建一个对象</span></span><br><span class="line">   <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆1号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">   <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆2号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">   <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆3号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">   <span class="type">User</span> <span class="variable">user4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆4号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">   List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;();</span><br><span class="line">   list.add(user1);</span><br><span class="line">   list.add(user2);</span><br><span class="line">   list.add(user3);</span><br><span class="line">   list.add(user4);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> mapper.writeValueAsString(list);</span><br><span class="line">   <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果 : 十分完美，没有任何问题！</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328214841742.png"></p><blockquote><p>输出时间对象</p></blockquote><p>增加一个新的方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/json3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">json3</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line"></span><br><span class="line">   <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//创建时间一个对象，java.util.Date</span></span><br><span class="line">   <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">   <span class="comment">//将我们的对象解析成为json格式</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> mapper.writeValueAsString(date);</span><br><span class="line">   <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果 :</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328214922179.png" alt="image-20220328214922179"></p><ul><li>默认日期格式会变成一个数字，是1970年1月1日到当前日期的毫秒数！</li><li>Jackson 默认是会把时间转成timestamps形式</li></ul><p><strong>解决方案：取消timestamps形式 ， 自定义时间格式</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/json4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">json4</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line"></span><br><span class="line">   <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">   <span class="comment">//不使用时间戳的方式</span></span><br><span class="line">   mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);</span><br><span class="line">   <span class="comment">//自定义日期格式对象</span></span><br><span class="line">   <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">   <span class="comment">//指定日期格式</span></span><br><span class="line">   mapper.setDateFormat(sdf);</span><br><span class="line"></span><br><span class="line">   <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">   <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> mapper.writeValueAsString(date);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果 : 成功的输出了时间！</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328214935312.png" alt="image-20220328214935312"></p><blockquote><p>抽取为工具类</p></blockquote><p><strong>如果要经常使用的话，这样是比较麻烦的，我们可以将这些代码封装到一个工具类中；我们去编写下</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.SerializationFeature;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonUtils</span> &#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJson</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> getJson(object,<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJson</span><span class="params">(Object object,String dateFormat)</span> &#123;</span><br><span class="line">       <span class="type">ObjectMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">       <span class="comment">//不使用时间差的方式</span></span><br><span class="line">       mapper.configure(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS, <span class="literal">false</span>);</span><br><span class="line">       <span class="comment">//自定义日期格式对象</span></span><br><span class="line">       <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(dateFormat);</span><br><span class="line">       <span class="comment">//指定日期格式</span></span><br><span class="line">       mapper.setDateFormat(sdf);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> mapper.writeValueAsString(object);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用工具类，代码就更加简洁了！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/json5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">json5</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">   <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">   <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JsonUtils.getJson(date);</span><br><span class="line">   <span class="keyword">return</span> json;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大功告成！完美！</p><blockquote><p>FastJson</p></blockquote><p>fastjson.jar是阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转换，实现JavaBean对象与json字符串的转换，实现json对象与json字符串的转换。实现json的转换方法很多，最后的实现结果都是一样的。</p><p>fastjson 的 pom依赖！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.60<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>fastjson 三个主要的类：</p><p><strong>JSONObject  代表 json 对象</strong> </p><ul><li>JSONObject实现了Map接口, 猜想 JSONObject底层操作是由Map实现的。</li><li>JSONObject对应json对象，通过各种形式的get()方法可以获取json对象中的数据，也可利用诸如size()，isEmpty()等方法获取”键：值”对的个数和判断是否为空。其本质是通过实现Map接口并调用接口中的方法完成的。</li></ul><p><strong>JSONArray  代表 json 对象数组</strong></p><ul><li>内部是有List接口中的方法来完成操作的。</li></ul><p><strong>JSON代表 JSONObject和JSONArray的转化</strong></p><ul><li>JSON类源码分析与使用</li><li>仔细观察这些方法，主要是实现json对象，json对象数组，javabean对象，json字符串之间的相互转化。</li></ul><p><strong>代码测试，我们新建一个FastJsonDemo 类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.kuang.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastJsonDemo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">       <span class="comment">//创建一个对象</span></span><br><span class="line">       <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆1号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆2号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆3号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       <span class="type">User</span> <span class="variable">user4</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆4号&quot;</span>, <span class="number">3</span>, <span class="string">&quot;男&quot;</span>);</span><br><span class="line">       List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;();</span><br><span class="line">       list.add(user1);</span><br><span class="line">       list.add(user2);</span><br><span class="line">       list.add(user3);</span><br><span class="line">       list.add(user4);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;*******Java对象 转 JSON字符串*******&quot;</span>);</span><br><span class="line">       <span class="type">String</span> <span class="variable">str1</span> <span class="operator">=</span> JSON.toJSONString(list);</span><br><span class="line">       System.out.println(<span class="string">&quot;JSON.toJSONString(list)==&gt;&quot;</span>+str1);</span><br><span class="line">       <span class="type">String</span> <span class="variable">str2</span> <span class="operator">=</span> JSON.toJSONString(user1);</span><br><span class="line">       System.out.println(<span class="string">&quot;JSON.toJSONString(user1)==&gt;&quot;</span>+str2);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;\n****** JSON字符串 转 Java对象*******&quot;</span>);</span><br><span class="line">       User jp_user1=JSON.parseObject(str2,User.class);</span><br><span class="line">       System.out.println(<span class="string">&quot;JSON.parseObject(str2,User.class)==&gt;&quot;</span>+jp_user1);</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;\n****** Java对象 转 JSON对象 ******&quot;</span>);</span><br><span class="line">       <span class="type">JSONObject</span> <span class="variable">jsonObject1</span> <span class="operator">=</span> (JSONObject) JSON.toJSON(user2);</span><br><span class="line">       System.out.println(<span class="string">&quot;(JSONObject) JSON.toJSON(user2)==&gt;&quot;</span>+jsonObject1.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"></span><br><span class="line">       System.out.println(<span class="string">&quot;\n****** JSON对象 转 Java对象 ******&quot;</span>);</span><br><span class="line">       <span class="type">User</span> <span class="variable">to_java_user</span> <span class="operator">=</span> JSON.toJavaObject(jsonObject1, User.class);</span><br><span class="line">       System.out.println(<span class="string">&quot;JSON.toJavaObject(jsonObject1, User.class)==&gt;&quot;</span>+to_java_user);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种工具类，我们只需要掌握使用就好了，在使用的时候在根据具体的业务去找对应的实现。和以前的commons-io那种工具包一样，拿来用就好了</p><h1 id="前端Ajax研究"><a href="#前端Ajax研究" class="headerlink" title="前端Ajax研究"></a>前端Ajax研究</h1><blockquote><p>简介</p></blockquote><ul><li><p><strong>AJAX &#x3D; Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></p></li><li><p>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p></li><li><p><strong>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></p></li><li><p>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。</p></li><li><p>Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</p></li><li><p>就和国内百度的搜索框一样!</p></li><li><p>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</p></li><li><p>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</p></li><li><p>使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</p></li></ul><blockquote><p>伪造Ajax</p></blockquote><p>我们可以使用前端的一个标签来伪造一个ajax的样子。iframe标签</p><p>1、新建一个module ：sspringmvc-06-ajax ， 导入web支持！</p><p>2、编写一个 ajax-frame.html 使用 iframe 测试，感受下效果</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">title</span>&gt;</span>kuangshen<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">var</span> myDate = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;currentTime&#x27;</span>).<span class="property">innerText</span> = myDate.<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">function</span> <span class="title function_">LoadPage</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">       <span class="keyword">var</span> targetUrl =  <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;url&#x27;</span>).<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">console</span>.<span class="title function_">log</span>(targetUrl);</span></span><br><span class="line"><span class="language-javascript">       <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;iframePosition&quot;</span>).<span class="property">src</span> = targetUrl;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>请输入要加载的地址：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;currentTime&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;url&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;https://www.baidu.com/&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;button&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;LoadPage()&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h3</span>&gt;</span>加载页面位置：<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">id</span>=<span class="string">&quot;iframePosition&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%;height: 500px;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、使用IDEA开浏览器测试一下！</p><p><strong>利用AJAX可以做：</strong></p><ul><li>注册时，输入用户名自动检测用户是否已经存在。</li><li>登陆时，提示用户名密码错误</li><li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</li><li>….等等</li></ul><blockquote><p>jQuery.ajax</p></blockquote><p>纯JS原生实现Ajax我们不去讲解这里，直接使用jquery提供的，方便学习和使用，避免重复造轮子，有兴趣的同学可以去了解下JS原生XMLHttpRequest ！</p><p>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</p><p>jQuery 提供多个与 AJAX 有关的方法。</p><p>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</p><p>jQuery 不是生产者，而是大自然搬运工。</p><p>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jQuery.<span class="title function_">ajax</span>(...)</span><br><span class="line">      部分参数：</span><br><span class="line">            url：请求地址</span><br><span class="line">            type：请求方式，<span class="variable constant_">GET</span>、<span class="variable constant_">POST</span>（<span class="number">1.9</span><span class="number">.0</span>之后用method）</span><br><span class="line">        headers：请求头</span><br><span class="line">            data：要发送的数据</span><br><span class="line">    contentType：即将发送信息至服务器的内容编码类型(默认: <span class="string">&quot;application/x-www-form-urlencoded; charset=UTF-8&quot;</span>)</span><br><span class="line">          <span class="keyword">async</span>：是否异步</span><br><span class="line">        timeout：设置请求超时时间（毫秒）</span><br><span class="line">      beforeSend：发送请求前执行的函数(全局)</span><br><span class="line">        complete：完成之后执行的回调函数(全局)</span><br><span class="line">        success：成功之后执行的回调函数(全局)</span><br><span class="line">          error：失败之后执行的回调函数(全局)</span><br><span class="line">        accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型</span><br><span class="line">        dataType：将服务器端返回的数据转换成指定类型</span><br><span class="line">          <span class="string">&quot;xml&quot;</span>: 将服务器端返回的内容转换成xml格式</span><br><span class="line">          <span class="string">&quot;text&quot;</span>: 将服务器端返回的内容转换成普通文本格式</span><br><span class="line">          <span class="string">&quot;html&quot;</span>: 将服务器端返回的内容转换成普通文本格式，在插入<span class="variable constant_">DOM</span>中时，如果包含<span class="title class_">JavaScript</span>标签，则会尝试去执行。</span><br><span class="line">        <span class="string">&quot;script&quot;</span>: 尝试将返回值当作<span class="title class_">JavaScript</span>去执行，然后再将服务器端返回的内容转换成普通文本格式</span><br><span class="line">          <span class="string">&quot;json&quot;</span>: 将服务器端返回的内容转换成相应的<span class="title class_">JavaScript</span>对象</span><br><span class="line">        <span class="string">&quot;jsonp&quot;</span>: <span class="title class_">JSON</span>P 格式使用 <span class="title class_">JSON</span>P 形式调用函数时，如 <span class="string">&quot;myurl?callback=?&quot;</span> jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</span><br></pre></td></tr></table></figure><p><strong>我们来个简单的测试，使用最原始的HttpServletResponse处理 , .最简单 , 最通用</strong></p><p>1、配置web.xml 和 springmvc的配置文件，复制上面案例的即可 【记得静态资源过滤和注解驱动配置上】</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">       https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.kuang.controller&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- 视图解析器 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 前缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/jsp/&quot;</span> /&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 后缀 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、编写一个AjaxController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AjaxController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/a1&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ajax1</span><span class="params">(String name , HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(name))&#123;</span><br><span class="line">           response.getWriter().print(<span class="string">&quot;true&quot;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           response.getWriter().print(<span class="string">&quot;false&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、导入jquery ， 可以使用在线的CDN ， 也可以下载导入</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、编写index.jsp测试</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">   &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;%--&lt;script src=<span class="string">&quot;https://code.jquery.com/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;--%&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       function <span class="title function_">a1</span><span class="params">()</span>&#123;</span><br><span class="line">           $.post(&#123;</span><br><span class="line">               url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a1&quot;</span>,</span><br><span class="line">               data:&#123;<span class="string">&#x27;name&#x27;</span>:$(<span class="string">&quot;#txtName&quot;</span>).val()&#125;,</span><br><span class="line">               success:function (data,status) &#123;</span><br><span class="line">                   alert(data);</span><br><span class="line">                   alert(status);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--onblur：失去焦点触发事件--%&gt;</span><br><span class="line">用户名:&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;txtName&quot;</span> onblur=<span class="string">&quot;a1()&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>5、启动tomcat测试！打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个ajax的请求！是后台返回给我们的结果！测试成功！</p><p><strong>Springmvc实现</strong></p><p>实体类user</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">   <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来获取一个集合对象，展示到前端页面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/a2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">ajax2</span><span class="params">()</span>&#123;</span><br><span class="line">   List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;();</span><br><span class="line">   list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆1号&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">   list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆2号&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">   list.add(<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;秦疆3号&quot;</span>,<span class="number">3</span>,<span class="string">&quot;男&quot;</span>));</span><br><span class="line">   <span class="keyword">return</span> list; <span class="comment">//由于@RestController注解，将list转成json格式返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端页面</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> id=<span class="string">&quot;btn&quot;</span> value=<span class="string">&quot;获取数据&quot;</span>/&gt;</span><br><span class="line">&lt;table width=<span class="string">&quot;80%&quot;</span> align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">   &lt;tr&gt;</span><br><span class="line">       &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">       &lt;td&gt;年龄&lt;/td&gt;</span><br><span class="line">       &lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">   &lt;/tr&gt;</span><br><span class="line">   &lt;tbody id=<span class="string">&quot;content&quot;</span>&gt;</span><br><span class="line">   &lt;/tbody&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">   $(function () &#123;</span><br><span class="line">       $(<span class="string">&quot;#btn&quot;</span>).click(function () &#123;</span><br><span class="line">           $.post(<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a2&quot;</span>,function (data) &#123;</span><br><span class="line">               console.log(data)</span><br><span class="line">               <span class="keyword">var</span> html=<span class="string">&quot;&quot;</span>;</span><br><span class="line">               <span class="keyword">for</span> (<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;data.length ; i++) &#123;</span><br><span class="line">                   html+= <span class="string">&quot;&lt;tr&gt;&quot;</span> +</span><br><span class="line">                       <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].name + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="line">                       <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].age + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="line">                       <span class="string">&quot;&lt;td&gt;&quot;</span> + data[i].sex + <span class="string">&quot;&lt;/td&gt;&quot;</span> +</span><br><span class="line">                       <span class="string">&quot;&lt;/tr&gt;&quot;</span></span><br><span class="line">              &#125;</span><br><span class="line">               $(<span class="string">&quot;#content&quot;</span>).html(html);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><strong>成功实现了数据回显！可以体会一下Ajax的好处！</strong></p><blockquote><p>注册提示效果</p></blockquote><p>我们再测试一个小Demo，思考一下我们平时注册时候，输入框后面的实时提示怎么做到的；如何优化</p><p>我们写一个Controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/a3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">ajax3</span><span class="params">(String name,String pwd)</span>&#123;</span><br><span class="line">   <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">   <span class="comment">//模拟数据库中存在数据</span></span><br><span class="line">   <span class="keyword">if</span> (name!=<span class="literal">null</span>)&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&quot;admin&quot;</span>.equals(name))&#123;</span><br><span class="line">           msg = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           msg = <span class="string">&quot;用户名输入错误&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">if</span> (pwd!=<span class="literal">null</span>)&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&quot;123456&quot;</span>.equals(pwd))&#123;</span><br><span class="line">           msg = <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">      &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">           msg = <span class="string">&quot;密码输入有误&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="keyword">return</span> msg; <span class="comment">//由于@RestController注解，将msg转成json格式返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端页面 login.jsp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;ajax&lt;/title&gt;</span><br><span class="line">   &lt;script src=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/statics/js/jquery-3.1.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line"></span><br><span class="line">       function <span class="title function_">a1</span><span class="params">()</span>&#123;</span><br><span class="line">           $.post(&#123;</span><br><span class="line">               url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;</span>,</span><br><span class="line">               data:&#123;<span class="string">&#x27;name&#x27;</span>:$(<span class="string">&quot;#name&quot;</span>).val()&#125;,</span><br><span class="line">               success:function (data) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (data.toString()==<span class="string">&#x27;OK&#x27;</span>)&#123;</span><br><span class="line">                       $(<span class="string">&quot;#userInfo&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;green&quot;</span>);</span><br><span class="line">                  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                       $(<span class="string">&quot;#userInfo&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">                   $(<span class="string">&quot;#userInfo&quot;</span>).html(data);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">       function <span class="title function_">a2</span><span class="params">()</span>&#123;</span><br><span class="line">           $.post(&#123;</span><br><span class="line">               url:<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/a3&quot;</span>,</span><br><span class="line">               data:&#123;<span class="string">&#x27;pwd&#x27;</span>:$(<span class="string">&quot;#pwd&quot;</span>).val()&#125;,</span><br><span class="line">               success:function (data) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (data.toString()==<span class="string">&#x27;OK&#x27;</span>)&#123;</span><br><span class="line">                       $(<span class="string">&quot;#pwdInfo&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;green&quot;</span>);</span><br><span class="line">                  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                       $(<span class="string">&quot;#pwdInfo&quot;</span>).css(<span class="string">&quot;color&quot;</span>,<span class="string">&quot;red&quot;</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">                   $(<span class="string">&quot;#pwdInfo&quot;</span>).html(data);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">  用户名:&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;name&quot;</span> onblur=<span class="string">&quot;a1()&quot;</span>/&gt;</span><br><span class="line">   &lt;span id=<span class="string">&quot;userInfo&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">  密码:&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;pwd&quot;</span> onblur=<span class="string">&quot;a2()&quot;</span>/&gt;</span><br><span class="line">   &lt;span id=<span class="string">&quot;pwdInfo&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>【记得处理json乱码问题】</p><p>测试一下效果，动态请求响应，局部刷新，就是如此！</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328220342841.png" alt="image-20220328220342841"></p><blockquote><p>获取baidu接口Demo</p></blockquote><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class="line">   &lt;title&gt;JSONP百度搜索&lt;/title&gt;</span><br><span class="line">   &lt;style&gt;</span><br><span class="line">       #q&#123;</span><br><span class="line">           width: 500px;</span><br><span class="line">           height: 30px;</span><br><span class="line">           border:1px solid #ddd;</span><br><span class="line">           line-height: 30px;</span><br><span class="line">           display: block;</span><br><span class="line">           margin: <span class="number">0</span> auto;</span><br><span class="line">           padding: <span class="number">0</span> 10px;</span><br><span class="line">           font-size: 14px;</span><br><span class="line">      &#125;</span><br><span class="line">       #ul&#123;</span><br><span class="line">           width: 520px;</span><br><span class="line">           list-style: none;</span><br><span class="line">           margin: <span class="number">0</span> auto;</span><br><span class="line">           padding: <span class="number">0</span>;</span><br><span class="line">           border:1px solid #ddd;</span><br><span class="line">           margin-top: -1px;</span><br><span class="line">           display: none;</span><br><span class="line">      &#125;</span><br><span class="line">       #ul li&#123;</span><br><span class="line">           line-height: 30px;</span><br><span class="line">           padding: <span class="number">0</span> 10px;</span><br><span class="line">      &#125;</span><br><span class="line">       #ul li:hover&#123;</span><br><span class="line">           background-color: #f60;</span><br><span class="line">           color: #fff;</span><br><span class="line">      &#125;</span><br><span class="line">   &lt;/style&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2.步骤二</span></span><br><span class="line">       <span class="comment">// 定义demo函数 (分析接口、数据)</span></span><br><span class="line">       function <span class="title function_">demo</span><span class="params">(data)</span>&#123;</span><br><span class="line">           <span class="type">var</span> <span class="variable">Ul</span> <span class="operator">=</span> document.getElementById(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">           <span class="type">var</span> <span class="variable">html</span> <span class="operator">=</span> <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">           <span class="comment">// 如果搜索数据存在 把内容添加进去</span></span><br><span class="line">           <span class="keyword">if</span> (data.s.length) &#123;</span><br><span class="line">               <span class="comment">// 隐藏掉的ul显示出来</span></span><br><span class="line">               Ul.style.display = <span class="string">&#x27;block&#x27;</span>;</span><br><span class="line">               <span class="comment">// 搜索到的数据循环追加到li里</span></span><br><span class="line">               <span class="keyword">for</span>(<span class="type">var</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;data.s.length;i++)&#123;</span><br><span class="line">                   html += <span class="string">&#x27;&lt;li&gt;&#x27;</span>+data.s[i]+<span class="string">&#x27;&lt;/li&gt;&#x27;</span>;</span><br><span class="line">              &#125;</span><br><span class="line">               <span class="comment">// 循环的li写入ul</span></span><br><span class="line">               Ul.innerHTML = html;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 1.步骤一</span></span><br><span class="line">       window.onload = function()&#123;</span><br><span class="line">           <span class="comment">// 获取输入框和ul</span></span><br><span class="line">           <span class="type">var</span> <span class="variable">Q</span> <span class="operator">=</span> document.getElementById(<span class="string">&#x27;q&#x27;</span>);</span><br><span class="line">           <span class="type">var</span> <span class="variable">Ul</span> <span class="operator">=</span> document.getElementById(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line"></span><br><span class="line">           <span class="comment">// 事件鼠标抬起时候</span></span><br><span class="line">           Q.onkeyup = function()&#123;</span><br><span class="line">               <span class="comment">// 如果输入框不等于空</span></span><br><span class="line">               <span class="keyword">if</span> (<span class="built_in">this</span>.value != <span class="string">&#x27;&#x27;</span>) &#123;</span><br><span class="line">                   <span class="comment">// ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆JSONPz重点☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆</span></span><br><span class="line">                   <span class="comment">// 创建标签</span></span><br><span class="line">                   <span class="type">var</span> <span class="variable">script</span> <span class="operator">=</span> document.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">                   <span class="comment">//给定要跨域的地址 赋值给src</span></span><br><span class="line">                   <span class="comment">//这里是要请求的跨域的地址 我写的是百度搜索的跨域地址</span></span><br><span class="line">                   script.src = <span class="string">&#x27;https://sp0.baidu.com/5a1Fazu8AA54nxGko9WTAnF6hhy/su?wd=&#x27;</span>+<span class="built_in">this</span>.value+<span class="string">&#x27;&amp;cb=demo&#x27;</span>;</span><br><span class="line">                   <span class="comment">// 将组合好的带src的script标签追加到body里</span></span><br><span class="line">                   document.body.appendChild(script);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;q&quot;</span> /&gt;</span><br><span class="line">&lt;ul id=<span class="string">&quot;ul&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><blockquote><p>概述</p></blockquote><p>SpringMVC的处理器拦截器类似于Servlet开发中的过滤器Filter,用于对处理器进行预处理和后处理。开发者可以自己定义一些拦截器来实现特定的功能。</p><p><strong>过滤器与拦截器的区别：</strong>拦截器是AOP思想的具体应用。</p><p><strong>过滤器</strong></p><ul><li>servlet规范中的一部分，任何java web工程都可以使用</li><li>在url-pattern中配置了&#x2F;*之后，可以对所有要访问的资源进行拦截</li></ul><p><strong>拦截器</strong> </p><ul><li>拦截器是SpringMVC框架自己的，只有使用了SpringMVC框架的工程才能使用</li><li>拦截器只会拦截访问的控制器方法， 如果访问的是jsp&#x2F;html&#x2F;css&#x2F;image&#x2F;js是不会进行拦截的</li></ul><blockquote><p>自定义拦截器</p></blockquote><p>那如何实现拦截器呢？</p><p>想要自定义拦截器，必须实现 HandlerInterceptor 接口。</p><p>1、新建一个Moudule ， springmvc-07-Interceptor  ， 添加web支持</p><p>2、配置web.xml 和 springmvc-servlet.xml 文件</p><p>3、编写一个拦截器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//在请求处理的方法之前执行</span></span><br><span class="line">   <span class="comment">//如果返回true执行下一个拦截器</span></span><br><span class="line">   <span class="comment">//如果返回false就不执行下一个拦截器</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;------------处理前------------&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//在请求处理方法执行之后执行</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;------------处理后------------&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//在dispatcherServlet处理后执行,做清理工作.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;------------清理------------&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4、在springmvc的配置文件中配置拦截器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--关于拦截器的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--/** 包括路径及其子路径--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--/admin/* 拦截的是/admin/add等等这种 , /admin/add/user不会被拦截--&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--/admin/** 拦截的是/admin/下的所有--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--bean配置的就是拦截器--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.interceptor.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、编写一个Controller，接收请求</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试拦截器的控制器</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/interceptor&quot;)</span></span><br><span class="line">   <span class="meta">@ResponseBody</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">testFunction</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.println(<span class="string">&quot;控制器中的方法执行了&quot;</span>);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、前端 index.jsp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/interceptor&quot;</span>&gt;拦截器测试&lt;/a&gt;</span><br></pre></td></tr></table></figure><p>7、启动tomcat 测试一下！</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328221253999.png" alt="image-20220328221253999"></p><blockquote><p>验证用户是否登录 (认证用户)</p></blockquote><p><strong>实现思路</strong></p><p>1、有一个登陆页面，需要写一个controller访问页面。</p><p>2、登陆页面有一提交表单的动作。需要在controller中处理。判断用户名密码是否正确。如果正确，向session中写入用户信息。<em>返回登陆成功。</em></p><p>3、拦截用户请求，判断用户是否登陆。如果用户已经登陆。放行， 如果用户未登陆，跳转到登陆页面</p><p><strong>测试：</strong></p><p>1、编写一个登陆页面  login.jsp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;登录页面&lt;/h1&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/login&quot;</span>&gt;</span><br><span class="line">  用户名：&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">  密码：&lt;input type=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;pwd&quot;</span>&gt; &lt;br&gt;</span><br><span class="line">   &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>2、编写一个Controller处理请求</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//跳转到登陆页面</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/jumplogin&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">jumpLogin</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//跳转到成功页面</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/jumpSuccess&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">jumpSuccess</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//登陆提交</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(HttpSession session, String username, String pwd)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">// 向session记录用户身份信息</span></span><br><span class="line">       System.out.println(<span class="string">&quot;接收前端===&quot;</span>+username);</span><br><span class="line">       session.setAttribute(<span class="string">&quot;user&quot;</span>, username);</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//退出登陆</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;logout&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">logout</span><span class="params">(HttpSession session)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">       <span class="comment">// session 过期</span></span><br><span class="line">       session.invalidate();</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3、编写一个登陆成功的页面 success.jsp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;登录成功页面&lt;/h1&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">$&#123;user&#125;</span><br><span class="line">&lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/logout&quot;</span>&gt;注销&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>4、在 index 页面上测试跳转！启动Tomcat 测试，未登录也可以进入主页！</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">   &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line"> &lt;/head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"> &lt;h1&gt;首页&lt;/h1&gt;</span><br><span class="line"> &lt;hr&gt;</span><br><span class="line">&lt;%--登录--%&gt;</span><br><span class="line"> &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/jumplogin&quot;</span>&gt;登录&lt;/a&gt;</span><br><span class="line"> &lt;a href=<span class="string">&quot;$&#123;pageContext.request.contextPath&#125;/user/jumpSuccess&quot;</span>&gt;成功页面&lt;/a&gt;</span><br><span class="line"> &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>5、编写用户登录拦截器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       <span class="comment">// 如果是登陆页面则放行</span></span><br><span class="line">       System.out.println(<span class="string">&quot;uri: &quot;</span> + request.getRequestURI());</span><br><span class="line">       <span class="keyword">if</span> (request.getRequestURI().contains(<span class="string">&quot;login&quot;</span>)) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">       <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 如果用户已登陆也放行</span></span><br><span class="line">       <span class="keyword">if</span>(session.getAttribute(<span class="string">&quot;user&quot;</span>) != <span class="literal">null</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 用户没有登陆跳转到登陆页面</span></span><br><span class="line">       request.getRequestDispatcher(<span class="string">&quot;/WEB-INF/jsp/login.jsp&quot;</span>).forward(request, response);</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6、在Springmvc的配置文件中注册拦截器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--关于拦截器的配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;loginInterceptor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.kuang.interceptor.LoginInterceptor&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7、再次重启Tomcat测试！</p><p><strong>OK，测试登录拦截功能无误.</strong></p><h1 id="文件上传和下载"><a href="#文件上传和下载" class="headerlink" title="文件上传和下载"></a>文件上传和下载</h1><blockquote><p>准备工作</p></blockquote><p>文件上传是项目开发中最常见的功能之一 ,springMVC 可以很好的支持文件上传，但是SpringMVC上下文中默认没有装配MultipartResolver，因此默认情况下其不能处理文件上传工作。如果想使用Spring的文件上传功能，则需要在上下文中配置MultipartResolver。</p><p>前端表单要求：为了能上传文件，必须将表单的method设置为POST，并将enctype设置为multipart&#x2F;form-data。只有在这样的情况下，浏览器才会把用户选择的文件以二进制数据发送给服务器；</p><p><strong>对表单中的 enctype 属性做个详细的说明：</strong></p><ul><li>application&#x2F;x-www&#x3D;form-urlencoded：默认方式，只处理表单域中的 value 属性值，采用这种编码方式的表单会将表单域中的值处理成 URL 编码方式。</li><li>multipart&#x2F;form-data：这种编码方式会以二进制流的方式来处理表单数据，这种编码方式会把文件域指定文件的内容也封装到请求参数中，不会对字符编码。</li><li>text&#x2F;plain：除了把空格转换为 “+” 号外，其他字符都不做编码处理，这种方式适用直接通过表单发送邮件。</li></ul><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">   &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>/&gt;</span><br><span class="line">   &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>一旦设置了enctype为multipart&#x2F;form-data，浏览器即会采用二进制流的方式来处理表单数据，而对于文件上传的处理则涉及在服务器端解析原始的HTTP响应。在2003年，Apache Software Foundation发布了开源的Commons FileUpload组件，其很快成为Servlet&#x2F;JSP程序员上传文件的最佳选择。</p><ul><li>Servlet3.0规范已经提供方法来处理文件上传，但这种上传需要在Servlet中完成。</li><li>而Spring MVC则提供了更简单的封装。</li><li>Spring MVC为文件上传提供了直接的支持，这种支持是用即插即用的MultipartResolver实现的。</li><li>Spring MVC使用Apache Commons FileUpload技术实现了一个MultipartResolver实现类：</li><li>CommonsMultipartResolver。因此，SpringMVC的文件上传还需要依赖Apache Commons FileUpload的组件。</li></ul><blockquote><p>文件上传</p></blockquote><p>1、导入文件上传的jar包，commons-fileupload ， Maven会自动帮我们导入他的依赖包 commons-io包；</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--servlet-api导入高版本的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、配置bean：multipartResolver</p><p>【<strong>注意！！！这个bena的id必须为：multipartResolver ， 否则上传文件会报400的错误！在这里栽过坑,教训！</strong>】</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 请求的编码格式，必须和jSP的pageEncoding属性一致，以便正确读取表单的内容，默认为ISO-8859-1 --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 上传文件大小上限，单位为字节（10485760=10M） --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10485760&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxInMemorySize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;40960&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CommonsMultipartFile 的 常用方法：</p><ul><li><strong>String getOriginalFilename()：获取上传文件的原名</strong></li><li><strong>InputStream getInputStream()：获取文件流</strong></li><li><strong>void transferTo(File dest)：将上传文件保存到一个目录文件中</strong></li></ul><p> 我们去实际测试一下</p><p>3、编写前端页面</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">&quot;/upload&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line"> &lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>/&gt;</span><br><span class="line"> &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;upload&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br></pre></td></tr></table></figure><p>4、<strong>Controller</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.commons.CommonsMultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileController</span> &#123;</span><br><span class="line">   <span class="comment">//@RequestParam(&quot;file&quot;) 将name=file控件得到的文件封装成CommonsMultipartFile 对象</span></span><br><span class="line">   <span class="comment">//批量上传CommonsMultipartFile则为数组即可</span></span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/upload&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">fileUpload</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file , HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取文件名 : file.getOriginalFilename();</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">uploadFileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//如果文件名为空，直接回到首页！</span></span><br><span class="line">       <span class="keyword">if</span> (<span class="string">&quot;&quot;</span>.equals(uploadFileName))&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;上传文件名 : &quot;</span>+uploadFileName);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//上传路径保存设置</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">       <span class="comment">//如果路径不存在，创建一个</span></span><br><span class="line">       <span class="type">File</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">       <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">           realPath.mkdir();</span><br><span class="line">      &#125;</span><br><span class="line">       System.out.println(<span class="string">&quot;上传文件保存地址：&quot;</span>+realPath);</span><br><span class="line"></span><br><span class="line">       <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> file.getInputStream(); <span class="comment">//文件输入流</span></span><br><span class="line">       <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="keyword">new</span> <span class="title class_">File</span>(realPath,uploadFileName)); <span class="comment">//文件输出流</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//读取写出</span></span><br><span class="line">       <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">       <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">       <span class="keyword">while</span> ((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">           os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">           os.flush();</span><br><span class="line">      &#125;</span><br><span class="line">       os.close();</span><br><span class="line">       is.close();</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、测试上传文件，OK！</p><p><strong>采用file.Transto 来保存上传的文件</strong></p><p>1、编写Controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 采用file.Transto 来保存上传的文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/upload2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String  <span class="title function_">fileUpload2</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> CommonsMultipartFile file, HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//上传路径保存设置</span></span><br><span class="line">   <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">   <span class="type">File</span> <span class="variable">realPath</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path);</span><br><span class="line">   <span class="keyword">if</span> (!realPath.exists())&#123;</span><br><span class="line">       realPath.mkdir();</span><br><span class="line">  &#125;</span><br><span class="line">   <span class="comment">//上传文件地址</span></span><br><span class="line">   System.out.println(<span class="string">&quot;上传文件保存地址：&quot;</span>+realPath);</span><br><span class="line"></span><br><span class="line">   <span class="comment">//通过CommonsMultipartFile的方法直接写文件（注意这个时候）</span></span><br><span class="line">   file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(realPath +<span class="string">&quot;/&quot;</span>+ file.getOriginalFilename()));</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="string">&quot;redirect:/index.jsp&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、前端表单提交地址修改</p><p>3、访问提交测试，OK！</p><blockquote><p>文件下载</p></blockquote><p><strong>文件下载步骤：</strong></p><p>1、设置 response 响应头</p><p>2、读取文件 – InputStream</p><p>3、写出文件 – OutputStream</p><p>4、执行操作</p><p>5、关闭流 （先开后关）</p><p><strong>代码实现：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">downloads</span><span class="params">(HttpServletResponse response ,HttpServletRequest request)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">   <span class="comment">//要下载的图片地址</span></span><br><span class="line">   <span class="type">String</span>  <span class="variable">path</span> <span class="operator">=</span> request.getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">   <span class="type">String</span>  <span class="variable">fileName</span> <span class="operator">=</span> <span class="string">&quot;基础语法.jpg&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//1、设置response 响应头</span></span><br><span class="line">   response.reset(); <span class="comment">//设置页面不缓存,清空buffer</span></span><br><span class="line">   response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>); <span class="comment">//字符编码</span></span><br><span class="line">   response.setContentType(<span class="string">&quot;multipart/form-data&quot;</span>); <span class="comment">//二进制传输数据</span></span><br><span class="line">   <span class="comment">//设置响应头</span></span><br><span class="line">   response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,</span><br><span class="line">           <span class="string">&quot;attachment;fileName=&quot;</span>+URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line"></span><br><span class="line">   <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path,fileName);</span><br><span class="line">   <span class="comment">//2、 读取文件--输入流</span></span><br><span class="line">   InputStream input=<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">   <span class="comment">//3、 写出文件--输出流</span></span><br><span class="line">   <span class="type">OutputStream</span> <span class="variable">out</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line"></span><br><span class="line">   <span class="type">byte</span>[] buff =<span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">   <span class="type">int</span> index=<span class="number">0</span>;</span><br><span class="line">   <span class="comment">//4、执行 写出操作</span></span><br><span class="line">   <span class="keyword">while</span>((index= input.read(buff))!= -<span class="number">1</span>)&#123;</span><br><span class="line">       out.write(buff, <span class="number">0</span>, index);</span><br><span class="line">       out.flush();</span><br><span class="line">  &#125;</span><br><span class="line">   out.close();</span><br><span class="line">   input.close();</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;/download&quot;</span>&gt;</span>点击下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试，文件下载OK，大家可以和我们之前学习的JavaWeb原生的方式对比一下，就可以知道这个便捷多了!</p><p>拦截器及文件操作在我们开发中十分重要，一定要学会使用！</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>手写字小贴士</title>
      <link href="/2022/03/28/%E6%89%8B%E5%86%99%E5%AD%97%E5%B0%8F%E8%B4%B4%E5%A3%AB/"/>
      <url>/2022/03/28/%E6%89%8B%E5%86%99%E5%AD%97%E5%B0%8F%E8%B4%B4%E5%A3%AB/</url>
      
        <content type="html"><![CDATA[<h2 id="前提"><a href="#前提" class="headerlink" title="前提:"></a>前提:</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">左右同形，左小右大</span><br><span class="line">上下同形，上小下大</span><br><span class="line">左右等长，错位书写</span><br><span class="line">左边小时要偏上</span><br><span class="line">右边小时要下落</span><br><span class="line">点下有竖，点竖直对</span><br><span class="line">下有横竖横高竖低</span><br><span class="line">下有撇点，撇高点低</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 小贴士 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小贴士 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析分治</title>
      <link href="/2022/03/28/%E6%B5%85%E6%9E%90%E5%88%86%E6%B2%BB/"/>
      <url>/2022/03/28/%E6%B5%85%E6%9E%90%E5%88%86%E6%B2%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="浅析分治算法"><a href="#浅析分治算法" class="headerlink" title="浅析分治算法"></a>浅析分治算法</h2><p>来自<a href="https://baijiahao.baidu.com/s?id=1685106188743154112&wfr=spider&for=pc">传送门</a></p><h3 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h3><p>分治算法（divide and conquer）是五大常用算法(分治算法、动态规划算法、贪心算法、回溯法、分治界限法)之一，很多人在平时学习中可能只是知道分治算法，但是可能并没有系统的学习分治算法，本篇就带你较为全面的去认识和了解分治算法。</p><p>在学习分治算法之前，问你一个问题，相信大家小时候都有存钱罐的经历，父母亲人如果给钱都会往自己的宝藏中存钱，我们每隔一段时间都会清点清点钱。但是一堆钱让你处理起来你可能觉得很复杂，因为数据相对于大脑有点庞大了，并且很容易算错，你可能会将它<strong>先分</strong>成几个小份算，然后<strong>再叠加</strong>起来计算总和就获得这堆钱的总数了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328113727920.png" alt="image-20220328113727920"></p><p>当然如果你觉得各个部分钱数量还是太大，你依然可以进行划分然后合并，我们之所以这么多是因为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">计算每个小堆钱的方式和计算最大堆钱的方式是相同的(区别在于体量上)</span><br><span class="line">然后大堆钱总和其实就是小堆钱结果之和。这样其实就有一种分治的思想。</span><br></pre></td></tr></table></figure><p>当然这些钱都是想出来的……</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328113917320.png" alt="image-20220328113917320"></p><h3 id="分治算法介绍"><a href="#分治算法介绍" class="headerlink" title="分治算法介绍"></a>分治算法介绍</h3><p><strong>分治算法是用了分治思想的一种算法，什么是分治</strong>？</p><p>分治，字面上的解释是“<strong>分而治之</strong>”，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题……直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。在计算机科学中，分治法就是运用分治思想的一种很重要的算法。分治法是很多高效算法的基础，如排序算法（快速排序，归并排序），傅立叶变换（快速傅立叶变换）等等。</p><p>将父问题分解为子问题同等方式求解，这和递归的概念很吻合，所以在分治算法通常以递归的方式实现(当然也有非递归的实现方式)。分治算法的描述从字面上也很容易理解，分、治其实还有个合并的过程：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">分(Divide)：递归解决较小的问题(到终止层或者可以解决的时候停下)</span><br><span class="line">治(Conquer)：递归求解，如果问题够小直接求解。</span><br><span class="line">合并(Combine)：将子问题的解构建父类问题</span><br></pre></td></tr></table></figure><p>一般分治算法在正文中分解为两个即以上的递归调用，并且子类问题一般是不想交的(互不影响)。当求解一个问题规模很大很难直接求解，但是规模较小的时候问题很容易求解并且这个问题并且问题满足分治算法的适用条件，那么就可以使用分治算法</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328114010265.png" alt="image-20220328114010265"></p><p>那么采用分治算法解决的问题需要 **满足那些条件(特征)**呢?</p><p>1 . 原问题规模通常比较大，不易直接解决，但问题缩小到一定程度就能较容易的解决。</p><p>2 . 问题可以分解为若干规模较小、求解方式相同(似)的子问题。且子问题之间求解是独立的互不影响。</p><p>3 . 合并问题分解的子问题可以得到问题的解。</p><p>你可能会疑惑分治算法和递归有什么关系？其实分治重要的是一种思想，注重的是问题分、治、合并的过程。而递归是一种方式(工具)，这种方式通过方法自己调用自己形成一个来回的过程，而分治可能就是利用了多次这样的来回过程。</p><p><strong>分治算法经典问题</strong></p><p>对于分治算法的经典问题，重要的是其思想，因为我们大部分借助递归去实现，所以在代码实现上大部分都是很简单，而本篇也重在讲述思想。</p><p>分治算法的经典问题，个人将它分成两大类：子问题完全独立和子问题不完全独立。</p><p>1 . <strong>子问题完全独立</strong>就是原问题的答案可完全由子问题的结果推出。</p><p>2 . <strong>子问题不完全独立，</strong>有些区间类的问题或者跨区间问题使用分治可能结果跨区间,在考虑问题的时候需要仔细借鉴下。</p><h2 id="分治实例"><a href="#分治实例" class="headerlink" title="分治实例:"></a>分治实例:</h2><h3 id="二分搜索插入"><a href="#二分搜索插入" class="headerlink" title="二分搜索插入:"></a>二分搜索插入:</h3><p>二分搜索是分治的一个实例，只不过二分搜索有着自己的特殊性</p><p>序列有序结果为一个值正常二分将一个完整的区间分成两个区间，两个区间本应单独找值然后确认结果，但是通过有序的区间可以直接确定结果在那个区间，所以分的两个区间只需要计算其中一个区间，然后继续进行一直到结束。实现方式有递归和非递归，但是非递归用的更多一些：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (nums[<span class="number">0</span>] &gt;= target) <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//剪枝</span></span><br><span class="line">    <span class="keyword">if</span> (nums[nums.length - <span class="number">1</span>] == target) <span class="keyword">return</span> nums.length - <span class="number">1</span>;<span class="comment">//剪枝</span></span><br><span class="line">    <span class="keyword">if</span> (nums[nums.length - <span class="number">1</span>] &lt; target) <span class="keyword">return</span> nums.length;</span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>, right = nums.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (left &lt; right) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (nums[mid] == target) <span class="keyword">return</span> mid;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">            right = mid;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="快速排序-表示有点难于理解"><a href="#快速排序-表示有点难于理解" class="headerlink" title="快速排序:(表示有点难于理解)"></a>快速排序:(表示有点难于理解)</h3><p>快排也是分治的一个实例，快排每一趟会选定一个数，将比这个数小的放左面，比这个数大的放右面，然后递归分治求解两个子区间，当然快排因为在分的时候就做了很多工作，当全部分到最底层的时候这个序列的值就是排序完的值。这是一种分而治之的体现。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328114205001.png" alt="image-20220328114205001"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">quicksort</span><span class="params">(<span class="type">int</span>[] a, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> left;</span><br><span class="line">    <span class="type">int</span> <span class="variable">high</span> <span class="operator">=</span> right; <span class="comment">//下面两句的顺序一定不能混，否则会产生数组越界！！！very important！！！</span></span><br><span class="line">    <span class="keyword">if</span> (low &gt; high)<span class="comment">//作为判断是否截止条件</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> a[low];<span class="comment">//额外空间k，取最左侧的一个作为衡量，最后要求左侧都比它小，右侧都比它大。</span></span><br><span class="line">    <span class="keyword">while</span> (low &lt; high)<span class="comment">//这一轮要求把左侧小于a[low],右侧大于a[low]。</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; a[high] &gt;= k)<span class="comment">//右侧找到第一个小于k的停止</span></span><br><span class="line">        &#123;</span><br><span class="line">            high--;</span><br><span class="line">        &#125; <span class="comment">//这样就找到第一个比它小的了</span></span><br><span class="line">        a[low] = a[high];<span class="comment">//放到low位置</span></span><br><span class="line">        <span class="keyword">while</span> (low &lt; high &amp;&amp; a[low] &lt;= k)<span class="comment">//在low往右找到第一个大于k的，放到右侧a[high]位置</span></span><br><span class="line">        &#123;</span><br><span class="line">            low++;</span><br><span class="line">        &#125;</span><br><span class="line">        a[high] = a[low];</span><br><span class="line">    &#125;</span><br><span class="line">    a[low] = k;<span class="comment">//赋值然后左右递归分治求之</span></span><br><span class="line">    quicksort(a, left, low - <span class="number">1</span>);</span><br><span class="line">    quicksort(a, low + <span class="number">1</span>, right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="归并排序-逆序数"><a href="#归并排序-逆序数" class="headerlink" title="归并排序(逆序数)"></a>归并排序(逆序数)</h3><p>快排在分的时候做了很多工作，而归并就是相反，归并在分的时候按照数量均匀分，而合并时候已经是两两有序的进行合并的，因为两个有序序列O(n)级别的复杂度即可得到需要的结果。而逆序数在归并排序基础上变形同样也是分治思想求解。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328114231255.png" alt="image-20220328114231255"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">mergesort</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> left, <span class="type">int</span> right)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (left + right) / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (left &lt; right) &#123;</span><br><span class="line">        mergesort(array, left, mid);</span><br><span class="line">        mergesort(array, mid + <span class="number">1</span>, right);</span><br><span class="line">        merge(array, left, mid, right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">merge</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> l, <span class="type">int</span> mid, <span class="type">int</span> r)</span> &#123;</span><br><span class="line">    <span class="comment">//将mid两边[l,r]范围的数排序并合并</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">lindex</span> <span class="operator">=</span> l;</span><br><span class="line">    <span class="type">int</span> <span class="variable">rindex</span> <span class="operator">=</span> mid + <span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> tmp[] = <span class="keyword">new</span> <span class="title class_">int</span>[r - l + <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> <span class="variable">tmpindex</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (lindex &lt;= mid &amp;&amp; rindex &lt;= r) &#123;<span class="comment">//先左右比较合并</span></span><br><span class="line">        <span class="keyword">if</span> (array[lindex] &lt;= array[rindex]) &#123;</span><br><span class="line">            tmp[tmpindex++] = array[lindex++];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            tmp[tmpindex++] = array[rindex++];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (lindex &lt;= mid)<span class="comment">//当一个越界后剩余按序列添加即可</span></span><br><span class="line">    &#123;</span><br><span class="line">        tmp[tmpindex++] = array[lindex++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (rindex &lt;= r) &#123;</span><br><span class="line">        tmp[tmpindex++] = array[rindex++];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; tmpindex; i++) &#123;</span><br><span class="line">        array[l + i] = tmp[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="LeetCode第53题最大子序列和"><a href="#LeetCode第53题最大子序列和" class="headerlink" title="LeetCode第53题最大子序列和"></a>LeetCode第53题最大子序列和</h3><p>最大子序列和的问题我们可以使用动态规划的解法，但是也可以使用分治算法来解决问题，但是最大子序列和在合并的时候并不是简单的合并，因为子序列和涉及到一个长度的问题，所以正确结果不一定全在最左侧或者最右侧，而可能出现结果的区域为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">将原数组划分为左右两个数组后，原数组中拥有最大和的连续子数组的位置有三张情况。</span><br><span class="line">情况1. 原数组中拥有最大和的连续子数组的元素都在左边的子数组中。</span><br><span class="line">情况2. 原数组中拥有最大和的连续子数组的元素都在右边的子数组中。</span><br><span class="line">情况3. 原数组中拥有最大和的连续子数组的元素跨越了左右数组。</span><br><span class="line">分别求出，3中情况的最大和，取最大，就是原数组的连续子数组的最大和。</span><br></pre></td></tr></table></figure><p>用一张图可以表示为：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220328171650503.png" alt="image-20220328171650503"></p><p>所以在具体考虑的时候需要将无法递归得到结果的中间那个最大值串的结果也算出来参与左侧、右侧值得比较。</p><p>力扣53. 最大子序和在实现的代码为：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> low, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果子数组只有一个元素，这个元素就是子树组的最大和。</span></span><br><span class="line">        <span class="keyword">if</span> (low == high) &#123;</span><br><span class="line">            <span class="keyword">return</span> nums[low];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> low + (high - low) / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 求左数组的最大和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">leftMax</span> <span class="operator">=</span> getMax(nums, low, mid);</span><br><span class="line">        <span class="comment">// 求右数组的最大和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rightMax</span> <span class="operator">=</span> getMax(nums, mid + <span class="number">1</span>, high);</span><br><span class="line">        <span class="comment">// 求跨越情况的最大和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">crossMax</span> <span class="operator">=</span> getCrossMax(nums, low, mid, high);</span><br><span class="line">        <span class="comment">// 返回最大</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(Math.max(leftMax, rightMax), crossMax);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 求跨越情况的最大和</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCrossMax</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">int</span> low, <span class="type">int</span> mid, <span class="type">int</span> high)</span> &#123;</span><br><span class="line">        <span class="comment">// 从中间向左走，一直累加，每次累计后都取最大值，最后得到的就是从中间向左累加可得到最大和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">leftSum</span> <span class="operator">=</span> nums[mid];</span><br><span class="line">        <span class="type">int</span> <span class="variable">leftMax</span> <span class="operator">=</span> nums[mid];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mid - <span class="number">1</span>; i &gt;= low; i--) &#123;</span><br><span class="line">            leftSum += nums[i];</span><br><span class="line">            leftMax = Math.max(leftMax, leftSum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 从中间向右走，一直累加，每次累计后都取最大值，最后得到的就是从中间向右累加可得到最大和</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">rightSum</span> <span class="operator">=</span> nums[mid+<span class="number">1</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">rightMax</span> <span class="operator">=</span> nums[mid+<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> mid + <span class="number">2</span>; i &lt;= high; i++) &#123;</span><br><span class="line">            rightSum += nums[i];</span><br><span class="line">            rightMax = Math.max(rightMax, rightSum);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 向左累加的最大和加上向右累加的最大和，就是跨越情况下的最大和</span></span><br><span class="line">        <span class="keyword">return</span> leftMax + rightMax;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getMax(nums, <span class="number">0</span> , nums.length - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最近点对"><a href="#最近点对" class="headerlink" title="最近点对"></a>最近点对</h3><p><strong>最近点对</strong>是一个分治非常成功的运用之一。在二维坐标轴上有若干个点坐标，让你求出最近的两个点的距离，如果让你直接求那么枚举暴力是个非常非常大的计算量,我们通常采用分治的方法来优化这种问题。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220329144316023.png" alt="image-20220329144316023">如果直接分成两部分分治计算你肯定会发现最短的如果<strong>一个在左一个在右会出现问题</strong>。我们可以优化一下</p><p>在具体的优化方案上，按照x或者y的维度进行考虑，将数据分成两个区域，先分别计算(按照同方法)左右区域内最短的点对。然后根据这个两个中较短的距离向左和向右覆盖，计算被覆盖的左右点之间的距离，找到最小那个距离与当前最短距离比较即可。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220329144630570.png" alt="image-20220329144630570"></p><p>这样你就可以发现就这个一次的操作(不考虑子情况)，左侧红点就避免和右侧大部分红点进行距离计算(O(n2)的时间复杂度)。事实上，在进行左右区间内部计算的时候，它其实也这样递归的进行很多次分治计算。如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220329144711830.png" alt="image-20220329144711830"></p><p>但是这种分治会存在一种问题就是二维坐标可能点都聚集某个方法某条轴那么可能效果并不明显(点都在x&#x3D;2附近对x分割作用就不大)，需要注意一下。</p><p>到这里，分治算法就讲这么多了，因为分治算法重要在于理解其思想，还有一些典型的分治算法解决的问题，例如大整数乘法、Strassen矩阵乘法、棋盘覆盖、线性时间选择、循环赛日程表、汉诺塔等问题你可以自己研究其分治的思想和原理。</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spring</title>
      <link href="/2022/03/27/spring/"/>
      <url>/2022/03/27/spring/</url>
      
        <content type="html"><![CDATA[<h2 id="spring概述"><a href="#spring概述" class="headerlink" title="spring概述:"></a>spring概述:</h2><p>概述:就是一个轻量级的框架;可以之前看这个博客<a href="https://www.w3cschool.cn/wkspring/7jho1ict.html">传送门</a></p><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构:"></a>三层架构:</h3><ul><li><p>A 表现层  web层  MVC是表现层的一个设计模型 </p></li><li><p>B 业务层 service层</p></li><li><p>C 持久层 dao层</p></li></ul><h3 id="Spring-的优良特性"><a href="#Spring-的优良特性" class="headerlink" title="Spring 的优良特性"></a>Spring 的优良特性</h3><ul><li>非侵入式：基于Spring开发的应用中的对象可以不依赖于Spring的API</li><li>控制反转：IOC——Inversion of Control，指的是将对象的创建权交给 Spring 去创建。使用 Spring 之前，对象的创建都是由我们自己在代码中new创建。而使用 Spring 之后。对象的创建都是给了 Spring 框架。</li><li>依赖注入：DI——Dependency Injection，是指依赖的对象不需要手动调用 setXX 方法去设置，而是通过配置赋值。</li><li>面向切面编程：Aspect Oriented Programming——AOP</li><li>容器：Spring 是一个容器，因为它包含并且管理应用对象的生命周期</li><li>组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用XML和Java注解组合这些对象。</li><li>一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上 Spring 自身也提供了表现层的 SpringMVC 和持久层的 Spring JDBC）</li></ul><h3 id="依赖注入（DI）"><a href="#依赖注入（DI）" class="headerlink" title="依赖注入（DI）"></a>依赖注入（DI）</h3><p>Spring 最认同的技术是控制反转的<strong>依赖注入（DI）</strong>模式。控制反转（IoC）是一个通用的概念，它可以用许多不同的方式去表达，依赖注入仅仅是控制反转的一个具体的例子。</p><p>当编写一个复杂的 Java 应用程序时，应用程序类应该尽可能的独立于其他的 Java 类来增加这些类可重用可能性，当进行单元测试时，可以使它们独立于其他类进行测试。依赖注入（或者有时被称为配线）有助于将这些类粘合在一起，并且在同一时间让它们保持独立。</p><p>到底什么是依赖注入？让我们将这两个词分开来看一看。这里将依赖关系部分转化为两个类之间的关联。例如，类 A 依赖于类 B。现在，让我们看一看第二部分，注入。所有这一切都意味着类 B 将通过 IoC 被注入到类 A 中。</p><p>依赖注入可以以向构造函数传递参数的方式发生，或者通过使用 setter 方法 post-construction。由于依赖注入是 Spring 框架的核心部分，所以我将在一个单独的章节中利用很好的例子去解释这一概念。</p><h3 id="面向切面的程序设计（AOP）："><a href="#面向切面的程序设计（AOP）：" class="headerlink" title="面向切面的程序设计（AOP）："></a>面向切面的程序设计（AOP）：</h3><p>Spring 框架的一个关键组件是<strong>面向切面的程序设计（AOP）</strong>框架。一个程序中跨越多个点的功能被称为<strong>横切关注点</strong>，这些横切关注点在概念上独立于应用程序的业务逻辑。有各种各样常见的很好的关于方面的例子，比如日志记录、声明性事务、安全性，和缓存等等。</p><p>在 OOP 中模块化的关键单元是类，而在 AOP 中模块化的关键单元是方面。AOP 帮助你将横切关注点从它们所影响的对象中分离出来，然而依赖注入帮助你将你的应用程序对象从彼此中分离出来。</p><p>Spring 框架的 AOP 模块提供了面向方面的程序设计实现，可以定义诸如方法拦截器和切入点等，从而使实现功能的代码彻底的解耦出来。使用源码级的元数据，可以用类似于 .Net 属性的方式合并行为信息到代码中。我将在一个独立的章节中讨论更多关于 <a href="https://www.w3cschool.cn/wkspring/izae1h9w.html">Spring AOP</a> 的概念。</p><h3 id="Spring-框架具有以下几个特点："><a href="#Spring-框架具有以下几个特点：" class="headerlink" title="Spring 框架具有以下几个特点："></a><strong>Spring 框架具有以下几个特点：</strong></h3><h4 id="1）方便解耦，简化开发"><a href="#1）方便解耦，简化开发" class="headerlink" title="1）方便解耦，简化开发"></a>1）方便解耦，简化开发</h4><p>Spring 就是一个大工厂，可以将所有对象的创建和依赖关系的维护交给 Spring 管理。</p><h4 id="2）方便集成各种优秀框架"><a href="#2）方便集成各种优秀框架" class="headerlink" title="2）方便集成各种优秀框架"></a>2）方便集成各种优秀框架</h4><p>Spring 不排斥各种优秀的开源框架，其内部提供了对各种优秀框架（如 Struts2、Hibernate、MyBatis 等）的直接支持。</p><h4 id="3）降低-Java-EE-API-的使用难度"><a href="#3）降低-Java-EE-API-的使用难度" class="headerlink" title="3）降低 Java EE API 的使用难度"></a>3）降低 Java EE API 的使用难度</h4><p>Spring 对 Java EE 开发中非常难用的一些 API（JDBC、JavaMail、远程调用等）都提供了封装，使这些 API 应用的难度大大降低。</p><h4 id="4）方便程序的测试"><a href="#4）方便程序的测试" class="headerlink" title="4）方便程序的测试"></a>4）方便程序的测试</h4><p>Spring 支持 JUnit4，可以通过注解方便地测试 Spring 程序。</p><h4 id="5）AOP-编程的支持"><a href="#5）AOP-编程的支持" class="headerlink" title="5）AOP 编程的支持"></a>5）AOP 编程的支持</h4><p>Spring 提供面向切面编程，可以方便地实现对程序进行权限拦截和运行监控等功能。</p><h4 id="6）声明式事务的支持"><a href="#6）声明式事务的支持" class="headerlink" title="6）声明式事务的支持"></a>6）声明式事务的支持</h4><p>只需要通过配置就可以完成对事务的管理，而无须手动编程。</p><h2 id="spring体系结构"><a href="#spring体系结构" class="headerlink" title="spring体系结构"></a>spring体系结构</h2><p>Spring 框架提供约 20 个模块，可以根据应用程序的要求来使用。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/arch1.png" alt="Spring 体系结构"></p><h3 id="核心容器"><a href="#核心容器" class="headerlink" title="核心容器"></a>核心容器</h3><p>核心容器由 <strong>spring-core，spring-beans，spring-context，spring-context-support和spring-expression</strong>（SpEL，Spring 表达式语言，Spring Expression Language）等模块组成，它们的细节如下：</p><ul><li><strong>spring-core</strong> 模块提供了框架的基本组成部分，包括 IoC 和依赖注入功能。</li><li><strong>spring-beans</strong> 模块提供 BeanFactory，工厂模式的微妙实现，它移除了编码式单例的需要，并且可以把配置和依赖从实际编码逻辑中解耦。</li><li><strong>context</strong> 模块建立在由 <strong>core</strong>和 <strong>beans</strong> 模块的基础上建立起来的，它以一种类似于 JNDI 注册的方式访问对象。Context 模块继承自 Bean 模块，并且添加了国际化（比如，使用资源束）、事件传播、资源加载和透明地创建上下文（比如，通过 Servelet 容器）等功能。Context 模块也支持 Java EE 的功能，比如 EJB、JMX 和远程调用等。<strong>ApplicationContext</strong> 接口是 Context 模块的焦点。<strong>spring-context-support</strong> 提供了对第三方集成到 Spring 上下文的支持，比如缓存（EhCache, Guava, JCache）、邮件（JavaMail）、调度（CommonJ, Quartz）、模板引擎（FreeMarker, JasperReports, Velocity）等。</li><li><strong>spring-expression</strong> 模块提供了强大的表达式语言，用于在运行时查询和操作对象图。它是 JSP2.1 规范中定义的统一表达式语言的扩展，支持 set 和 get 属性值、属性赋值、方法调用、访问数组集合及索引的内容、逻辑算术运算、命名变量、通过名字从 Spring IoC 容器检索对象，还支持列表的投影、选择以及聚合等。</li></ul><p>它们的完整依赖关系如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1540290875453691.png" alt="Spring 体系结构"></p><h3 id="数据访问-x2F-集成"><a href="#数据访问-x2F-集成" class="headerlink" title="数据访问&#x2F;集成"></a>数据访问&#x2F;集成</h3><p>数据访问&#x2F;集成层包括 JDBC，ORM，OXM，JMS 和事务处理模块，它们的细节如下：</p><p>（注：JDBC&#x3D;Java Data Base Connectivity，ORM&#x3D;Object Relational Mapping，OXM&#x3D;Object XML Mapping，JMS&#x3D;Java Message Service）</p><ul><li><strong>JDBC</strong> 模块提供了 JDBC 抽象层，它消除了冗长的 JDBC 编码和对数据库供应商特定错误代码的解析。</li><li><strong>ORM</strong> 模块提供了对流行的对象关系映射 API 的集成，包括 JPA、JDO 和 Hibernate 等。通过此模块可以让这些 ORM 框架和 spring的其它功能整合，比如前面提及的事务管理。</li><li><strong>OXM</strong> 模块提供了对 OXM 实现的支持，比如 JAXB、Castor、XML Beans、JiBX、XStream 等。</li><li><strong>JMS</strong> 模块包含生产（produce）和消费（consume）消息的功能。从 Spring 4.1 开始，集成了 spring-messaging 模块。</li><li><strong>事务</strong>模块为实现特殊接口类及所有的 POJO 支持编程式和声明式事务管理。（注：编程式事务需要自己写 beginTransaction()、commit()、rollback() 等事务管理方法，声明式事务是通过注解或配置由 spring 自动处理，编程式事务粒度更细）</li></ul><h3 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h3><p>Web 层由 Web，Web-MVC，Web-Socket 和 Web-Portlet 组成，它们的细节如下：</p><ul><li><strong>Web</strong> 模块提供面向 web 的基本功能和面向 web 的应用上下文，比如多部分（multipart）文件上传功能、使用 Servlet 监听器初始化 IoC 容器等。它还包括 HTTP 客户端以及 Spring 远程调用中与 web 相关的部分。</li><li><strong>Web-MVC</strong> 模块为 web 应用提供了模型视图控制（MVC）和 REST Web服务的实现。Spring 的 MVC 框架可以使领域模型代码和 web 表单完全地分离，且可以与 Spring 框架的其它所有功能进行集成。</li><li><strong>Web-Socket</strong> 模块为 WebSocket-based 提供了支持，而且在 web 应用程序中提供了客户端和服务器端之间通信的两种方式。</li><li><strong>Web-Portlet</strong> 模块提供了用于 Portlet 环境的 MVC 实现，并反映了 spring-webmvc 模块的功能。</li></ul><h3 id="Test模块"><a href="#Test模块" class="headerlink" title="Test模块"></a>Test模块</h3><p>Test 模块：Spring 支持 Junit 和 TestNG 测试框架，而且还额外提供了一些基于 Spring 的测试功能，比如在测试 Web 框架时，模拟 Http 请求的功能。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>还有其他一些重要的模块，像 <a href="https://www.w3cschool.cn/wkspring/izae1h9w.html">AOP</a>，Aspects，Instrumentation，Web 和测试模块，它们的细节如下：</p><ul><li><strong>AOP</strong> 模块提供了面向方面（切面）的编程实现，允许你定义方法拦截器和切入点对代码进行干净地解耦，从而使实现功能的代码彻底的解耦出来。使用源码级的元数据，可以用类似于.Net属性的方式合并行为信息到代码中。</li><li><strong>Aspects</strong> 模块提供了与 <strong>AspectJ</strong> 的集成，这是一个功能强大且成熟的面向切面编程（AOP）框架。</li><li><strong>Instrumentation</strong> 模块在一定的应用服务器中提供了类 instrumentation 的支持和类加载器的实现。</li><li><strong>Messaging</strong> 模块为 STOMP 提供了支持作为在应用程序中 WebSocket 子协议的使用。它也支持一个注解编程模型，它是为了选路和处理来自 WebSocket 客户端的 STOMP 信息。</li><li><strong>测试</strong>模块支持对具有 JUnit 或 TestNG 框架的 Spring 组件的测试。</li></ul><h2 id="Spring-Hello-World-实例"><a href="#Spring-Hello-World-实例" class="headerlink" title="Spring Hello World 实例"></a>Spring Hello World 实例</h2><h3 id="在idea中新建一个maven工程项目"><a href="#在idea中新建一个maven工程项目" class="headerlink" title="在idea中新建一个maven工程项目:"></a>在idea中新建一个maven工程项目:</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220326160349281.png" alt="image-20220326160349281"></p><p>maven框架的基本配置<a href="https://blog.csdn.net/swe50/article/details/109097763">传送门</a></p><p>maven的pom文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring的核心工具包--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--在基础IOC功能上提供扩展服务，还提供许多企业级服务的支持，有邮件服务、 任务调度、远程访问、缓存以及多种视图层框架的支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring IOC的基础实现，包含访问配置文件、创建和管理bean等 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring context的扩展支持，用于MVC方面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring表达式语言 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.0.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Java注解包提供@Resource注解 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构:"></a>项目结构:</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220326160417011.png" alt="image-20220326160417011"></p><p>Helloword类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.message  = message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Your Message : &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MainApp类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.feng.entity.HelloWorld;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">HelloWorld</span> <span class="variable">obj</span> <span class="operator">=</span> (HelloWorld) context.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">        obj.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于主要程序有以下两个要点需要注意：</p><ul><li>第一步是我们使用框架 API <strong>ClassPathXmlApplicationContext()</strong> 来创建应用程序的上下文。这个 API 加载 beans 的配置文件并最终基于所提供的 API，它处理创建并初始化所有的对象，即在配置文件中提到的 beans。</li><li>第二步是使用已创建的上下文的 <strong>getBean()</strong> 方法来获得所需的 bean。这个方法使用 bean 的 ID 返回一个最终可以转换为实际对象的通用对象。一旦有了对象，你就可以使用这个对象调用任何类的方法。</li></ul><p>Beans.xml配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloWorld&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.entity.HelloWorld&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello World!&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三月 26, 2022 4:00:21 下午 org.springframework.context.support.AbstractApplicationContext prepareRefresh</span><br><span class="line">信息: Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@4bf558aa: startup date [Sat Mar 26 16:00:21 CST 2022]; root of context hierarchy</span><br><span class="line">三月 26, 2022 4:00:21 下午 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions</span><br><span class="line">信息: Loading XML bean definitions from class path resource [Beans.xml]</span><br><span class="line">Your Message : Hello World!</span><br></pre></td></tr></table></figure><h2 id="Spring-IoC-容器"><a href="#Spring-IoC-容器" class="headerlink" title="Spring IoC 容器"></a>Spring IoC 容器</h2><h4 id="IoC-容器"><a href="#IoC-容器" class="headerlink" title="IoC 容器"></a>IoC 容器</h4><p>Spring 容器是 Spring 框架的核心。容器将创建对象，把它们连接在一起，配置它们，并管理他们的整个生命周期从创建到销毁。Spring 容器使用依赖注入（DI）来管理组成一个应用程序的组件。这些对象被称为 Spring Beans，我们将在下一章中进行讨论。</p><p>通过阅读配置元数据提供的指令，容器知道对哪些对象进行实例化，配置和组装。配置元数据可以通过 XML，Java 注释或 Java 代码来表示。下图是 Spring 如何工作的高级视图。 Spring IoC 容器利用 Java 的 POJO 类和配置元数据来生成完全配置和可执行的系统或应用程序。</p><p><strong>IOC 容器</strong>具有依赖注入功能的容器，它可以创建对象，IOC 容器负责实例化、定位、配置应用程序中的对象及建立这些对象间的依赖。通常new一个实例，控制权由程序员控制，而”控制反转”是指new实例工作不由程序员来做而是交给Spring容器来做。在Spring中<a href="https://www.w3cschool.cn/wkspring/j3181mm3.html">BeanFactory</a>是IOC容器的实际代表者。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/ioc1.jpg" alt="Spring IoC 容器"></p><p>Spring 提供了以下两种不同类型的容器。</p><table><thead><tr><th>序号</th><th>容器 &amp; 描述</th></tr></thead><tbody><tr><td>1</td><td><a href="https://www.w3cschool.cn/wkspring/j3181mm3.html">Spring BeanFactory 容器</a>它是最简单的容器，给 DI 提供了基本的支持，它用 org.springframework.beans.factory.BeanFactory 接口来定义。BeanFactory 或者相关的接口，如 BeanFactoryAware，InitializingBean，DisposableBean，在 Spring 中仍然存在具有大量的与 Spring 整合的第三方框架的反向兼容性的目的。</td></tr><tr><td>2</td><td><a href="https://www.w3cschool.cn/wkspring/yqdx1mm5.html">Spring ApplicationContext 容器</a>该容器添加了更多的企业特定的功能，例如从一个属性文件中解析文本信息的能力，发布应用程序事件给感兴趣的事件监听器的能力。该容器是由 org.springframework.context.ApplicationContext 接口定义。</td></tr></tbody></table><p>ApplicationContext 容器包括 BeanFactory 容器的所有功能，所以通常不建议使用BeanFactory。BeanFactory 仍然可以用于轻量级的应用程序，如移动设备或基于 applet 的应用程序，其中它的数据量和速度是显著。</p><h4 id="1-Spring-BeanFactory-容器"><a href="#1-Spring-BeanFactory-容器" class="headerlink" title="1)Spring BeanFactory 容器"></a>1)Spring BeanFactory 容器</h4><p>对MainApp类进行一下小修改;</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.springframework.beans.factory.InitializingBean;</span><br><span class="line">import org.springframework.beans.factory.xml.XmlBeanFactory;</span><br><span class="line">import org.springframework.core.io.ClassPathResource;</span><br><span class="line">public class MainApp &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      XmlBeanFactory factory = new XmlBeanFactory</span><br><span class="line">                             (new ClassPathResource(&quot;Beans.xml&quot;));</span><br><span class="line">      HelloWorld obj = (HelloWorld) factory.getBean(&quot;helloWorld&quot;);</span><br><span class="line">      obj.getMessage();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在主程序当中，我们需要注意以下两点：</p><ul><li>第一步利用框架提供的 <strong>XmlBeanFactory()</strong> API 去生成工厂 bean 以及利用 <strong>ClassPathResource()</strong> API 去加载在路径 CLASSPATH 下可用的 bean 配置文件。<strong>XmlBeanFactory()</strong> API 负责创建并初始化所有的对象，即在配置文件中提到的 bean。</li><li>第二步利用第一步生成的 bean 工厂对象的 <strong>getBean()</strong> 方法得到所需要的 bean。 这个方法通过配置文件中的 bean ID 来返回一个真正的对象，该对象最后可以用于实际的对象。一旦得到这个对象，你就可以利用这个对象来调用任何方法。</li></ul><p>正常运行结果就是:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三月 26, 2022 4:18:06 下午 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions</span><br><span class="line">信息: Loading XML bean definitions from class path resource [Beans.xml]</span><br><span class="line">Your Message : Hello World!</span><br></pre></td></tr></table></figure><h4 id="2-Spring-ApplicationContext-容器"><a href="#2-Spring-ApplicationContext-容器" class="headerlink" title="2)Spring ApplicationContext 容器"></a>2)Spring ApplicationContext 容器</h4><p>Application Context 是 BeanFactory 的子接口，也被称为 Spring 上下文。</p><p>Application Context 是 spring 中较高级的容器。和 BeanFactory 类似，它可以加载配置文件中定义的 bean，将所有的 bean 集中在一起，当有请求的时候分配 bean。 另外，它增加了企业所需要的功能，比如，从属性文件中解析文本信息和将事件传递给所指定的监听器。这个容器在 org.springframework.context.ApplicationContext interface 接口中定义。</p><p>ApplicationContext 包含 BeanFactory 所有的功能，一般情况下，相对于 BeanFactory，ApplicationContext 会更加优秀。当然，BeanFactory 仍可以在轻量级应用中使用，比如移动设备或者基于 applet 的应用程序。</p><p>最常被使用的 ApplicationContext 接口实现：</p><ul><li><strong>FileSystemXmlApplicationContext</strong>：该容器从 XML 文件中加载已被定义的 bean。在这里，你需要提供给构造器 XML 文件的完整路径。</li><li><strong>ClassPathXmlApplicationContext</strong>：该容器从 XML 文件中加载已被定义的 bean。在这里，你不需要提供 XML 文件的完整路径，只需正确配置 CLASSPATH 环境变量即可，因为，容器会从 CLASSPATH 中搜索 bean 配置文件。</li><li><strong>WebXmlApplicationContext</strong>：该容器会在一个 web 应用程序的范围内加载在 XML 文件中已被定义的 bean。</li></ul><p>我们已经在 Spring Hello World Example章节中看到过 ClassPathXmlApplicationContext 容器，并且，在基于 spring 的 web 应用程序这个独立的章节中，我们讨论了很多关于 WebXmlApplicationContext。所以，接下来，让我们看一个关于 FileSystemXmlApplicationContext 的例子。</p><p>MainApp类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span></span><br><span class="line">            (<span class="string">&quot;E:/Java/spring/src/main/resources/Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">HelloWorld</span> <span class="variable">obj</span> <span class="operator">=</span> (HelloWorld) context.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">      obj.getMessage();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>正常结果:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">三月 26, 2022 4:22:51 下午 org.springframework.context.support.AbstractApplicationContext prepareRefresh</span><br><span class="line">信息: Refreshing org.springframework.context.support.FileSystemXmlApplicationContext@4bf558aa: startup date [Sat Mar 26 16:22:51 CST 2022]; root of context hierarchy</span><br><span class="line">三月 26, 2022 4:22:51 下午 org.springframework.beans.factory.xml.XmlBeanDefinitionReader loadBeanDefinitions</span><br><span class="line">信息: Loading XML bean definitions from file [E:\Java\spring\src\main\resources\Beans.xml]</span><br><span class="line">Your Message : Hello World!</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Spring-Bean-定义"><a href="#Spring-Bean-定义" class="headerlink" title="Spring Bean 定义"></a>Spring Bean 定义</h2><h3 id="Bean-定义"><a href="#Bean-定义" class="headerlink" title="Bean 定义"></a>Bean 定义</h3><p>被称作 bean 的对象是构成应用程序的支柱也是由 Spring IoC 容器管理的。bean 是一个被实例化，组装，并通过 Spring IoC 容器所管理的对象。这些 bean 是由用容器提供的配置元数据创建的，例如，已经在先前章节看到的，在 XML 的表单中的 定义。</p><p>bean 定义包含称为<strong>配置元数据</strong>的信息，下述容器也需要知道配置元数据：</p><ul><li>如何创建一个 bean</li><li>bean 的生命周期的详细信息</li><li>bean 的依赖关系</li></ul><p>上述所有的配置元数据转换成一组构成每个 bean 定义的下列属性。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>class</td><td>这个属性是强制性的，并且指定用来创建 bean 的 bean 类。</td></tr><tr><td>name</td><td>这个属性指定唯一的 bean 标识符。在基于 XML 的配置元数据中，你可以使用 ID 和&#x2F;或 name 属性来指定 bean 标识符。</td></tr><tr><td>scope</td><td>这个属性指定由特定的 bean 定义创建的对象的作用域，它将会在 bean 作用域的章节中进行讨论。</td></tr><tr><td>constructor-arg</td><td>它是用来注入依赖关系的，并会在接下来的章节中进行讨论。</td></tr><tr><td>properties</td><td>它是用来注入依赖关系的，并会在接下来的章节中进行讨论。</td></tr><tr><td>autowiring mode</td><td>它是用来注入依赖关系的，并会在接下来的章节中进行讨论。</td></tr><tr><td>lazy-initialization mode</td><td>延迟初始化的 bean 告诉 IoC 容器在它第一次被请求时，而不是在启动时去创建一个 bean 实例。</td></tr><tr><td>initialization 方法</td><td>在 bean 的所有必需的属性被容器设置之后，调用回调方法。它将会在 bean 的生命周期章节中进行讨论。</td></tr><tr><td>destruction 方法</td><td>当包含该 bean 的容器被销毁时，使用回调方法。它将会在 bean 的生命周期章节中进行讨论。</td></tr></tbody></table><p><strong>Bean 与 Spring 容器的关系</strong></p><p>下图表达了Bean 与 Spring 容器之间的关系：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1604037368126454.png" alt="Spring Bean"></p><h3 id="Spring-配置元数据"><a href="#Spring-配置元数据" class="headerlink" title="Spring 配置元数据"></a>Spring 配置元数据</h3><p>Spring IoC 容器完全由实际编写的配置元数据的格式解耦。有下面三个重要的方法把配置元数据提供给 Spring 容器：</p><ul><li>基于 XML 的配置文件</li><li>基于注解的配置</li><li>基于 Java 的配置</li></ul><p>提示：对于基于 XML 的配置，Spring 2.0 以后使用 Schema 的格式，使得不同类型的配置拥有了自己的命名空间，使配置文件更具扩展性。</p><p>你已经看到了如何把基于 XML 的配置元数据提供给容器，但是让我们看看另一个基于 XML 配置文件的例子，这个配置文件中有不同的 bean 定义，包括延迟初始化，初始化方法和销毁方法的：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- A simple bean definition --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- A bean definition with lazy init set on --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- A bean definition with initialization method --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- A bean definition with destruction method --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- more bean definitions go here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在上述示例中：</p><p>①xmlns&#x3D;”<a href="http://www.springframework.org/schema/beans&quot;%EF%BC%8C%E9%BB%98%E8%AE%A4%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%EF%BC%9A%E5%AE%83%E6%B2%A1%E6%9C%89%E7%A9%BA%E9%97%B4%E5%90%8D%EF%BC%8C%E7%94%A8%E4%BA%8ESpring">http://www.springframework.org/schema/beans&quot;，默认命名空间：它没有空间名，用于Spring</a> Bean的定义；</p><p>②xmlns:xsi&#x3D;”<a href="http://www.w3.org/2001/XMLSchema-instance&quot;%EF%BC%8Cxsi%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%EF%BC%9A%E8%BF%99%E4%B8%AA%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E7%94%A8%E4%BA%8E%E4%B8%BA%E6%AF%8F%E4%B8%AA%E6%96%87%E6%A1%A3%E4%B8%AD%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E6%8C%87%E5%AE%9A%E7%9B%B8%E5%BA%94%E7%9A%84Schema%E6%A0%B7%E5%BC%8F%E6%96%87%E4%BB%B6%EF%BC%8C%E6%98%AF%E6%A0%87%E5%87%86%E7%BB%84%E7%BB%87%E5%AE%9A%E4%B9%89%E7%9A%84%E6%A0%87%E5%87%86%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4%E3%80%82">http://www.w3.org/2001/XMLSchema-instance&quot;，xsi命名空间：这个命名空间用于为每个文档中命名空间指定相应的Schema样式文件，是标准组织定义的标准命名空间。</a></p><p>你可以查看 <a href="https://www.w3cschool.cn/wkspring/dgte1ica.html"><strong>Spring Hello World 实例</strong></a> 来详细理解如何定义，配置和创建 Spring Beans。</p><p>关于基于注解的配置将在一个单独的章节中进行讨论。刻意把它保留在一个单独的章节，是因为我想让你在开始使用注解和 Spring 依赖注入编程之前，能掌握一些其他重要的 Spring 概念。</p><h2 id="Spring-Bean-作用域"><a href="#Spring-Bean-作用域" class="headerlink" title="Spring Bean 作用域"></a>Spring Bean 作用域</h2><h3 id="Bean-的作用域"><a href="#Bean-的作用域" class="headerlink" title="Bean 的作用域"></a>Bean 的作用域</h3><p>当在 Spring 中定义一个 bean 时，你必须声明该 bean 的作用域的选项。例如，为了强制 Spring 在每次需要时都产生一个新的 bean 实例，你应该声明 bean 的作用域的属性为 <strong>prototype</strong>。同理，如果你想让 Spring 在每次需要时都返回同一个bean实例，你应该声明 bean 的作用域的属性为 <strong>singleton</strong>。</p><p>Spring 框架支持以下五个作用域，分别为 singleton、prototype、request、session 和 global session，5种作用域说明如下所示，</p><p>注意，如果你使用 web-aware ApplicationContext 时，其中三个是可用的。  </p><table><thead><tr><th>作用域</th><th>描述</th></tr></thead><tbody><tr><td>singleton</td><td>在spring IoC容器仅存在一个Bean实例，Bean以单例方式存在，默认值</td></tr><tr><td>prototype</td><td>每次从容器中调用Bean时，都返回一个新的实例，即每次调用getBean()时，相当于执行newXxxBean()</td></tr><tr><td>request</td><td>每次HTTP请求都会创建一个新的Bean，该作用域仅适用于WebApplicationContext环境</td></tr><tr><td>session</td><td>同一个HTTP Session共享一个Bean，不同Session使用不同的Bean，仅适用于WebApplicationContext环境</td></tr><tr><td>global-session</td><td>一般用于Portlet应用环境，该作用域仅适用于WebApplicationContext环境</td></tr></tbody></table><p>本章将讨论前两个范围，当我们将讨论有关 web-aware Spring ApplicationContext 时，其余三个将被讨论。</p><p><strong>singleton作用域:</strong></p><p>例子:</p><p>MainApp.java:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">HelloWorld</span> <span class="variable">objA</span> <span class="operator">=</span> (HelloWorld) context.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">      objA.setMessage(<span class="string">&quot;I&#x27;m object A&quot;</span>);</span><br><span class="line">      objA.getMessage();</span><br><span class="line">      <span class="type">HelloWorld</span> <span class="variable">objB</span> <span class="operator">=</span> (HelloWorld) context.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">      objB.getMessage();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Beans.xml</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">    xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">    xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=<span class="string">&quot;helloWorld&quot;</span> class=<span class="string">&quot;com.tutorialspoint.HelloWorld&quot;</span> </span><br><span class="line">      scope=<span class="string">&quot;singleton&quot;</span>&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Your Message : I&#x27;m object A</span><br><span class="line">Your Message : I&#x27;m object A</span><br></pre></td></tr></table></figure><p><strong>prototype 作用域</strong></p><p>例子:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloWorld&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.HelloWorld&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Your Message : I&#x27;m object A</span><br><span class="line">Your Message : null //新建的一个bean所以还是Beans.xml文件中那样没有被赋值的样子</span><br></pre></td></tr></table></figure><h2 id="Spring-Bean-生命周期"><a href="#Spring-Bean-生命周期" class="headerlink" title="Spring Bean 生命周期"></a>Spring Bean 生命周期</h2><h3 id="Bean-的生命周期"><a href="#Bean-的生命周期" class="headerlink" title="Bean 的生命周期"></a>Bean 的生命周期</h3><p>理解 Spring bean 的生命周期很容易。当一个 bean 被实例化时，它可能需要执行一些初始化使它转换成可用状态。同样，当 bean 不再需要，并且从容器中移除时，可能需要做一些清除工作。</p><p>尽管还有一些在 Bean 实例化和销毁之间发生的活动，但是本章将只讨论两个重要的生命周期回调方法，它们在 bean 的初始化和销毁的时候是必需的。</p><p>为了定义安装和拆卸一个 bean，我们只要声明带有 <strong>init-method</strong> 和&#x2F;或 <strong>destroy-method</strong> 参数的 。init-method 属性指定一个方法，在实例化 bean 时，立即调用该方法。同样，destroy-method 指定一个方法，只有从容器中移除 bean 之后，才能调用该方法。</p><p>Bean的生命周期可以表达为：Bean的定义——Bean的初始化——Bean的使用——Bean的销毁</p><h3 id="初始化回调"><a href="#初始化回调" class="headerlink" title="初始化回调"></a>初始化回调</h3><p><em>org.springframework.beans.factory.InitializingBean</em> 接口指定一个单一的方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br></pre></td></tr></table></figure><p>因此，你可以简单地实现上述接口和初始化工作可以在 afterPropertiesSet() 方法中执行，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleBean</span> <span class="keyword">implements</span> <span class="title class_">InitializingBean</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// do some initialization work</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在基于 XML 的配置元数据的情况下，你可以使用 <strong>init-method</strong> 属性来指定带有 void 无参数方法的名称。例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;exampleBean&quot;</span> </span><br><span class="line">         class=<span class="string">&quot;examples.ExampleBean&quot;</span> init-method=<span class="string">&quot;init&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>下面是类的定义：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleBean</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// do some initialization work</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="销毁回调"><a href="#销毁回调" class="headerlink" title="销毁回调"></a>销毁回调</h3><p><em>org.springframework.beans.factory.DisposableBean</em> 接口指定一个单一的方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br></pre></td></tr></table></figure><p>因此，你可以简单地实现上述接口并且结束工作可以在 destroy() 方法中执行，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleBean</span> <span class="keyword">implements</span> <span class="title class_">DisposableBean</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// do some destruction work</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在基于 XML 的配置元数据的情况下，你可以使用 <strong>destroy-method</strong> 属性来指定带有 void 无参数方法的名称。例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;bean id=<span class="string">&quot;exampleBean&quot;</span></span><br><span class="line">         class=<span class="string">&quot;examples.ExampleBean&quot;</span> destroy-method=<span class="string">&quot;destroy&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><p>下面是类的定义：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ExampleBean</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// do some destruction work</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你在非 web 应用程序环境中使用 Spring 的 IoC 容器；例如在丰富的客户端桌面环境中；那么在 JVM 中你要注册关闭 hook。这样做可以确保正常关闭，为了让所有的资源都被释放，可以在单个 beans 上调用 destroy 方法。</p><p>建议你不要使用 InitializingBean 或者 DisposableBean 的回调方法，因为 XML 配置在命名方法上提供了极大的灵活性。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>我们在适当的位置使用 Eclipse IDE，然后按照下面的步骤来创建一个 Spring 应用程序：</p><p>这里是 <strong>HelloWorld.java</strong> 的文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message  = message;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Your Message : &quot;</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Bean is going through init.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Bean will destroy now.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容。在这里，你需要注册一个在 AbstractApplicationContext 类中声明的关闭 hook 的 <strong>registerShutdownHook()</strong> 方法。它将确保正常关闭，并且调用相关的 destroy 方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.AbstractApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">AbstractApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">HelloWorld</span> <span class="variable">obj</span> <span class="operator">=</span> (HelloWorld) context.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">      obj.getMessage();</span><br><span class="line">      context.registerShutdownHook();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 init 和 destroy 方法必需的配置文件 <strong>Beans.xml</strong> 文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloWorld&quot;</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.HelloWorld&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello World!&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你创建源代码和 bean 配置文件完成后，我们就可以运行该应用程序。如果你的应用程序一切都正常，将输出以下信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Bean is going through init.</span><br><span class="line">Your Message : Hello World!</span><br><span class="line">Bean will destroy now.</span><br></pre></td></tr></table></figure><h3 id="默认的初始化和销毁方法"><a href="#默认的初始化和销毁方法" class="headerlink" title="默认的初始化和销毁方法"></a>默认的初始化和销毁方法</h3><p>如果你有太多具有相同名称的初始化或者销毁方法的 Bean，那么你不需要在每一个 bean 上声明<strong>初始化方法</strong>和<strong>销毁方法</strong>。框架使用 元素中的 <strong>default-init-method</strong> 和 <strong>default-destroy-method</strong> 属性提供了灵活地配置这种情况，如下所示：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">default-init-method</span>=<span class="string">&quot;init&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">default-destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring-Bean-后置处理器"><a href="#Spring-Bean-后置处理器" class="headerlink" title="Spring Bean 后置处理器"></a>Spring Bean 后置处理器</h2><h3 id="Spring——Bean-后置处理器"><a href="#Spring——Bean-后置处理器" class="headerlink" title="Spring——Bean 后置处理器"></a>Spring——Bean 后置处理器</h3><p>Bean 后置处理器允许在<strong>调用初始化方法前后</strong>对 Bean 进行额外的处理。</p><p><code>BeanPostProcessor </code>接口定义回调方法，你可以实现该方法来提供自己的实例化逻辑，依赖解析逻辑等。你也可以在 <code>Spring</code> 容器通过插入一个或多个 <code>BeanPostProcessor</code> 的实现来完成实例化，配置和初始化一个<code>bean</code>之后实现一些自定义逻辑回调方法。</p><p>你可以配置多个 <code>BeanPostProcessor </code>接口，通过设置 <code>BeanPostProcessor </code>实现的<code>Ordered</code>接口提供的<code> order</code> 属性来控制这些<code> BeanPostProcessor</code> 接口的执行顺序。</p><p><code>BeanPostProcessor</code> 可以对<code> bean</code>（或对象）实例进行操作，这意味着 <code>Spring IoC</code> 容器实例化一个 <code>bean</code> 实例，然后 <code>BeanPostProcessor</code> 接口进行它们的工作。</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p><code>ApplicationContext</code> 会自动检测由 <code>BeanPostProcessor</code> 接口的实现定义的 <code>bean</code>，注册这些<code> bean</code> 为后置处理器，然后通过在容器中创建<code> bean</code>，在适当的时候调用它。</p><p>在你自定义的<code> BeanPostProcessor</code> 接口实现类中，要实现以下的两个抽象方法 <code>BeanPostProcessor.postProcessBeforeInitialization(Object, String)</code> 和 <code>BeanPostProcessor.postProcessAfterInitialization(Object, String)</code> 和，注意命名要准确</p><p>否则会出现： <code>“ The type InitHelloWorld must implement the inherited abstract method BeanPostProcessor.postProcessBeforeInitialization(Object, String) ”</code>之类的错误</p><h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p>下面的例子显示如何在 <code>ApplicationContext</code> 的上下文中编写，注册和使用 <code>BeanPostProcessor</code>。</p><p>这里是 HelloWorld.java 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String message;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message  = message;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Your Message : &quot;</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Bean is going through init.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Bean will destroy now.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是实现<code>BeanPostProcessor</code>的非常简单的例子，它在任何 <code>bean</code> 的初始化的之前和之后输入该 <code>bean</code> 的名称。你可以在初始化 <code>bean </code>的之前和之后实现更复杂的逻辑，因为你有两个访问内置 <code>bean</code> 对象的后置处理程序的方法。</p><p>这里是 InitHelloWorld.java 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.config.BeanPostProcessor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitHelloWorld</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;BeforeInitialization : &quot;</span> + beanName);</span><br><span class="line">      <span class="keyword">return</span> bean;  <span class="comment">// you can return any other object as well</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;AfterInitialization : &quot;</span> + beanName);</span><br><span class="line">      <span class="keyword">return</span> bean;  <span class="comment">// you can return any other object as well</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 MainApp.java 文件的内容。在这里，你需要注册一个在 <code>AbstractApplicationContext</code> 类中声明的关闭<code> hook</code> 的 <code>registerShutdownHook() </code>方法。它将确保正常关闭，并且调用相关的 <code>destroy</code> 方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.AbstractApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">AbstractApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">HelloWorld</span> <span class="variable">obj</span> <span class="operator">=</span> (HelloWorld) context.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">      obj.getMessage();</span><br><span class="line">      context.registerShutdownHook();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <code>init</code> 和 <code>destroy</code> 方法需要的配置文件 Beans.xml 文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloWorld&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.HelloWorld&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello World!&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.InitHelloWorld&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你创建源代码和 <code>bean</code> 配置文件完成后，我们就可以运行该应用程序。如果你的应用程序一切都正常，将输出以下信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BeforeInitialization : helloWorld</span><br><span class="line">Bean is going through init.</span><br><span class="line">AfterInitialization : helloWorld</span><br><span class="line">Your Message : Hello World!</span><br><span class="line">Bean will destroy now.</span><br></pre></td></tr></table></figure><h2 id="Spring-Bean-定义继承"><a href="#Spring-Bean-定义继承" class="headerlink" title="Spring Bean 定义继承"></a>Spring Bean 定义继承</h2><p>2019-05-11 17:44 更新</p><h3 id="Bean-定义继承"><a href="#Bean-定义继承" class="headerlink" title="Bean 定义继承"></a>Bean 定义继承</h3><p>bean 定义可以包含很多的配置信息，包括构造函数的参数，属性值，容器的具体信息例如初始化方法，静态工厂方法名，等等。</p><p>子 bean 的定义继承父定义的配置数据。子定义可以根据需要重写一些值，或者添加其他值。</p><p>Spring Bean 定义的继承与 Java 类的继承无关，但是继承的概念是一样的。你可以定义一个父 bean 的定义作为模板和其他子 bean 就可以从父 bean 中继承所需的配置。</p><p>当你使用基于 XML 的配置元数据时，通过使用父属性，指定父 bean 作为该属性的值来表明子 bean 的定义。</p><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><p>下面是配置文件 <strong>Beans.xml</strong>，在该配置文件中我们定义有两个属性 <em>message1</em> 和 <em>message2</em> 的 “helloWorld” bean。然后，使用 <strong>parent</strong> 属性把 “helloIndia” bean 定义为 “helloWorld” bean 的孩子。这个子 bean 继承 <em>message2</em> 的属性，重写 <em>message1</em> 的属性，并且引入一个属性 <em>message3</em>。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloWorld&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.HelloWorld&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello World!&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello Second World!&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloIndia&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.HelloIndia&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;helloWorld&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello India!&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Namaste India!&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里是 <strong>HelloWorld.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String message1;</span><br><span class="line">   <span class="keyword">private</span> String message2;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage1</span><span class="params">(String message)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message1  = message;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage2</span><span class="params">(String message)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message2  = message;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage1</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;World Message1 : &quot;</span> + message1);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage2</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;World Message2 : &quot;</span> + message2);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是 <strong>HelloIndia.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloIndia</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String message1;</span><br><span class="line">   <span class="keyword">private</span> String message2;</span><br><span class="line">   <span class="keyword">private</span> String message3;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage1</span><span class="params">(String message)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message1  = message;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage2</span><span class="params">(String message)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message2  = message;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage3</span><span class="params">(String message)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message3  = message;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage1</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;India Message1 : &quot;</span> + message1);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage2</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;India Message2 : &quot;</span> + message2);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage3</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;India Message3 : &quot;</span> + message3);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="type">HelloWorld</span> <span class="variable">objA</span> <span class="operator">=</span> (HelloWorld) context.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line">      objA.getMessage1();</span><br><span class="line">      objA.getMessage2();</span><br><span class="line"></span><br><span class="line">      <span class="type">HelloIndia</span> <span class="variable">objB</span> <span class="operator">=</span> (HelloIndia) context.getBean(<span class="string">&quot;helloIndia&quot;</span>);</span><br><span class="line">      objB.getMessage1();</span><br><span class="line">      objB.getMessage2();</span><br><span class="line">      objB.getMessage3();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦你创建源代码和 bean 配置文件完成后，我们就可以运行该应用程序。如果你的应用程序一切都正常，将输出以下信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">World Message1 : Hello World!</span><br><span class="line">World Message2 : Hello Second World!</span><br><span class="line">India Message1 : Hello India!</span><br><span class="line">India Message2 : Hello Second World!</span><br><span class="line">India Message3 : Namaste India!</span><br></pre></td></tr></table></figure><p>在这里你可以观察到，我们创建 “helloIndia” bean 的同时并没有传递 message2，但是由于 Bean 定义的继承，所以它传递了 message2。</p><h3 id="Bean-定义模板"><a href="#Bean-定义模板" class="headerlink" title="Bean 定义模板"></a>Bean 定义模板</h3><p>你可以创建一个 Bean 定义模板，不需要花太多功夫它就可以被其他子 bean 定义使用。在定义一个 Bean 定义模板时，你不应该指定<strong>类</strong>的属性，而应该指定带 <strong>true</strong> 值的<strong>抽象</strong>属性，如下所示：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;beanTeamplate&quot;</span> <span class="attr">abstract</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello World!&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello Second World!&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Namaste India!&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloIndia&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.HelloIndia&quot;</span> <span class="attr">parent</span>=<span class="string">&quot;beanTeamplate&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello India!&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message3&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Namaste India!&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父 bean 自身不能被实例化，因为它是不完整的，而且它也被明确地标记为抽象的。当一个定义是抽象的，它仅仅作为一个纯粹的模板 bean 定义来使用的，充当子定义的父定义使用。</p><h2 id="Spring-依赖注入"><a href="#Spring-依赖注入" class="headerlink" title="Spring 依赖注入"></a>Spring 依赖注入</h2><p>2021-11-10 16:45 更新</p><p>Spring框架的核心功能之一就是通过依赖注入的方式来管理Bean之间的依赖关系。</p><h3 id="依赖注入"><a href="#依赖注入" class="headerlink" title="依赖注入"></a>依赖注入</h3><p>每个基于应用程序的 java 都有几个对象，由这些对象一起工作来呈现出终端用户所看到的工作的应用程序。当编写一个复杂的 Java 应用程序时，应用程序类应该尽可能独立于其他 Java 类来增加这些类重用的可能性，并且在做单元测试时，测试独立于其他类的独立性。<code>依赖注入（或有时称为布线）</code>有助于把这些类粘合在一起，同时保持他们独立。</p><p>假设你有一个包含文本编辑器组件的应用程序，并且你想要提供拼写检查。标准代码看起来是这样的：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;  </span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">TextEditor</span><span class="params">()</span> &#123;</span><br><span class="line">      spellChecker = <span class="keyword">new</span> <span class="title class_">SpellChecker</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里我们所做的就是创建一个 TextEditor 和 SpellChecker 之间的依赖关系。而在控制反转IoC的场景中，我们会这样做：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">TextEditor</span><span class="params">(SpellChecker spellChecker)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.spellChecker = spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，TextEditor 不应该担心 SpellChecker 的实现。SpellChecker 将会独立实现，并且在 TextEditor 实例化的时候将提供给 TextEditor，整个过程是由 Spring 框架的控制。</p><p>在这里，我们已经从 TextEditor 中删除了全面控制，并且把它保存到其他地方（即 XML 配置文件），且依赖关系（即 SpellChecker 类）通过<strong>类构造函数</strong>被注入到 TextEditor 类中。因此，控制流通过依赖注入（DI）已经“反转”，因为你已经有效地委托依赖关系到一些外部系统。</p><p>依赖注入的<strong>第二种方法</strong>是通过 TextEditor 类的 <strong>Setter 方法</strong>，我们将创建 SpellChecker 实例，该实例将被用于调用 setter 方法来初始化 TextEditor 的属性。</p><p>因此，DI 主要有两种变体和下面的两个子章将结合实例涵盖它们：</p><table><thead><tr><th>序号</th><th>依赖注入类型 &amp; 描述</th></tr></thead><tbody><tr><td>1</td><td><a href="https://www.w3cschool.cn/wkspring/t7n41mm7.html">Constructor-based dependency injection</a>当容器调用带有多个参数的构造函数类时，实现基于构造函数的 DI，每个代表在其他类中的一个依赖关系。</td></tr><tr><td>2</td><td><a href="https://www.w3cschool.cn/wkspring/vneb1mm9.html">Setter-based dependency injection</a>基于 setter 方法的 DI 是通过在调用无参数的构造函数或无参数的静态工厂方法实例化 bean 之后容器调用 beans 的 setter 方法来实现的。</td></tr></tbody></table><p>你可以混合这两种方法，基于构造函数和基于 setter 方法的 DI，然而使用有强制性依存关系的构造函数和有可选依赖关系的 sette r是一个好的做法。</p><p>代码是 DI 原理的清洗机，当对象与它们的依赖关系被提供时，解耦效果更明显。对象不查找它的依赖关系，也不知道依赖关系的位置或类，而这一切都由 Spring 框架控制的。</p><h3 id="Spring-基于构造函数的依赖注入"><a href="#Spring-基于构造函数的依赖注入" class="headerlink" title="Spring 基于构造函数的依赖注入"></a>Spring 基于构造函数的依赖注入</h3><p>当容器调用带有一组参数的类构造函数时，基于构造函数的 DI 就完成了，其中每个参数代表一个对其他类的依赖。</p><p>接下来，我们将通过示例来理解 Spring 基于构造函数的依赖注入。</p><h5 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h5><p>下面的例子显示了一个类 TextEditor，只能用构造函数注入来实现依赖注入。</p><p>这是 <strong>TextEditor.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">TextEditor</span><span class="params">(SpellChecker spellChecker)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside TextEditor constructor.&quot;</span> );</span><br><span class="line">      <span class="built_in">this</span>.spellChecker = spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spellCheck</span><span class="params">()</span> &#123;</span><br><span class="line">      spellChecker.checkSpelling();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是另一个依赖类文件 <strong>SpellChecker.java</strong> 的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpellChecker</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">SpellChecker</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside SpellChecker constructor.&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkSpelling</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside checkSpelling.&quot;</span> );</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">TextEditor</span> <span class="variable">te</span> <span class="operator">=</span> (TextEditor) context.getBean(<span class="string">&quot;textEditor&quot;</span>);</span><br><span class="line">      te.spellCheck();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置文件 <strong>Beans.xml</strong> 的内容，它有基于构造函数注入的配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;textEditor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;spellChecker&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当你完成了创建源和 bean 配置文件后，让我们开始运行应用程序。如果你的应用程序运行顺利的话，那么将会输出下述所示消息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Inside SpellChecker constructor.</span><br><span class="line">Inside TextEditor constructor.</span><br><span class="line">Inside checkSpelling.</span><br></pre></td></tr></table></figure><h5 id="构造函数参数解析"><a href="#构造函数参数解析" class="headerlink" title="构造函数参数解析:"></a>构造函数参数解析:</h5><p>注释：上面这个例子里，将依赖类 SpellChecker.java注入到TextEditor.java 文件。</p><p>如此，便称为依赖注入。</p><p>如果存在不止一个参数时，当把参数传递给构造函数时，可能会存在歧义。要解决这个问题，那么构造函数的参数在 bean 定义中的顺序就是把这些参数提供给适当的构造函数的顺序就可以了。</p><p>考虑下面的类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> x.y;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Foo</span><span class="params">(Bar bar, Baz baz)</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下述配置文件工作顺利：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;foo&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.Foo&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;bar&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">ref</span>=<span class="string">&quot;baz&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bar&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.Bar&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;baz&quot;</span> <span class="attr">class</span>=<span class="string">&quot;x.y.Baz&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>让我们再检查一下我们传递给构造函数不同类型的位置。考虑下面的类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> x.y;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Foo</span><span class="params">(<span class="type">int</span> year, String name)</span> &#123;</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你使用<code> type</code> 属性显式的指定了构造函数参数的类型，容器也可以使用与简单类型匹配的类型。例如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;exampleBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.ExampleBean&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;int&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2001&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Zara&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后并且也是最好的传递构造函数参数的方式，使用<code> index</code> 属性来显式的指定构造函数参数的索引。下面是基于索引为 0 的例子，如下所示：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;exampleBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;examples.ExampleBean&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2001&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Zara&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>最后，如果你想要向一个对象传递一个引用，你需要使用 标签的 <strong>ref</strong> 属性，如果你想要直接传递值，那么你应该使用如上所示的 <strong>value</strong> 属性。</p><h3 id="Spring-基于设值函数的依赖注入"><a href="#Spring-基于设值函数的依赖注入" class="headerlink" title="Spring 基于设值函数的依赖注入"></a>Spring 基于设值函数的依赖注入</h3><p>当容器调用一个无参的构造函数或一个无参的静态 factory 方法来初始化你的 bean 后，通过容器在你的 bean 上调用设值函数，基于设值函数的 DI 就完成了。</p><h4 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h4><p>下述例子显示了一个类 <em>TextEditor</em>，它只能使用纯粹的基于设值函数的注入来实现依赖注入。</p><p>下面是 <strong>TextEditor.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">   <span class="comment">// a setter method to inject the dependency.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSpellChecker</span><span class="params">(SpellChecker spellChecker)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside setSpellChecker.&quot;</span> );</span><br><span class="line">      <span class="built_in">this</span>.spellChecker = spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// a getter method to return spellChecker</span></span><br><span class="line">   <span class="keyword">public</span> SpellChecker <span class="title function_">getSpellChecker</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spellCheck</span><span class="params">()</span> &#123;</span><br><span class="line">      spellChecker.checkSpelling();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，你需要检查设值函数方法的名称转换。要设置一个变量 <strong>spellChecker</strong>，我们使用 <strong>setSpellChecker()</strong> 方法，该方法与 Java POJO 类非常相似。让我们创建另一个依赖类文件 <strong>SpellChecker.java</strong> 的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpellChecker</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">SpellChecker</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside SpellChecker constructor.&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkSpelling</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside checkSpelling.&quot;</span> );</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">TextEditor</span> <span class="variable">te</span> <span class="operator">=</span> (TextEditor) context.getBean(<span class="string">&quot;textEditor&quot;</span>);</span><br><span class="line">      te.spellCheck();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置文件 <strong>Beans.xml</strong> 的内容，该文件有基于设值函数注入的配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;textEditor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;spellChecker&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你应该注意定义在基于构造函数注入和基于设值函数注入中的 Beans.xml 文件的区别。唯一的区别就是在基于构造函数注入中，我们使用的是〈bean〉标签中的〈constructor-arg〉元素，而在基于设值函数的注入中，我们使用的是〈bean〉标签中的〈property〉元素。</p><p>第二个你需要注意的点是，</p><blockquote><p>如果你要把一个引用传递给一个对象，那么你需要使用 标签的 ref 属性</p></blockquote><blockquote><p>而如果你要直接传递一个值，那么你应该使用 value 属性。</p></blockquote><p>当你完成了创建源和 bean 配置文件后，让我们开始运行应用程序。如果你的应用程序运行顺利的话，那么将会输出下述所示消息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Inside SpellChecker constructor.</span><br><span class="line">Inside setSpellChecker.</span><br><span class="line">Inside checkSpelling.</span><br></pre></td></tr></table></figure><h4 id="使用-p-namespace-实现-XML-配置："><a href="#使用-p-namespace-实现-XML-配置：" class="headerlink" title="使用 p-namespace 实现 XML 配置："></a>使用 p-namespace 实现 XML 配置：</h4><p>如果你有许多的设值函数方法，那么在 XML 配置文件中使用 <strong>p-namespace</strong> 是非常方便的。让我们查看一下区别：</p><p>以带有 标签的标准 XML 配置文件为例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;john-classic&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.Person&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;John Doe&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;spouse&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;jane&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;jane&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.Person&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;John Doe&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述 XML 配置文件可以使用 <strong>p-namespace</strong> 以一种更简洁的方式重写，如下所示：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:p</span>=<span class="string">&quot;http://www.springframework.org/schema/p&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;john-classic&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.Person&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:name</span>=<span class="string">&quot;John Doe&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:spouse-ref</span>=<span class="string">&quot;jane&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;jane&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.example.Person&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">p:name</span>=<span class="string">&quot;John Doe&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里，你不应该区别指定原始值和带有 p-namespace 的对象引用。**-ref** 部分表明这不是一个直接的值，而是对另一个 bean 的引用。</p><h3 id="Spring-注入内部-Beans"><a href="#Spring-注入内部-Beans" class="headerlink" title="Spring 注入内部 Beans"></a>Spring 注入内部 Beans</h3><h4 id="注入内部-Beans"><a href="#注入内部-Beans" class="headerlink" title="注入内部 Beans"></a>注入内部 Beans</h4><p>正如你所知道的 Java 内部类是在其他类的范围内被定义的，同理，<strong>inner beans</strong> 是在其他 bean 的范围内定义的 bean。因此<property />或<constructor-arg />元素中的<bean />元素称为内部bean，如下所示。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;outerBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;target&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;innerBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="例子-2"><a href="#例子-2" class="headerlink" title="例子"></a>例子</h4><p>这里是 <strong>TextEditor.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">   <span class="comment">// a setter method to inject the dependency.</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSpellChecker</span><span class="params">(SpellChecker spellChecker)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside setSpellChecker.&quot;</span> );</span><br><span class="line">      <span class="built_in">this</span>.spellChecker = spellChecker;</span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="comment">// a getter method to return spellChecker</span></span><br><span class="line">   <span class="keyword">public</span> SpellChecker <span class="title function_">getSpellChecker</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spellCheck</span><span class="params">()</span> &#123;</span><br><span class="line">      spellChecker.checkSpelling();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是另一个依赖的类文件 <strong>SpellChecker.java</strong> 内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpellChecker</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">SpellChecker</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside SpellChecker constructor.&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkSpelling</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside checkSpelling.&quot;</span> );</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">TextEditor</span> <span class="variable">te</span> <span class="operator">=</span> (TextEditor) context.getBean(<span class="string">&quot;textEditor&quot;</span>);</span><br><span class="line">      te.spellCheck();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是使用<strong>内部 bean</strong> 为基于 setter 注入进行配置的配置文件 <strong>Beans.xml</strong> 文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean using inner bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;textEditor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;spellChecker&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你创建源代码和 bean 配置文件完成后，我们就可以运行该应用程序。如果你的应用程序一切都正常，将输出以下信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Inside SpellChecker constructor.</span><br><span class="line">Inside setSpellChecker.</span><br><span class="line">Inside checkSpelling.</span><br></pre></td></tr></table></figure><h3 id="Spring-注入集合"><a href="#Spring-注入集合" class="headerlink" title="Spring 注入集合"></a>Spring 注入集合</h3><p>2021-02-25 15:11 更新</p><h4 id="注入集合"><a href="#注入集合" class="headerlink" title="注入集合"></a>注入集合</h4><p>你已经看到了如何使用 <strong>value</strong> 属性来配置基本数据类型和在你的 bean 配置文件中使用<code>&lt;property&gt;</code>标签的 <strong>ref</strong> 属性来配置对象引用。这两种情况下处理奇异值传递给一个 bean。</p><p>现在如果你想传递多个值，如 Java Collection 类型 List、Set、Map 和 Properties，应该怎么做呢。为了处理这种情况，Spring 提供了四种类型的集合的配置元素，如下所示：</p><table><thead><tr><th align="left">元素</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left"><list></td><td align="left">它有助于连线，如注入一列值，允许重复。</td></tr><tr><td align="left"><set></td><td align="left">它有助于连线一组值，但不能重复。</td></tr><tr><td align="left"><map></td><td align="left">它可以用来注入名称-值对的集合，其中名称和值可以是任何类型。</td></tr><tr><td align="left"><props></td><td align="left">它可以用来注入名称-值对的集合，其中名称和值都是字符串类型。</td></tr></tbody></table><p>你可以使用<code>&lt;list&gt;</code>或<code>&lt;set&gt;</code>来连接任何 <code>java.util.Collection</code> 的实现或数组。</p><p>你会遇到两种情况（a）传递集合中直接的值（b）传递一个 bean 的引用作为集合的元素。</p><h4 id="例子-3"><a href="#例子-3" class="headerlink" title="例子"></a>例子</h4><p>我们在适当的位置使用 Eclipse IDE，然后按照下面的步骤来创建一个 Spring 应用程序：</p><table><thead><tr><th align="left">步骤</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">创建一个名称为 <em>SpringExample</em> 的项目，并且在创建项目的 <strong>src</strong> 文件夹中创建一个包 <em>com.tutorialspoint</em> 。</td></tr><tr><td align="left">2</td><td align="left">使用 <em>Add External JARs</em> 选项，添加所需的 Spring 库，解释见 <em>Spring Hello World Example</em> 章节。 option as explained in the chapter.</td></tr><tr><td align="left">3</td><td align="left">在 <em>com.tutorialspoint</em> 包中创建Java类<em>TextEditor</em>、<em>SpellChecker</em> 和 <em>MainApp</em>。</td></tr><tr><td align="left">4</td><td align="left">在 <strong>src</strong> 文件夹中创建 Beans 配置文件 <em>Beans.xml</em>。</td></tr><tr><td align="left">5</td><td align="left">最后一步是创建的所有Java文件和Bean配置文件的内容，并运行应用程序，解释如下所示。</td></tr></tbody></table><p>这里是 <strong>JavaCollection.java</strong> 文件的内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.tutorialspoint;</span><br><span class="line">import java.util.*;</span><br><span class="line">public class JavaCollection &#123;</span><br><span class="line">   List addressList;</span><br><span class="line">   Set  addressSet;</span><br><span class="line">   Map  addressMap;</span><br><span class="line">   Properties addressProp;</span><br><span class="line">   // a setter method to set List</span><br><span class="line">   public void setAddressList(List addressList) &#123;</span><br><span class="line">      this.addressList = addressList;</span><br><span class="line">   &#125;</span><br><span class="line">   // prints and returns all the elements of the list.</span><br><span class="line">   public List getAddressList() &#123;</span><br><span class="line">      System.out.println(&quot;List Elements :&quot;  + addressList);</span><br><span class="line">      return addressList;</span><br><span class="line">   &#125;</span><br><span class="line">   // a setter method to set Set</span><br><span class="line">   public void setAddressSet(Set addressSet) &#123;</span><br><span class="line">      this.addressSet = addressSet;</span><br><span class="line">   &#125;</span><br><span class="line">   // prints and returns all the elements of the Set.</span><br><span class="line">   public Set getAddressSet() &#123;</span><br><span class="line">      System.out.println(&quot;Set Elements :&quot;  + addressSet);</span><br><span class="line">      return addressSet;</span><br><span class="line">   &#125;</span><br><span class="line">   // a setter method to set Map</span><br><span class="line">   public void setAddressMap(Map addressMap) &#123;</span><br><span class="line">      this.addressMap = addressMap;</span><br><span class="line">   &#125;  </span><br><span class="line">   // prints and returns all the elements of the Map.</span><br><span class="line">   public Map getAddressMap() &#123;</span><br><span class="line">      System.out.println(&quot;Map Elements :&quot;  + addressMap);</span><br><span class="line">      return addressMap;</span><br><span class="line">   &#125;</span><br><span class="line">   // a setter method to set Property</span><br><span class="line">   public void setAddressProp(Properties addressProp) &#123;</span><br><span class="line">      this.addressProp = addressProp;</span><br><span class="line">   &#125; </span><br><span class="line">   // prints and returns all the elements of the Property.</span><br><span class="line">   public Properties getAddressProp() &#123;</span><br><span class="line">      System.out.println(&quot;Property Elements :&quot;  + addressProp);</span><br><span class="line">      return addressProp;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.tutorialspoint;</span><br><span class="line">import org.springframework.context.ApplicationContext;</span><br><span class="line">import org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line">public class MainApp &#123;</span><br><span class="line">   public static void main(String[] args) &#123;</span><br><span class="line">      ApplicationContext context = </span><br><span class="line">             new ClassPathXmlApplicationContext(&quot;Beans.xml&quot;);</span><br><span class="line">      JavaCollection jc=(JavaCollection)context.getBean(&quot;javaCollection&quot;);</span><br><span class="line">      jc.getAddressList();</span><br><span class="line">      jc.getAddressSet();</span><br><span class="line">      jc.getAddressMap();</span><br><span class="line">      jc.getAddressProp();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置所有类型的集合的配置文件 <strong>Beans.xml</strong> 文件：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- Definition for javaCollection --&gt;</span><br><span class="line">   &lt;bean id=&quot;javaCollection&quot; class=&quot;com.tutorialspoint.JavaCollection&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- results in a setAddressList(java.util.List) call --&gt;</span><br><span class="line">      &lt;property name=&quot;addressList&quot;&gt;</span><br><span class="line">         &lt;list&gt;</span><br><span class="line">            &lt;value&gt;INDIA&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;Pakistan&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;USA&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;USA&lt;/value&gt;</span><br><span class="line">         &lt;/list&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- results in a setAddressSet(java.util.Set) call --&gt;</span><br><span class="line">      &lt;property name=&quot;addressSet&quot;&gt;</span><br><span class="line">         &lt;set&gt;</span><br><span class="line">            &lt;value&gt;INDIA&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;Pakistan&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;USA&lt;/value&gt;</span><br><span class="line">            &lt;value&gt;USA&lt;/value&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- results in a setAddressMap(java.util.Map) call --&gt;</span><br><span class="line">      &lt;property name=&quot;addressMap&quot;&gt;</span><br><span class="line">         &lt;map&gt;</span><br><span class="line">            &lt;entry key=&quot;1&quot; value=&quot;INDIA&quot;/&gt;</span><br><span class="line">            &lt;entry key=&quot;2&quot; value=&quot;Pakistan&quot;/&gt;</span><br><span class="line">            &lt;entry key=&quot;3&quot; value=&quot;USA&quot;/&gt;</span><br><span class="line">            &lt;entry key=&quot;4&quot; value=&quot;USA&quot;/&gt;</span><br><span class="line">         &lt;/map&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- results in a setAddressProp(java.util.Properties) call --&gt;</span><br><span class="line">      &lt;property name=&quot;addressProp&quot;&gt;</span><br><span class="line">         &lt;props&gt;</span><br><span class="line">            &lt;prop key=&quot;one&quot;&gt;INDIA&lt;/prop&gt;</span><br><span class="line">            &lt;prop key=&quot;two&quot;&gt;Pakistan&lt;/prop&gt;</span><br><span class="line">            &lt;prop key=&quot;three&quot;&gt;USA&lt;/prop&gt;</span><br><span class="line">            &lt;prop key=&quot;four&quot;&gt;USA&lt;/prop&gt;</span><br><span class="line">         &lt;/props&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>一旦你创建源代码和 bean 配置文件完成后，我们就可以运行该应用程序。你应该注意这里不需要配置文件。如果你的应用程序一切都正常，将输出以下信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List Elements :[INDIA, Pakistan, USA, USA]</span><br><span class="line">Set Elements :[INDIA, Pakistan, USA]</span><br><span class="line">Map Elements :&#123;1=INDIA, 2=Pakistan, 3=USA, 4=USA&#125;</span><br><span class="line">Property Elements :&#123;two=Pakistan, one=INDIA, three=USA, four=USA&#125;</span><br></pre></td></tr></table></figure><h4 id="注入-Bean-引用"><a href="#注入-Bean-引用" class="headerlink" title="注入 Bean 引用"></a>注入 Bean 引用</h4><p>下面的 Bean 定义将帮助你理解如何注入 bean 的引用作为集合的元素。甚至你可以将引用和值混合在一起，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans xmlns=&quot;http://www.springframework.org/schema/beans&quot;</span><br><span class="line">    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span><br><span class="line">    xsi:schemaLocation=&quot;http://www.springframework.org/schema/beans</span><br><span class="line">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- Bean Definition to handle references and values --&gt;</span><br><span class="line">   &lt;bean id=&quot;...&quot; class=&quot;...&quot;&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- Passing bean reference  for java.util.List --&gt;</span><br><span class="line">      &lt;property name=&quot;addressList&quot;&gt;</span><br><span class="line">         &lt;list&gt;</span><br><span class="line">            &lt;ref bean=&quot;address1&quot;/&gt;</span><br><span class="line">            &lt;ref bean=&quot;address2&quot;/&gt;</span><br><span class="line">            &lt;value&gt;Pakistan&lt;/value&gt;</span><br><span class="line">         &lt;/list&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- Passing bean reference  for java.util.Set --&gt;</span><br><span class="line">      &lt;property name=&quot;addressSet&quot;&gt;</span><br><span class="line">         &lt;set&gt;</span><br><span class="line">            &lt;ref bean=&quot;address1&quot;/&gt;</span><br><span class="line">            &lt;ref bean=&quot;address2&quot;/&gt;</span><br><span class="line">            &lt;value&gt;Pakistan&lt;/value&gt;</span><br><span class="line">         &lt;/set&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- Passing bean reference  for java.util.Map --&gt;</span><br><span class="line">      &lt;property name=&quot;addressMap&quot;&gt;</span><br><span class="line">         &lt;map&gt;</span><br><span class="line">            &lt;entry key=&quot;one&quot; value=&quot;INDIA&quot;/&gt;</span><br><span class="line">            &lt;entry key =&quot;two&quot; value-ref=&quot;address1&quot;/&gt;</span><br><span class="line">            &lt;entry key =&quot;three&quot; value-ref=&quot;address2&quot;/&gt;</span><br><span class="line">         &lt;/map&gt;</span><br><span class="line">      &lt;/property&gt;</span><br><span class="line"></span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>为了使用上面的 bean 定义，你需要定义 setter 方法，它们应该也能够是用这种方式来处理引用。</p><h4 id="注入-null-和空字符串的值"><a href="#注入-null-和空字符串的值" class="headerlink" title="注入 null 和空字符串的值"></a>注入 null 和空字符串的值</h4><p>如果你需要传递一个空字符串作为值，那么你可以传递它，如下所示：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;exampleBean&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前面的例子相当于 Java 代码：exampleBean.setEmail(“”)。</p><p>如果你需要传递一个 NULL 值，那么你可以传递它，如下所示：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;exampleBean&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">null</span>/&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>前面的例子相当于 Java 代码：exampleBean.setEmail(null)。</p><h2 id="Spring-Beans-自动装配"><a href="#Spring-Beans-自动装配" class="headerlink" title="Spring Beans 自动装配"></a>Spring Beans 自动装配</h2><h3 id="Beans-自动装配"><a href="#Beans-自动装配" class="headerlink" title="Beans 自动装配"></a>Beans 自动装配</h3><p>你已经学会如何使用<code>&lt;bean&gt;</code>元素来声明 bean 和通过使用 XML 配置文件中的<code>&lt;constructor-arg&gt;</code>和<code>&lt;property&gt;</code>元素来注入 。</p><p>Spring 容器可以在不使用<code>&lt;constructor-arg&gt;</code>和<code>&lt;property&gt;</code> 元素的情况下<strong>自动装配</strong>相互协作的 bean 之间的关系，这有助于减少编写一个大的基于 Spring 的应用程序的 XML 配置的数量。</p><p><strong>自动装配模式</strong></p><p>下列自动装配模式，它们可用于指示 Spring 容器为来使用自动装配进行依赖注入。你可以使用<code>&lt;bean&gt;</code>元素的 <strong>autowire</strong> 属性为一个 bean 定义指定自动装配模式。</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>no</td><td>这是默认的设置，它意味着没有自动装配，你应该使用显式的bean引用来连线。你不用为了连线做特殊的事。在依赖注入章节你已经看到这个了。</td></tr><tr><td><a href="https://www.w3cschool.cn/wkspring/fwdz1mmb.html">byName</a></td><td>由属性名自动装配。Spring 容器看到在 XML 配置文件中 bean 的自动装配的属性设置为 byName。然后尝试匹配，并且将它的属性与在配置文件中被定义为相同名称的 beans 的属性进行连接。</td></tr><tr><td><a href="https://www.w3cschool.cn/wkspring/8dhy1mmd.html">byType</a></td><td>由属性数据类型自动装配。Spring 容器看到在 XML 配置文件中 bean 的自动装配的属性设置为 byType。然后如果它的<strong>类型</strong>匹配配置文件中的一个确切的 bean 名称，它将尝试匹配和连接属性的类型。如果存在不止一个这样的 bean，则一个致命的异常将会被抛出。</td></tr><tr><td><a href="https://www.w3cschool.cn/wkspring/jtlb1mmf.html">constructor</a></td><td>类似于 byType，但该类型适用于构造函数参数类型。如果在容器中没有一个构造函数参数类型的 bean，则一个致命错误将会发生。</td></tr><tr><td>autodetect（3.0版本不支持）</td><td>Spring首先尝试通过 constructor 使用自动装配来连接，如果它不执行，Spring 尝试通过 byType 来自动装配。</td></tr></tbody></table><p>可以使用 <strong>byType</strong> 或者 <strong>constructor</strong> 自动装配模式来连接数组和其他类型的集合。</p><p><strong>自动装配的局限性</strong></p><p>当自动装配始终在同一个项目中使用时，它的效果最好。如果通常不使用自动装配，它可能会使开发人员混淆的使用它来连接只有一个或两个 bean 定义。不过，自动装配可以显著减少需要指定的属性或构造器参数，但你应该在使用它们之前考虑到自动装配的局限性和缺点。</p><table><thead><tr><th>限制</th><th>描述</th></tr></thead><tbody><tr><td>重写的可能性</td><td>你可以使用总是重写自动装配的 <constructor-arg>和 <property> 设置来指定依赖关系。</td></tr><tr><td>原始数据类型</td><td>你不能自动装配所谓的简单类型包括基本类型，字符串和类。</td></tr><tr><td>混乱的本质</td><td>自动装配不如显式装配精确，所以如果可能的话尽可能使用显式装配。</td></tr></tbody></table><h3 id="Spring-自动装配-byName"><a href="#Spring-自动装配-byName" class="headerlink" title="Spring 自动装配 byName"></a>Spring 自动装配 <code>byName</code></h3><p>这种模式由属性名称指定自动装配。Spring 容器看作 beans，在 XML 配置文件中 beans 的 <em>auto-wire</em> 属性设置为 <em>byName</em>。然后，它尝试将它的属性与配置文件中定义为相同名称的 beans 进行匹配和连接。如果找到匹配项，它将注入这些 beans，否则，它将抛出异常。</p><p>例如，在配置文件中，如果一个 bean 定义设置为自动装配 <em>byName</em>，并且它包含 <em>spellChecker</em> 属性（即，它有一个 <em>setSpellChecker(…)</em> 方法），那么 Spring 就会查找定义名为 <em>spellChecker</em> 的 bean，并且用它来设置这个属性。你仍然可以使用 <property> 标签连接其余的属性。下面的例子将说明这个概念。</p><p>这里是 <strong>TextEditor.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSpellChecker</span><span class="params">( SpellChecker spellChecker )</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.spellChecker = spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> SpellChecker <span class="title function_">getSpellChecker</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spellCheck</span><span class="params">()</span> &#123;</span><br><span class="line">      spellChecker.checkSpelling();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是另一个依赖类文件 <strong>SpellChecker.java</strong> 的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpellChecker</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">SpellChecker</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside SpellChecker constructor.&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkSpelling</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside checkSpelling.&quot;</span> );</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">TextEditor</span> <span class="variable">te</span> <span class="operator">=</span> (TextEditor) context.getBean(<span class="string">&quot;textEditor&quot;</span>);</span><br><span class="line">      te.spellCheck();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是在正常情况下的配置文件 <strong>Beans.xml</strong> 文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;textEditor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;spellChecker&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Generic Text Editor&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是，如果你要使用自动装配 “byName”，那么你的 XML 配置文件将成为如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;textEditor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Generic Text Editor&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你完成了创建源代码和 bean 的配置文件，我们就可以运行该应用程序。如果你的应用程序一切都正常，它将打印下面的消息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Inside SpellChecker constructor.</span><br><span class="line">Inside checkSpelling.</span><br></pre></td></tr></table></figure><h3 id="类似的-Spring-自动装配-byType"><a href="#类似的-Spring-自动装配-byType" class="headerlink" title="(类似的)Spring 自动装配 byType"></a>(类似的)Spring 自动装配 <code>byType</code></h3><p>这种模式由属性类型指定自动装配。<code>Spring</code> 容器看作 <code>beans</code>，在 <code>XML</code> 配置文件中 <code>beans</code> 的 <em><code>autowire</code></em> 属性设置为 *<code>byType</code>*。然后，如果它的 <strong><code>type</code></strong> 恰好与配置文件中 <code>beans</code> 名称中的一个相匹配，它将尝试匹配和连接它的属性。如果找到匹配项，它将注入这些 <code>beans</code>，否则，它将抛出异常。</p><p>例如，在配置文件中，如果一个 <code>bean</code> 定义设置为自动装配 *<code>byType</code>*，并且它包含 <em><code>SpellChecker</code></em> 类型的 <em><code>spellChecker</code></em> 属性，那么 <code>Spring</code> 就会查找类型为 <em><code>SpellChecker</code></em> 的 <code>bean</code>，并且用它来设置这个属性。你仍然可以使用 &lt;<code>property</code>&gt; 标签连接其余属性。下面的例子将说明这个概念，你会发现和上面的例子没有什么区别，除了 <code>XML</code> 配置文件已经被改变。</p><p>这里是 <strong><code>TextEditor.java</code></strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSpellChecker</span><span class="params">( SpellChecker spellChecker )</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.spellChecker = spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> SpellChecker <span class="title function_">getSpellChecker</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spellCheck</span><span class="params">()</span> &#123;</span><br><span class="line">      spellChecker.checkSpelling();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是另一个依赖类文件 <strong><code>SpellChecker.java</code></strong> 的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpellChecker</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">SpellChecker</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside SpellChecker constructor.&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkSpelling</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside checkSpelling.&quot;</span> );</span><br><span class="line">   &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong><code>MainApp.java</code></strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">TextEditor</span> <span class="variable">te</span> <span class="operator">=</span> (TextEditor) context.getBean(<span class="string">&quot;textEditor&quot;</span>);</span><br><span class="line">      te.spellCheck();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是在正常情况下的配置文件 <strong><code>Beans.xml</code></strong> 文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;textEditor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;spellChecker&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Generic Text Editor&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;spellChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是，如果你要使用自动装配<code> “byType”</code>，那么你的 <code>XML </code>配置文件将成为如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;textEditor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Generic Text Editor&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;SpellChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你完成了创建源代码和 <code>bean</code> 的配置文件，我们就可以运行该应用程序。如果你的应用程序一切都正常，它将打印下面的消息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Inside SpellChecker constructor.</span><br><span class="line">Inside checkSpelling.</span><br></pre></td></tr></table></figure><h3 id="Spring-由构造函数自动装配"><a href="#Spring-由构造函数自动装配" class="headerlink" title="Spring 由构造函数自动装配"></a>Spring 由构造函数自动装配</h3><p>这种模式与 <em>byType</em> 非常相似，但它应用于构造器参数。Spring 容器看作 beans，在 XML 配置文件中 beans 的 <em>autowire</em> 属性设置为 <em>constructor</em>。然后，它尝试把它的构造函数的参数与配置文件中 beans 名称中的一个进行匹配和连线。如果找到匹配项，它会注入这些 bean，否则，它会抛出异常。</p><p>例如，在配置文件中，如果一个 bean 定义设置为通过<em>构造函数</em>自动装配，而且它有一个带有 <em>SpellChecker</em> 类型的参数之一的构造函数，那么 Spring 就会查找定义名为 <em>SpellChecker</em> 的 bean，并用它来设置构造函数的参数。你仍然可以使用 <constructor-arg> 标签连接其余属性。下面的例子将说明这个概念。</p><p>这里是 <strong>TextEditor.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">TextEditor</span><span class="params">( SpellChecker spellChecker, String name )</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.spellChecker = spellChecker;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> SpellChecker <span class="title function_">getSpellChecker</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spellCheck</span><span class="params">()</span> &#123;</span><br><span class="line">      spellChecker.checkSpelling();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是另一个依赖类文件 <strong>SpellChecker.java</strong> 的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpellChecker</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">SpellChecker</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside SpellChecker constructor.&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkSpelling</span><span class="params">()</span></span><br><span class="line">   &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside checkSpelling.&quot;</span> );</span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">TextEditor</span> <span class="variable">te</span> <span class="operator">=</span> (TextEditor) context.getBean(<span class="string">&quot;textEditor&quot;</span>);</span><br><span class="line">      te.spellCheck();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是在正常情况下的配置文件 <strong>Beans.xml</strong> 文件：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">    xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">    xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- Definition <span class="keyword">for</span> textEditor bean --&gt;</span><br><span class="line">   &lt;bean id=<span class="string">&quot;textEditor&quot;</span> class=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span>&gt;</span><br><span class="line">      &lt;constructor-arg  ref=<span class="string">&quot;spellChecker&quot;</span> /&gt;</span><br><span class="line">      &lt;constructor-arg  value=<span class="string">&quot;Generic Text Editor&quot;</span>/&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- Definition <span class="keyword">for</span> spellChecker bean --&gt;</span><br><span class="line">   &lt;bean id=<span class="string">&quot;spellChecker&quot;</span> class=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>但是，如果你要使用自动装配 “by constructor”，那么你的 XML 配置文件将成为如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for textEditor bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;textEditor&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.TextEditor&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">autowire</span>=<span class="string">&quot;constructor&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;Generic Text Editor&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for spellChecker bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;SpellChecker&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.SpellChecker&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你完成了创建源代码和 bean 的配置文件，我们就可以运行该应用程序。如果你的应用程序一切都正常，它将打印下面的消息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Inside SpellChecker constructor.</span><br><span class="line">Inside checkSpelling.</span><br></pre></td></tr></table></figure><h2 id="Spring-基于注解的配置"><a href="#Spring-基于注解的配置" class="headerlink" title="Spring 基于注解的配置"></a>Spring 基于注解的配置</h2><h3 id="基于注解的配置"><a href="#基于注解的配置" class="headerlink" title="基于注解的配置"></a>基于注解的配置</h3><p>从 Spring 2.5 开始就可以使用<strong>注解</strong>来配置依赖注入。而不是采用 XML 来描述一个 bean 连线，你可以使用相关类，方法或字段声明的注解，将 bean 配置移动到组件类本身。</p><p>在 XML 注入之前进行注解注入，因此后者的配置将通过两种方式的属性连线被前者重写。</p><p>注解连线在默认情况下在 Spring 容器中不打开。因此，在可以使用基于注解的连线之前，我们将需要在我们的 Spring 配置文件中启用它。所以如果你想在 Spring 应用程序中使用的任何注解，可以考虑到下面的配置文件。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- bean definitions go here --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦 被配置后，你就可以开始注解你的代码，表明 Spring 应该自动连接值到属性，方法和构造函数。让我们来看看几个重要的注解，并且了解它们是如何工作的：</p><table><thead><tr><th>序号</th><th>注解 &amp; 描述</th></tr></thead><tbody><tr><td>1</td><td><a href="https://www.w3cschool.cn/wkspring/9sle1mmh.html">@Required</a>@Required 注解应用于 bean 属性的 setter 方法。</td></tr><tr><td>2</td><td><a href="https://www.w3cschool.cn/wkspring/rw2h1mmj.html">@Autowired</a>@Autowired 注解可以应用到 bean 属性的 setter 方法，非 setter 方法，构造函数和属性。</td></tr><tr><td>3</td><td><a href="https://www.w3cschool.cn/wkspring/knqr1mm2.html">@Qualifier</a>通过指定确切的将被连线的 bean，@Autowired 和 @Qualifier 注解可以用来删除混乱。</td></tr><tr><td>4</td><td><a href="https://www.w3cschool.cn/wkspring/lmsq1mm4.html">JSR-250 Annotations</a>Spring 支持 JSR-250 的基础的注解，其中包括了 @Resource，@PostConstruct 和 @PreDestroy 注解。</td></tr></tbody></table><h3 id="Spring-Required-注解"><a href="#Spring-Required-注解" class="headerlink" title="Spring @Required 注解"></a>Spring @Required 注解</h3><p><strong>@Required</strong> 注解应用于 bean 属性的 setter 方法，它表明受影响的 bean 属性在配置时必须放在 XML 配置文件中，否则容器就会抛出一个 BeanInitializationException 异常。下面显示的是一个使用 @Required 注解的示例。</p><h4 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h4><p>让我们使 Eclipse IDE 处于工作状态，请按照下列步骤创建一个 Spring 应用程序：</p><table><thead><tr><th>步骤</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>创建一个名为 <em>SpringExample</em> 的项目，并且在所创建项目的 <strong>src</strong> 文件夹下创建一个名为 <em>com.tutorialspoint</em> 的包。</td></tr><tr><td>2</td><td>使用 <em>Add External JARs</em> 选项添加所需的 Spring 库文件，就如在 <em>Spring Hello World Example</em> 章节中解释的那样。</td></tr><tr><td>3</td><td>在 <em>com.tutorialspoint</em> 包下创建 Java 类 <em>Student</em> 和 <em>MainApp</em>。</td></tr><tr><td>4</td><td>在 <strong>src</strong> 文件夹下创建 Beans 配置文件 <em>Beans.xml</em>。</td></tr><tr><td>5</td><td>最后一步是创建所有 Java 文件和 Bean 配置文件的内容，并且按如下解释的那样运行应用程序。</td></tr></tbody></table><p>下面是 <strong>Student.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Required;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Integer age;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="meta">@Required</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Required</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) context.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">      System.out.println(<span class="string">&quot;Name : &quot;</span> + student.getName() );</span><br><span class="line">      System.out.println(<span class="string">&quot;Age : &quot;</span> + student.getAge() );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置文件 <strong>Beans.xml:</strong> 文件的内容：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for student bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.Student&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;Zara&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- try without passing age and check the result --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- property name=&quot;age&quot;  value=&quot;11&quot;--&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你已经完成的创建了源文件和 bean 配置文件，让我们运行一下应用程序。如果你的应用程序一切都正常的话，这将引起 <em>BeanInitializationException</em> 异常，并且会输出一下错误信息和其他日志消息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Property &#x27;age&#x27; is required for bean &#x27;student&#x27;</span><br></pre></td></tr></table></figure><p>下一步，在你按照如下所示从 “age” 属性中删除了注解，你可以尝试运行上面的示例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for student bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.Student&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;Zara&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>现在上面的示例将产生如下结果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Name : Zara</span><br><span class="line">Age : 11</span><br></pre></td></tr></table></figure><h3 id="Spring-Autowired-注解"><a href="#Spring-Autowired-注解" class="headerlink" title="Spring @Autowired 注解"></a>Spring @Autowired 注解</h3><p>2021-08-17 14:28 更新</p><p>使用 Spring 开发时，进行配置主要有两种方式，一是 xml 的方式，二是 java config 的方式。Spring 技术自身也在不断的发展和改变，从当前 Springboot 的火热程度来看，java config 的应用是越来越广泛了，在使用 java config 的过程当中，我们不可避免的会有各种各样的注解打交道，其中，我们使用最多的注解应该就是 @Autowired 注解了。这个注解的功能就是为我们注入一个定义好的 bean。</p><h4 id="Autowired-注解的作用到底是什么？"><a href="#Autowired-注解的作用到底是什么？" class="headerlink" title="@Autowired 注解的作用到底是什么？"></a>@Autowired 注解的作用到底是什么？</h4><p>@Autowired 这个注解我们经常在使用，现在，我想问的是，它的作用到底是什么呢?</p><p>首先，我们从所属范围来看，事实上这个注解是属于 Spring 的容器配置的一个注解，与它同属容器配置的注解还有：@Required,@Primary, @Qualifier 等等。因此 @Autowired 注解是一个用于容器 ( container ) 配置的注解。</p><p>其次，我们可以直接从字面意思来看，@autowired 注解来源于英文单词 autowire,这个单词的意思是自动装配的意思。自动装配又是什么意思？这个词语本来的意思是指的一些工业上的用机器代替人口，自动将一些需要完成的组装任务，或者别的一些任务完成。而在 Spring 的世界当中，自动装配指的就是使用将 Spring 容器中的 bean 自动的和我们需要这个 bean 的类组装在一起。</p><h4 id="Autowired-注解用法"><a href="#Autowired-注解用法" class="headerlink" title="@Autowired 注解用法"></a>@Autowired 注解用法</h4><p>在分析这个注解的实现原理之前，我们不妨先来回顾一下 @Autowired 注解的用法。</p><p>将 @Autowired 注解应用于构造函数，如以下示例所示</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CustomerPreferenceDao customerPreferenceDao;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MovieRecommender</span><span class="params">(CustomerPreferenceDao customerPreferenceDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.customerPreferenceDao = customerPreferenceDao;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 @Autowired 注解应用于 setter 方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleMovieLister</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> MovieFinder movieFinder;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMovieFinder</span><span class="params">(MovieFinder movieFinder)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.movieFinder = movieFinder;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将 @Autowired 注解应用于具有任意名称和多个参数的方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> MovieCatalog movieCatalog;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> CustomerPreferenceDao customerPreferenceDao;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">prepare</span><span class="params">(MovieCatalog movieCatalog,</span></span><br><span class="line"><span class="params">            CustomerPreferenceDao customerPreferenceDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.movieCatalog = movieCatalog;</span><br><span class="line">        <span class="built_in">this</span>.customerPreferenceDao = customerPreferenceDao;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您也可以将 @Autowired 注解应用于字段，或者将其与构造函数混合，如以下示例所示</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> CustomerPreferenceDao customerPreferenceDao;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MovieCatalog movieCatalog;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MovieRecommender</span><span class="params">(CustomerPreferenceDao customerPreferenceDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.customerPreferenceDao = customerPreferenceDao;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>直接应用于字段是我们使用的最多的一种方式，但是使用构造方法注入从代码层面却是更加好的。除此之外，还有以下不太常见的几种方式</p><p>将 @Autowired 注解添加到需要该类型数组的字段或方法，则 Spring 会从 ApplicationContext 中搜寻符合指定类型的所有 bean，如以下示例所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MovieCatalog[] movieCatalogs;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数组可以，我们可以马上举一反三，那容器也可以吗，答案是肯定的，下面是 set 以及 map 的例子：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Set&lt;MovieCatalog&gt; movieCatalogs;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMovieCatalogs</span><span class="params">(Set&lt;MovieCatalog&gt; movieCatalogs)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.movieCatalogs = movieCatalogs;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MovieRecommender</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, MovieCatalog&gt; movieCatalogs;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMovieCatalogs</span><span class="params">(Map&lt;String, MovieCatalog&gt; movieCatalogs)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.movieCatalogs = movieCatalogs;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是 @Autowired 注解的主要使用方式，经常使用 Spring 的话应该对其中常用的几种不会感到陌生。</p><h3 id="Spring-Qualifier-注解"><a href="#Spring-Qualifier-注解" class="headerlink" title="Spring @Qualifier 注解"></a>Spring @Qualifier 注解</h3><p>可能会有这样一种情况，当你创建多个具有相同类型的 bean 时，并且想要用一个属性只为它们其中的一个进行装配，在这种情况下，你可以使用 <strong>@Qualifier</strong> 注解和 <strong>@Autowired</strong> 注解通过指定哪一个真正的 bean 将会被装配来消除混乱。下面显示的是使用 @Qualifier 注解的一个示例。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><p>让我们使 Eclipse IDE 处于工作状态，请按照下列步骤创建一个 Spring 应用程序：</p><table><thead><tr><th>步骤</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>创建一个名为 <em>SpringExample</em> 的项目，并且在所创建项目的 <strong>src</strong> 文件夹下创建一个名为 <em>com.tutorialspoint</em> 的包。</td></tr><tr><td>2</td><td>使用 <em>Add External JARs</em> 选项添加所需的 Spring 库文件，就如在 <em>Spring Hello World Example</em> 章节中解释的那样。</td></tr><tr><td>3</td><td>在 <em>com.tutorialspoint</em> 包下创建 Java 类 <em>Student</em>，<em>Profile</em> 和 <em>MainApp</em>。</td></tr><tr><td>4</td><td>在 <strong>src</strong> 文件夹下创建 Beans 配置文件 <em>Beans.xml</em>。</td></tr><tr><td>5</td><td>最后一步是创建所有 Java 文件和 Bean 配置文件的内容，并且按如下解释的那样运行应用程序。</td></tr></tbody></table><p>这里是 <strong>Student.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Integer age;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">   &#125;   </span><br><span class="line">   <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;  </span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是 <strong>Profile.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Qualifier;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Profile</span> &#123;</span><br><span class="line">   <span class="meta">@Autowired</span></span><br><span class="line">   <span class="meta">@Qualifier(&quot;student1&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> Student student;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">Profile</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside Profile constructor.&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printAge</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Age : &quot;</span> + student.getAge() );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printName</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Name : &quot;</span> + student.getName() );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">Profile</span> <span class="variable">profile</span> <span class="operator">=</span> (Profile) context.getBean(<span class="string">&quot;profile&quot;</span>);</span><br><span class="line">      profile.printAge();</span><br><span class="line">      profile.printName();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考虑下面配置文件 <strong>Beans.xml</strong> 的示例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for profile bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;profile&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.Profile&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for student1 bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.Student&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;Zara&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for student2 bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.Student&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;Nuha&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你在源文件和 bean 配置文件中完成了上面两处改变，让我们运行一下应用程序。如果你的应用程序一切都正常的话，这将会输出以下消息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Inside Profile constructor.</span><br><span class="line">Age : 11</span><br><span class="line">Name : Zara</span><br></pre></td></tr></table></figure><h3 id="Spring-JSR-250-注释"><a href="#Spring-JSR-250-注释" class="headerlink" title="Spring JSR-250 注释"></a>Spring JSR-250 注释</h3><p>Spring还使用基于 JSR-250 注释，它包括 @PostConstruct， @PreDestroy 和 @Resource 注释。因为你已经有了其他的选择，尽管这些注释并不是真正所需要的，但是关于它们仍然让我给出一个简短的介绍。</p><h4 id="PostConstruct-和-PreDestroy-注释："><a href="#PostConstruct-和-PreDestroy-注释：" class="headerlink" title="@PostConstruct 和 @PreDestroy 注释："></a>@PostConstruct 和 @PreDestroy 注释：</h4><p>为了定义一个 bean 的安装和卸载，我们使用 <strong>init-method</strong> 和&#x2F;或 <strong>destroy-method</strong> 参数简单的声明一下 。init-method 属性指定了一个方法，该方法在 bean 的实例化阶段会立即被调用。同样地，destroy-method 指定了一个方法，该方法只在一个 bean 从容器中删除之前被调用。</p><p>你可以使用 <strong>@PostConstruct</strong> 注释作为初始化回调函数的一个替代，**@PreDestroy** 注释作为销毁回调函数的一个替代，其解释如下示例所示。</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><p>让我们使 Eclipse IDE 处于工作状态，请按照下列步骤创建一个 Spring 应用程序：</p><table><thead><tr><th>步骤</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>创建一个名为 <em>SpringExample</em> 的项目，并且在所创建项目的 <strong>src</strong> 文件夹下创建一个名为 <em>com.tutorialspoint</em> 的包。</td></tr><tr><td>2</td><td>使用 <em>Add External JARs</em> 选项添加所需的 Spring 库文件，就如在 <em>Spring Hello World Example</em> 章节中解释的那样。</td></tr><tr><td>3</td><td>在 <em>com.tutorialspoint</em> 包下创建 Java 类 <em>HelloWorld</em> 和 <em>MainApp</em>。</td></tr><tr><td>4</td><td>在 <strong>src</strong> 文件夹下创建 Beans 配置文件 <em>Beans.xml</em>。</td></tr><tr><td>5</td><td>最后一步是创建所有 Java 文件和 Bean 配置文件的内容，并且按如下解释的那样运行应用程序。</td></tr></tbody></table><p>这里是 <strong>HelloWorld.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.*;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String message;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message  = message;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Your Message : &quot;</span> + message);</span><br><span class="line">      <span class="keyword">return</span> message;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@PostConstruct</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Bean is going through init.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@PreDestroy</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Bean will destroy now.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容。这里你需要注册一个关闭钩 <strong>registerShutdownHook()</strong> 方法，该方法在 AbstractApplicationContext 类中被声明。这将确保一个完美的关闭并调用相关的销毁方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.AbstractApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">AbstractApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">                          <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">HelloWorld</span> <span class="variable">obj</span> <span class="operator">=</span> (HelloWorld) context.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line">      obj.getMessage();</span><br><span class="line">      context.registerShutdownHook();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置文件 <strong>Beans.xml</strong>，该文件在初始化和销毁方法中需要使用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">    xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">    xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">    xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">    http://www.springframework.org/schema/context/spring-context-3.0.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">   &lt;context:annotation-config/&gt;</span><br><span class="line"></span><br><span class="line">   &lt;bean id=<span class="string">&quot;helloWorld&quot;</span> </span><br><span class="line">       class=<span class="string">&quot;com.tutorialspoint.HelloWorld&quot;</span></span><br><span class="line">       init-method=<span class="string">&quot;init&quot;</span> destroy-method=<span class="string">&quot;destroy&quot;</span>&gt;</span><br><span class="line">       &lt;property name=<span class="string">&quot;message&quot;</span> value=<span class="string">&quot;Hello World!&quot;</span>/&gt;</span><br><span class="line">   &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>一旦你在源文件和 bean 配置文件中完成了上面两处改变，让我们运行一下应用程序。如果你的应用程序一切都正常的话，这将会输出以下消息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Bean is going through init.</span><br><span class="line">Your Message : Hello World!</span><br><span class="line">Bean will destroy now.</span><br></pre></td></tr></table></figure><h3 id="Resource-注释："><a href="#Resource-注释：" class="headerlink" title="@Resource 注释："></a>@Resource 注释：</h3><p>你可以在字段中或者 setter 方法中使用 <strong>@Resource</strong> 注释，它和在 Java EE 5 中的运作是一样的。@Resource 注释使用一个 ‘name’ 属性，该属性以一个 bean 名称的形式被注入。你可以说，它遵循 <strong>by-name</strong> 自动连接语义，如下面的示例所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">   <span class="meta">@Resource(name= &quot;spellChecker&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSpellChecker</span><span class="params">( SpellChecker spellChecker )</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.spellChecker = spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> SpellChecker <span class="title function_">getSpellChecker</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spellCheck</span><span class="params">()</span>&#123;</span><br><span class="line">      spellChecker.checkSpelling();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果没有明确地指定一个 ‘name’，默认名称源于字段名或者 setter 方法。在字段的情况下，它使用的是字段名；在一个 setter 方法情况下，它使用的是 bean 属性名称。</p><h3 id="Spring-基于-Java-的配置"><a href="#Spring-基于-Java-的配置" class="headerlink" title="Spring 基于 Java 的配置"></a>Spring 基于 Java 的配置</h3><p>2020-09-04 16:27 更新</p><h4 id="基于-Java-的配置"><a href="#基于-Java-的配置" class="headerlink" title="基于 Java 的配置"></a>基于 Java 的配置</h4><p>到目前为止，你已经看到如何使用 XML 配置文件来配置 Spring bean。如果你熟悉使用 XML 配置，那么我会说，不需要再学习如何进行基于 Java 的配置是，因为你要达到相同的结果，可以使用其他可用的配置。</p><p>基于 Java 的配置选项，可以使你在不用配置 XML 的情况下编写大多数的 Spring，但是一些有帮助的基于 Java 的注解，解释如下：</p><h4 id="Configuration-和-Bean-注解"><a href="#Configuration-和-Bean-注解" class="headerlink" title="@Configuration 和 @Bean 注解"></a>@Configuration 和 @Bean 注解</h4><p>带有 <strong>@Configuration</strong> 的注解类表示这个类可以使用 Spring IoC 容器作为 bean 定义的来源。**@Bean** 注解告诉 Spring，一个带有 @Bean 的注解方法将返回一个对象，该对象应该被注册为在 Spring 应用程序上下文中的 bean。最简单可行的 @Configuration 类如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldConfig</span> &#123;</span><br><span class="line">   <span class="meta">@Bean</span> </span><br><span class="line">   <span class="keyword">public</span> HelloWorld <span class="title function_">helloWorld</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HelloWorld</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码将等同于下面的 XML 配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloWorld&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.HelloWorld&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里，带有 @Bean 注解的方法名称作为 bean 的 ID，它创建并返回实际的 bean。你的配置类可以声明多个 @Bean。一旦定义了配置类，你就可以使用 <em>AnnotationConfigApplicationContext</em> 来加载并把他们提供给 Spring 容器，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> </span><br><span class="line">   <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(HelloWorldConfig.class); </span><br><span class="line">   <span class="type">HelloWorld</span> <span class="variable">helloWorld</span> <span class="operator">=</span> ctx.getBean(HelloWorld.class);</span><br><span class="line">   helloWorld.setMessage(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">   helloWorld.getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以加载各种配置类，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> </span><br><span class="line">   <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>();</span><br><span class="line">   ctx.register(AppConfig.class, OtherConfig.class);</span><br><span class="line">   ctx.register(AdditionalConfig.class);</span><br><span class="line">   ctx.refresh();</span><br><span class="line">   <span class="type">MyService</span> <span class="variable">myService</span> <span class="operator">=</span> ctx.getBean(MyService.class);</span><br><span class="line">   myService.doStuff();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="例子-4"><a href="#例子-4" class="headerlink" title="例子"></a>例子</h4><p>让我们在恰当的位置使用 Eclipse IDE，然后按照下面的步骤来创建一个 Spring 应用程序：</p><table><thead><tr><th>步骤</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>创建一个名称为 <em>SpringExample</em> 的项目，并且在创建项目的 <strong>src</strong> 文件夹中创建一个包 <em>com.tutorialspoint</em>。</td></tr><tr><td>2</td><td>使用 <em>Add External JARs</em> 选项，添加所需的 Spring 库,解释见 <em>Spring Hello World Example</em> 章节。</td></tr><tr><td>3</td><td>因为你是使用基于 java 的注解，所以你还需要添加来自 Java 安装目录的 <em>CGLIB.jar</em> 和可以从 <em>asm.ow2.org</em> 中下载的 ASM.jar 库。</td></tr><tr><td>4</td><td>在 <em>com.tutorialspoint</em> 包中创建 Java 类 <em>HelloWorldConfig</em>、<em>HelloWorld</em> 和 <em>MainApp</em>。</td></tr><tr><td>5</td><td>最后一步是创建的所有 Java 文件和 Bean 配置文件的内容，并运行应用程序，解释如下所示。</td></tr></tbody></table><p>这里是 <strong>HelloWorldConfig.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldConfig</span> &#123;</span><br><span class="line">   <span class="meta">@Bean</span> </span><br><span class="line">   <span class="keyword">public</span> HelloWorld <span class="title function_">helloWorld</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HelloWorld</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是 <strong>HelloWorld.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message  = message;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Your Message : &quot;</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> </span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(HelloWorldConfig.class);</span><br><span class="line"></span><br><span class="line">      <span class="type">HelloWorld</span> <span class="variable">helloWorld</span> <span class="operator">=</span> ctx.getBean(HelloWorld.class);</span><br><span class="line"></span><br><span class="line">      helloWorld.setMessage(<span class="string">&quot;Hello World!&quot;</span>);</span><br><span class="line">      helloWorld.getMessage();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦你完成了创建所有的源文件并添加所需的额外的库后，我们就可以运行该应用程序。你应该注意这里不需要配置文件。如果你的应用程序一切都正常，将输出以下信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Your Message : Hello World!</span><br></pre></td></tr></table></figure><h4 id="注入-Bean-的依赖性"><a href="#注入-Bean-的依赖性" class="headerlink" title="注入 Bean 的依赖性"></a>注入 Bean 的依赖性</h4><p>当 @Beans 依赖对方时，表达这种依赖性非常简单，只要有一个 bean 方法调用另一个，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Foo <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Foo</span>(bar());</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> Bar <span class="title function_">bar</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Bar</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，foo Bean 通过构造函数注入来接收参考基准。现在，让我们看到一个正在执行的例子：</p><h4 id="例子-5"><a href="#例子-5" class="headerlink" title="例子:"></a>例子:</h4><p>让我们在恰当的位置使用 Eclipse IDE，然后按照下面的步骤来创建一个 Spring 应用程序：</p><table><thead><tr><th>步骤</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>创建一个名称为 <em>SpringExample</em> 的项目，并且在创建项目的 <strong>src</strong> 文件夹中创建一个包 <em>com.tutorialspoint</em>。</td></tr><tr><td>2</td><td>使用 <em>Add External JARs</em> 选项，添加所需的 Spring 库,解释见 <em>Spring Hello World Example</em> 章节。</td></tr><tr><td>3</td><td>因为你是使用基于 java 的注解，所以你还需要添加来自 Java 安装目录的 <em>CGLIB.jar</em> 和可以从 <em>asm.ow2.org</em> 中下载的 ASM.jar 库。</td></tr><tr><td>4</td><td>在 <em>com.tutorialspoint</em> 包中创建 Java 类 <em>TextEditorConfig</em>、<em>TextEditor</em>、<em>SpellChecker</em> 和 <em>MainApp</em>。</td></tr><tr><td>5</td><td>最后一步是创建的所有 Java 文件和 Bean 配置文件的内容，并运行应用程序，解释如下所示。</td></tr></tbody></table><p>这里是 <strong>TextEditorConfig.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditorConfig</span> &#123;</span><br><span class="line">   <span class="meta">@Bean</span> </span><br><span class="line">   <span class="keyword">public</span> TextEditor <span class="title function_">textEditor</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TextEditor</span>( spellChecker() );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@Bean</span> </span><br><span class="line">   <span class="keyword">public</span> SpellChecker <span class="title function_">spellChecker</span><span class="params">()</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">SpellChecker</span>( );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里是 TextEditor.java 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TextEditor</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> SpellChecker spellChecker;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">TextEditor</span><span class="params">(SpellChecker spellChecker)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside TextEditor constructor.&quot;</span> );</span><br><span class="line">      <span class="built_in">this</span>.spellChecker = spellChecker;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">spellCheck</span><span class="params">()</span>&#123;</span><br><span class="line">      spellChecker.checkSpelling();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是另一个依赖的类文件 <strong>SpellChecker.java</strong> 的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpellChecker</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="title function_">SpellChecker</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside SpellChecker constructor.&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkSpelling</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Inside checkSpelling.&quot;</span> );</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> </span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(TextEditorConfig.class);</span><br><span class="line"></span><br><span class="line">      <span class="type">TextEditor</span> <span class="variable">te</span> <span class="operator">=</span> ctx.getBean(TextEditor.class);</span><br><span class="line"></span><br><span class="line">      te.spellCheck();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一旦你完成了创建所有的源文件并添加所需的额外的库后，我们就可以运行该应用程序。你应该注意这里不需要配置文件。如果你的应用程序一切都正常，将输出以下信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Inside SpellChecker constructor.</span><br><span class="line">Inside TextEditor constructor.</span><br><span class="line">Inside checkSpelling.</span><br></pre></td></tr></table></figure><h4 id="Import-注解"><a href="#Import-注解" class="headerlink" title="@Import 注解:"></a>@Import 注解:</h4><p><strong>@import</strong> 注解允许从另一个配置类中加载 @Bean 定义。考虑 ConfigA 类，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigA</span> &#123;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> A <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">A</span>(); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以在另一个 Bean 声明中导入上述 Bean 声明，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(ConfigA.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigB</span> &#123;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> B <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">B</span>(); </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，当实例化上下文时，不需要同时指定 ConfigA.class 和 ConfigB.class，只有 ConfigB 类需要提供，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> </span><br><span class="line">   <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ConfigB.class);</span><br><span class="line">   <span class="comment">// now both beans A and B will be available...</span></span><br><span class="line">   <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> ctx.getBean(A.class);</span><br><span class="line">   <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> ctx.getBean(B.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="生命周期回调"><a href="#生命周期回调" class="headerlink" title="生命周期回调"></a>生命周期回调</h4><p>@Bean 注解支持指定任意的初始化和销毁的回调方法，就像在 bean 元素中 Spring 的 XML 的初始化方法和销毁方法的属性：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// initialization logic</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cleanup</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="comment">// destruction logic</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">   <span class="meta">@Bean(initMethod = &quot;init&quot;, destroyMethod = &quot;cleanup&quot; )</span></span><br><span class="line">   <span class="keyword">public</span> Foo <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>指定 Bean 的范围：</p><p>默认范围是单实例，但是你可以重写带有 @Scope 注解的该方法，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> Foo <span class="title function_">foo</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring-中的事件处理"><a href="#Spring-中的事件处理" class="headerlink" title="Spring 中的事件处理"></a>Spring 中的事件处理</h3><p>你已经看到了在所有章节中 Spring 的核心是 <strong>ApplicationContext</strong>，它负责管理 beans 的完整生命周期。当加载 beans 时，ApplicationContext 发布某些类型的事件。例如，当上下文启动时，ContextStartedEvent 发布，当上下文停止时，ContextStoppedEvent 发布。</p><p>通过 ApplicationEvent 类和 ApplicationListener 接口来提供在 ApplicationContext 中处理事件。如果一个 bean 实现 ApplicationListener，那么每次 ApplicationEvent 被发布到 ApplicationContext 上，那个 bean 会被通知。</p><p>Spring 提供了以下的标准事件：</p><table><thead><tr><th>序号</th><th>Spring 内置事件 &amp; 描述</th></tr></thead><tbody><tr><td>1</td><td><strong>ContextRefreshedEvent</strong>ApplicationContext 被初始化或刷新时，该事件被发布。这也可以在 ConfigurableApplicationContext 接口中使用 refresh() 方法来发生。</td></tr><tr><td>2</td><td><strong>ContextStartedEvent</strong>当使用 ConfigurableApplicationContext 接口中的 start() 方法启动 ApplicationContext 时，该事件被发布。你可以调查你的数据库，或者你可以在接受到这个事件后重启任何停止的应用程序。</td></tr><tr><td>3</td><td><strong>ContextStoppedEvent</strong>当使用 ConfigurableApplicationContext 接口中的 stop() 方法停止 ApplicationContext 时，发布这个事件。你可以在接受到这个事件后做必要的清理的工作。</td></tr><tr><td>4</td><td><strong>ContextClosedEvent</strong>当使用 ConfigurableApplicationContext 接口中的 close() 方法关闭 ApplicationContext 时，该事件被发布。一个已关闭的上下文到达生命周期末端；它不能被刷新或重启。</td></tr><tr><td>5</td><td><strong>RequestHandledEvent</strong>这是一个 web-specific 事件，告诉所有 bean HTTP 请求已经被服务。</td></tr></tbody></table><p>由于 Spring 的事件处理是单线程的，所以如果一个事件被发布，直至并且除非所有的接收者得到的该消息，该进程被阻塞并且流程将不会继续。因此，如果事件处理被使用，在设计应用程序时应注意。</p><h4 id="监听上下文事件"><a href="#监听上下文事件" class="headerlink" title="监听上下文事件"></a>监听上下文事件</h4><p>为了监听上下文事件，一个 bean 应该实现只有一个方法 <strong>onApplicationEvent()</strong> 的 ApplicationListener 接口。因此，我们写一个例子来看看事件是如何传播的，以及如何可以用代码来执行基于某些事件所需的任务。</p><p>让我们在恰当的位置使用 Eclipse IDE，然后按照下面的步骤来创建一个 Spring 应用程序：</p><table><thead><tr><th>步骤</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>创建一个名称为 SpringExample 的项目，并且在创建项目的 <strong>src</strong> 文件夹中创建一个包 com.tutorialspoint。</td></tr><tr><td>2</td><td>使用 Add External JARs 选项，添加所需的 Spring 库，解释见 Spring Hello World Example 章节。</td></tr><tr><td>3</td><td>在 com.tutorialspoint 包中创建 Java 类 HelloWorld、CStartEventHandler、CStopEventHandler 和 MainApp。</td></tr><tr><td>4</td><td>在 <strong>src</strong> 文件夹中创建 Bean 的配置文件 Beans.xml。</td></tr><tr><td>5</td><td>最后一步是创建的所有 Java 文件和 Bean 配置文件的内容，并运行应用程序，解释如下所示。</td></tr></tbody></table><p>这里是 <strong>HelloWorld.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> String message;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">      <span class="built_in">this</span>.message  = message;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Your Message : &quot;</span> + message);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>CStartEventHandler.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.ContextStartedEvent;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CStartEventHandler</span> </span><br><span class="line">   <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ContextStartedEvent&gt;&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ContextStartedEvent event)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;ContextStartedEvent Received&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>CStopEventHandler.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.event.ContextStoppedEvent;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CStopEventHandler</span> </span><br><span class="line">   <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;ContextStoppedEvent&gt;&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(ContextStoppedEvent event)</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;ContextStoppedEvent Received&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Let us raise a start event.</span></span><br><span class="line">      context.start();</span><br><span class="line"></span><br><span class="line">      <span class="type">HelloWorld</span> <span class="variable">obj</span> <span class="operator">=</span> (HelloWorld) context.getBean(<span class="string">&quot;helloWorld&quot;</span>);</span><br><span class="line"></span><br><span class="line">      obj.getMessage();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Let us raise a stop event.</span></span><br><span class="line">      context.stop();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置文件 <strong>Beans.xml</strong> 文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloWorld&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.HelloWorld&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello World!&quot;</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cStartEventHandler&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.CStartEventHandler&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;cStopEventHandler&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.CStopEventHandler&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你完成了创建源和 bean 的配置文件，我们就可以运行该应用程序。如果你的应用程序一切都正常，将输出以下消息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ContextStartedEvent Received</span><br><span class="line">Your Message : Hello World!</span><br><span class="line">ContextStoppedEvent Received</span><br></pre></td></tr></table></figure><h3 id="Spring-中的自定义事件"><a href="#Spring-中的自定义事件" class="headerlink" title="Spring 中的自定义事件"></a>Spring 中的自定义事件</h3><p>编写和发布自己的自定义事件有许多步骤。按照在这一章给出的说明来编写，发布和处理自定义 Spring 事件。</p><table><thead><tr><th>步骤</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>创建一个名称为 SpringExample 的项目，并且在创建项目的 <strong>src</strong> 文件夹中创建一个包 com.tutorialspoint。</td></tr><tr><td>2</td><td>使用 Add External JARs 选项，添加所需的 Spring 库，解释见 Spring Hello World Example 章节。</td></tr><tr><td>3</td><td>通过扩展 <strong>ApplicationEvent</strong>,创建一个事件类 CustomEvent。这个类必须定义一个默认的构造函数，它应该从 ApplicationEvent 类中继承的构造函数。</td></tr><tr><td>4</td><td>一旦定义事件类，你可以从任何类中发布它，假定 EventClassPublisher 实现了 ApplicationEventPublisherAware。你还需要在 XML 配置文件中声明这个类作为一个 bean，之所以容器可以识别 bean 作为事件发布者，是因为它实现了 ApplicationEventPublisherAware 接口。</td></tr><tr><td>5</td><td>发布的事件可以在一个类中被处理，假定 EventClassHandler 实现了 ApplicationListener 接口，而且实现了自定义事件的 onApplicationEvent 方法。</td></tr><tr><td>6</td><td>在 <strong>src</strong> 文件夹中创建 bean 的配置文件 Beans.xml 和 MainApp 类，它可以作为一个 Spring 应用程序来运行。</td></tr><tr><td>7</td><td>最后一步是创建的所有 Java 文件和 Bean 配置文件的内容，并运行应用程序，解释如下所示。</td></tr></tbody></table><p>这个是 <strong>CustomEvent.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.handle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEvent;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomEvent</span> <span class="keyword">extends</span> <span class="title class_">ApplicationEvent</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CustomEvent</span><span class="params">(Object source)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(source);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Ladidol Event&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>CustomEventPublisher.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.handle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationEventPublisherAware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomEventPublisher</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">ApplicationEventPublisherAware</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ApplicationEventPublisher publisher;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setApplicationEventPublisher</span></span><br><span class="line">            <span class="params">(ApplicationEventPublisher publisher)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.publisher = publisher;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">publish</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">CustomEvent</span> <span class="variable">ce</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CustomEvent</span>(<span class="built_in">this</span>);</span><br><span class="line">        publisher.publishEvent(ce);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>CustomEventHandler.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.handle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomEventHandler</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">ApplicationListener</span>&lt;CustomEvent&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onApplicationEvent</span><span class="params">(CustomEvent event)</span> &#123;</span><br><span class="line">        System.out.println(event.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.feng.handle.CustomEventPublisher;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/26 15:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ConfigurableApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">        <span class="type">CustomEventPublisher</span> <span class="variable">cvp</span> <span class="operator">=</span></span><br><span class="line">                (CustomEventPublisher) context.getBean(<span class="string">&quot;customEventPublisher&quot;</span>);</span><br><span class="line">        cvp.publish();</span><br><span class="line">        cvp.publish();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置文件 <strong>Beans.xml</strong>：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;customEventHandler&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.CustomEventHandler&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;customEventPublisher&quot;</span> </span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.CustomEventPublisher&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你完成了创建源和 bean 的配置文件后，我们就可以运行该应用程序。如果你的应用程序一切都正常，将输出以下信息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ladidol Event</span><br><span class="line">Ladidol Event</span><br></pre></td></tr></table></figure><h2 id="Spring-框架的-AOP"><a href="#Spring-框架的-AOP" class="headerlink" title="Spring 框架的 AOP"></a>Spring 框架的 AOP</h2><p>Spring 框架的一个关键组件是<strong>面向切面的编程</strong>(AOP)框架。面向切面的编程需要把程序逻辑分解成不同的部分称为所谓的关注点。跨一个应用程序的多个点的功能被称为<strong>横切关注点</strong>，这些横切关注点在概念上独立于应用程序的业务逻辑。在软件开发过程中有各种各样的很好的切面的例子，如日志记录、审计、声明式事务、安全性和缓存等。</p><p>在 OOP 中，关键单元模块度是类，而在 AOP 中单元模块度是切面。依赖注入帮助你对应用程序对象相互解耦合，AOP 可以帮助你从它们所影响的对象中对横切关注点解耦。AOP 像是编程语言的触发物，如 Perl，.NET，Java 或者其他语言。</p><p>Spring AOP 模块提供拦截器来拦截一个应用程序，例如，当执行一个方法时，你可以在方法执行之前或之后添加额外的功能。</p><h3 id="AOP-术语"><a href="#AOP-术语" class="headerlink" title="AOP 术语"></a>AOP 术语</h3><p>在我们开始使用 AOP 工作之前，让我们熟悉一下 AOP 概念和术语。这些术语并不特定于 Spring，而是与 AOP 有关的。</p><table><thead><tr><th>项</th><th>描述</th></tr></thead><tbody><tr><td>Aspect</td><td>一个模块具有一组提供横切需求的 APIs。例如，一个日志模块为了记录日志将被 AOP 方面调用。应用程序可以拥有任意数量的方面，这取决于需求。</td></tr><tr><td>Join point</td><td>在你的应用程序中它代表一个点，你可以在插件 AOP 方面。你也能说，它是在实际的应用程序中，其中一个操作将使用 Spring AOP 框架。</td></tr><tr><td>Advice</td><td>这是实际行动之前或之后执行的方法。这是在程序执行期间通过 Spring AOP 框架实际被调用的代码。</td></tr><tr><td>Pointcut</td><td>这是一组一个或多个连接点，通知应该被执行。你可以使用表达式或模式指定切入点正如我们将在 AOP 的例子中看到的。</td></tr><tr><td>Introduction</td><td>引用允许你添加新方法或属性到现有的类中。</td></tr><tr><td>Target object</td><td>被一个或者多个方面所通知的对象，这个对象永远是一个被代理对象。也称为被通知对象。</td></tr><tr><td>Weaving</td><td>Weaving 把方面连接到其它的应用程序类型或者对象上，并创建一个被通知的对象。这些可以在编译时，类加载时和运行时完成。</td></tr></tbody></table><h3 id="通知的类型"><a href="#通知的类型" class="headerlink" title="通知的类型"></a>通知的类型</h3><p>Spring 方面可以使用下面提到的五种通知工作：</p><table><thead><tr><th>通知</th><th>描述</th></tr></thead><tbody><tr><td>前置通知</td><td>在一个方法执行之前，执行通知。</td></tr><tr><td>后置通知</td><td>在一个方法执行之后，不考虑其结果，执行通知。</td></tr><tr><td>返回后通知</td><td>在一个方法执行之后，只有在方法成功完成时，才能执行通知。</td></tr><tr><td>抛出异常后通知</td><td>在一个方法执行之后，只有在方法退出抛出异常时，才能执行通知。</td></tr><tr><td>环绕通知</td><td>在建议方法调用之前和之后，执行通知。</td></tr></tbody></table><h3 id="实现自定义方面"><a href="#实现自定义方面" class="headerlink" title="实现自定义方面"></a>实现自定义方面</h3><p>Spring 支持 <strong>@AspectJ annotation style</strong> 的方法和<strong>基于模式</strong>的方法来实现自定义方面。这两种方法已经在下面两个子节进行了详细解释。</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td><a href="https://www.w3cschool.cn/wkspring/omps1mm6.html">XML Schema based</a></td><td>方面是使用常规类以及基于配置的 XML 来实现的。</td></tr><tr><td><a href="https://www.w3cschool.cn/wkspring/k4q21mm8.html">@AspectJ based</a></td><td>@AspectJ 引用一种声明方面的风格作为带有 Java 5 注释的常规 Java 类注释。</td></tr></tbody></table><h2 id="Spring-中基于-AOP-的-XML架构"><a href="#Spring-中基于-AOP-的-XML架构" class="headerlink" title="Spring 中基于 AOP 的 XML架构"></a>Spring 中基于 AOP 的 XML架构</h2><p>为了在本节的描述中使用 aop 命名空间标签，你需要导入 spring-aop j架构，如下所述：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span>    </span><br></pre></td></tr></table></figure><p>在maven中再添加两个依赖,注意不要添加spring-aop依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="声明一个-aspect"><a href="#声明一个-aspect" class="headerlink" title="声明一个 aspect"></a>声明一个 aspect</h3><p>一个 <strong>aspect</strong> 是使用 元素声明的，支持的 bean 是使用 <strong>ref</strong> 属性引用的，如下所示：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;aBean&quot;</span>&gt;</span></span><br><span class="line">   ...</span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;aBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里，“aBean” 将被配置和依赖注入，就像前面的章节中你看到的其他的 Spring bean 一样。</p><h3 id="声明一个切入点"><a href="#声明一个切入点" class="headerlink" title="声明一个切入点"></a>声明一个切入点</h3><p>一个<strong>切入点</strong>有助于确定使用不同建议执行的感兴趣的连接点（即方法）。在处理基于配置的 XML 架构时，切入点将会按照如下所示定义：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;aBean&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;businessService&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">expression</span>=<span class="string">&quot;execution(* com.xyz.myapp.service.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">   ...</span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;aBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>下面的示例定义了一个名为 “businessService” 的切入点，该切入点将与 com.tutorialspoint 包下的 Student 类中的 getName() 方法相匹配：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;aBean&quot;</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;businessService&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">expression</span>=<span class="string">&quot;execution(* com.tutorialspoint.Student.getName(..))&quot;</span>/&gt;</span></span><br><span class="line">   ...</span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;aBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="声明建议"><a href="#声明建议" class="headerlink" title="声明建议"></a>声明建议</h2><p>你可以在<a href="aop:aspect">aop:aspect</a>中使用<a href="aop:{通知类型名}">aop:{通知类型名}</a>元素声明任意五种类型的通知，如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;aBean&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;businessService&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">expression</span>=<span class="string">&quot;execution(* com.xyz.myapp.service.*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- a before advice definition --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;businessService&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">method</span>=<span class="string">&quot;doRequiredTask&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- an after advice definition --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;businessService&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">method</span>=<span class="string">&quot;doRequiredTask&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- an after-returning advice definition --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--The doRequiredTask method must have parameter named retVal --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;businessService&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">returning</span>=<span class="string">&quot;retVal&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">method</span>=<span class="string">&quot;doRequiredTask&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- an after-throwing advice definition --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--The doRequiredTask method must have parameter named ex --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;businessService&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">throwing</span>=<span class="string">&quot;ex&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">method</span>=<span class="string">&quot;doRequiredTask&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- an around advice definition --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;businessService&quot;</span> </span></span><br><span class="line"><span class="tag">         <span class="attr">method</span>=<span class="string">&quot;doRequiredTask&quot;</span>/&gt;</span></span><br><span class="line">   ...</span><br><span class="line">   <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;aBean&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你可以对不同的建议使用相同的 <strong>doRequiredTask</strong> 或者不同的方法。这些方法将会作为 aspect 模块的一部分来定义。</p><h2 id="基于-AOP-的-XML-架构的示例"><a href="#基于-AOP-的-XML-架构的示例" class="headerlink" title="基于 AOP 的 XML 架构的示例"></a>基于 AOP 的 XML 架构的示例</h2><p>为了理解上面提到的基于 AOP 的 XML 架构的概念，让我们编写一个示例，可以实现几个建议。为了在我们的示例中使用几个建议，让我们使 Eclipse IDE 处于工作状态，然后按照如下步骤创建一个 Spring 应用程序：</p><p>在handle包下新建一个TimeHandler类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.handle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TimeHandler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printTime</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前时间CurrentTime = &quot;</span> + System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在com.feng.entity包下新建三个类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">printHelloWorld</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">doPrint</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldImpl1</span> <span class="keyword">implements</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printHelloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Enter HelloWorldImpl1.printHelloWorld()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPrint</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Enter HelloWorldImpl1.doPrint()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorldImpl2</span> <span class="keyword">implements</span> <span class="title class_">HelloWorld</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printHelloWorld</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Enter HelloWorldImpl2.printHelloWorld()&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPrint</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Enter HelloWorldImpl2.doPrint()&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Beans.xml文件:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloWorldImpl1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.entity.HelloWorldImpl1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;helloWorldImpl2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.entity.HelloWorldImpl2&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;timeHandler&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.feng.handle.TimeHandler&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">id</span>=<span class="string">&quot;time&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;timeHandler&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;addAllMethod&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.feng.entity.HelloWorld.*(..))&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;printTime&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;addAllMethod&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;printTime&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;addAllMethod&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>MainApp:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.feng.entity.HelloWorld;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/26 15:50</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">HelloWorld</span> <span class="variable">hw1</span> <span class="operator">=</span> (HelloWorld) ctx.getBean(<span class="string">&quot;helloWorldImpl1&quot;</span>);</span><br><span class="line">        <span class="type">HelloWorld</span> <span class="variable">hw2</span> <span class="operator">=</span> (HelloWorld) ctx.getBean(<span class="string">&quot;helloWorldImpl2&quot;</span>);</span><br><span class="line">        hw1.printHelloWorld();</span><br><span class="line">        System.out.println();</span><br><span class="line">        hw1.doPrint();</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        hw2.printHelloWorld();</span><br><span class="line">        System.out.println();</span><br><span class="line">        hw2.doPrint();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当前时间CurrentTime = 1648373011625</span><br><span class="line">Enter HelloWorldImpl1.printHelloWorld()</span><br><span class="line">当前时间CurrentTime = 1648373011625</span><br><span class="line"></span><br><span class="line">当前时间CurrentTime = 1648373011626</span><br><span class="line">Enter HelloWorldImpl1.doPrint()</span><br><span class="line">当前时间CurrentTime = 1648373011626</span><br><span class="line"></span><br><span class="line">当前时间CurrentTime = 1648373011626</span><br><span class="line">Enter HelloWorldImpl2.printHelloWorld()</span><br><span class="line">当前时间CurrentTime = 1648373011626</span><br><span class="line"></span><br><span class="line">当前时间CurrentTime = 1648373011626</span><br><span class="line">Enter HelloWorldImpl2.doPrint()</span><br><span class="line">当前时间CurrentTime = 1648373011626</span><br></pre></td></tr></table></figure><h2 id="Spring-中基于-AOP-的-AspectJ"><a href="#Spring-中基于-AOP-的-AspectJ" class="headerlink" title="Spring 中基于 AOP 的 @AspectJ"></a>Spring 中基于 AOP 的 @AspectJ</h2><p>@AspectJ 作为通过 Java 5 注释注释的普通的 Java 类，它指的是声明 aspects 的一种风格。通过在你的基于架构的 XML 配置文件中包含以下元素，@AspectJ 支持是可用的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;aop:aspectj-autoproxy/&gt;</span><br></pre></td></tr></table></figure><p>你还需要在你的应用程序的 CLASSPATH 中使用以下 AspectJ 库文件。这些库文件在一个 AspectJ 装置的 ‘lib’ 目录中是可用的，如果没有，你可以在 Internet 中下载它们。</p><ul><li>aspectjrt.jar</li><li>aspectjweaver.jar</li><li>aspectj.jar</li><li>aopalliance.jar</li></ul><h3 id="声明一个-aspect-1"><a href="#声明一个-aspect-1" class="headerlink" title="声明一个 aspect"></a>声明一个 aspect</h3><p>Aspects 类和其他任何正常的 bean 一样，除了它们将会用 @AspectJ 注释之外，它和其他类一样可能有方法和字段，如下所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.xyz;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AspectModule</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它们将在 XML 中按照如下进行配置，就和其他任何 bean 一样：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.xyz.AspectModule&quot;</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- configure properties of aspect here as normal --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="声明一个切入点-1"><a href="#声明一个切入点-1" class="headerlink" title="声明一个切入点"></a>声明一个切入点</h3><p>一个<strong>切入点</strong>有助于确定使用不同建议执行的感兴趣的连接点（即方法）。在处理基于配置的 XML 架构时，切入点的声明有两个部分：</p><ul><li>一个切入点表达式决定了我们感兴趣的哪个方法会真正被执行。</li><li>一个切入点标签包含一个名称和任意数量的参数。方法的真正内容是不相干的，并且实际上它应该是空的。</li></ul><p>下面的示例中定义了一个名为 ‘businessService’ 的切入点，该切入点将与 com.xyz.myapp.service 包下的类中可用的每一个方法相匹配：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.xyz.myapp.service.*.*(..))&quot;)</span> <span class="comment">// expression </span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">businessService</span><span class="params">()</span> &#123;&#125;  <span class="comment">// signature</span></span><br></pre></td></tr></table></figure><p>下面的示例中定义了一个名为 ‘getname’ 的切入点，该切入点将与 com.tutorialspoint 包下的 Student 类中的 getName() 方法相匹配：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.tutorialspoint.Student.getName(..))&quot;)</span> </span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getname</span><span class="params">()</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h3 id="声明建议-1"><a href="#声明建议-1" class="headerlink" title="声明建议"></a>声明建议</h3><p>你可以使用 @{ADVICE-NAME} 注释声明五个建议中的任意一个，如下所示。这假设你已经定义了一个切入点标签方法 businessService()：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;businessService()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBeforeTask</span><span class="params">()</span>&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@After(&quot;businessService()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterTask</span><span class="params">()</span>&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@AfterReturning(pointcut = &quot;businessService()&quot;, returning=&quot;retVal&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterReturnningTask</span><span class="params">(Object retVal)</span>&#123;</span><br><span class="line">  <span class="comment">// you can intercept retVal here.</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@AfterThrowing(pointcut = &quot;businessService()&quot;, throwing=&quot;ex&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAfterThrowingTask</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">  <span class="comment">// you can intercept thrown exception here.</span></span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Around(&quot;businessService()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAroundTask</span><span class="params">()</span>&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>你可以为任意一个建议定义你的切入点内联。下面是在建议之前定义内联切入点的一个示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;execution(* com.xyz.myapp.service.*.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">doBeforeTask</span><span class="params">()</span>&#123;</span><br><span class="line"> ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于-AOP-的-AspectJ-示例"><a href="#基于-AOP-的-AspectJ-示例" class="headerlink" title="基于 AOP 的 @AspectJ 示例"></a>基于 AOP 的 @AspectJ 示例</h3><p>为了理解上面提到的关于基于 AOP 的 @AspectJ 的概念，让我们编写一个示例，可以实现几个建议。为了在我们的示例中使用几个建议，让我们使 Eclipse IDE 处于工作状态，然后按照如下步骤创建一个 Spring 应用程序：</p><table><thead><tr><th>步骤</th><th>描述</th></tr></thead><tbody><tr><td>1</td><td>创建一个名为 <em>SpringExample</em> 的项目，并且在所创建项目的 <strong>src</strong> 文件夹下创建一个名为 <em>com.tutorialspoint</em> 的包。</td></tr><tr><td>2</td><td>使用 <em>Add External JARs</em> 选项添加所需的 Spring 库文件，就如在 <em>Spring Hello World Example</em> 章节中解释的那样。</td></tr><tr><td>3</td><td>在项目中添加 Spring AOP 指定的库文件 <strong>aspectjrt.jar， aspectjweaver.jar</strong> 和 <strong>aspectj.jar</strong>。</td></tr><tr><td>4</td><td>在 <em>com.tutorialspoint</em> 包下创建 Java 类 <strong>Logging</strong>， <em>Student</em> 和 <em>MainApp</em>。</td></tr><tr><td>5</td><td>在 <strong>src</strong> 文件夹下创建 Beans 配置文件 <em>Beans.xml</em>。</td></tr><tr><td>6</td><td>最后一步是创建所有 Java 文件和 Bean 配置文件的内容，并且按如下解释的那样运行应用程序。</td></tr></tbody></table><p>这里是 <strong>Logging.java</strong> 文件的内容。这实际上是 aspect 模块的一个示例，它定义了在各个点调用的方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Aspect;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Pointcut;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Before;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.After;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterThrowing;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.AfterReturning;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.Around;</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Logging</span> &#123;</span><br><span class="line">   <span class="comment">/** Following is the definition for a pointcut to select</span></span><br><span class="line"><span class="comment">    *  all the methods available. So advice will be called</span></span><br><span class="line"><span class="comment">    *  for all the methods.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Pointcut(&quot;execution(* com.tutorialspoint.*.*(..))&quot;)</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">selectAll</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">   <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * This is the method which I would like to execute</span></span><br><span class="line"><span class="comment">    * before a selected method execution.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Before(&quot;selectAll()&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">beforeAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Going to setup student profile.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * This is the method which I would like to execute</span></span><br><span class="line"><span class="comment">    * after a selected method execution.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@After(&quot;selectAll()&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterAdvice</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Student profile has been setup.&quot;</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/** </span></span><br><span class="line"><span class="comment">    * This is the method which I would like to execute</span></span><br><span class="line"><span class="comment">    * when any method returns.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@AfterReturning(pointcut = &quot;selectAll()&quot;, returning=&quot;retVal&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturningAdvice</span><span class="params">(Object retVal)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Returning:&quot;</span> + retVal.toString() );</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * This is the method which I would like to execute</span></span><br><span class="line"><span class="comment">    * if there is an exception raised by any method.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@AfterThrowing(pointcut = &quot;selectAll()&quot;, throwing = &quot;ex&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AfterThrowingAdvice</span><span class="params">(IllegalArgumentException ex)</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;There has been an exception: &quot;</span> + ex.toString());   </span><br><span class="line">   &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>Student.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">   <span class="keyword">private</span> Integer age;</span><br><span class="line">   <span class="keyword">private</span> String name;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.age = age;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Age : &quot;</span> + age );</span><br><span class="line">      <span class="keyword">return</span> age;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Name : &quot;</span> + name );</span><br><span class="line">      <span class="keyword">return</span> name;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printThrowException</span><span class="params">()</span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;Exception raised&quot;</span>);</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是 <strong>MainApp.java</strong> 文件的内容：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.tutorialspoint;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">      <span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">             <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;Beans.xml&quot;</span>);</span><br><span class="line">      <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) context.getBean(<span class="string">&quot;student&quot;</span>);</span><br><span class="line">      student.getName();</span><br><span class="line">      student.getAge();     </span><br><span class="line">      student.printThrowException();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是配置文件 <strong>Beans.xml</strong>：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd </span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/aop </span></span></span><br><span class="line"><span class="string"><span class="tag">    http://www.springframework.org/schema/aop/spring-aop-3.0.xsd &quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for student bean --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;student&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.Student&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;Zara&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>  <span class="attr">value</span>=<span class="string">&quot;11&quot;</span>/&gt;</span>      </span><br><span class="line">   <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">&lt;!-- Definition for logging aspect --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;logging&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.tutorialspoint.Logging&quot;</span>/&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一旦你已经完成的创建了源文件和 bean 配置文件，让我们运行一下应用程序。如果你的应用程序一切都正常的话，这将会输出以下消息：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Going to setup student profile.</span><br><span class="line">Name : Zara</span><br><span class="line">Student profile has been setup.</span><br><span class="line">Returning:Zara</span><br><span class="line">Going to setup student profile.</span><br><span class="line">Age : 11</span><br><span class="line">Student profile has been setup.</span><br><span class="line">Returning:11</span><br><span class="line">Going to setup student profile.</span><br><span class="line">Exception raised</span><br><span class="line">Student profile has been setup.</span><br><span class="line">There has been an exception: java.lang.IllegalArgumentException</span><br><span class="line">.....</span><br><span class="line">other exception content</span><br></pre></td></tr></table></figure><h2 id="Spring-JDBC-框架"><a href="#Spring-JDBC-框架" class="headerlink" title="Spring JDBC 框架"></a>Spring JDBC 框架</h2><p><a href="https://www.w3cschool.cn/wkspring/zjs51h9z.html">传送门</a></p><h3 id="Spring-JDBC-示例"><a href="#Spring-JDBC-示例" class="headerlink" title="Spring JDBC 示例"></a>Spring JDBC 示例</h3><p><a href="https://www.w3cschool.cn/wkspring/iuck1mma.html">传送门</a></p><h3 id="Spring-中-SQL-的存储过程"><a href="#Spring-中-SQL-的存储过程" class="headerlink" title="Spring 中 SQL 的存储过程"></a>Spring 中 SQL 的存储过程</h3><p><a href="https://www.w3cschool.cn/wkspring/3yh61mmc.html">传送门</a></p><p>详情请见w3cschool</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sso单点登录</title>
      <link href="/2022/03/24/sso%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
      <url>/2022/03/24/sso%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP协议的无状态性"><a href="#HTTP协议的无状态性" class="headerlink" title="HTTP协议的无状态性"></a><strong>HTTP协议的无状态性</strong></h2><p>HTTP是无状态协议，浏览器的每一次请求，服务器都会独立处理，不与之前或之后的请求产生关联，所以，任何用户都可以通过浏览器访问服务器资源。 </p><h3 id="session和cookie机制"><a href="#session和cookie机制" class="headerlink" title="session和cookie机制"></a><strong>session和cookie机制</strong></h3><p>其实前文已经有简单的了解cookie和session了。</p><p>session是服务器级别的，cookie是浏览器级别的。</p><p><strong>session：</strong>浏览器第一次请求服务器，服务器创建一个会话，并将会话的id作为响应的一部分发送给浏览器，浏览器存储会话id，之后浏览器的每一次访问服务器都会带上会话id，服务器根据会话id就知道是不是同一个用户了。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220324220432828.png" alt="image-20220324220432828"></p><p><strong>cookie：</strong>session机制每一次浏览器访问服务器，服务器都要判断一次会话id，显然不太合适。于是浏览器来维护会话id就是cookie机制。浏览器每次访问服务器都会自动附带cookie信息。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220324224426998.png" alt="image-20220324224426998"></p><p>cookie和session机制就可以确保一个用户登录到一个系统后，之后的操作在一定时间内就不需要再次登录系统。</p><blockquote><p>以上的 session和 cookie都只适用于<strong>单系统</strong>，但是系统数量变多成为<strong>多系统</strong>时，我们总不能访问一个分支系统就登录一次吧，于是将这些子系统的域名统一到一个顶级域名中，然后将cookie域设置成顶级域名，于是各个子系统之间就可以共享cookie。</p></blockquote><h2 id="何为单点登录？"><a href="#何为单点登录？" class="headerlink" title="何为单点登录？"></a><strong>何为单点登录？</strong></h2><ul><li><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a><strong>是什么</strong></h3></li></ul><p>单点登录全称 single sign on，简称 SSO，指在多系统应用群中登录一个系统，便可在其他所有系统中得到授权而无需再次登录，包括单点登录和单点注销两部分。比如你用<strong>阿里系产品</strong>，你一旦打开浏览器登陆过<strong>淘宝网</strong>，接下来你会发现你再打开<strong>天猫</strong>，其竟然自动登录了！</p><ul><li><h3 id="从哪来"><a href="#从哪来" class="headerlink" title="从哪来"></a><strong>从哪来</strong></h3></li></ul><p>由于共享 cookie有很多局限性。例如：<strong>域名难以统一</strong>，<strong>子系统技术难以统一</strong>。所以，需要一种全新的登录方式实现多系统应用群的登录 <strong>单点登录</strong></p><h2 id="单点登录实现原理"><a href="#单点登录实现原理" class="headerlink" title="单点登录实现原理"></a><strong>单点登录实现原理</strong></h2><ul><li><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a><strong>登录</strong></h3></li></ul><p>sso需要一个独立的<strong>认证中心</strong>，只有认证中心能接受用户的用户名密码等安全信息，其他系统不提供登录入口，只接受认证中心的间接授权。间接授权通过令牌实现，sso认证中心验证用户的用户名密码没问题，创建授权令牌，在接下来的跳转过程中，授权令牌作为参数发送给各个子系统，子系统拿到令牌，即得到了授权，可以借此创建局部会话，局部会话登录方式与单系统的登录方式相同。具体过程如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220324224440940.png" alt="image-20220324224440940"></p><p>操作步骤如下：</p><ol><li>用户访问<strong>系统1</strong>的受保护资源，系统1发现用户未登录，<strong>跳转</strong>至sso认证中心，并将自己的地址作为参数</li><li>sso认证中心发现用户未登录，将用户引导至登录页面</li><li>用户输入用户名密码提交登录申请</li><li>sso认证中心校验用户信息，创建用户与sso认证中心之间的会话，称为全局会话，同时创建授权令牌</li><li>sso认证中心带着令牌跳转会最初的请求地址（系统1）</li><li>系统1拿到令牌，去sso认证中心校验令牌是否有效</li><li>sso认证中心校验令牌，返回有效，注册系统1</li><li>系统1使用该令牌创建与用户的会话，称为局部会话，返回受保护资源</li><li>用户访问系统2的受保护资源</li><li>系统2发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数</li><li>sso认证中心发现用户已登录，跳转回系统2的地址，并附上令牌</li><li>系统2拿到令牌，去sso认证中心校验令牌是否有效</li><li>sso认证中心校验令牌，返回有效，注册系统2</li><li>系统2使用该令牌创建与用户的局部会话，返回受保护资源</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
          <category> 登录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sso </tag>
            
            <tag> 登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文简单搞懂session和cookies</title>
      <link href="/2022/03/24/%E7%AE%80%E5%8D%95%E6%90%9E%E6%87%82cookie%E5%92%8Csession/"/>
      <url>/2022/03/24/%E7%AE%80%E5%8D%95%E6%90%9E%E6%87%82cookie%E5%92%8Csession/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>这里简单聊一下,cookies和session</p><h2 id="为什么需要cookie和session"><a href="#为什么需要cookie和session" class="headerlink" title="为什么需要cookie和session"></a><strong>为什么需要cookie和session</strong></h2><p>在Web发展史中，我们知道浏览器与服务器间采用的是 <code>http</code>协议，而这种协议是<strong>无状态</strong>的，所以这就导致了服务器无法知道是谁在浏览网页，但很明显，一些网页需要知道用户的状态，例如登陆，购物车等。</p><p>所以为了解决这一问题，先后出现了四种技术，分别是<strong>隐藏表单域</strong>，<strong>URL重写</strong>，<strong>cookie</strong>，<strong>session</strong>，而用的最多也是比较重要的就是cookie和session了。</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a><strong>Cookie</strong></h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a><strong>是什么</strong></h3><p><code>cookie</code>是浏览器保存在用户电脑上的一小段文本，通俗的来讲就是当一个用户通过 <code>http</code>访问到服务器时，服务器会将一些 <code>Key/Value</code>键值对返回给客户端浏览器，并给这些数据加上一些限制条件，在条件符合时这个用户下次访问这个服务器时，数据通过请求头又被完整地给带回服务器，服务器根据这些信息来判断不同的用户。</p><blockquote><p>也就是说， <code>cookie</code>是服务器传给客户端并保存在客户端的一段信息，这个 <code>Cookie</code>是有大小，数量限制的！！</p></blockquote><h3 id="Cookie的创建"><a href="#Cookie的创建" class="headerlink" title="Cookie的创建"></a><strong>Cookie的创建</strong></h3><p>当前 <code>Cookie</code>有两个版本，分别对应两种设置响应头：<code>“Set-Cookie”</code>和 <code>“Set-Cookie2”</code>。在Servlet中并不支持Set-Cookie2，所以我们来看看Set-Cookie的属性项：</p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>Cookie的名称，Cookie一旦创建，名称便不可更改</td></tr><tr><td>value</td><td>Cookie的值,键值对</td></tr><tr><td>maxAge</td><td>Cookie失效的时间，单位秒。如果为整数，则该Cookie在maxAge秒后失效。如果为负数，该Cookie为临时Cookie，关闭浏览器即失效，浏览器也不会以任何形式保存该Cookie。如果为0，表示删除该Cookie。默认为-1。</td></tr><tr><td>secure</td><td>该Cookie是否仅被使用安全协议传输。安全协议。安全协议有HTTPS，SSL等，在网络上传输数据之前先将数据加密。默认为false。</td></tr><tr><td>path</td><td>Cookie的使用路径。如果设置为“&#x2F;sessionWeb&#x2F;”，则只有contextPath为“&#x2F;sessionWeb”的程序可以访问该Cookie。如果设置为“&#x2F;”，则本域名下contextPath都可以访问该Cookie。注意最后一个字符必须为“&#x2F;”。</td></tr><tr><td>domain</td><td>可以访问该Cookie的域名。如果设置为“.google.com”，则所有以“google.com”结尾的域名都可以访问该Cookie。注意第一个字符必须为“.”。</td></tr><tr><td>comment</td><td>该Cookie的用处说明，浏览器显示Cookie信息的时候显示该说明。</td></tr><tr><td>version</td><td>Cookie使用的版本号。0表示遵循Netscape的Cookie规范，1表示遵循W3C的RFC 2109规范</td></tr></tbody></table><p>这些属性项，其他的都说的很清楚了，我们来看看<strong>Domain</strong>有什么用：</p><p>现在，我们假设这里有两个域名：</p><blockquote><p>域名A：a.b.f.com.cn 域名B：c.d.f.com.cn</p></blockquote><p>显然，域名A和域名B都是 <code>f.com.cn</code>的子域名</p><ul><li>如果我们在域名A中的Cookie的domain设置为f.com.cn，那么f.com.cn及其子域名都可以获取这个Cookie，即域名A和域名B都可以获取这个Cookie</li><li>如果域名A和域名B同时设置Cookie的doamin为f.com.cn，那么将出现覆盖的现象</li><li>如果域名A没有显式设置Cookie的domain方法，那么domain就为a.b.f.com.cn，不一样的是，这时，域名A的子域名将无法获取这个Cookie</li></ul><p>好的，现在了解完了Set-Cookie的属性项，开始创建Cookie</p><p>Web服务器通过发送一个称为Set-Cookie的http消息来创建一个Cookie：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-Cookie: value[; expires=date][; domain=domain][; path=path][; secure]</span><br></pre></td></tr></table></figure><blockquote><p>这里我们思考一个问题，当我们在服务器创建多个Cookie时，这些Cookie最终是在一个Header项中还是以独立的Header存在的呢？</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220324212645258.png" alt="image-20220324212645258">我们可以看到，构建http返回字节流时是将Header中所有的项顺序写出，而没有进行任何修改。所以可以想象在浏览器在接收http返回的数据时是分别解析每一个Header项。</p><p>接着，在客户端进行保存，如何保存呢？这里又要对Cookie进行进一步的了解</p><h3 id="Cookie的分类"><a href="#Cookie的分类" class="headerlink" title="Cookie的分类"></a><strong>Cookie的分类</strong></h3><ul><li>会话级别Cookie：所谓会话级别Cookie，就是在浏览器关闭之后Cookie就会失效。</li><li>持久级别Cookie：保存在硬盘的Cookie，只要设置了过期时间就是硬盘级别Cookie。</li></ul><p>好的，现在cookie保存在了客户端，当我们去请求一个URL时，浏览器会根据这个URL路径将符合条件的Cookie放在请求头中传给服务器。</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a><strong>Session</strong></h2><h3 id="为啥用session"><a href="#为啥用session" class="headerlink" title="为啥用session"></a>为啥用session</h3><p>Cookie是有大小限制和数量限制的，并且越来越多的Cookie代表客户端和服务器的传输量增加，可不可以每次传的时候不传所有cookie值，而只传一个唯一ID，通过这个ID直接在服务器查找用户信息呢？答案是有的，这就是我们的session。</p><h3 id="Session是基于Cookie来工作的"><a href="#Session是基于Cookie来工作的" class="headerlink" title="Session是基于Cookie来工作的"></a><strong>Session是基于Cookie来工作的</strong></h3><p>同一个客户端每次访问服务器时，只要当浏览器在第一次访问服务器时，服务器设置一个id并保存一些信息(例如登陆就保存用户信息，视具体情况)，并把这个id通过Cookie存到客户端，客户端每次和服务器交互时只传这个id，就可以实现维持浏览器和服务器的状态，而这个ID通常是NAME为JSESSIONID的一个Cookie。</p><h3 id="实际上，有四种方式让Session正常工作："><a href="#实际上，有四种方式让Session正常工作：" class="headerlink" title="实际上，有四种方式让Session正常工作："></a><strong>实际上，有四种方式让Session正常工作：</strong></h3><ul><li>通过URL传递SessionID</li><li>通过Cookie传递SessionID</li><li>通过SSL传递SessionID</li><li>通过隐藏表单传递SessionID</li></ul><p><strong>第一种情况：</strong></p><p>当浏览器不支持Cookie功能时，浏览器会将用户的SessionCookieName(默认为JSESSIONID)重写到用户请求的URL参数中。格式：&#x2F;path&#x2F;Servlet;name&#x3D;value;name2&#x3D;value2?Name3&#x3D;value3</p><p><strong>第三种情况：</strong></p><p>会根据javax.servlet.request.ssl_session属性值设置SessionID。</p><blockquote><p>注：如果客户端支持Cookie，又通过URL重写，Tomcat仍然会解析Cookie中的SessionID并覆盖URL中的SessionID</p></blockquote><h3 id="session工作原理"><a href="#session工作原理" class="headerlink" title="session工作原理"></a><strong>session工作原理</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220324212923083.png" alt="image-20220324212923083"></p><p><strong>一、创建session</strong></p><p>当客户端访问到服务器，服务器会为这个客户端通过request.getSession()方法创建一个Session，如果当前SessionID还没有对应的HttpSession对象，就创建一个新的，并添加到org.apache.catalina.Manager的sessions容器中保存，这就做到了对状态的保持。当然，这个SessionID是唯一的</p><p><strong>二、session保存</strong></p><p>由图可知，session对象已经保存在了Manager类中，StandardManager作为实现类，通过requestedSessionId从StandardManager的sessions集合中取出StandardSession对象。</p><p>我们来看看StandardManager时如何对所有StandardSession对象进行生命周期管理</p><p>当Servlet容器关闭：</p><blockquote><p>StandardManager将持久化没过期的StandardSession对象(必须调用Servlet容器中的stop和start命令，不能直接kill)</p></blockquote><p>当Servlet容器重启时：</p><blockquote><p>StandardManager初始化会重读这个文件，解析出所有session对象。</p></blockquote><p><strong>三、session的销毁</strong></p><p>这里有一个误区，也是我之前的错误理解，就是我将session的生命周期理解成一次会话，浏览器打开就创建，浏览器关闭就销毁，这样理解是错的！！</p><p>session的声明周期是从创建到超时过期</p><p>也就是说，当session创建后，浏览器关闭，会话级别的Cookie被销毁，如果没有超过设定时间，该SessionID对应的session是没有被销毁的，</p><p><strong>检查session失效</strong></p><p>检查每个Session是否失效是在Tomcat的一个后台线程完成的(backgroundProcess()方法中)；除了后台进程检验session是否失效外，调用request.getSession()也会检查该session是否过期，当然，调用这种方法如果过期的话又会重新创建一个新的session。</p><h2 id="小-结"><a href="#小-结" class="headerlink" title="小  结"></a><strong>小  结</strong></h2><h3 id="二者的异同"><a href="#二者的异同" class="headerlink" title="二者的异同"></a><strong>二者的异同</strong></h3><p>相同点(有关系的地方)：</p><ul><li>Session和Cookie都是为了让http协议又状态而存在</li><li>Session通过Cookie工作，Cookie传输的SessionID让Session知道这个客户端到底是谁</li></ul><p>不同点：</p><ul><li>Session将信息保存到服务器，Cookie将信息保存在客户端</li></ul><h3 id="现在主要的工作流程"><a href="#现在主要的工作流程" class="headerlink" title="现在主要的工作流程"></a><strong>现在主要的工作流程</strong></h3><p>当浏览器第一次访问服务器时，服务器创建Session并将SessionID通过Cookie带给浏览器保存在客户端，同时服务器根据业务逻辑保存相应的客户端信息保存在session中；客户端再访问时上传Cookie，服务器得到Cookie后获取里面的SessionID，来维持状态。</p><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果想要深入了解cookies和session&#x3D;&#x3D;&gt;<a href="https://www.cnblogs.com/l199616j/p/11195667.html#_label0">传送门</a></p><p>本文来自：<a href="https://mp.weixin.qq.com/s?__biz=MzU4ODI1MjA3NQ==&mid=2247484429&idx=1&sn=9725b000eac262cb8ad887d637e0195c&chksm=fdded2c9caa95bdfd340ae9f3ba584194be6526d0b1bbd55b64402d8babbc1a28f2b69ea1f13&scene=21#wechat_redirect">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
            <tag> session和cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java学习路线</title>
      <link href="/2022/03/24/%5B%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%5Djava%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
      <url>/2022/03/24/%5B%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF%5Djava%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="a34b177445b97121c2ae5e348bc02bbcc24d419017d0ceb304be65538b874628">c92271cf075fe1244ae5c161f435c003a8840a878c31d67271965e5b503895f170785a346324574f33cf981fb09fed949460a17c7f6509bb22d5540a7abb5f6927d1278b26a4eaac222bb9437e731f56fa404809e7fbae4af77c35deb7ae598d1b127e46c4cbbf835e3063c22b26bac2fefe4003c83466d6b821af437c6149bb90959aa25192eed65628b5afe3d874b09196bac582006204227fbf0187d23fec65a816a3b2f87799bc9f21bca2674b9eff2b912e623b8b227d4b230e54146cb50121b352b46221b2eaf70aa9219d4a1a7ec46bd606a026a5ab7cf436af073386f4f0c1ed33529ee4a6b6b75783daf3414aacb871d1870e888584868a311e755e462461531c57a71fb4e0ff0c48caabc98336722c383f0f7e7290da19ebb57192219da09ed16114fd6de7655d89173b40e712de0fa5dfa00bc48d2435d962e78f573fc9ec628e63615a05058d754aa15ec0adc350c0ec9ede26aa11692d622defe709d096dcd3991a0be23279ebd45467439ca9c7f211b122c83da0e53c2b284426bb347c9e701e671cb07159c23f7e50777f8c20f16cd151a7d8ffd31decfdee0c863585fd180b9a10fd00df29dd2ac039c81324f8c1f6a2a7512104dd5081c9a3437ffef0e94754641e0cb04f463ca4959a1f84af50088e50aa7f7799095c6884e478c7056a5b4ba7bda1a0a2e9ce2e35d0a82543e113774cfca1ecc4ae367aefe92a04db03c8d43984485fed67f4aca8b16c21e9f0c7855fbb44ede323b36fde36d65bd5c982548c352283fe6cf5da3fa77a354cde8bb078088585cdf01f5a3b80f25e099ffe15e01b6c66d71ab413445b734f338b698ceb2199853eb0c62afa1efb47ae7bace5e2a70cc0d4a7fd17690baea6978b353fe0cd056c19c60976146ce2a86f519d365165e77c198ac522aef0a45411006426caf0a88d73acde4b5761b20c62edc661e5eb1fdaf2effa78220338e555c29f1da0ca03e3e2d1ab6b41477b7330d43bec19225d0c0a76533c3ad4fe175d08d4b3223d5a88561679504c3c360243c0d7020dfbbbb6854a70f9783d92b43cccf3036ea3222b0bdbd261c0d276870a752f29b2533bc14b081c04307a7b6de9f81d6616377d0a43f00f0dce04d52546c3c2a8ee0e1094476e2dd1abc24c058acb1c23940a91fa92af8b457da5ea6e273a30c62b1172ee1c1843a728c085606a25b87a513e01a7c8299bbb3aa151dbb01d167987a4de964896bc06b1c219aaf78ea8d957ef000646aae29bc1e583cebd89b1920bed9e661b91aea2a76364901763e109d511033de4563d8dda70dd03ed54a69e4223899d68a7d0cfa6cc26522ffc52881e8822035aa2f02f267697406847473f3f48a6c09725a09c67839fdd61f4eb4b34306b114d3790d3bec93682a05573f23a4b20600e4fc400f2f15e9ce7fed79e21768c7b5adf8d6fd7ca6a19b521826dea888aeeee97fedf7ab2ec7f5455c1517af22dc3e3b8da8b944541f251c4252731c459635b682008d0ecaf41f5584c5b5fd591c3a5a3b800b72c9b0128df67007d9799af4501c7294b56f52b7860eb88b1c7a9452774557f02e3070527f8a7d9607ef65b047a527d6356006d853d12ac9abbbaac3670a783880dee2f51cac96defb4ebc5f5c181e8e45d1638a0186a5941507da379bb91a4917d7b3ac1a908fb47bb632aa6e1c84afa0664f29ca9ffc022e9c8ab1079e8fd6e5cf9f4c53cf130570d29ee5e677b7b01ad5fbb6b52758ced53fbcee63699812dc6b9e31ee254cc20d125e30b982b8b03622630f415530afd74f36079dc202eaba374de8db1913a7e519d4be2626fa04f310b7c69db2a403509364f5d596f37b00a718c15275cab9b71ff3a6cd7c25cb1536582931a62716acaafc0be248068730e75c68821ddc104fff3d728667920d34e4764c21a6761440700459b0974725fd247fcf0c2f43eaf7d96bcc3a95352f23eac6b756810a420722ef260ad58233463e72884494e36fba48edddfc11c14d5379d03790f5b6de6cee81db3db3e4972c03a7d2981de99e64352b65caf067cd3dcb047e74fa1c5089072fa7c383d2007773a4a5fb11489d4f0ce15bc4adefac98d1494f1bf4f758da909252900acd8130269ce818285f0d18ed973b029380554a8a47987844b2c832526d00115a051324d8490ee551d36f2520a8e5daa83c7db39e82db43061a7ceca20c515f46571f30d761823fd03b0a57fe4264b62df9dbe5d46cd1842b7505b450f62dd77057a054fb352e37329d550fd713b2eed5a10b1454c1e7808a4dbb90cf22ac2b3b834d37c9f7ad1a1234d8e194e41c342612ddf7bb0684973474cb4620df73864df95fc030dbc7c67255ce7e54cc59ff83c8022ce07afb9bd06c5089ec6ad2c0f48ef409a6e11a491a0957b1a410595175656bc1f02846d8e34fdc1561974c5fc8435f67688b4d8115584845a5f369cdc5c9b84d25ce0b02abeadcacd75ec0f0d3cfefcf607cade2cc34119e473809049255bbc1ef897400fb8665969bf9132027c8c4334b029d0f254b7ee85e0ec4c4f3d22a697d40a5f5948442136f4c85bd6f65b663b9e17b7610b2e7381862f07ce80cdf3663330a4fa22ef6eb03b1e56981ddff357bd77f0cabf11ee4abc2c9cc653305afdbc718f5b3020bcdc0cec0c79cb3058e9d1d8f9c13c80c0b288b8870eecf3446c4abe6c6d393cdb4c6c809144747ddf5ecd6130b75692d02820c84fc1ad5a404410c0ce938ca34a76a9f1a001e056e753b0147cce5f42dddb3a7fd635a3614558a30cac577c517c1dfd877b4123a58e968bfd3323b1567cc7ecbc737b693044fda942935d7d2abc4f5579730f1c13a1a0519075f1dec0b27e689d331b472b1ee728f22277e6e7e0340d2ee834a7a7b7d2e2bb3b521efa8dd47a3315f73b55263e00c3150cc4ba0e89fbb950d03d73c1a6afc2e9de92655b6204ad56f1b1874ef0eeb95c44e16befad292020fc536e737ae7ae6ba4841b1d2a5869e7f819ca5f329942266a9b8ba2b23a4bb95ac4a2f2649a75a92fe6f033e24c8bfe98b6655321bd695ac71fcbb3118d784d3370f993f5ec82477252a50ee44ab8a7f263c9455f7624489e5980bc4133d4d815c218d37a5a8c27cd25d93079a2431ba8143adad8235bd7fd87237bd5910d72e7e640f6c0c8ff6b9c2ebb95cc7055c46d85dd7a84f56b71281a63cf8b984602517c3776efa55a4babe8c3be8b5f096ee53207b83e60c7df3b0ec85fe97d25c064893c0134cf2019cbb0f0a76a94aa589caa94356e618448f20380ee4a902d9c1cd7c93b35efb4d743c4ad478d2833f7d3eafda5e080d09e81f6d820a26df7181759450ff0d82d0c65bb7518dedf0706e004cd55586741800f53662480129d61f58b5a42a1fdefa735be7bb1193184e220b533f38616f914a29829ea39d3224246c0549d4af32b7ee3b42f10f934a13a6333109a4b26b041d16438611c6777d7796a29d76552ba7d0597157e12a5331d9409e88db41d274418413594f3174355789ab1a26354a0216b2c6fe8db799c06a806a3560a2b6918ba0ab1e79389d6dc71d2782ef16672360761877358dfc53e924c49bd2fb67f458e46bb2a8bb4aa6764574d8ec3ae84c26df5a286c10d47bd0a00483cbf6e645cf1abc6328902efc212f124baa142ad662aa2435bea228afff01eeaf637472cf3e1ee7a0dc296e605b56fd20f9675f3913a415f578638592f4f48d45380d89087d5f2a18c88945e125d90f6325a99cd389d8f4a7ec5f8f25441fd064eb3b4615f847b269c4707aaef6a455fb2211e34ec961128561ba545f30c4eed76c2d267aed4000aed47e7f0bb349d0d64bf8c3d7f03359c94d623aff673d34f644533fcd68b2267b77b7632d795486efc4e63879ed404e9a214dc7957055cad70a5ebd74d30b5dd9537d63488e0a3340ab0b724f3e5c2dba7badd111ecf088aeffe299b37b52c3226956d5003c5d720b1a89b2a61bd1da4b4733955cacdf1f4b56536071beda8ce4677ab105728cf1e1bbaa9e8933a02012c354ae491cd5d773bdb3ddb7096acbbc57e05febc6f1ef995cee80ae977dc982d07a0ccbc6f76127aed1c4ff3e44831a928b37b0ef4d825688148ce00e4fbd59a0b7edc8f9fcadffb1b5c62467c252f786bd550131b6d9fcfb83b3db0033c5d44782bbf22b83ce4eb05e449c6f100dc3f9cd185376a4e91374de162a461243612ecfd88a66d208b84dbd6da7913a8debc7cf5fab7be358f470128adb643f1cb2597e919fb3e13922011543eacd3c1977e14ccf0cff816252116c1e49460a87232c743f555ef0c113dd927dcf535cff3a9e4f79e507d702267cc6977d306ba3cbe6da39f546bd66300f9e8e50967d82ee34f3d090040db663131677869021ec4c940f69cc4447f45038c8de91609dbcf9772eaea1b4e8d16c259ea08170684536ae26edef13cdf4c9595b5af818a9a9514bd07dc31d8ddc62e43f81ad50f08a6f0ca8d5e6c945824a2c00828b6ca9c852288ff2577a3ca997527d7428a1e916662185292007696a96f18929647f09dffb4f759108df96f740ecc5aee0070348a78f74ef8d1072f588e6f9aabf31d1aaa37d0520acbd1851c5c45e5360c35dba99c901149eeba0873cdd442e1c56daef64817f82b9ec665cc593f64730e0bd3f07a67a4c0c7100768</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，博主可能还没写完，所以这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 加密文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity</title>
      <link href="/2022/03/24/%5B%E5%BE%85%E5%AE%8C%E6%88%90%5DSpringSecurity/"/>
      <url>/2022/03/24/%5B%E5%BE%85%E5%AE%8C%E6%88%90%5DSpringSecurity/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="b5a0c05d30200016c8c851a644029cc842f9922923bfa9851e00342f0acde205">c92271cf075fe1244ae5c161f435c003c0fcad1d973217d592d7511503b6cd4a17a50aa8214e8fecebfdda5b6db2167ca55374ab26ba852ed9e7676b72ec2797be2e9610bb1ac702ffd058e8f26bbdc92f7fd66084c09258599ad04842546b88c8ddb7c049858ee8a3a7fce5b4f21116fc5363ae87b8ecf669992580eb14d906f5731a9433910ce397b1fe01205cdca50cf58c01be576b358c9b53d7ceaf2f6f81626a08a578bb593ac99349a832024e</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，博主可能还没写完，所以这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 加密文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>动态规划题集</title>
      <link href="/2022/03/24/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5D%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E9%9B%86/"/>
      <url>/2022/03/24/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5D%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E9%A2%98%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="蓝桥杯2021年第十二届省赛真题-砝码称重"><a href="#蓝桥杯2021年第十二届省赛真题-砝码称重" class="headerlink" title="蓝桥杯2021年第十二届省赛真题-砝码称重"></a>蓝桥杯2021年第十二届省赛真题-砝码称重</h2><p>时间限制: 1Sec 内存限制: 128MB 提交: 1797 解决: 590</p><p><strong>题目描述</strong></p><p>你有一架天平和 N 个砝码，这 N 个砝码重量依次是 W1, W2, · · · , WN。<br>请你计算一共可以称出多少种不同的重量？<br>注意砝码可以放在天平两边。</p><p><strong>输入</strong></p><p>输入的第一行包含一个整数 N。<br>第二行包含 N 个整数：W1, W2, W3, · · · , WN。</p><p><strong>输出</strong></p><p>输出一个整数代表答案。</p><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 4 6</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【样例说明】</span><br><span class="line">能称出的 10 种重量是：1、2、3、4、5、6、7、9、10、11。</span><br><span class="line">1 = 1；</span><br><span class="line">2 = 6 4 (天平一边放 6，另一边放 4)；</span><br><span class="line">3 = 4 1；</span><br><span class="line">4 = 4；</span><br><span class="line">5 = 6 1；</span><br><span class="line">6 = 6；</span><br><span class="line">7 = 1 + 6；</span><br><span class="line">9 = 4 + 6 1；</span><br><span class="line">10 = 4 + 6；</span><br><span class="line">11 = 1 + 4 + 6。</span><br></pre></td></tr></table></figure><p>【评测用例规模与约定】<br>对于 50% 的评测用例，1 ≤ N ≤ 15。<br>对于所有评测用例，1 ≤ N ≤ 100，N 个砝码总重不超过 100000。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">状态转移方程就是:</span><br><span class="line">dp[i]的全部可能=dp[i-1]+和以前的加减新组合</span><br></pre></td></tr></table></figure><p>代码实现：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> class 砝码称重 &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> N;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] W;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> COUNT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        N = scanner.nextInt();</span><br><span class="line">        W = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            sum += W[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        COUNT = sum;</span><br><span class="line">        <span class="comment">//Arrays.sort(W);</span></span><br><span class="line">        dpFaMa();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    状态转移方程就是:</span></span><br><span class="line"><span class="comment">    dp[i]的全部可能=dp[i-1]+和以前的加减新组合</span></span><br><span class="line"><span class="comment">    数组dp[i]的大小为全部砝码的总和  COUNT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dpFaMa</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[W.length][COUNT + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; W.length; i++) &#123;</span><br><span class="line">            <span class="comment">//对于dp数组的初始化  对于目标为0的配重 都置为true</span></span><br><span class="line">            <span class="comment">// 对于每一行和砝码重量相同的目标配重也置为true</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">            dp[i][W[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从第二块砝码开始递推</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">            <span class="comment">//第一列配重为0跳过</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; COUNT + <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="comment">//加当前砝码w[i]之前,就存在的;</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i - <span class="number">1</span>][j]) &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//情况一:砝码和j在一起</span></span><br><span class="line">                <span class="keyword">if</span> (W[i] + j &lt;= COUNT &amp;&amp; dp[i - <span class="number">1</span>][W[i] + j]) &#123;</span><br><span class="line">                    <span class="comment">//当前砝码和目标都放到同一边,然后有已经可以测的重量在另一侧</span></span><br><span class="line">                    <span class="comment">//还有个限制,就是当前砝码,和当前测量j之和不能超过总重,即数组的总重;</span></span><br><span class="line">                    <span class="comment">//如果有的话,当前j就能true</span></span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//情况二:砝码和j分开</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i - <span class="number">1</span>][Math.abs(j - W[i])]) &#123;</span><br><span class="line">                    <span class="comment">//j可以被当前砝码和以前的砝码组成,</span></span><br><span class="line">                    <span class="comment">//或者j加以前的砝码等于当前砝码;</span></span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= COUNT; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[N - <span class="number">1</span>][i]) &#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="53-最大子数组和"><a href="#53-最大子数组和" class="headerlink" title="53.最大子数组和"></a><a href="https://leetcode-cn.com/problems/maximum-subarray/">53.最大子数组和</a></h2><p>题解:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> leetcode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/26 20:40</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_53_</span>最大子数组和 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;-<span class="number">2</span>,<span class="number">1</span>,-<span class="number">3</span>,<span class="number">4</span>,-<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,-<span class="number">5</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> 最大子数组和().maxSubArray(nums));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span>: ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/26 21:08</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Param</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Return</span>:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">class 最大子数组和 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="comment">//只有当以当前节点结尾的子节点,这样来考虑的话,才有dp的影子;</span></span><br><span class="line">        <span class="comment">//当前节点是结尾or开始,max(dp[i]+nums[i],nums[i]);</span></span><br><span class="line">        <span class="comment">//这里能取到当前节点的最优解了,但是下一个节点的最优解就要和最优解maxOld比较</span></span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            dp[i] = Math.max(dp[i-<span class="number">1</span>] + nums[i],nums[i]);</span><br><span class="line">            <span class="keyword">if</span> (dp[i] &gt; max)&#123;</span><br><span class="line">                max = dp[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="70-爬楼梯和青蛙跳阶一样的"><a href="#70-爬楼梯和青蛙跳阶一样的" class="headerlink" title="70.爬楼梯和青蛙跳阶一样的"></a><a href="https://leetcode-cn.com/problems/climbing-stairs/">70.爬楼梯</a>和青蛙跳阶一样的</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> leetcode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/25 15:00</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_70_</span>爬楼梯 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;爬十阶楼梯有 &quot;</span> + <span class="keyword">new</span> 爬楼梯().climbStairs(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class 爬楼梯 &#123;</span><br><span class="line">    <span class="keyword">public</span> Map&lt;Integer, Integer&gt; note = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt; ();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>( n &lt;= <span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//按这种,代表每一次分叉都会开启一次递归,有重复的递归</span></span><br><span class="line"><span class="comment">//        return climbStairs( n - 1) + climbStairs( n - 2);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//按这种,代表每一个台阶都只开启一次递归</span></span><br><span class="line">        <span class="keyword">if</span> (note.containsKey(n))&#123;</span><br><span class="line">            <span class="keyword">return</span> note.get(n);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            note.put(n,climbStairs(n-<span class="number">1</span>)+climbStairs(n-<span class="number">2</span>));</span><br><span class="line">            <span class="keyword">return</span> note.get(n);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="300-最长递增子序列"><a href="#300-最长递增子序列" class="headerlink" title="300.最长递增子序列"></a><a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/">300.最长递增子序列</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> leetcode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/25 16:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_300_</span>最长递增子序列 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">10</span>,<span class="number">9</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">101</span>,<span class="number">18</span>&#125;;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> 最长递增子序列().lengthOfLIS(nums));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class 最长递增子序列 &#123;</span><br><span class="line">    <span class="comment">//dp(i) =max(dp(j))+1，</span></span><br><span class="line">    <span class="comment">// 存在j属于区间[0，i-1],并且num[i]&gt;num[j]。</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxLen</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&gt;nums[j])&#123;</span><br><span class="line">                    <span class="comment">//这里只能这样,因为,如果是元dp[i],就不加一</span></span><br><span class="line">                    dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            maxLen = Math.max(dp[i],maxLen);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxLen;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="121-买股票最佳时机"><a href="#121-买股票最佳时机" class="headerlink" title="121.买股票最佳时机"></a><a href="https://leetcode-cn.com/problems/best-time-to-buy-and-sell-stock/">121.买股票最佳时机</a></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> leetcode;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/26 19:36</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">_121_</span>买股票最佳时机 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums1 = &#123;<span class="number">7</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>,<span class="number">4</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] nums2 = &#123;<span class="number">7</span>,<span class="number">6</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">1</span>&#125;;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> 买股票().maxProfit(nums1));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class 买股票 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">maxProfit</span><span class="params">(<span class="type">int</span>[] prices)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//数组中存有当前的现金;</span></span><br><span class="line">        <span class="comment">//每一个天有两个状态,持有股票1和没有持有股票0</span></span><br><span class="line">        <span class="comment">//持有股票的情况来自于,今天买的or昨天及之前就买了的,然后天持有的股票一定是今天以前最低价买来的;</span></span><br><span class="line">        <span class="comment">//没有股票的情况来自于,今天卖出去了股票or昨天及之前就卖了的</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//dp[i][0]没持股票,dp[i][0]=max(dp[i-1][0],dp[i-1][1]+prices[i])</span></span><br><span class="line">        <span class="comment">//dp[i][1]持有股票,dp[i][1]=max(dp[i-1][1],-prices[i])</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> prices.length;</span><br><span class="line">        <span class="type">int</span>[][] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n][<span class="number">2</span>];</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">1</span>] = -prices[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span> ; i&lt; n; i++)&#123;</span><br><span class="line">            dp[i][<span class="number">0</span>]=Math.max(dp[i-<span class="number">1</span>][<span class="number">0</span>],dp[i-<span class="number">1</span>][<span class="number">1</span>]+prices[i]);</span><br><span class="line">            dp[i][<span class="number">1</span>]=Math.max(dp[i-<span class="number">1</span>][<span class="number">1</span>],-prices[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n-<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> dp动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学长的面经汇总</title>
      <link href="/2022/03/24/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5D%E5%AD%A6%E9%95%BF%E7%9A%84%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB/"/>
      <url>/2022/03/24/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5D%E5%AD%A6%E9%95%BF%E7%9A%84%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="5d7e83154fc4781a5eb4f9d56901248b15245b8ea064b55f073cc087d598caa4">c92271cf075fe1244ae5c161f435c003a8840a878c31d67271965e5b503895f1991d18e227238b4315061b8582d45c1259524635c76b694672b7fd9ab271d43186321687473b3a040c3e0d41cba55dd3e3628f8ff6ab43ccc78690f69f55c6240124995b9b1f79903e7757d7c871f6b66a27f6e8e3166b9deaf373dcfd40d72062edff2711b6cbdae4325fae6ca37c59ad66d63e954fe11a93780737b806919ae35cd5157eba6cce67912840e469b1948bec16ef59fd31c505f08992121a210dc2dc859d9ee6424dc676c4fd9dbc9a28e1eed822cc2619596cc6b9033c4d450f46783b8d59ebc2bd88ebf8c303f79a0261b781396f378134b197a9d08100f61949591428f8de5b085e95075aba3486838a8524069419d3b8e62596b378c1ae56072e4704b96a2c9cc2f9869efcab452301d4b4d87387b73f3e1210b3d82456e15b53172576ad1bd71fc9566070089e3dfcf46254317c06d8d0aff0ba94990d70a5fb74ce4c26a69e94507cc5c04b33fbeb48af702be528824c0a6c73c1965931dbc136cacad449ae14992be63e0a30efa0fe8e1a87baca5409e83c015e1bd8c8e2ed92020cc166fc641427c23267ba6c419c6caee6b893f733ed7d17eb26738664dd283b047d0300b2c57450b683156282a36822ace3dd04dae534a28b8c6938178134bae9b46895df169ce43f21a967289cd4c0ebf0e5822099f98191d2cc374727db7f6703bfa5afb97fa1bf8659d21657cc528d404771b41482de03db06439538f1a0ea8b47ac063b63c2c8abc7e3185facc5ab0ec57be7fbdfa707e4648aead2a78875e2e4a1b10c59ba59b3ce45303054e3fb653b93dc30a45a343accc5a6247949144845d6056b3b7163dfb50476f11fc71c9bdca058b411d6a3ac0ee2fa9fff9a25a992882da7ba944ba5a9d00376d13838822ee1a88e9e02998f217964f39cd7df222c0cc52966b50d81631d997ecca9d9d667a5a74f2388a8e8c68cd3db907ff92d97acbed88c71189d0e2fcbf5dd975909b6ded6c28485fba7f799ec072b0fba46c3aa88ff04343a038a9c68dc021bc6ebaceaf4335592469b1761c14986d20de5e89d5961a751486492d2213ac2f304d6dbe16900eb7ffd10da9227d2fb50e6c9bc6bb922215cecfafef5ea4894ee9da105c91c48b2ba87d5020af21190dfb97c6526afff79e8779901ddccfbcbef3e35702e8e0f0a1bb577a897f9f747873ab61fd2177b4b43598a04eefeb9cc5e65639ca28d056d8b771c4ea39bf409a9c756ed0b781b07ae420dc2afc6deabbe38ee42d06841db706b87703e6d12bb62f081ef8d97ba08f2bb72cca6921fe6a9c7e514b6d03bddfa1ce578e6de323eeaa5b7cec378bf1a4a7673998c84a1ef71c139f751ab86a650f9aec0d6d2f5353c8dc1d2a4aa93e6df2e1aa3a4c669b7aa2dc205bdac8bab74367a5e6e06ac0ef3c534a99c64b88bd6d094e02d5a3ece0c3324f39029505cd9863979232fc6abb8b3f2f21ec959fd48906cc71e369aef38b084b9942dea463d24645a36d547e89fe9caede1516b98e7dec58c7cfbcf94384217fedb47456e9677e0fb373912c44ecd6475d8d158c3f1cc9749c4832eaa4762e2eb8782c6934694496dd76a0802f0b127864228e9cfa6b657aba8e2b974e2985e69c90119a95f26be3d42a6d568766559de4a54083472f30c1cd48080d1428d7e64e46ef07976a839dc5119f0ef851f0389c72ceec88bb18129e8f6489c1bcd4a8c670efb012e3957d19cc1dee45df974af8f1e99932f8c06d98bcdad4760c6bfde2ab582bbe08454688a71e58a55fa007eb10fa472a592ae2a840ef9a574a4e989a5c1deab1a299e15c6bd9c21c41879525e7b15945819e4fbfdb60d78a7aca10b17167d94b7f11da8f47bdf268d100117cb9029e6c4ef65981646238174437f71bf305a03977e0d07fdaa84b4a769ee5d9b9544b0a5b3c0b98024adf87db94b1f972b4077476eddc500b9c88556f6017a6b2dd95b9be3efcb04009cc68032ba5d3938de28544264e8c8e46ab4d16b125eb8b8e8a3d84e6e427d8a54c94c8e810c8b39be4094d04f4a3aad9ecbbaa1ee0d2e13f7c24ddaf1d920ffe6fb49e13608a67a32f7cced5091d7d1473d4b66669b2e5d712291b0e7bcf7d68a90fc4ae9fc949d90def23ee245c595323367dec0003dabf4d51e21d93e59ec67a87e3c4ff8bb691ee68ca1bc4c60d5cb5f563f00bec314e106e0de2a2b1e8c9dc39c8fbab9ae77f8c77da861ae5da035f8dde5740fac5c32c42d7f390e11cffaafca437d635f1c6765156f55407143ebaaed74cfc1e8d84570e02b402c26591df98fd24796eb2964f9e29e816e32741299af09dc93ba983de4f0ac3926ac2a84585f243200cf1b19c2e515402a92a9d51b185cfd0a59f6d8e725916d82113cae8bb7a088fff8d595a1a0102413b3162fa9ffa3bd728e28eddcae0b87b346e734687a12628b3f602745cd5f3e2e1fc4bc71fb7a5d31072e1511444c095bccdcf6a76437274de4aa91705ee11544f98da04acf80de3ca816fcf3a3bc0c9f7950e3666f4fb097afef4d295b7f20ba179a433e4ca10728a26e69f4cee7a3a640cd8860a75a95fb5312673a6725e8683922e82f4f272162c6782c4a8a66962f0799fbaf02100feb3b9360da4e01d651260e34764ee95fe52044b96aea05bff3cbb60a9df8128c20b014f6678d794b17edb3fe0dce9ee49cf5cadb3bda7bf5b37f7dcd5fbf361f1e1152fc9ec52e8227e2657240c8284dd9d5ae155f6287b41ba2f0d464bb2a52211835e581da60b9a7f43e93911eb45ae4050e25003e9d20181ceda40c60a67e0f3479fefb873e381b67a8066f811067cab5355702d2baef7f10afbeed19ea8ff44ad987b8d143a60d870731e49816cc21aa5a9d2897c3d1ede8b5c518a443e4ef3dd57c8a30fe2c886d9f28427c888a28da043660e6249f3c40e04f0f04b29880b5dc5237ee6c88ed10ec7a4cbd7f75a6c7dfabcba465aa85ccf97ee8844f9a286916361b3cfbce90a1b480f9b8250649bf704ab5cdc745a8a27f8b21ca3951753d9eb6ac25b6b41ffeb8857d7d6db47dc54b63eedd3b5264eb1ed38fb3f562f034e8bfded62fba58c071287787141f31cd81ee6071dfebdffa343bf03977befb6872fc163aea4f1e106d3630c04faf656efac6a16d107e0e66c797c94982310d0b1204b74e4dba7a9e7d08118cdd32f964bff43a77c77976a0df19861855e79aca5244e90329dae7af02893c3e3505216188d4a7f36dcda7385af158c7405cfd1f7addc7aaff2c6963bb515c14e1416a94fcb6677c990587c8589c019bbdf9d87b02d47dc1e04200698f00a6086848aa25f874955e50c15da21750c5827cd6c3e5c9c3f4562139343129b501c439c99c75d24177517890be4cd58831d1eaa5aaee694ab8c1ea666dc4ceabe61d3eb58aacad6a834150ded3f6ffdbea748b3b3e6a1830cd7bac21984b9bb71eb36735107e0c6d1d0bcb898478615ed57c699a99170cc3f3f4acb03c248b2999e98e8324d36e5948940244243de7ba7ab9e4d2a1e946f4a63255fcf374bb5e1db653e58ca4532328fddc0e3f14418a249a498270d15a31f3a8bdcefe35bc6b85efe2c5e53d838ac166fd20ab3507320138be8dd8977c1f8fb22040af3d76ba52445c330a176d0a93d3e436bf4d6b33b7c429343594e9a6156852560348115aa26701cdeec29d6efd076d4334cb1d7005a1abc62f0e2eaff995b4a3ee7bfbdb2d3006ea13c6fe0783612e764f54ecb900fed228ae09d948d158fd970e2dd7df49e6675db20916f4d9b1cfb02f9e96f791126f2c4545c726c2f4745db21e337960ed04709b3c52c7a919abd282a76470319a9a847053721fd82a36505817897cb65b1d9deca68fe8da9f331237cc5394dc89ccfeb57ba40674422c4531134a5ccfca6a1ff29ae44d185b2659b84bc7657e23d36420e4d6a16dc07929a21a9aceee81e812982754d2008c53b2f54d57f0efae78d13f623f0d52854461c2f8ea64863ea3851e4dcbaeef7e6d3eed9af3f133155aadfd1d8066cddf91ebac59c335330c9160fe84b54ed3bbd833eb11f445bbdfb0f94a8d15c57ae65126fb1d</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，博主可能还没写完，所以这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 加密文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
            <tag> 大厂面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sso简单实现</title>
      <link href="/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dsso%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dsso%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="f4918e94febdc842734c49986474a622604fc3467c5f236711d06a920ec9427b">c92271cf075fe1244ae5c161f435c003d27ecbda7ceb8b7a9afb1afb02623f7c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，博主可能还没写完，所以这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 加密文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析动态规划</title>
      <link href="/2022/03/24/%E6%B5%85%E7%90%86%E8%A7%A3%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2022/03/24/%E6%B5%85%E7%90%86%E8%A7%A3%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>传送门<a href="https://zhuanlan.zhihu.com/p/365698607">动态规划</a></p><ul><li>什么是动态规划？</li><li>动态规划的核心思想</li><li>一个例子走进动态规划</li><li>动态规划的解题套路</li><li>leetcode案例分析</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-b59d18a44f75449af26f34fd65d938cc_720w.jpg" alt="img"></p><h2 id="一、什么是动态规划？"><a href="#一、什么是动态规划？" class="headerlink" title="一、什么是动态规划？"></a>一、什么是动态规划？</h2><p>动态规划（英语：Dynamic programming，简称 DP），是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。动态规划常常适用于有重叠子问题和最优子结构性质的问题。</p><blockquote><p>★ dynamic programming is a method for solving a complex problem by breaking it down into a collection of simpler subproblems.<br>”</p></blockquote><p>以上定义来自维基百科，看定义感觉还是有点抽象。简单来说，动态规划其实就是，给定一个问题，我们把它拆成一个个子问题，直到子问题可以直接解决。然后呢，把子问题答案保存起来，以减少重复计算。再根据子问题答案反推，得出原问题解的一种方法。</p><blockquote><p>★ 一般这些子问题很相似，可以通过函数关系式递推出来。然后呢，动态规划就致力于解决每个子问题一次，减少重复计算,比如斐波那契数列就可以看做入门级的经典动态规划问题。<br>”</p></blockquote><h2 id="二、动态规划核心思想"><a href="#二、动态规划核心思想" class="headerlink" title="二、动态规划核心思想"></a>二、动态规划核心思想</h2><p>动态规划最核心的思想，就在于<strong>拆分子问题，记住过往，减少重复计算</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220325190623706.png" alt="image-20220325190623706"></p><p>我们来看下，网上比较流行的一个例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- A ： &quot;1+1+1+1+1+1+1+1 =？&quot;</span><br><span class="line">- A ： &quot;上面等式的值是多少&quot;</span><br><span class="line">- B ： 计算 &quot;8&quot;</span><br><span class="line">- A : 在上面等式的左边写上 &quot;1+&quot; 呢？</span><br><span class="line">- A : &quot;此时等式的值为多少&quot;</span><br><span class="line">- B : 很快得出答案 &quot;9&quot;</span><br><span class="line">- A : &quot;你怎么这么快就知道答案了&quot;</span><br><span class="line">- A : &quot;只要在8的基础上加1就行了&quot;</span><br><span class="line">- A : &quot;所以你不用重新计算，因为你记住了第一个等式的值为8!动态规划算法也可以说是 &#x27;记住求过的解来节省时间&#x27;&quot;</span><br></pre></td></tr></table></figure><h2 id="三、一个例子带你走进动态规划-–-青蛙跳阶问题"><a href="#三、一个例子带你走进动态规划-–-青蛙跳阶问题" class="headerlink" title="三、一个例子带你走进动态规划 – 青蛙跳阶问题"></a>三、一个例子带你走进动态规划 – 青蛙跳阶问题</h2><h3 id="1-先讲讲暴力递归（自顶向下"><a href="#1-先讲讲暴力递归（自顶向下" class="headerlink" title="1.先讲讲暴力递归（自顶向下)"></a>1.先讲讲暴力递归（自顶向下)</h3><h4 id="常规递归解法-不高效"><a href="#常规递归解法-不高效" class="headerlink" title="常规递归解法(不高效):"></a>常规递归解法(不高效):</h4><blockquote><p>leetcode原题：一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 10 级的台阶总共有多少种跳法。</p></blockquote><p>有些小伙伴第一次见这个题的时候，可能会有点蒙圈，不知道怎么解决。其实可以试想：</p><ul><li>要想跳到第10级台阶，要么是先跳到第9级，然后再跳1级台阶上去;要么是先跳到第8级，然后一次迈2级台阶上去。</li><li>同理，要想跳到第9级台阶，要么是先跳到第8级，然后再跳1级台阶上去;要么是先跳到第7级，然后一次迈2级台阶上去。</li><li>要想跳到第8级台阶，要么是先跳到第7级，然后再跳1级台阶上去;要么是先跳到第6级，然后一次迈2级台阶上去。</li></ul><p>假设跳到第n级台阶的跳数我们定义为f(n)，很显然就可以得出以下公式：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">f（10） = f（9）+f(8)</span><br><span class="line">f (9)  = f(8) + f(7)</span><br><span class="line">f (8)  = f(7) + f(6)</span><br><span class="line">...</span><br><span class="line">f(3) = f(2) + f(1)</span><br><span class="line"></span><br><span class="line">即通用公式为: f(n) = f(n-1) + f(n-2)</span><br></pre></td></tr></table></figure><p>那f(2) 或者 f(1) 等于多少呢？</p><ul><li>当只有2级台阶时，有两种跳法，第一种是直接跳两级，第二种是先跳一级，然后再跳一级。即f(2) &#x3D; 2;</li><li>当只有1级台阶时，只有一种跳法，即f（1）&#x3D; 1；</li></ul><p>因此可以用递归去解决这个问题：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numWays</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">if</span>(n == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numWays(n-<span class="number">1</span>) + numWays(n-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去leetcode提交一下，发现有问题，超出时间限制了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-11825c00527f415cbe77f057fa46ecf7_720w.jpg" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-2dc11311d9321f61c7bb8a3d9058c636_720w.jpg" alt="img"></p><ul><li>要计算原问题 f(10)，就需要先计算出子问题 f(9) 和 f(8)</li><li>然后要计算 f(9)，又要先算出子问题 f(8) 和 f(7)，以此类推。</li><li>一直到 f(2) 和 f(1），递归树才终止。</li></ul><p>我们先来看看这个递归的时间复杂度吧：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">递归时间复杂度 = 解决一个子问题时间*子问题个数</span><br></pre></td></tr></table></figure><ul><li>一个子问题时间 &#x3D; f（n-1）+f（n-2），也就是一个加法的操作，所以复杂度是 O(1)；</li><li>问题个数 &#x3D; 递归树节点的总数，递归树的总节点 &#x3D; 2^n-1，所以是复杂度O(2^n)。</li></ul><p>因此，青蛙跳阶，递归解法的时间复杂度 &#x3D; O(1) * O(2^n) &#x3D; O(2^n)，就是指数级别的，爆炸增长的，如果n比较大的话，超时很正常的了。</p><p>回过头来，你仔细观察这颗递归树，你会发现存在大量重复计算，比如f（8）被计算了两次，f（7）被重复计算了3次…所以这个递归算法低效的原因，就是<strong>存在大量的重复计算</strong>！</p><p>既然存在大量重复计算，那么我们可以先把计算好的答案存下来，即造一个备忘录，等到下次需要的话，先去备忘录查一下，如果有，就直接取就好了，备忘录没有才开始计算，那就可以省去重新重复计算的耗时啦！这就是带备忘录的解法。</p><h4 id="带备忘录的递归解法（高效）"><a href="#带备忘录的递归解法（高效）" class="headerlink" title="带备忘录的递归解法（高效）"></a>带备忘录的递归解法（高效）</h4><p>一般使用一个数组或者一个哈希map充当这个<strong>备忘录</strong>。</p><ul><li>第一步，f（10）&#x3D; f(9) + f(8)，f(9) 和f（8）都需要计算出来，然后再加到备忘录中，如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-f31e17b883d1eb45a906a83760b5e7f3_720w.jpg" alt="img"></p><ul><li>第二步， f(9) &#x3D; f（8）+ f（7），f（8）&#x3D; f（7）+ f(6), 因为 f(8) 已经在备忘录中啦，所以可以省掉，f(7),f（6）都需要计算出来，加到备忘录中~</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-5c553e02bb63d74f9f1f3b91b994f584_720w.jpg" alt="img"></p><p>第三步， f(8) &#x3D; f（7）+ f(6),发现f(8)，f(7),f（6）全部都在备忘录上了，所以都可以剪掉。</p><p><img src="https://pic4.zhimg.com/80/v2-7675d5727f4e81db7fc897051ae2cecf_720w.jpg" alt="img"></p><p>所以呢，用了备忘录递归算法，递归树变成光秃秃的树干咯，如下：</p><p><img src="https://pic2.zhimg.com/80/v2-6c180511b9a2ef31f76c225b50f7cb9d_720w.jpg" alt="img"></p><p>带<strong>备忘录</strong>的递归算法，子问题个数&#x3D;树节点数&#x3D;n，解决一个子问题还是O(1),所以带<strong>备忘录</strong>的递归算法的时间复杂度是O(n)。接下来呢，我们用带<strong>备忘录</strong>的递归算法去撸代码，解决这个青蛙跳阶问题的超时问题咯~，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">//使用哈希map，充当备忘录的作用</span></span><br><span class="line">    Map&lt;Integer, Integer&gt; tempMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numWays</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// n = 0 也算1种</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先判断有没计算过，即看看备忘录有没有</span></span><br><span class="line">        <span class="keyword">if</span> (tempMap.containsKey(n)) &#123;</span><br><span class="line">            <span class="comment">//备忘录有，即计算过，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> tempMap.get(n);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 备忘录没有，即没有计算过，执行递归计算,并且把结果保存到备忘录map中，对1000000007取余（这个是leetcode题目规定的）</span></span><br><span class="line">            tempMap.put(n, (numWays(n - <span class="number">1</span>) + numWays(n - <span class="number">2</span>)) % <span class="number">1000000007</span>);</span><br><span class="line">            <span class="keyword">return</span> tempMap.get(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去leetcode提交一下，如图，稳了：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-5e58ee59743f9c1ac5633e5fb7bdd937_720w.jpg" alt="img"></p><p>其实，还可以用动态规划解决这道题。</p><p>重点来了….用动态规划</p><h3 id="2-再来看看动态规划（自底而上）"><a href="#2-再来看看动态规划（自底而上）" class="headerlink" title="2.再来看看动态规划（自底而上）"></a>2.再来看看动态规划（自底而上）</h3><h4 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h4><p>动态规划跟带备忘录的递归解法基本思想是一致的，都是减少重复计算，时间复杂度也都是差不多。但是呢：</p><ul><li>带备忘录的递归，是从f(10)往f(1）方向延伸求解的，所以也称为<strong>自顶向下</strong>的解法。</li><li>动态规划从较小问题的解，由交叠性质，逐步决策出较大问题的解，它是从f(1)往f(10）方向，往上推求解，所以称为<strong>自底向上</strong>的解法。</li></ul><p>动态规划有几个典型特征，<strong>最优子结构、状态转移方程、边界、重叠子问题</strong>。在青蛙跳阶问题中：</p><ul><li>f(n-1)和f(n-2) 称为 f(n) 的最优子结构</li><li>f(n)&#x3D; f（n-1）+f（n-2）就称为状态转移方程</li><li>f(1) &#x3D; 1, f(2) &#x3D; 2 就是边界啦</li><li>比如f(10)&#x3D; f(9)+f(8),f(9) &#x3D; f(8) + f(7) ,f(8)就是重叠子问题。</li></ul><p>我们来看下自底向上的解法，从f(1)往f(10）方向，想想是不是直接一个for循环就可以解决啦，如下：</p><p><img src="https://pic2.zhimg.com/80/v2-ace286214f56e1f2c70ff22307ac8ea9_720w.jpg" alt="img"></p><p>带备忘录的递归解法，空间复杂度是O(n)，但是呢，仔细观察上图，可以发现，f（n）只依赖前面两个数，所以只需要两个变量a和b来存储，就可以满足需求了，因此空间复杂度是O(1)就可以啦</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-cc5e4b5d5b8bc9062f1c3256792bb5c7_720w.jpg" alt="img"></p><p>动态规划实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numWays</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            temp = (a + b)% <span class="number">1000000007</span>;</span><br><span class="line">            a = b;</span><br><span class="line">            b = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="四、动态规划的解题套路"><a href="#四、动态规划的解题套路" class="headerlink" title="四、动态规划的解题套路"></a>四、动态规划的解题套路</h2><h3 id="什么样的问题可以考虑使用动态规划解决呢？"><a href="#什么样的问题可以考虑使用动态规划解决呢？" class="headerlink" title="什么样的问题可以考虑使用动态规划解决呢？"></a><strong>什么样的问题可以考虑使用动态规划解决呢？</strong></h3><blockquote><p>★ 如果一个问题，可以把所有可能的答案穷举出来，并且穷举出来后，发现存在重叠子问题，就可以考虑使用动态规划。<br>”</p></blockquote><p>比如一些求最值的场景，如<strong>最长递增子序列、最小编辑距离、背包问题、凑零钱问题</strong>等等，都是动态规划的经典应用场景。</p><h3 id="动态规划的解题思路"><a href="#动态规划的解题思路" class="headerlink" title="动态规划的解题思路"></a><strong>动态规划的解题思路</strong></h3><p>动态规划的核心思想就是<strong>拆分子问题，记住过往，减少重复计算。</strong> 并且动态规划一般都是自底向上的，因此到这里，基于<strong>青蛙跳阶</strong>问题，我总结了一下我做动态规划的思路：</p><ul><li>穷举分析</li><li>确定边界</li><li>找出规律，确定最优子结构</li><li>写出状态转移方程</li></ul><h4 id="1-穷举分析"><a href="#1-穷举分析" class="headerlink" title="1. 穷举分析"></a><strong>1. 穷举分析</strong></h4><ul><li>当台阶数是1的时候，有一种跳法，f（1） &#x3D;1</li><li>当只有2级台阶时，有两种跳法，第一种是直接跳两级，第二种是先跳一级，然后再跳一级。即f(2) &#x3D; 2;</li><li>当台阶是3级时，想跳到第3级台阶，要么是先跳到第2级，然后再跳1级台阶上去，要么是先跳到第 1级，然后一次迈 2 级台阶上去。所以f(3) &#x3D; f(2) + f(1) &#x3D;3</li><li>当台阶是4级时，想跳到第3级台阶，要么是先跳到第3级，然后再跳1级台阶上去，要么是先跳到第 2级，然后一次迈 2 级台阶上去。所以f(4) &#x3D; f(3) + f(2) &#x3D;5</li><li>当台阶是5级时……</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-cc5e4b5d5b8bc9062f1c3256792bb5c7_720w.jpg" alt="img"></p><h4 id="2-确定边界"><a href="#2-确定边界" class="headerlink" title="2. 确定边界"></a><strong>2. 确定边界</strong></h4><p>通过穷举分析，我们发现，当台阶数是1的时候或者2的时候，可以明确知道青蛙跳法。f（1） &#x3D;1，f(2) &#x3D; 2，当台阶n&gt;&#x3D;3时，已经呈现出规律f(3) &#x3D; f(2) + f(1) &#x3D;3，因此f（1） &#x3D;1，f(2) &#x3D; 2就是青蛙跳阶的边界。</p><h4 id="3-找规律，确定最优子结构"><a href="#3-找规律，确定最优子结构" class="headerlink" title="3. 找规律，确定最优子结构"></a><strong>3. 找规律，确定最优子结构</strong></h4><p>n&gt;&#x3D;3时，已经呈现出规律 f(n) &#x3D; f(n-1) + f(n-2) ，因此，f(n-1)和f(n-2) 称为 f(n) 的最优子结构。什么是最优子结构？有这么一个解释：</p><blockquote><p>★ 一道动态规划问题，其实就是一个递推问题。假设当前决策结果是f(n),则最优子结构就是要让 f(n-k) 最优,最优子结构性质就是能让转移到n的状态是最优的,并且与后面的决策没有关系,即让后面的决策安心地使用前面的局部最优解的一种性质<br>”</p></blockquote><h4 id="4，-写出状态转移方程"><a href="#4，-写出状态转移方程" class="headerlink" title="4， 写出状态转移方程"></a><strong>4， 写出状态转移方程</strong></h4><p>通过前面3步，穷举分析，确定边界，最优子结构，我们就可以得出状态转移方程啦：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-17700257363921acdbd5718beaed8266_720w.jpg" alt="img"></p><h4 id="5-代码实现"><a href="#5-代码实现" class="headerlink" title="5. 代码实现"></a><strong>5. 代码实现</strong></h4><p>我们实现代码的时候，一般注意从底往上遍历哈，然后关注下边界情况，空间复杂度，也就差不多啦。动态规划有个框架的，大家实现的时候，可以考虑适当参考一下：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">dp[0][0][...] = 边界值</span><br><span class="line">for(状态1 ：所有状态1的值)&#123;</span><br><span class="line">    for(状态2 ：所有状态2的值)&#123;</span><br><span class="line">        for(...)&#123;</span><br><span class="line">          //状态转移方程</span><br><span class="line">          dp[状态1][状态2][...] = 求最值</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、案例分析"><a href="#五、案例分析" class="headerlink" title="五、案例分析"></a>五、案例分析</h2><h3 id="一个leetcode-案例分析"><a href="#一个leetcode-案例分析" class="headerlink" title="一个leetcode 案例分析"></a>一个leetcode 案例分析</h3><p>我们一起来分析一道经典leetcode题目吧</p><blockquote><p>★ 给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。<br>”</p></blockquote><p>示例 1：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">输入：nums = [10,9,2,5,3,7,101,18]</span><br><span class="line">输出：4</span><br><span class="line">解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,1,0,3,2,3]</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure><p>我们按照以上动态规划的解题思路，</p><ul><li>穷举分析</li><li>确定边界</li><li>找规律，确定最优子结构</li><li>状态转移方程</li></ul><h4 id="1-自底向上的穷举分析"><a href="#1-自底向上的穷举分析" class="headerlink" title="1. 自底向上的穷举分析"></a>1. 自底向上的穷举分析</h4><p>因为动态规划，核心思想包括<strong>拆分子问题，记住过往，减少重复计算。</strong> 所以我们在思考原问题：<strong>数组num[i]的最长递增子序列长度时</strong>，可以思考下<strong>相关子问题</strong>，比如原问题是否跟<strong>子问题</strong>num[i-1]的最长递增子序列长度有关呢？</p><p>这里观察规律，显然是有关系的，我们还是遵循动态规划<strong>自底向上</strong>的原则，基于示例1的数据，从数组只有一个元素开始分析。</p><ul><li>当nums只有一个元素10时，最长递增子序列是[10],长度是1.</li><li>当nums需要加入一个元素9时，最长递增子序列是[10]或者[9],长度是1。</li><li>当nums再加入一个元素2时，最长递增子序列是[10]或者[9]或者[2],长度是1。</li><li>当nums再加入一个元素5时，最长递增子序列是[2,5],长度是2。</li><li>当nums再加入一个元素3时，最长递增子序列是[2,5]或者[2,3],长度是2。</li><li>当nums再加入一个元素7时，,最长递增子序列是[2,5,7]或者[2,3,7],长度是3。</li><li>当nums再加入一个元素101时，最长递增子序列是[2,5,7,101]或者[2,3,7,101],长度是4。</li><li>当nums再加入一个元素18时，最长递增子序列是[2,5,7,101]或者[2,3,7,101]或者[2,5,7,18]或者[2,3,7,18],长度是4。</li><li>当nums再加入一个元素7时,最长递增子序列是[2,5,7,101]或者[2,3,7,101]或者[2,5,7,18]或者[2,3,7,18],长度是4.</li></ul><h4 id="2-分析找规律，拆分子问题"><a href="#2-分析找规律，拆分子问题" class="headerlink" title="2. 分析找规律，拆分子问题"></a>2. 分析找规律，拆分子问题</h4><p>通过上面分析，我们可以<strong>发现一个规律</strong>：</p><p>如果新加入一个元素nums[i], 最长递增子序列要么<strong>是以nums[i]结尾的递增子序列</strong>，要么就是<strong>nums[i-1]的最长递增子序列</strong>。看到这个，是不是很开心，nums[i]的最长递增子序列已经跟<strong>子问题</strong> nums[i-1]的最长递增子序列有关联了。</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">原问题数组nums[i]的最长递增子序列 = 子问题数组nums[i-1]的最长递增子序列/nums[i]结尾的最长递增子序列</span><br></pre></td></tr></table></figure><p>是不是感觉成功了一半呢？但是<strong>如何把nums[i]结尾的递增子序列也转化为对应的子问题</strong>呢？要是nums[i]结尾的递增子序列也跟nums[i-1]的最长递增子序列有关就好了。又或者nums[i]结尾的最长递增子序列，跟前面子问题num[j]（0&#x3D;&lt;j&lt;i）结尾的最长递增子序列有关就好了，带着这个想法，我们又回头看看穷举的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-f30ec7b249e7d8c9216f49935f5bc25d_720w.jpg" alt="img"></p><p>nums[i]的最长递增子序列，不就是<strong>从以数组num[i]每个元素结尾的最长子序列集合，取元素最多（也就是长度最长）那个嘛</strong>，所以原问题，我们转化成求出以数组nums每个元素结尾的最长子序列集合，再取<strong>最大值</strong>嘛。哈哈，想到这，我们就可以<strong>用dp[i]表示以num[i]这个数结尾的最长递增子序列的长度</strong>啦，然后再来看看其中的规律：</p><p><img src="https://pic4.zhimg.com/80/v2-abfda01a6a07fa930c6760ece8b3e47b_720w.jpg" alt="img"></p><p>其实，<strong>nums[i]结尾的自增子序列，只要找到比nums[i]小的子序列，加上nums[i]</strong> 就可以啦。显然，可能形成多种新的子序列，我们选最长那个，就是dp[i]的值啦</p><blockquote><p>★</p></blockquote><ul><li>nums[3]&#x3D;5,以<code>5</code>结尾的最长子序列就是<code>[2,5]</code>,因为从数组下标<code>0到3</code>遍历，只找到了子序列<code>[2]</code>比<code>5</code>小，所以就是<code>[2]+[5]</code>啦，即<code>dp[4]=2</code></li><li>nums[4]&#x3D;3,以<code>3</code>结尾的最长子序列就是<code>[2,3]</code>,因为从数组下标<code>0到4</code>遍历，只找到了子序列<code>[2]</code>比<code>3</code>小，所以就是<code>[2]+[3]</code>啦，即<code>dp[4]=2</code></li><li>nums[5]&#x3D;7，以<code>7</code>结尾的最长子序列就是<code>[2,5,7]</code>和<code>[2,3,7]</code>,因为从数组下标<code>0到5</code>遍历，找到<code>2,5和3</code>都比7小，所以就有<code>[2,7],[5,7],[3,7],[2,5,7]和[2,3,7]</code>这些子序列，最长子序列就是<code>[2,5,7]和[2,3,7]</code>，它俩不就是以<code>5</code>结尾和<code>3</code>结尾的最长递增子序列+[7]来的嘛！所以，<code>**dp[5]=3 =dp[3]+1=dp[4]+1**</code>。</li></ul><p>”</p><p>很显然有这个规律：一个以nums[i]结尾的数组nums</p><ul><li>如果存在j属于区间[0，i-1],并且num[i]&gt;num[j]的话，则有，dp(i) &#x3D;max(dp(j))+1，</li></ul><h4 id="3-最简单的边界情况"><a href="#3-最简单的边界情况" class="headerlink" title="3. 最简单的边界情况"></a>3. 最简单的边界情况</h4><p>当nums数组只有一个元素时，最长递增子序列的长度dp(1)&#x3D;1,当nums数组有两个元素时，dp(2) &#x3D;2或者1， 因此边界就是dp(1)&#x3D;1。</p><h4 id="4-确定最优子结构"><a href="#4-确定最优子结构" class="headerlink" title="4. 确定最优子结构"></a>4. 确定最优子结构</h4><p>从穷举分析，我们可以得出，以下的最优结构：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">dp(i) =max(dp(j))+1，存在j属于区间[0，i-1],并且num[i]&gt;num[j]。</span><br></pre></td></tr></table></figure><p><strong>max(dp(j))</strong> 就是最优子结构。</p><h4 id="5-状态转移方程"><a href="#5-状态转移方程" class="headerlink" title="5.状态转移方程"></a>5.状态转移方程</h4><p>通过前面分析，我们就可以得出状态转移方程啦：</p><p><img src="https://pic4.zhimg.com/80/v2-6a5bebb12a1c9a69e49e6e35103895f3_720w.jpg" alt="img"></p><p>所以数组num[i]的最长递增子序列就是：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">最长递增子序列 =max(dp[i])</span><br></pre></td></tr></table></figure><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="comment">//初始化就是边界情况</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//自底向上遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//从下标0到i遍历</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="comment">//找到前面比nums[i]小的数nums[j],即有dp[i]= dp[j]+1</span></span><br><span class="line">                <span class="keyword">if</span> (nums[j] &lt; nums[i]) &#123;</span><br><span class="line">                    <span class="comment">//因为会有多个小于nums[i]的数，也就是会存在多种组合了嘛，我们就取最大放到dp[i]</span></span><br><span class="line">                    dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//求出dp[i]后，dp最大那个就是nums的最长递增子序列啦</span></span><br><span class="line">            maxans = Math.max(maxans, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一个蓝桥杯上的省赛题："><a href="#一个蓝桥杯上的省赛题：" class="headerlink" title="一个蓝桥杯上的省赛题："></a>一个蓝桥杯上的省赛题：</h3><h4 id="题目-2604-蓝桥杯2021年第十二届省赛真题-砝码称重"><a href="#题目-2604-蓝桥杯2021年第十二届省赛真题-砝码称重" class="headerlink" title="题目 2604: 蓝桥杯2021年第十二届省赛真题-砝码称重"></a>题目 2604: 蓝桥杯2021年第十二届省赛真题-砝码称重</h4><p>时间限制: 1Sec 内存限制: 128MB 提交: 1797 解决: 590</p><p><strong>题目描述</strong></p><p>你有一架天平和 N 个砝码，这 N 个砝码重量依次是 W1, W2, · · · , WN。<br>请你计算一共可以称出多少种不同的重量？<br>注意砝码可以放在天平两边。</p><p><strong>输入</strong></p><p>输入的第一行包含一个整数 N。<br>第二行包含 N 个整数：W1, W2, W3, · · · , WN。</p><p><strong>输出</strong></p><p>输出一个整数代表答案。</p><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 4 6</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【样例说明】</span><br><span class="line">能称出的 10 种重量是：1、2、3、4、5、6、7、9、10、11。</span><br><span class="line">1 = 1；</span><br><span class="line">2 = 6 4 (天平一边放 6，另一边放 4)；</span><br><span class="line">3 = 4 1；</span><br><span class="line">4 = 4；</span><br><span class="line">5 = 6 1；</span><br><span class="line">6 = 6；</span><br><span class="line">7 = 1 + 6；</span><br><span class="line">9 = 4 + 6 1；</span><br><span class="line">10 = 4 + 6；</span><br><span class="line">11 = 1 + 4 + 6。</span><br></pre></td></tr></table></figure><p>【评测用例规模与约定】<br>对于 50% 的评测用例，1 ≤ N ≤ 15。<br>对于所有评测用例，1 ≤ N ≤ 100，N 个砝码总重不超过 100000。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">状态转移方程就是:</span><br><span class="line">dp[i]的全部可能=dp[i-1]+和以前的加减新组合</span><br></pre></td></tr></table></figure><p>代码实现：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> class 砝码称重 &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> N;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] W;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> COUNT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        N = scanner.nextInt();</span><br><span class="line">        W = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            sum += W[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        COUNT = sum;</span><br><span class="line">        <span class="comment">//Arrays.sort(W);</span></span><br><span class="line">        dpFaMa();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    状态转移方程就是:</span></span><br><span class="line"><span class="comment">    dp[i]的全部可能=dp[i-1]+和以前的加减新组合</span></span><br><span class="line"><span class="comment">    数组dp[i]的大小为全部砝码的总和  COUNT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dpFaMa</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[W.length][COUNT + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; W.length; i++) &#123;</span><br><span class="line">            <span class="comment">//对于dp数组的初始化  对于目标为0的配重 都置为true</span></span><br><span class="line">            <span class="comment">// 对于每一行和砝码重量相同的目标配重也置为true</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">            dp[i][W[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从第二块砝码开始递推</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">            <span class="comment">//第一列配重为0跳过</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; COUNT + <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="comment">//加当前砝码w[i]之前,就存在的;</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i - <span class="number">1</span>][j]) &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//情况一:砝码和j在一起</span></span><br><span class="line">                <span class="keyword">if</span> (W[i] + j &lt;= COUNT &amp;&amp; dp[i - <span class="number">1</span>][W[i] + j]) &#123;</span><br><span class="line">                    <span class="comment">//当前砝码和目标都放到同一边,然后有已经可以测的重量在另一侧</span></span><br><span class="line">                    <span class="comment">//还有个限制,就是当前砝码,和当前测量j之和不能超过总重,即数组的总重;</span></span><br><span class="line">                    <span class="comment">//如果有的话,当前j就能true</span></span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//情况二:砝码和j分开</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i - <span class="number">1</span>][Math.abs(j - W[i])]) &#123;</span><br><span class="line">                    <span class="comment">//j可以被当前砝码和以前的砝码组成,</span></span><br><span class="line">                    <span class="comment">//或者j加以前的砝码等于当前砝码;</span></span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= COUNT; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[N - <span class="number">1</span>][i]) &#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> dp动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spingclouds的学习</title>
      <link href="/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dspingclouds%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dspingclouds%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springclouds </tag>
            
            <tag> 微服务 </tag>
            
            <tag> java后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CI配置文件.gitlab-ci.yaml详解</title>
      <link href="/2022/03/24/gitlab%E4%B8%AD%E7%9A%84ci.yaml%E6%96%87%E4%BB%B6/"/>
      <url>/2022/03/24/gitlab%E4%B8%AD%E7%9A%84ci.yaml%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="ae76a4d3e26e3ad2f9d2177e1d130b9c2dfea1465c8c1c41dea609d2b2204302"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，博主可能还没写完，所以这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 私密文章 </category>
          
          <category> gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
            <tag> CI </tag>
            
            <tag> 配置 </tag>
            
            <tag> 私密文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx学习</title>
      <link href="/2022/03/24/nginx%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/03/24/nginx%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p> <a href="https://lark-assets-prod-aliyun.oss-cn-hangzhou.aliyuncs.com/yuque/0/2021/pdf/22423156/1635859606986-cb7e317b-c3ad-4c6e-8872-7846d50cef30.pdf?OSSAccessKeyId=LTAI4GGhPJmQ4HWCmhDAn4F5&Expires=1648095724&Signature=1Ji7GOGzEc3N0fG1O/GH7S8ViXw=&response-content-disposition=attachment;filename*=UTF-8%27%27nginx%25E8%25AF%25BE%25E4%25BB%25B6v1.0.pdf#view=FitH,to&toolbar=0">nginx课堂课件</a></p><p><a href="https://lark-assets-prod-aliyun.oss-cn-hangzhou.aliyuncs.com/yuque/0/2021/pdf/22423156/1635859615340-7a4a8130-533f-4db5-8152-f253335336df.pdf?OSSAccessKeyId=LTAI4GGhPJmQ4HWCmhDAn4F5&Expires=1648095960&Signature=VZQfAeVhyf8RXu1aKYboWz3MHoQ=&response-content-disposition=attachment;filename*=UTF-8%27%27nginx%25E8%25AF%25BE%25E5%25A0%2582%25E7%25AC%2594%25E8%25AE%25B0.pdf#view=FitH,to&toolbar=0">nginx课堂笔记</a></p><p><a href="https://blog.csdn.net/xj0927/category_10548178.html">传送门</a></p><h1 id="一、Nginx简介"><a href="#一、Nginx简介" class="headerlink" title="一、Nginx简介"></a>一、Nginx简介</h1><ul><li>Nginx是什么，做什么事情</li><li>反向代理</li><li>负载均衡</li><li>动静分离</li></ul><h2 id="1-1-Nginx概述"><a href="#1-1-Nginx概述" class="headerlink" title="1.1 Nginx概述"></a>1.1 Nginx概述</h2><p>Nginx (“engine x”) 是一个<strong>高性能的 HTTP 和反向代理服务器</strong>,特点是占有<strong>内存少</strong>，<strong>并发能力强</strong>，事实上 nginx 的并发能力确实在同类型的网页服务器中表现较好。</p><h2 id="1-2-Nginx-作为-web-服务器"><a href="#1-2-Nginx-作为-web-服务器" class="headerlink" title="1.2 Nginx 作为 web 服务器"></a>1.2 Nginx 作为 web 服务器</h2><p>Nginx 可以作为静态页面的 web 服务器，同时还支持 CGI 协议的动态语言，比如 perl、php等。但是不支持 java。Java 程序只能通过与 tomcat 配合完成。Nginx 专为性能优化而开发，性能是其最重要的考量,实现上非常注重效率 ，能经受高负载的考验,有报告表明能支持高达 50,000 个并发连接数。</p><h2 id="1-3-正向代理"><a href="#1-3-正向代理" class="headerlink" title="1.3 正向代理"></a>1.3 正向代理</h2><p>如果把局域网外的 Internet 想象成一个巨大的资源库，则局域网中的客户端要访问 Internet，则需要通过代理服务器来访问，这种代理服务就称为正向代理。</p><p>在客户端（浏览器）配置代理服务器，通过代理服务器进行互联网访问。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635861095719-3ab68f46-3e0a-467c-ad41-880df6af010a.png" alt="img"></p><h2 id="1-4-反向代理"><a href="#1-4-反向代理" class="headerlink" title="1.4 反向代理"></a>1.4 反向代理</h2><p>反向代理中，客户端对代理无感知（客户端不知道进行了代理），因为客户端不需要进行任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，<strong>暴露的是代理服务器地址，隐藏了真实服务器 IP 地址</strong>。</p><p>通俗的来讲，反向代理服务器就类似于中介，请求尽管发给中介，然后中介给你反馈，至于中介是如何进行工作的，客户端不需要知道。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635861557065-e6f5d248-d805-48e1-802c-081ca3239c5d.png" alt="img"></p><h2 id="1-5-负载均衡"><a href="#1-5-负载均衡" class="headerlink" title="1.5 负载均衡"></a>1.5 负载均衡</h2><p>客户端发送多个请求到服务器，服务器处理请求，有一些可能要与数据库进行交互，服务器处理完毕后，再将结果返回给客户端。这种模式在高并发情况下，服务器会崩溃。</p><p>因此通过增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将<strong>负载分发到不同的服务器，也就是我们所说的负载均衡。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635862109006-3cb1e77d-17da-455f-941c-77973f419ed7.png" alt="img"></p><h2 id="1-6-动静分离"><a href="#1-6-动静分离" class="headerlink" title="1.6 动静分离"></a>1.6 动静分离</h2><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220324151030346.png" alt="image-20220324151030346"></p><h1 id="二、Nginx的安装-Linux"><a href="#二、Nginx的安装-Linux" class="headerlink" title="二、Nginx的安装 Linux"></a>二、Nginx的安装 Linux</h1><h2 id="2-1-进入Nginx官网，下载"><a href="#2-1-进入Nginx官网，下载" class="headerlink" title="2.1 进入Nginx官网，下载"></a>2.1 进入Nginx官网，下载</h2><p>官网：<a href="http://nginx.org/">http://nginx.org/</a></p><h2 id="2-2-安装Nginx"><a href="#2-2-安装Nginx" class="headerlink" title="2.2 安装Nginx"></a>2.2 安装Nginx</h2><p>先查看是否安装了gcc   <code>gcc -v</code></p><p>如果没有安装 执行  <code>yum -y install gcc gcc-c++</code></p><p>在安装Nginx之前需要的依赖：pcre、openssl、zlib</p><p>通过yum直接安装以上即可，执行以下命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install pcre pcre-devel openssl openssl-devel zlib zlib-devel</span><br></pre></td></tr></table></figure><p>我把Nginx的压缩包放在了  &#x2F;user&#x2F;local&#x2F;moudle 下</p><p>cd到 &#x2F;user&#x2F;local&#x2F;moudle</p><p>解压下载的Nginx压缩包 <code> tar -zxvf  nginx-1.20.1.tar.gz</code></p><p>cd到 nginx-1.20.1目录下</p><p>然后分别执行以下命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>然后Nginx就安装在了 &#x2F;user&#x2F;local&#x2F;nginx 目录下</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635907807491-6e05b71d-584f-48f5-bd6d-1c56011b7b0b.png" alt="image.png"></p><h2 id="2-3-nginx-常用的命令和配置文件"><a href="#2-3-nginx-常用的命令和配置文件" class="headerlink" title="2.3 nginx 常用的命令和配置文件"></a>2.3 nginx 常用的命令和配置文件</h2><h3 id="Nginx常用的命令"><a href="#Nginx常用的命令" class="headerlink" title="Nginx常用的命令"></a>Nginx常用的命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看nginx的版本号</span></span><br><span class="line">nginx -v</span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">nginx</span><br><span class="line"><span class="comment"># 关闭nginx</span></span><br><span class="line">nginx -s stop</span><br><span class="line"><span class="comment"># 重新加载nginx</span></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="Nginx的配置文件"><a href="#Nginx的配置文件" class="headerlink" title="Nginx的配置文件"></a>Nginx的配置文件</h2><p>我的阿里云服务器上面的nginx.conf文件中的内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user  www www;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log  /www/wwwlogs/nginx_error.log  crit;</span><br><span class="line">pid        /www/server/nginx/logs/nginx.pid;</span><br><span class="line">worker_rlimit_nofile 51200;</span><br><span class="line"></span><br><span class="line">stream &#123;</span><br><span class="line">    log_format tcp_format &#x27;$time_local|$remote_addr|$protocol|$status|$bytes_sent|$bytes_received|$session_time|$upstream_addr|$upstream_bytes_sent|$upstream_bytes_received|$upstream_connect_time&#x27;;</span><br><span class="line">  </span><br><span class="line">    access_log /www/wwwlogs/tcp-access.log tcp_format;</span><br><span class="line">    error_log /www/wwwlogs/tcp-error.log;</span><br><span class="line">    include /www/server/panel/vhost/nginx/tcp/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">events</span><br><span class="line">    &#123;</span><br><span class="line">        use epoll;</span><br><span class="line">        worker_connections 51200;</span><br><span class="line">        multi_accept on;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">    &#123;</span><br><span class="line">        include       mime.types;</span><br><span class="line">#include luawaf.conf;</span><br><span class="line"></span><br><span class="line">include proxy.conf;</span><br><span class="line"></span><br><span class="line">        default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">        server_names_hash_bucket_size 512;</span><br><span class="line">        client_header_buffer_size 32k;</span><br><span class="line">        large_client_header_buffers 4 32k;</span><br><span class="line">        client_max_body_size 50m;</span><br><span class="line"></span><br><span class="line">        sendfile   on;</span><br><span class="line">        tcp_nopush on;</span><br><span class="line"></span><br><span class="line">        keepalive_timeout 60;</span><br><span class="line"></span><br><span class="line">        tcp_nodelay on;</span><br><span class="line"></span><br><span class="line">        fastcgi_connect_timeout 300;</span><br><span class="line">        fastcgi_send_timeout 300;</span><br><span class="line">        fastcgi_read_timeout 300;</span><br><span class="line">        fastcgi_buffer_size 64k;</span><br><span class="line">        fastcgi_buffers 4 64k;</span><br><span class="line">        fastcgi_busy_buffers_size 128k;</span><br><span class="line">        fastcgi_temp_file_write_size 256k;</span><br><span class="line">fastcgi_intercept_errors on;</span><br><span class="line"></span><br><span class="line">        gzip on;</span><br><span class="line">        gzip_min_length  1k;</span><br><span class="line">        gzip_buffers     4 16k;</span><br><span class="line">        gzip_http_version 1.1;</span><br><span class="line">        gzip_comp_level 2;</span><br><span class="line">        gzip_types     text/plain application/javascript application/x-javascript text/javascript text/css application/xml;</span><br><span class="line">        gzip_vary on;</span><br><span class="line">        gzip_proxied   expired no-cache no-store private auth;</span><br><span class="line">        gzip_disable   &quot;MSIE [1-6]\.&quot;;</span><br><span class="line"></span><br><span class="line">        limit_conn_zone $binary_remote_addr zone=perip:10m;</span><br><span class="line">limit_conn_zone $server_name zone=perserver:10m;</span><br><span class="line"></span><br><span class="line">        server_tokens off;</span><br><span class="line">        access_log off;</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">        listen 888;</span><br><span class="line">        server_name phpmyadmin;</span><br><span class="line">        index index.html index.htm index.php;</span><br><span class="line">        root  /www/server/phpmyadmin;</span><br><span class="line">            location ~ /tmp/ &#123;</span><br><span class="line">                return 403;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        #error_page   404   /404.html;</span><br><span class="line">        include enable-php.conf;</span><br><span class="line"></span><br><span class="line">        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">        &#123;</span><br><span class="line">            expires      30d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ .*\.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">            expires      12h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /\.</span><br><span class="line">        &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        access_log  /www/wwwlogs/access.log;</span><br><span class="line">    &#125;</span><br><span class="line">include /www/server/panel/vhost/nginx/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Nginx的配置文件由三部分组成：</p><ul><li><p>第一部分 全局块</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">从配置文件开始到events块之间的内容，</span><br><span class="line">主要会设置一些影响nginx服务器整体运行的配置指令，</span><br><span class="line">主要包括配置运行</span><br><span class="line"><span class="bullet">*</span> Nginx服务器的用户（组），</span><br><span class="line"><span class="bullet">*</span> 允许生产的worker process数，</span><br><span class="line"><span class="bullet">*</span> 进程PID存放路径、</span><br><span class="line"><span class="bullet">*</span> 日志存放路径和</span><br><span class="line"><span class="bullet">*</span> 类似以及配置文件的引入等</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是Nginx服务器并发处理服务的关键配置</span></span><br><span class="line"><span class="comment"># worker_processes值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约</span></span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>第二部分 events块</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">enevnts块设计的指令主要影响Nginx服务器与用户的网络连接</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">worker_connections</span> <span class="number">1024</span>;   <span class="comment">#表示nginx支持最大的连接数为1024</span></span><br></pre></td></tr></table></figure></li><li><p>第三部分 http块</p></li></ul><p>这算是Nginx服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在里面</p>  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">http块包括http全局块、server块</span><br></pre></td></tr></table></figure><p>  <strong>http全局块：</strong></p><p>   http全局快配置的指令包括<strong>文件的引入</strong>、<strong>MIME-TYPE定义</strong>、<strong>日志自定义</strong>、<strong>连接超时时间</strong>、<strong>单链接请求数上限</strong>等。</p><p>  <strong>server块：</strong></p><blockquote><p>每个http块可以包括多个server块，而每个server块就相当于一个虚拟主机。</p><p>而每个server块也分为全局server块和localtion块</p></blockquote><ul><li><p>全局server块</p><p>最常见的配置是本虚拟机主机的监听配置和本虚拟机的名称和IP配置</p></li><li><p>location块</p><p>一个server块可以配置多个location块</p><p>这块的主要作用是基于Nginx服务器接收到的请求字符串（例如server_name&#x2F;uri-string），对虚拟主机名称（也可以是IP别名）之外的字符串（例如前面的&#x2F;uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方的模块配置也在这里进行。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1636094522321-ffc6642d-1d25-4d53-830e-07e99c8ddbf7.png" alt="image.png"></p><h1 id="三、nginx-配置实例-反向代理"><a href="#三、nginx-配置实例-反向代理" class="headerlink" title="三、nginx 配置实例-反向代理"></a>三、nginx 配置实例-反向代理</h1><h2 id="3-1-前置准备——tomcat安装"><a href="#3-1-前置准备——tomcat安装" class="headerlink" title="3.1 前置准备——tomcat安装"></a>3.1 前置准备——tomcat安装</h2><p>使用nginx反向代理，访问<a href="http://www.123.com/">www.123.com</a> 直接跳转到localhost:8080，再此之前需要在Linux上装tomcat。</p><ul><li>tomcat安装文件放到Linux系统中，解压</li><li>进入tomcat的bin目录，<code>./startup.sh</code> 启动tomcat服务器</li></ul><p>log文件夹下执行<code>tail -f catalina.out</code> 可以查看日志</p><p>同样，这里需要在防火墙添加远程访问窗口（我直接把防火墙关闭了，所以不需要设置）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-port=8080/tcp --permanent</span><br><span class="line">firewall-cmd –reload</span><br></pre></td></tr></table></figure><p>通过windows的浏览器访问tomcat的主页，访问成功</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635924569900-29d55075-0f68-44e4-8038-3f63ce116e45.png" alt="img"></p><h2 id="3-2-配置反向代理实例（一）"><a href="#3-2-配置反向代理实例（一）" class="headerlink" title="3.2 配置反向代理实例（一）"></a>3.2 配置反向代理实例（一）</h2><h3 id="3-2-1-访问过程分析："><a href="#3-2-1-访问过程分析：" class="headerlink" title="3.2.1 访问过程分析："></a>3.2.1 访问过程分析：</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635924846707-0b445ef9-1d06-41a6-a169-3e68a3ff4eb5.png" alt="img"></p><h3 id="3-2-2-具体操作"><a href="#3-2-2-具体操作" class="headerlink" title="3.2.2 具体操作"></a>3.2.2 具体操作</h3><h4 id="1-修改windows的hosts文件"><a href="#1-修改windows的hosts文件" class="headerlink" title="(1) 修改windows的hosts文件"></a>(1) 修改windows的hosts文件</h4><p>修改windows端host文件，使<a href="http://www.123.com跟虚拟机上的ip映射起来/">www.123.com跟虚拟机上的Ip映射起来</a></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635925030883-8400a093-d31d-45a3-a2f4-ca6d3d4f8d6e.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635925121611-fe647302-0bab-43b5-b546-aa5d427f57bf.png" alt="img"></p><p>前面的IP地址是我自己虚拟机的IP</p><h4 id="2-在nginx进行请求转发的配置（反向代理配置）"><a href="#2-在nginx进行请求转发的配置（反向代理配置）" class="headerlink" title="(2) 在nginx进行请求转发的配置（反向代理配置）"></a>(2) 在nginx进行请求转发的配置（反向代理配置）</h4><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635926048705-ba2e69fa-f442-40f1-99c6-fcbbfe2a86d9.png" alt="img"></p><p>修改完成后保存，重启nginx。</p><h3 id="3-2-3-测试"><a href="#3-2-3-测试" class="headerlink" title="3.2.3 测试"></a>3.2.3 测试</h3><p>访问<a href="http://www.123.com/">www.123.com</a></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635926260979-8bf4b5c8-4caf-4e65-8795-cc18af750cf2.png" alt="img"></p><p>测试成功！</p><h2 id="3-3-配置反向代理实例（二）"><a href="#3-3-配置反向代理实例（二）" class="headerlink" title="3.3 配置反向代理实例（二）"></a>3.3 配置反向代理实例（二）</h2><p>实现效果：使用 nginx 反向代理，根据访问的路径跳转到不同端口的服务中。</p><p>nginx 监听端口为 9001，</p><p>访问 <a href="http://127.0.0.1:9001/edu/">http://127.0.0.1:9001/edu/</a> 直接跳转到 127.0.0.1:8080</p><p>访问 <a href="http://127.0.0.1:9001/vod/">http://127.0.0.1:9001/vod/</a> 直接跳转到 127.0.0.1:8081</p><h3 id="3-3-1-准备工作"><a href="#3-3-1-准备工作" class="headerlink" title="3.3.1 准备工作"></a>3.3.1 准备工作</h3><h4 id="准备两个tomcat服务器，一个8080端口，一个8081端口"><a href="#准备两个tomcat服务器，一个8080端口，一个8081端口" class="headerlink" title="准备两个tomcat服务器，一个8080端口，一个8081端口"></a>准备两个tomcat服务器，一个8080端口，一个8081端口</h4><p>在&#x2F;usr&#x2F;local 下新建一个tomcat8081，加tomcat解压到8081中。</p><p>进入tomcat8081的conf文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635927975973-941af423-b377-48ca-8264-1e3601f35ff5.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635927978484-9482102b-5f0c-4a2f-83bd-c94ec89a581a.png" alt="img"></p><p>保存后启动tomcat8081。然后再启动8080</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635928106349-9d1e1383-9069-4e98-a413-60655e18b0af.png" alt="img"><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635928123196-3ffb4eb2-dd99-4c84-9b50-8268312e5d82.png" alt="img"></p><p>现在就有两个tomcat了。</p><h4 id="创建文件夹和测试页面"><a href="#创建文件夹和测试页面" class="headerlink" title="创建文件夹和测试页面"></a>创建文件夹和测试页面</h4><p>在8080的tomcat  &#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.5.72&#x2F;webapps 下创建&#x2F;edu文件夹</p><p>在里面创建一个a.html文件  touch a.html</p><p>写入 <h1>8080!!</h1></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635928686765-10d10489-02de-4817-8b6a-d5fbd8343226.png" alt="img"></p><p>同样，在8081的tomcat  &#x2F;webapps 下创建&#x2F;vod文件夹 将a.html 复制过来 里面改成8081</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635928867431-480bb0ee-5e47-4cb0-8db1-49f7b664a52e.png" alt="img"></p><h3 id="3-3-2-nginx-conf-反向代理配置"><a href="#3-3-2-nginx-conf-反向代理配置" class="headerlink" title="3.3.2 nginx.conf 反向代理配置"></a>3.3.2 nginx.conf 反向代理配置</h3><p>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf 下nginx.conf 文件</p><p>之前我们配置了一个server</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635929174082-166be11e-5ad5-4f71-a51a-cc651b35879f.png" alt="img"></p><p>现在我们需要新加上一个server</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635930983051-d7717f87-81ae-419b-961a-55542cb3cd15.png" alt="img"></p><p>~后面的&#x2F;edu&#x2F;跟 &#x2F;vod&#x2F;是正则表达式</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635930571772-3d405da0-d667-4263-829e-9820ddb44e2e.png" alt="img"></p><p>同样需要开放9001端口号对外访问（关闭了防火墙就略过）</p><p>firewall-cmd –add-port&#x3D;9001&#x2F;tcp –permanent</p><p>firewall-cmd –add-port&#x3D;8081&#x2F;tcp –permanent</p><p>firewall-cmd –reload</p><p>重启nginx。</p><h3 id="3-3-3-测试"><a href="#3-3-3-测试" class="headerlink" title="3.3.3 测试"></a>3.3.3 测试</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635932029972-f20d03a5-de30-4b8d-a26b-c2b8d04756d7.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635932041346-ad902c4a-ce10-4d7e-9485-ee088f3e3934.png" alt="img"></p><h1 id="四、-nginx-配置实例-负载均衡"><a href="#四、-nginx-配置实例-负载均衡" class="headerlink" title="四、 nginx 配置实例-负载均衡"></a>四、 nginx 配置实例-负载均衡</h1><p>浏览器访问<a href="http://www.123.com:9001/edu/a.html%EF%BC%8C%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%8C%E5%B0%86%E8%AF%B7%E6%B1%82%E5%B9%B3%E5%9D%87%E5%88%86%E6%91%8A%E5%88%B08080%E5%92%8C8081%E4%B8%8A">http://www.123.com:9001/edu/a.html，实现负载均衡，将请求平均分摊到8080和8081上</a></p><h2 id="4-1-准备工作"><a href="#4-1-准备工作" class="headerlink" title="4.1 准备工作"></a>4.1 准备工作</h2><p>需要准备两台tomcat服务器，一台8080，一台8081，之前已经配置过了。</p><p>在两台 tomcat 里面 webapps 目录中，创建名称是 edu 文件夹，在 edu 文件夹中创建</p><p>页面 a.html，用于测试。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22423156/1635943534388-6cfeb344-fe70-4bc5-b651-9bb319eb70e1.png" alt="img"></p><h2 id="4-2-在-nginx-的配置文件中进行负载均衡的配置"><a href="#4-2-在-nginx-的配置文件中进行负载均衡的配置" class="headerlink" title="4.2 在 nginx 的配置文件中进行负载均衡的配置"></a>4.2 在 nginx 的配置文件中进行负载均衡的配置</h2><p>在&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf 目录下将<code>nginx.conf</code>配置文件复制为<code>nginx_lb.conf</code>配置文件，用来作为负载均衡的配置文件。</p><p>对负载均衡的配置进行修改，在http块中加上如下配置：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">......</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">负载均衡集群配置 命名为myserver</span></span><br><span class="line">upstream myserver &#123;</span><br><span class="line">    server 192.168.190.131:8080;</span><br><span class="line">        server 192.168.190.131:8081;</span><br><span class="line">    &#125;</span><br><span class="line">......</span><br><span class="line">    server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">      ......</span><br><span class="line">          proxy_pass http://myserver; # 代理到我们创建的负载均衡集群上</span><br><span class="line">          ......</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635944748204-884886e9-dc77-4d18-8073-3b4b7bb2cb37.png" alt="image.png"></p><p>cd 到nginx的sbin文件下</p><p>执行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -t -c /usr/local/nginx/conf/nginx_lb.conf</span><br></pre></td></tr></table></figure><p>测试我们刚才编辑的配置文件有没有错误。 <img src="https://cdn.nlark.com/yuque/0/2021/png/22423156/1635945821599-625db282-daee-4a1f-94c1-43526067b56e.png" alt="image.png"></p><p>指定nginx以<code>nginx_lb.conf</code>配置启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -c /usr/local/nginx/conf/nginx_lb.conf</span><br></pre></td></tr></table></figure><p>测试，实现了负载均衡。</p><h2 id="4-3-nginx提供了几种不同的负载均衡策略"><a href="#4-3-nginx提供了几种不同的负载均衡策略" class="headerlink" title="4.3 nginx提供了几种不同的负载均衡策略"></a>4.3 nginx提供了几种不同的负载均衡策略</h2><h3 id="4-3-1-轮询（默认）"><a href="#4-3-1-轮询（默认）" class="headerlink" title="4.3.1 轮询（默认）"></a>4.3.1 轮询（默认）</h3><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除。</p><h3 id="4-3-2-weight"><a href="#4-3-2-weight" class="headerlink" title="4.3.2 weight"></a>4.3.2 weight</h3><p>weight 代表权,重默认为 1,权重越高被分配的客户端越多；指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upstream server_pool&#123; </span><br><span class="line">    server 192.168.5.21 weight=10; </span><br><span class="line">    server 192.168.5.22 weight=10; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-3-ip-hash"><a href="#4-3-3-ip-hash" class="headerlink" title="4.3.3 ip_hash"></a>4.3.3 ip_hash</h3><p>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upstream server_pool&#123; </span><br><span class="line">    ip_hash; </span><br><span class="line">    server 192.168.5.21:80; </span><br><span class="line">    server 192.168.5.22:80; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-4-fair"><a href="#4-3-4-fair" class="headerlink" title="4.3.4 fair"></a>4.3.4 fair</h3><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upstream server_pool&#123; </span><br><span class="line">    server 192.168.5.21:80; </span><br><span class="line">    server 192.168.5.22:80; </span><br><span class="line">    fair; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、nginx-配置实例-动静分离"><a href="#五、nginx-配置实例-动静分离" class="headerlink" title="五、nginx 配置实例-动静分离"></a>五、nginx 配置实例-动静分离</h1><h2 id="5-1-动静分离的概念"><a href="#5-1-动静分离的概念" class="headerlink" title="5.1 动静分离的概念"></a>5.1 动静分离的概念</h2><p>Nginx 动静分离简单来说就是<strong>把动态跟静态请求分开</strong>，不能理解成只是单纯的把动态页面和静态页面物理分离。严格意义上说应该是<strong>动态请求（通过tomcat查询数据库）</strong>跟<strong>静态请求（访问html文件）</strong>分开，可以理解成使用 <strong>Nginx 处理静态页面</strong>，<strong>Tomcat 处理动态页面</strong>。</p><p>动静分离从目前实现角度来讲大致分为两种：</p><ul><li>一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案；</li><li>另外一种方法就是动态跟静态文件混合在一起发布，通过 nginx 来分开。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635949438895-339d78cd-8eb5-4471-8d14-5b70dd3f3255.png" alt="image.png">通过 location 指定不同的后缀名实现不同的请求转发。通过 expires 参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。具体 Expires 定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。（如果经常更新的文件，不建议使用 Expires 来缓存)，我这里设置 3d，表示在这 3 天之内访问这个 URL，发送一个请求，<strong>比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码 304，如果有修改，则直接从服务器重新下载，返回状态码 200。</strong></p><h2 id="5-2-准备工作"><a href="#5-2-准备工作" class="headerlink" title="5.2 准备工作"></a>5.2 准备工作</h2><p>在Linux系统中准备一些静态资源，用于访问。在根目录下创建data文件夹，data文件夹下创建两个文件夹image和page分别存放图片和网页</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635950056018-95fb8b7f-1c4b-459f-a4ee-0b8c13602a22.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635950064343-c31c6c45-bb99-4426-b1b2-c6cc6100dd4c.png" alt="img"></p><h2 id="5-3-具体配置"><a href="#5-3-具体配置" class="headerlink" title="5.3 具体配置"></a>5.3 具体配置</h2><p>复制一份nginx.conf，重命名为nginx_ds.conf作为动静分离的配置文件。</p><p>修改配置文件</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635950550162-26abb624-6ba6-4f46-a972-2b0dbecc2476.png" alt="img"></p><p>然后指定以nginx_ds.conf配置文件重启nginx</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -c /usr/local/nginx/conf/nginx_ds.conf</span><br></pre></td></tr></table></figure><h2 id="5-4-测试"><a href="#5-4-测试" class="headerlink" title="5.4 测试"></a>5.4 测试</h2><p>浏览器访问<a href="http://192.168.190.131/image/01.jpg">http://192.168.190.131/image/01.jpg</a>  <a href="http://192.168.190.131/page/a.html">http://192.168.190.131/page/a.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635951078771-8cc0bd8a-e5a5-4823-b158-1d48ef0d781f.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635951115528-45bbe75a-358b-474d-968f-1fcdecb96c67.png" alt="img"></p><p>我们访问<a href="http://192.168.190.131/image/">http://192.168.190.131/image/</a>  可以看到把image文件夹下的文件列出来了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635951190235-6696a8a5-eae4-419c-9c8d-d0bfd2206b94.png" alt="img"></p><p>因为配置文件配置了 <code>autoindex on</code>  这个的意思就是列出当前文件夹中的内容，page文件夹就不行。</p><h1 id="六、集群的搭建"><a href="#六、集群的搭建" class="headerlink" title="六、集群的搭建"></a>六、集群的搭建</h1><p><a href="https://blog.csdn.net/XJ0927/article/details/109501333">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java后端 </tag>
            
            <tag> nginx </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯原题刷</title>
      <link href="/2022/03/22/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5D%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AE%AD%E7%BB%83%E9%A2%98%E9%9B%86/"/>
      <url>/2022/03/22/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5D%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AE%AD%E7%BB%83%E9%A2%98%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>回声实验室的算法路线<a href="https://git.pyhub.club/star/list/-/blob/main/AlgorithmStudyList.md">传送门</a></p><h2 id="题集"><a href="#题集" class="headerlink" title="题集:"></a>题集:</h2><h4 id="题目-2604-蓝桥杯2021年第十二届省赛真题-砝码称重"><a href="#题目-2604-蓝桥杯2021年第十二届省赛真题-砝码称重" class="headerlink" title="题目 2604: 蓝桥杯2021年第十二届省赛真题-砝码称重"></a>题目 2604: 蓝桥杯2021年第十二届省赛真题-砝码称重</h4><p><strong>题目描述</strong></p><p>你有一架天平和 N 个砝码，这 N 个砝码重量依次是 W1, W2, · · · , WN。<br>请你计算一共可以称出多少种不同的重量？<br>注意砝码可以放在天平两边。</p><p><strong>输入</strong></p><p>输入的第一行包含一个整数 N。<br>第二行包含 N 个整数：W1, W2, W3, · · · , WN。</p><p><strong>输出</strong></p><p>输出一个整数代表答案。</p><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 4 6</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【样例说明】</span><br><span class="line">能称出的 10 种重量是：1、2、3、4、5、6、7、9、10、11。</span><br><span class="line">1 = 1；</span><br><span class="line">2 = 6 4 (天平一边放 6，另一边放 4)；</span><br><span class="line">3 = 4 1；</span><br><span class="line">4 = 4；</span><br><span class="line">5 = 6 1；</span><br><span class="line">6 = 6；</span><br><span class="line">7 = 1 + 6；</span><br><span class="line">9 = 4 + 6 1；</span><br><span class="line">10 = 4 + 6；</span><br><span class="line">11 = 1 + 4 + 6。</span><br></pre></td></tr></table></figure><p>【评测用例规模与约定】<br>对于 50% 的评测用例，1 ≤ N ≤ 15。<br>对于所有评测用例，1 ≤ N ≤ 100，N 个砝码总重不超过 100000。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> class 砝码称重 &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> N;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] W;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> COUNT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        N = scanner.nextInt();</span><br><span class="line">        W = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            sum += W[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        COUNT = sum;</span><br><span class="line">        <span class="comment">//Arrays.sort(W);</span></span><br><span class="line">        dpFaMa();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    最优子结构就是:</span></span><br><span class="line"><span class="comment">    dp[i]的全部可能=dp[i-1]+和以前的加减新组合</span></span><br><span class="line"><span class="comment">    数组dp[i]的大小为全部砝码的总和  COUNT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dpFaMa</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[W.length][COUNT + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; W.length; i++) &#123;</span><br><span class="line">            <span class="comment">//对于dp数组的初始化  对于目标为0的配重 都置为true</span></span><br><span class="line">            <span class="comment">// 对于每一行和砝码重量相同的目标配重也置为true</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">            dp[i][W[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从第二块砝码开始递推</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">            <span class="comment">//第一列配重为0跳过</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; COUNT + <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="comment">//加当前砝码w[i]之前,就存在的;</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i - <span class="number">1</span>][j]) &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//情况一:砝码和j在一起</span></span><br><span class="line">                <span class="keyword">if</span> (W[i] + j &lt;= COUNT &amp;&amp; dp[i - <span class="number">1</span>][W[i] + j]) &#123;</span><br><span class="line">                    <span class="comment">//当前砝码和目标都放到同一边,然后有已经可以测的重量在另一侧</span></span><br><span class="line">                    <span class="comment">//还有个限制,就是当前砝码,和当前测量j之和不能超过总重,即数组的总重;</span></span><br><span class="line">                    <span class="comment">//如果有的话,当前j就能true</span></span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//情况二:砝码和j分开</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i - <span class="number">1</span>][Math.abs(j - W[i])]) &#123;</span><br><span class="line">                    <span class="comment">//j可以被当前砝码和以前的砝码组成,</span></span><br><span class="line">                    <span class="comment">//或者j加以前的砝码等于当前砝码;</span></span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= COUNT; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[N - <span class="number">1</span>][i]) &#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语语法框架学习</title>
      <link href="/2022/03/22/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/03/22/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="简单句simple-sentences"><a href="#简单句simple-sentences" class="headerlink" title="简单句simple sentences:"></a>简单句simple sentences:</h1><p>什么+怎么样<br>主语(subject)+谓语(predicate)<br>人或物+动作:发生了什么事(广义动作:语法上的动词Verb)</p><h2 id="动作分类-动词"><a href="#动作分类-动词" class="headerlink" title="动作分类(动词)"></a>动作分类(动词)</h2><p>1.可以独立完成的动作:不及物动词Intransitive Verbs(没有承受者的动词)<br>Papa Rabbit <strong>sleeps</strong>.<br>主语+(不及物)动词<br>2.有一个<strong>动作</strong>的承受者:单及物动词Transitive Verbs(没有承受者就没有实际意义)<br>Papa Rabbit <strong>likes</strong> you.<br>主语+(及物)动词+宾语<br>3.有<strong>两个</strong>动作承受者<br>Papa Rabbit <strong>teach</strong> you English.<br>主语+(双及物)动词+间接宾语+直接宾语<br>4.只有一个动作承受者(不同于2):复杂及物动词<br>Papa Rabbit <strong>considers</strong> you smart.<br>主语+(复杂及物)动词+宾语+(宾语)补语<br>5.把这个词后面的信息赋予给前面的词:联系动词(系动词)<br>Papa Rabbit <strong>is</strong> tall.<br>Papa Rabbit <strong>looks</strong> tall.<br>Papa Rabbit <strong>smell</strong> nice.<br>主语+(系)动词+(主语)补语</p><h2 id="句子成分"><a href="#句子成分" class="headerlink" title="句子成分"></a>句子成分</h2><p>1.主语 Subject<br>2.谓语动词(谓语) Predicate Verb<br>3.宾语 Object<br>4.宾语补语 Object Complement<br>5.主语补语(表语) Subject Complement<br>6.定语 Arrributive<br><strong>The little white</strong> rabbit ate <strong>a large</strong> carrot.<br>前者是rabbit的定语,后者是carrot的定语.<br>7.状语Adverbial<br>The rabbit ate <strong>quickly</strong>.<br>quickly是ate的状语.<br>8.同位语Appositive<br>Papa Rabbit ,an English teacher, eats a carrot. 用来再说一遍主语</p><h1 id="简单句的组合"><a href="#简单句的组合" class="headerlink" title="简单句的组合"></a>简单句的组合</h1><h2 id="复合句-Compound-Sentence"><a href="#复合句-Compound-Sentence" class="headerlink" title="复合句 Compound Sentence"></a>复合句 Compound Sentence</h2><h2 id="复杂句-Complex-Sentence"><a href="#复杂句-Complex-Sentence" class="headerlink" title="复杂句 Complex Sentence"></a>复杂句 Complex Sentence</h2><p>主句Main Clause +从句Subordinate Clause<br>1.名词性从句<br>主语从句:修改一个简单句,充当另一个句子的主句<br>宾语从句:修改一个简单句,充当另一个句子的宾语 主语表语从句<br>同位语从句</p><p>2.定语从句<br>3.状语从句</p><h1 id="词类"><a href="#词类" class="headerlink" title="词类"></a>词类</h1><p>1.名词 Nouns<br>2.冠词 Articles<br>3.代词 Pronouns<br>4.形容词 Adjectives<br>5.数词 Numerals<br>6.副词 Adverbs<br>7.介词 Prepostions<br>8.叹词 Interjections<br>9.连词 Conjunctions<br>10.动词</p><p>句子成分和词类不是同一种概念</p><h1 id="谓语动词"><a href="#谓语动词" class="headerlink" title="谓语动词"></a>谓语动词</h1><p>特点:<br>1.表示动作的时间 现在.过去.将来.过去将来<br>2.表示动作的状态 一般.完成.进行时.完成进行时<br>3.表示动作的假设,感情等 如:<br>if I were a rabbit … 虚拟语气<br>i ate a carrot and …. 陈述语气<br>eat this carrot and … 祈使语气 合称<strong>时态</strong> : 4*4&#x3D;16种时态</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1ce3bf51359c4b90b32b52607de8b65d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门</title>
      <link href="/2022/03/21/Docker%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/21/Docker%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p><strong>1.前提知识:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">springboot,springclouds,</span><br><span class="line">git push pull,</span><br><span class="line">redis </span><br><span class="line">nginx </span><br><span class="line">mysql</span><br><span class="line">linux centos ubuntu</span><br></pre></td></tr></table></figure><h2 id="Docker-一篇入门"><a href="#Docker-一篇入门" class="headerlink" title="Docker 一篇入门"></a>Docker 一篇入门</h2><p>这里有阮一峰老师的docker简介<a href="https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html">传送门</a></p><p>这里有个语雀大佬的笔记<a href="https://www.yuque.com/mrlinxi/pxvr4g/polyyw">传送门</a></p><p><a href="https://mp.weixin.qq.com/s/YlcvlUQ-xkz25PuYkeEQqw">后序也可以参考这个文章</a></p><h2 id="一、Docker-简介"><a href="#一、Docker-简介" class="headerlink" title="一、Docker 简介"></a>一、Docker 简介</h2><h3 id="1、基本概述"><a href="#1、基本概述" class="headerlink" title="1、基本概述"></a>1、基本概述</h3><p>Docker是世界领先的软件容器平台。</p><p>Docker是基于Go语言实现的云开源项目。</p><p>Docker的主要目标是“<strong>Build，Ship and Run Any App,Anywhere</strong>”。</p><p>通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到<strong>“一次封装，到处运行”</strong>。</p><p>因为虚拟机模拟的就是带操作系统和环境的，其资源占用多、冗余步骤多、启动慢等不足，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。<strong>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。</strong>有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。</p><p>Docker 在Linux 容器技术的基础上发展过来的。将应用运行在 Docker 容器上面，而 Docker 容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。只需要一次配置好环境，换到不同的机器上就可以一键部署好，大大简化了操作。这样是顺应了 DevOps 开发运维理念。</p><p>针对集群环境，可以快速部署安装。</p><p>Docker是不携带操作系统的，所有Docker的应用就非常的轻巧。另外在调用宿主机的CPU、磁盘等这些资源的时候，拿内存举例，虚拟机时利用Htpervisor去虚拟化内存，整个调用过程时<strong>虚拟化内存-&gt;虚拟物理内存-&gt;真正物理内存</strong>,但是Docker是利用Docker Engine去调用宿主机的资源，这个过程是<strong>虚拟内存-&gt;物理内存</strong>。</p><h2 id="二、Docker-安装"><a href="#二、Docker-安装" class="headerlink" title="二、Docker 安装"></a>二、Docker 安装</h2><h3 id="1、环境检查"><a href="#1、环境检查" class="headerlink" title="1、环境检查"></a>1、环境检查</h3><p>CentOS Docker 安装<br>Docker支持以下的CentOS版本：<br>CentOS 7 (64-bit)<br>CentOS 6.5 (64-bit) 或更高的版本</p><p>前提条件<br>目前，CentOS 仅发行版本中的内核支持 Docker。<br>Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。<br>Docker 运行在 CentOS-6.5 或更高的版本的 CentOS 上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。</p><p>Linux 检查内核版本命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uname</span> -a</span><br><span class="line"><span class="built_in">cat</span> /proc/version</span><br><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure><p>笔者的服务器linux内核版本为:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Linux version 3.10.0-1160.11.1.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) ) #1 SMP Fri Dec 18 16:34:56 UTC 2020</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZ2vc5bu6hb90ck1lw0pdtZ ~]<span class="comment"># lsb_release -a</span></span><br><span class="line">LSB Version::core-4.1-amd64:core-4.1-noarch</span><br><span class="line">Distributor ID:CentOS</span><br><span class="line">Description:CentOS Linux release 7.9.2009 (Core)</span><br><span class="line">Release:7.9.2009</span><br><span class="line">Codename:Core</span><br></pre></td></tr></table></figure><p>如果命令 <code>lsb_release -a</code>提示<code>command not found</code>则需要安装<code>yum install redhat-lsb -y</code>。</p><h3 id="2、基本组成"><a href="#2、基本组成" class="headerlink" title="2、基本组成"></a>2、基本组成</h3><p>docker主机(Host)：安装了Docker程序的机器，Docker直接安装在操作系统（windows &#x2F; linux）上；<br>docker客户端(Client)：连接docker主机进行操作；<br><strong>docker仓库(Registry)：</strong>用来保存各种打包好的软件镜像；<br><strong>docker镜像(Images)：</strong>软件打包好的镜像；放在docker仓库中；<br><strong>docker容器(Container)：</strong>镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用。</p><p>架构图：</p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/docketVSvmware.jpg" alt="img"></h3><h3 id="3、安装步骤"><a href="#3、安装步骤" class="headerlink" title="3、安装步骤"></a>3、安装步骤</h3><p>官方文档也有安装步骤：<a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></p><p><strong>Centos 6.8 安装Docker：</strong></p><p>（1）环境准备</p><p>Docker使用EPEL发布，RHEL系的OS首先要确保已经持有EPEL仓库，否则先检查OS的版本，然后安装相应的EPEL包。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure><p>（2）安装docker</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y docker-io</span><br></pre></td></tr></table></figure><p>（3）配置文件</p><p>安装后的配置文件：&#x2F;etc&#x2F;sysconfig&#x2F;docker</p><p>（4）启停操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service docker start</span><br><span class="line">service docker stop</span><br></pre></td></tr></table></figure><p>（5）验证</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p><strong>Centos 7 安装Docker：</strong></p><p>（1）环境检查</p><p>版本确认：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/redhat-release</span><br></pre></td></tr></table></figure><p>联网检查</p><p>（2）gcc环境安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure><p>（3）旧版卸载</p><p>可参考官网操作，新机器可省略此操作。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><p>（4）安装依赖包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>（5）修改镜像仓库</p><p>主要是为了优化下载速度</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>（6）更新yum包索引</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><p>（7）安装Docker CE</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure><p>（8）启停操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><p>（9）测试验证</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p>（10）配置镜像加速</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">systemctl daemon-reload  <span class="comment"># 重新加载</span></span><br><span class="line">systemctl restart docker <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure><p><code>daemon.json</code> 内容：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">#网易云</span><br><span class="line">&#123;&quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;] &#125;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line"> #阿里云</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://｛自已的编码｝.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不注册就是用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;, &quot;http://hub-mirror.c.163.com&quot;,&quot;https://docker.mirrors.ustc.edu.cn&quot;] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（11）卸载docker</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line">yum -y remove docker-ce</span><br><span class="line"><span class="built_in">rm</span> -rf /var/lib/docker</span><br></pre></td></tr></table></figure><p>关于阿里云或网易云镜像加速</p><p>注册阿里云账户，登录阿里云开发者平台，获取加速器地址，配置参考第（10）步。</p><p>（12）更多命令</p><p> （A） ：<a href="https://docs.docker.com/engine/reference/commandline/docker/">Docker 官方文档</a></p><p> （B）：参考每一个镜像的文档。</p><h3 id="4-测试运行hello-world"><a href="#4-测试运行hello-world" class="headerlink" title="4.测试运行hello-world"></a>4.测试运行hello-world</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323171124370.png" alt="image-20220323171124370"></p><p>run干了什么：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638188169013-68f7d053-b6a9-4795-ae3a-e61f4a38deae.png" alt="image.png"></p><h2 id="三、Docker-原理"><a href="#三、Docker-原理" class="headerlink" title="三、Docker 原理"></a>三、Docker 原理</h2><p>整体架构及底层通信原理简述:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220330113100331.png" alt="image-20220330113100331"></p><p>结构图:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220330113159195.png" alt="image-20220330113159195"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220330113308771.png" alt="image-20220330113308771"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220330113441702.png" alt="image-20220330113441702"></p><h3 id="docker是怎么工作的"><a href="#docker是怎么工作的" class="headerlink" title="docker是怎么工作的"></a>docker是怎么工作的</h3><p>Docker是一个Client-Server结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。 <strong>容器，是一个运行时环境，就是我们前面说到的集装箱。</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22423156/1638188268502-e7e8cdf3-cc93-446f-a18a-7a827d2dd55c.png" alt="image.png"></p><h3 id="为什么Docker比VM快"><a href="#为什么Docker比VM快" class="headerlink" title="为什么Docker比VM快"></a>为什么Docker比VM快</h3><p>(1)docker有着比虚拟机更少的抽象层。由亍docker不需要Hypervisor实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</p><p>(2)docker利用的是宿主机的内核,而不需要Guest OS。因此,当新建一个容器时,docker不需要和虚拟机一样重新加载一个操作系统内核。仍而避免引寻、加载操作系统内核返个比较费时费资源的过程,当新建一个虚拟机时,虚拟机软件需要加载Guest OS,返个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了返个过程,因此新建一个docker容器只需要几秒钟。</p><p>docker和vm的对比表:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323171737029.png" alt="image-20220323171737029"></p><h2 id="四、Docker常用命令"><a href="#四、Docker常用命令" class="headerlink" title="四、Docker常用命令"></a>四、Docker常用命令</h2><h3 id="4-1帮助启动类命令"><a href="#4-1帮助启动类命令" class="headerlink" title="4.1帮助启动类命令"></a>4.1帮助启动类命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl start docker #启动docker</span><br><span class="line">systemctl stop docker #停止</span><br><span class="line">systemctl restart docker #重启</span><br><span class="line">systemctl status docker #查看状态</span><br><span class="line">docker version：详细版本信息    </span><br><span class="line">docker -v：简略版本信息</span><br><span class="line">docker info：对docker镜像、容器、宿主机情况等描述</span><br><span class="line">docker --help：类似于Linux的man，列举所有命令及其含义解释。</span><br><span class="line">docker [command命令] --help #查看某个命令的用法</span><br><span class="line">dockerd --debug: 可以找到为什么docker启动不了的原因</span><br></pre></td></tr></table></figure><h3 id="4-2-镜像命令"><a href="#4-2-镜像命令" class="headerlink" title="4.2 镜像命令"></a>4.2 镜像命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images [OPTIONS] [ARGS]：列出本地主机上的镜像</span><br><span class="line">OPTIONS说明：可以通过docker iamges --<span class="built_in">help</span>查看OPTIONS</span><br><span class="line">● -a ：a表示all，列出本地所有的镜像（含中间映像层）</span><br><span class="line">● -q ：只显示镜像ID。</span><br><span class="line">● --digests ：显示镜像的摘要信息</span><br><span class="line">● --no-trunc：:显示完整的镜像信息</span><br><span class="line">ARGS说明：可以直接写镜像名，比如centos，mysql等等，就是直接查对应的镜像信息。</span><br><span class="line"></span><br><span class="line">docker search [OPTIONS] 某个个xxx镜像名字：查镜像</span><br><span class="line">OPTIONS说明： 可以通过docker search --<span class="built_in">help</span>查看OPTIONS</span><br><span class="line">● --no-trunc : 显示完整的镜像描述</span><br><span class="line">● --<span class="built_in">limit</span> int : 显示最多int条信息。</span><br><span class="line"></span><br><span class="line">docker pull 某个个xxx镜像名字[:TAG]：下载镜像</span><br><span class="line">不写版本号默认下载最新版</span><br><span class="line"></span><br><span class="line">docker rmi 某个个xxx镜像ID：删除镜像</span><br></pre></td></tr></table></figure><p>我们尝试删除一下hello-world</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZ2vc5bu6hb90ck1lw0pdtZ ~]<span class="comment"># docker rmi feb5d9fea6a5</span></span><br><span class="line">Error response from daemon: conflict: unable to delete feb5d9fea6a5 (must be forced) - image is being used by stopped container 4cb79a86d213</span><br><span class="line">[root@iZ2vc5bu6hb90ck1lw0pdtZ ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><p>报错了，因为我们正在使用hello-world需要加-f强制删除<code>docker rmi -f hello-world</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">● 删除单个：docker rmi -f 镜像ID/镜像名[:TAG]</span><br><span class="line">● 删除多个：docker rmi -f 镜像名1:TAG 镜像名2:TAG</span><br><span class="line">● 删除全部：docker rmi -f $(docker images -qa)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZ2vc5bu6hb90ck1lw0pdtZ ~]<span class="comment"># docker rmi -f feb5d9fea6a5</span></span><br><span class="line">Untagged: hello-world:latest</span><br><span class="line">Untagged: hello-world@sha256:bfea6278a0a267fad2634554f4f0c6f31981eea41c553fdf5a83e95a41d40c38</span><br><span class="line">Deleted: sha256:feb5d9fea6a5e9606aa995e879d862b825965ba48de054caab5ef356dc6b3412</span><br></pre></td></tr></table></figure><h3 id="4-3容器命令"><a href="#4-3容器命令" class="headerlink" title="4.3容器命令"></a>4.3容器命令</h3><h4 id="1下载镜像，新建并启动容器"><a href="#1下载镜像，新建并启动容器" class="headerlink" title="1下载镜像，新建并启动容器"></a>1<strong>下载镜像，新建并启动容器</strong></h4><p>有镜像才能创建容器，这是根本前提(下载一个CentOS镜像演示) <code>docker pull centos</code></p><p>一个小插曲：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error response from daemon: pull access denied for centors, repository does not exist or may require &#x27;docker login&#x27;: denied: requested access to the resource is denied</span><br></pre></td></tr></table></figure><p>这是docker pull centos写错了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323173645773.png" alt="image-20220323173645773"></p><p>我们继续。。。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323173752024.png" alt="image-20220323173752024"></p><p>一个centos只有231M。<br>新建并启动容器，</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run [options] imageID/imageName[:TAG] [<span class="built_in">command</span>] [arg..]</span><br><span class="line">options说明：</span><br><span class="line">●--name=<span class="string">&quot;容器新名字&quot;</span>: 为容器指定一个名称；</span><br><span class="line">●-d: 后台运行容器，并返回容器ID，也即启动守护式容器；</span><br><span class="line">●-i：<span class="string">&quot;以交互模式运行容器，通常与 -t 同时使用；</span></span><br><span class="line"><span class="string">●-t：&quot;</span>为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class="line">●-P: 随机端口映射；</span><br><span class="line">●-p: 指定端口映射，有以下四种格式</span><br><span class="line">○ip:hostPort:containerPort</span><br><span class="line">○ip::containerPort</span><br><span class="line">○<span class="string">&quot;hostPort:containerPort</span></span><br><span class="line"><span class="string">○containerPort</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323174025226.png" alt="image-20220323174025226"></p><p>现在我们进入了，centos容器。（-i -t可以合在一起写成-it）</p><h4 id="2列出当前所有正在运行的容器"><a href="#2列出当前所有正在运行的容器" class="headerlink" title="2列出当前所有正在运行的容器"></a>2<strong>列出当前所有正在运行的容器</strong></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps [OPTIONS]</span><br><span class="line">OPTIONS说明：</span><br><span class="line">●-a :列出当前所有正在运行的容器+历史上运行过的</span><br><span class="line">●-l :显示最近创建的容器。</span><br><span class="line">●-n：显示最近n个创建的容器。</span><br><span class="line">●-q :静默模式，只显示容器编号。</span><br><span class="line">●--no-trunc :不截断输出。</span><br></pre></td></tr></table></figure><p>在刚刚centos容器启动的情况下新打开一个终端窗口<br><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323174522574.png" alt="image-20220323174522574"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323174510415.png" alt="image-20220323174510415"></p><p>可以看到正在运行的容器ID，跟我们启动的centos容器一致。这表示我们通过docker在centos上运行了一个centos容器。</p><h4 id="3退出容器"><a href="#3退出容器" class="headerlink" title="3退出容器"></a>3退出容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">exit</span>：容器<span class="string">&quot;停止退出；</span></span><br><span class="line"><span class="string">ctrl+d：容器&quot;</span>停止退出</span><br><span class="line"></span><br><span class="line">ctrl+P+Q：容器<span class="string">&quot;不停止退出</span></span><br></pre></td></tr></table></figure><p>先exit退出我们运行的centos容器实例。然后，我们以centosByDocker为名字，生成一个centos的容器实例：</p><p><code>docker run -it --name centosByDocker centos</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323175241367.png" alt="image-20220323175241367"></p><p>然后按ctrl+P+Q，（按了之后还要按一下回车）回到我们的宿主机：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323175353435.png" alt="image-20220323175353435"></p><p>然后执行<code>docker ps</code>可以看到容器<strong>没有关闭</strong>。说明都没有停止再退出容器</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323175541956.png" alt="image-20220323175541956"></p><h4 id="4启动容器（start-与-run区分开）-amp-重启容器（restart）"><a href="#4启动容器（start-与-run区分开）-amp-重启容器（restart）" class="headerlink" title="4启动容器（start 与 run区分开） &amp; 重启容器（restart）"></a>4<strong>启动容器（start 与 run区分开） &amp; 重启容器（restart）</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start是启动已有容器，docker run是新建并启动容器，这里需要区分开。</span><br><span class="line">启动容器：docker start 容器ID/容器Names即可启动容器。</span><br><span class="line">重启容器：docker restart 容器ID/容器Names</span><br></pre></td></tr></table></figure><p>这些好像都能不能进去</p><h4 id="5回到已经退出的但是仍然在运行的容器"><a href="#5回到已经退出的但是仍然在运行的容器" class="headerlink" title="5回到已经退出的但是仍然在运行的容器"></a>5回到已经退出的但是仍然在运行的容器</h4><p><code>docker attach 容器ID、容器Names</code>能重新进到正在运行的容器中</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323180948856.png" alt="image-20220323180948856"></p><p><code>docker exec -it 容器ID bashShell</code></p><p>这个命令不同于上面的命令，进入到了指定id的容器内部并将【bashshell命令】执行结果返回到宿主机上</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323181244914.png" alt="image-20220323181244914"></p><p><code>nsenter</code>命令[传送门](<a href="https://www.cnblogs.com/xhyan/p/6593075.html">Docker容器进入的4种方式 - 純黑色 - 博客园 (cnblogs.com)</a>)</p><h4 id="6停止容器-amp-强制停止容器"><a href="#6停止容器-amp-强制停止容器" class="headerlink" title="6停止容器 &amp; 强制停止容器"></a><strong>6停止容器 &amp; 强制停止容器</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">停止容器：`docker stop 容器ID/容器name`</span><br><span class="line">强制停止容器：`docker kill 容器ID/容器name`</span><br></pre></td></tr></table></figure><p>停止容器</p><h4 id="7删除已停止的容器"><a href="#7删除已停止的容器" class="headerlink" title="7删除已停止的容器"></a><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323180047806.png" alt="image-20220323180047806">7删除已停止的容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器ID：删除之前需要停止容器。</span><br><span class="line">docker rm -f 容器ID：强制删除，容器运行时可以直接删除。</span><br><span class="line">一次性删除多个容器：</span><br><span class="line">●docker rm -f $(docker ps -a -q)</span><br><span class="line">●docker ps -a -q | xargs docker rm</span><br><span class="line">●docker rm 容器ID1 容器ID2 ..</span><br></pre></td></tr></table></figure><p><font color='red'> 注：删除的时候不需要吧容器ID写全，写两位就可以，删除前请核对，防止误删。 </font></p><h4 id="8重要容器命令"><a href="#8重要容器命令" class="headerlink" title="8重要容器命令"></a>8重要容器命令</h4><p><strong>1. 启动守护式容器</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令：docker run -d 镜像名[:TAG]/镜像ID</span><br><span class="line">（后台启动）启动守护容器centos：docker run -d --name centosde centos</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323182922704.png" alt="image-20220323182922704"></p><p><strong>问题：</strong>然后docker ps进行查看, 会发现容器已经退出，并没有处于运行状态。</p><p>如果在运行的话，会发现，其实已经运行于后台了,应该可以通过docker ps -a显示</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323182956301.png" alt="image-20220323182956301"></p><p><strong>很重要的要说明的一点:</strong> </p><p>Docker容器后台运行，就必须有一个前台进程。</p><p>容器运行的命令如果不是那些一直挂起的命令（比如运行top，tail），就是会自动退出的。<br>这个是docker的机制问题,比如你的web容器,我们以nginx为例，正常情况下,我们配置启动服务只需要启动相应的service即可。例如service nginx start但是,这样做，nginx为后台进程模式运行，就导致docker前台没有运行的应用,，这样的容器后台启动后,会立即自杀因为他觉得他没事可做了。所以，最佳的解决方案是,将你要运行的程序以前台进程的形式运行。</p><p><strong>2. 查看容器日志</strong> </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">命令：docker logs -f -t --tail 数字 容器ID </span><br><span class="line">●-t：表示加入时间戳</span><br><span class="line">●-f：表示跟随最新的日志打印</span><br><span class="line">●--tail 数字：表示显示最后多少条</span><br></pre></td></tr></table></figure><p>后台运行centos，循环打印一句话：<code>docker run -d centos /bin/sh -c &quot;while true;do echo hello ladidol world;sleep 2;done&quot;</code></p><p>这个能显示到docker ps中我是没想到的</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323185149116.png" alt="image-20220323185149116"></p><p>查询一下容器日志：<code>docker logs -f -t --tail 10 容器ID/容器NAME</code></p><p>这里加了-f会不停的追加，如果不加就只会打印–tail指定数目的记录。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323185342763.png" alt="image-20220323185342763"></p><p>ctrl+ z 推出查看容器日志</p><p><strong>3. 查看容器内的进程 &amp; 查看容器内部细节</strong><br>查看容器内进程命令：<code>docker top 容器ID/容器名</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323185721124.png" alt="image-20220323185721124"></p><p><strong>4. 进入正在运行的容器并以命令行交互</strong><br>docker run -it centos 创建并启动一个centos容器，然后ctrl+p+q退出容器但不关闭。<br>那么如何再次进入这个容器呢？<br>●使用<code>docker attach </code>容器ID&#x2F;容器name命令即可再次进入容器。<br>●使用<code>docker exec -it </code>容器ID&#x2F;容器name &#x2F;bin&#x2F;bash</p><p>前面有讲到：</p><p><code>docker attach 容器ID、容器Names</code>能重新进到正在运行的容器中</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323180948856.png" alt="image-20220323180948856"></p><p><code>docker exec -it 容器ID bashShell</code></p><p>这个命令不同于上面的命令，进入到了指定id的容器内部并将【bashshell命令】执行结果返回到宿主机上</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323181244914.png" alt="image-20220323181244914"></p><p>exec与attach的区别：<br>attach 直接进入容器启动命令的终端，不会启动新的进程；<br>exec 是在容器中打开新的终端，并且可以启动新的进程；<br>通过exec进入的容器，使用exit退出时，容器不会关闭。</p><p><strong>关于-i -t 与 -it的区别：</strong>i是创建标准io接口，t是伪造tty终端；如果光一个i的话，虽然也可以输入命令得到输出，但结果很不友好，自己可以试试；如果光一个t，就只有一个tty，你输入什么都没有反应，因为你没有开放对应的输入接口；正确的应该是-it，开放接口并创建伪tty。</p><p><strong>5. 从容器内拷贝文件到主机上</strong><br>命令：<code>docker cp </code> 容器ID:容器内路径 目的主机路径</p><h3 id="4-3总结"><a href="#4-3总结" class="headerlink" title="4.3总结"></a>4.3总结</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638248364830-ec5bca6d-ba97-4138-adb0-e5e0800b1a40.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">attach    Attach to a running container                 # 当前 shell 下 attach 连接指定运行镜像</span><br><span class="line">build     Build an image from a Dockerfile              # 通过 Dockerfile 定制镜像</span><br><span class="line">commit    Create a new image from a container changes   # 提交当前容器为新的镜像</span><br><span class="line">cp        Copy files/folders from the containers filesystem to the host path   #从容器中拷贝指定文件或者目录到宿主机中</span><br><span class="line">create    Create a new container                        # 创建一个新的容器，同 run，但不启动容器</span><br><span class="line">diff      Inspect changes on a container&#x27;s filesystem   # 查看 docker 容器变化</span><br><span class="line">events    Get real time events from the server          # 从 docker 服务获取容器实时事件</span><br><span class="line">exec      Run a command in an existing container        # 在已存在的容器上运行命令</span><br><span class="line">export    Stream the contents of a container as a tar archive   # 导出容器的内容流作为一个 tar 归档文件[对应 import ]</span><br><span class="line">history   Show the history of an image                  # 展示一个镜像形成历史</span><br><span class="line">images    List images                                   # 列出系统当前镜像</span><br><span class="line">import    Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]</span><br><span class="line">info      Display system-wide information               # 显示系统相关信息</span><br><span class="line">inspect   Return low-level information on a container   # 查看容器详细信息</span><br><span class="line">kill      Kill a running container                      # kill 指定 docker 容器</span><br><span class="line">load      Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save]</span><br><span class="line">login     Register or Login to the docker registry server    # 注册或者登陆一个 docker 源服务器</span><br><span class="line">logout    Log out from a Docker registry server          # 从当前 Docker registry 退出</span><br><span class="line">logs      Fetch the logs of a container                 # 输出当前容器日志信息</span><br><span class="line">port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT    # 查看映射端口对应的容器内部源端口</span><br><span class="line">pause     Pause all processes within a container        # 暂停容器</span><br><span class="line">ps        List containers                               # 列出容器列表</span><br><span class="line">pull      Pull an image or a repository from the docker registry server   # 从docker镜像源服务器拉取指定镜像或者库镜像</span><br><span class="line">push      Push an image or a repository to the docker registry server    # 推送指定镜像或者库镜像至docker源服务器</span><br><span class="line">restart   Restart a running container                   # 重启运行的容器</span><br><span class="line">rm        Remove one or more containers                 # 移除一个或者多个容器</span><br><span class="line">rmi       Remove one or more images             # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span><br><span class="line">run       Run a command in a new container              # 创建一个新的容器并运行一个命令</span><br><span class="line">save      Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 load]</span><br><span class="line">search    Search for an image on the Docker Hub         # 在 docker hub 中搜索镜像</span><br><span class="line">start     Start a stopped containers                    # 启动容器</span><br><span class="line">stop      Stop a running containers                     # 停止容器</span><br><span class="line">tag       Tag an image into a repository                # 给源中镜像打标签</span><br><span class="line">top       Lookup the running processes of a container   # 查看容器中运行的进程信息</span><br><span class="line">unpause   Unpause a paused container                    # 取消暂停容器</span><br><span class="line">version   Show the docker version information           # 查看 docker 版本号</span><br><span class="line">wait      Block until a container stops, then print its exit code   # 截取容</span><br></pre></td></tr></table></figure><h2 id="五、Dockers镜像"><a href="#五、Dockers镜像" class="headerlink" title="五、Dockers镜像"></a>五、Dockers镜像</h2><h3 id="5-1-镜像是什么-amp-镜像的特点"><a href="#5-1-镜像是什么-amp-镜像的特点" class="headerlink" title="5.1 镜像是什么 &amp; 镜像的特点"></a>5.1 镜像是什么 &amp; 镜像的特点</h3><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p><p> <strong>1. UnionFS（联合文件系统）</strong> </p><p>UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p><p> <strong>2.  Docker镜像加载原理</strong> </p><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统称为UnionFS。</p><p>bootfs(boot file system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux&#x2F;Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs (root file system) ，在bootfs之上。包含的就是典型 Linux 系统中的 &#x2F;dev, &#x2F;proc, &#x2F;bin, &#x2F;etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638248743091-a2137397-2cc7-42ed-9625-dc30893165ca.png" alt="image.png"></p><p>思考：平时我们安装进虚拟机的CentOS都是好几个G，为什么docker这里才200M？？<br>对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的linux发行版, bootfs基本是一致的, rootfs会有差别, 因此不同的发行版可以公用bootfs。</p><p><strong>3. 镜像分层</strong><br>我们在pull镜像的时候，可以看到docker的镜像好像是一层一层的在下载。<br>拿tomcat为例，一个单独的tomcat一般只有100多M，但是docker拉取的镜像有400多M，这是为什么？<br>因为tomcat的运行不仅仅只需要tomcat，还需要java、centos等等依赖，所以docker的tomcat镜像中会包含有java、centos等等，所以会很大。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638249258111-da897ffa-ddbd-4d28-b025-c5a090f6f4bb.png" alt="image.png"></p><p><strong>为什么镜像要采用这种分层结构？</strong><br>最大的一个好处就是 <strong>- 共享资源。</strong><br>比如：有多个镜像都从相同的 base 镜像构建而来，那么宿主机只需在磁盘上保存一份base镜像，同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p><p><strong>4.镜像的特点</strong></p><p>Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。</p><h3 id="5-2-Docker镜像commit操作补充"><a href="#5-2-Docker镜像commit操作补充" class="headerlink" title="5.2 Docker镜像commit操作补充"></a><strong>5.2 Docker镜像commit操作补充</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit 提交容器副本使之成为一个新的镜像</span><br><span class="line">docker commit -m=“提交的描述信息” -a=“作者” 容器ID 要创建的目标镜像名:[标签名]</span><br></pre></td></tr></table></figure><p> <strong>案例演示</strong><br> <strong>① 拉取tomcat镜像并运行</strong><br>从Hub上下载tomcat镜像到本地并成功运行：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里将host的8888端口映射到容器的8080端口</span></span><br><span class="line">docker run -it -p 8888:8080 tomcat</span><br></pre></td></tr></table></figure><p> 我这里虚拟机没有GUI，所以需要通过windows的浏览器来访问tomcat，先看看防火墙是否开启以及是否开放了8888端口的访问权限。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-port=8888/tcp</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>然后访问还是404。搜了一圈，解决办法：<a href="https://blog.csdn.net/qq_40891009/article/details/103898876">Docker方式启动tomcat,访问首页出现404错误</a><br>是因为docker的tomcat中&#x2F;usr&#x2F;local&#x2F;tomcat下的webapps文件夹是空的，而原本应该在webapps文件夹下的内容都在旁边的webapps.dist文件夹中。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入正在运行的容器目录</span></span><br><span class="line">docer exec -it tomcat容器ID /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将webapps.dist命名为webapps即可，在此之前可以吧webapps重命名成别的名字</span></span><br><span class="line">mv webapps webapps2</span><br><span class="line">mv webapps.dist webapps</span><br></pre></td></tr></table></figure><p>访问成功：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638257655855-7f203155-75fd-48ec-8c66-969df3b1a8cb.png" alt="image.png"></p><p>退出（停止）tomcat：ctrl+c。</p><p>如果使用docker run -it -P tomcat命令：随机分配一个端口号，映射给8080</p><p> ② 使用commit提交我们修改过的tomcat<br><code>docker commit -m &quot;rename webapps.dist to webapps&quot; -a &quot;mrlinxi&quot; 85fc7f7c0182 mrlinxi/tomcat:0.1</code></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22423156/1638263596661-0b994177-b1fd-4d2f-8852-1d8808e8930d.png" alt="image.png"></p><p>新建并运行一个我们自己修改过的tomcat容器</p><p><code>docker run -it -p 3333:8080 mrlinxi/tomcat:0.1 </code>  注意版本号不要掉了不然docker会到仓库中找latest版本的mrlinxi&#x2F;tomcat，显然是找不到的。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638272125196-1db0e1c9-e510-41bd-835b-2c0e03ada7ae.png" alt="image.png"></p><p>访问成功</p><p> ③ 后台运行-d </p><p><code>docker run -d -p 8888:8080 mrlinxi/tomcat:0.1 </code>  后台启动tomcat。</p><p>可以通过<code>docker attach 容器ID</code> 或者<code>docker exec -it 容器ID</code>进入交互页面。</p><h2 id="六、Docker容器数据卷"><a href="#六、Docker容器数据卷" class="headerlink" title="六、Docker容器数据卷"></a>六、Docker容器数据卷</h2><h3 id="6-1-容器数据卷简述"><a href="#6-1-容器数据卷简述" class="headerlink" title="6.1 容器数据卷简述"></a><strong>6.1 容器数据卷简述</strong></h3><p>先来看看Docker的理念：</p><p>●将运用与运行的环境打包形成容器运行 ，运行可以伴随着容器，但是我们对数据的要求希望是持久化的</p><p>●容器之间希望有可能共享数据</p><p>Docker容器产生的数据，如果不通过docker commit生成新的镜像，使得数据做为镜像的一部分保存下来，那么当容器删除后，数据自然也就没有了。为了能保存数据在docker中我们使用卷。</p><p>一句话：有点类似我们Redis里面的rdb和aof文件。</p><p>卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或共享数据的特性：卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷。</p><p>特点：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1数据卷可在容器之间共享或重用数据</span><br><span class="line"></span><br><span class="line">2卷中的更改可以直接生效</span><br><span class="line"></span><br><span class="line">3数据卷中的更改不会包含在镜像的更新中</span><br><span class="line"></span><br><span class="line">4数据卷的生命周期一直持续到没有容器使用它为止</span><br><span class="line"></span><br><span class="line">5容器卷也可以完成主机到容器、容器到主机的数据共享（类似于 docker cp）</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-2-容器数据卷案例"><a href="#6-2-容器数据卷案例" class="headerlink" title="6.2 容器数据卷案例"></a>6.2 容器数据卷案例</h3><ol><li><h4 id="命令添加"><a href="#命令添加" class="headerlink" title="命令添加"></a>命令添加</h4></li></ol><p>命令：docker run -it -v &#x2F;宿主机绝对路径目录:&#x2F;容器内目录  镜像名</p><p>添加之前：</p><p>前者为容器内，后者为宿主机；</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323200254912.png" alt="image-20220323200254912"></p><p>执行</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it -v /myDataVolume:/dataVolumeContainer centos</span><br></pre></td></tr></table></figure><p>可以看到两边都生成了对应的文件夹：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323200831549.png" alt="image-20220323200831549"></p><p>备注：Docker挂载主机目录Docker访问出现cannot open directory .: Permission denied</p><p>解决办法：在挂载目录后多加一个–privileged&#x3D;true参数即可</p><p>检查是否挂载成功：<code>docker inspect 容器ID</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323201328553.png" alt="image-20220323201328553"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323201339368.png" alt="image-20220323201339368"></p><p>已经成功了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638276849687-1d2ac968-80a4-4fc5-97f6-2610fac0d50e.png" alt="image.png">可以看到实现了宿主机跟容器之间的双向同步</p><p>② 容器停止退出后，主机修改后数据是否同步<br>容器先停止退出、主机修改host.txt、容器重启进入、查看主机修改过的host.log</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638277144504-440a8e3b-68a9-407b-82d2-5c17da524f0d.png" alt="image.png"></p><p><strong>③ 命令（带权限）</strong></p><p>带权限的命令：</p><p><code>docker run -it -v /宿主机绝对路径目录:/容器内目录:ro 镜像名</code><br>ro表示read only只读。</p><p>执行：<code>docker run -it -v /myDataVolume:/dataVolumeContainer:ro centos</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638278104965-502de020-2f94-46c8-8a43-8fa5064de443.png" alt="image.png"><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638278136092-718bc608-09ad-4fd1-bdee-7d7cfa30b009.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638278242942-ba82d0ba-0b90-44f1-b339-5f67702ca552.png" alt="image.png"></p><ol start="2"><li>DockerFile添加</li></ol><p>具体描述放到后面讲，这里先使用。</p><p><strong>主机根目录下新建mydocker文件夹并进入</strong>：<code>mkdir mydocker</code></p><p><strong>可在Dockerfile中使用</strong></p><p><strong>VOLUME指令来给镜像添加一个或多个数据卷</strong>：</p><p><code>VOLUME[&quot;/dataVolumeContainer&quot;,&quot;/dataVolumeContainer2&quot;,&quot;/dataVolumeContainer3&quot;]</code></p><p><strong>说明</strong>：</p><p>出于可移植和分享的考虑，用-v 主机目录:容器目录这种方法不能够直接在Dockerfile中实现。</p><p>由于宿主机目录是依赖于特定宿主机的，并不能够保证在所有的宿主机上都存在这样的特定目录。</p><p><strong>File构建：</strong><br>创建一个文件Dockerfile，然后添加以下内容：<br><code>vim Dockerfile</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">volume <span class="built_in">test</span></span></span><br><span class="line">FROM centos   </span><br><span class="line">VOLUME [&quot;/dataVolumeContainer1&quot;,&quot;/dataVolumeContainer2&quot;]</span><br><span class="line">CMD echo &quot;finished,--------success1&quot;</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323202205652.png" alt="image-20220323202205652"></p><p>build后生成镜像：获得一个新的镜像<br><code>docker build -f /mydocker/Dockerfile -t mrlinxi/centos .</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323202220708.png" alt="image-20220323202220708"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323202253780.png" alt="image-20220323202253780"></p><p>run我们设置好的容器：<br><code>docker run -it 27ffb21c539d /bin/bash</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323202458563.png" alt="image-20220323202458563"></p><p>可以看到容器内已经创建好了卷地址。</p><p><strong>通过上述步骤，容器内的卷目录地址已经知道，对应的主机目录地址哪？？</strong></p><p>通过<code>docker inspect 容器ID</code>查看：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638280759530-2b3ce964-ca52-49f4-a35b-3e3f99893544.png" alt="image.png"></p><h3 id="6-3-数据卷容器"><a href="#6-3-数据卷容器" class="headerlink" title="6.3 数据卷容器"></a>6.3 数据卷容器</h3><ol><li><strong>总体介绍</strong></li></ol><p>命名的容器挂载数据卷，其它容器通过挂载这个(父容器)实现数据共享，挂载数据卷的容器，称之为数据卷容器。实际上就是通过父容器传递数据卷的配置，通过传递数据卷的配置，将不同容器挂载到宿主机的相同目录下，从而实现各容器之间的数据传递。</p><p>以上一步新建的镜像mrlinxi&#x2F;centos为模板并运行容器dc01&#x2F;dc02&#x2F;dc03，他们已经具有容器卷&#x2F;dataVolumeContainer1和&#x2F;dataVolumeContainer2</p><ol start="2"><li><strong>容器间传递共享(–volumes-from)</strong></li></ol><p>先启动一个父容器dc01，在dataVolumeContainer2中新增内容</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name dc01 mrlinxi/centos</span><br><span class="line">cd dataVolumeContainer2</span><br><span class="line">touch doc1.txt</span><br><span class="line"></span><br><span class="line">然后ctrl+p+q退出</span><br></pre></td></tr></table></figure><p>dc02&#x2F;dc03继承自dc01，通过–volumes-from继承<br><code>docker run -it --name dc02 --volumes-from dc01 mrlinxi/centos</code><br>然后在dc02和dc03的dataVolumeContainer2中分别添加各自的内容</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name dc02 --volumes-from dc01 mrlinxi/centos</span><br><span class="line">cd dataVolumeContainer2</span><br><span class="line">touch doc2.txt</span><br><span class="line"></span><br><span class="line">docker run -it --name dc03 --volumes-from dc01 mrlinxi/centos</span><br><span class="line">cd dataVolumeContainer2</span><br><span class="line">touch doc3.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638325961173-0a0bfecb-ef9a-48ed-9753-5fb6d76c2ce2.png" alt="image.png"></p><p>回到dc01可以看到02&#x2F;03各自添加的都能共享了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638326029145-e9bbfb14-3537-4197-85ef-3fcec6f7a1d8.png" alt="image.png"></p><p>同理，dc02跟dc03里面都有其他容器的数据<img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638326179150-1b3890a3-61c0-4c35-aff9-a726cf11647f.png" alt="image.png"></p><p>删除dc01，dc02修改后dc03可否访问</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638326385031-9f225650-e7a4-45c3-bc8b-667c8a995f43.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638326404754-e815bf7c-19f5-422e-90b3-979e9d2ae71f.png" alt="image.png"></p><p>删除dc01后，dc02和dc03之间的数据共享并不受影响。</p><p><strong>结论</strong>：容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止</p><h2 id="七-DockerFile解析"><a href="#七-DockerFile解析" class="headerlink" title="七. DockerFile解析"></a>七. DockerFile解析</h2><h3 id="7-1-DockerFile简介"><a href="#7-1-DockerFile简介" class="headerlink" title="7.1 DockerFile简介"></a>7.1 DockerFile简介</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220330123105447.png" alt="image-20220330123105447"></p><p>Dockerfile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本。<br>构建三步骤：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">●编写Dockerfile文件：必须符合file规范</span><br><span class="line">●docker build：docker build -f /mydocker/Dockerfile -t mrlinxi/centos . 通过docker build获得一个自定义的镜像</span><br><span class="line">●docker run</span><br></pre></td></tr></table></figure><p>文件长什么样？下面就是我们使用的centos的Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> centos-7-x86_64-docker.tar.xz /</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.schema-version=<span class="string">&quot;1.0&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.name=<span class="string">&quot;CentOS Base Image&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.vendor=<span class="string">&quot;CentOS&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.license=<span class="string">&quot;GPLv2&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.build-date=<span class="string">&quot;20201113&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.opencontainers.image.title=<span class="string">&quot;CentOS Base Image&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.opencontainers.image.vendor=<span class="string">&quot;CentOS&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.opencontainers.image.licenses=<span class="string">&quot;GPL-2.0-only&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.opencontainers.image.created=<span class="string">&quot;2020-11-13 00:00:00+00:00&quot;</span></span></span><br><span class="line"><span class="comment"># default cmd</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="7-2-DockerFile构建过程解析"><a href="#7-2-DockerFile构建过程解析" class="headerlink" title="7.2 DockerFile构建过程解析"></a>7.2 DockerFile构建过程解析</h3><p>Dockerfile内容基础知识：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 每条保留字指令都必须为大写字母且后面要跟随至少一个参数</span><br><span class="line">- 指令按照从上到下，顺序执行</span><br><span class="line">- \#表示注释</span><br><span class="line">- 每条指令都会创建一个新的镜像层，并对镜像进行提交</span><br></pre></td></tr></table></figure><p>Docker执行Dockerfile的大致流程：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- （1）docker从基础镜像运行一个容器</span><br><span class="line">- （2）执行一条指令并对容器作出修改</span><br><span class="line">- （3）执行类似docker commit的操作提交一个新的镜像层</span><br><span class="line">- （4）docker再基于刚提交的镜像运行一个新容器</span><br><span class="line">- （5）执行dockerfile中的下一条指令直到所有指令都执行完成</span><br></pre></td></tr></table></figure><p>总结：</p><p>从应用软件的角度来看，Dockerfile、Docker镜像与Docker容器分别代表软件的三个不同阶段，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- Dockerfile是软件的原材料</span><br><span class="line">- Docker镜像是软件的交付品</span><br><span class="line">- Docker容器则可以认为是软件的运行态。</span><br></pre></td></tr></table></figure><p>Dockerfile面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可，合力充当Docker体系的基石。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638329841397-6503d73a-3107-4e68-85b5-5d2f690e19fb.png" alt="img"></p><ol><li>Dockerfile，需要定义一个Dockerfile，Dockerfile定义了进程需要的一切东西。Dockerfile涉及的内容包括执行代码或者是<strong>文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程</strong>(当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制)等等;</li><li>Docker镜像，在用Dockerfile定义一个文件之后，docker build时会产生一个Docker镜像，当运行 Docker镜像时，会真正开始提供服务;</li><li>Docker容器，容器是直接提供服务的。</li></ol><h3 id="7-3-DockerFile体系结构-保留字指令"><a href="#7-3-DockerFile体系结构-保留字指令" class="headerlink" title="7.3 DockerFile体系结构(保留字指令)"></a>7.3 DockerFile体系结构(保留字指令)</h3><p><strong>FROM</strong>：基础镜像，当前新镜像是基于哪个镜像的。基于什么镜像进行修改；<br><strong>MAINTAINER</strong>：镜像维护者的姓名和邮箱地址；<br><strong>RUN</strong>：容器构建时需要运行的命令；(docker build)<br><strong>EXPOSE</strong>：当前容器对外暴露出的端口；<br><strong>WORKDIR</strong>：指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点，没写默认根目录<code>/</code>；<br><strong>ENV</strong>：用来在构建镜像过程中设置环境变量；<br>例如：<code>ENV MY_PATH /usr/mytest</code> 这个环境变量可以在后续的任何RUN指令中使用，这就如同在命令前面指定了环境变量前缀一样；也可以在其它指令中直接使用这些环境变量。<br>比如：<code>WORKDIR $MY_PATH</code><br><strong>ADD</strong>：将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包；<br><strong>COPY</strong>：类似ADD，拷贝文件和目录到镜像中。将从构建上下文目录中 &lt;源路径&gt; 的文件&#x2F;目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置；  <code>COPY src dest</code>   <code>COPY [&quot;src&quot;, &quot;dest&quot;]</code><br><strong>ADD</strong>跟<strong>COPY</strong>的区别在于ADD在复制后会自动解压缩和处理URL，而COPY仅仅进行复制。<br><strong>VOLUME</strong>：容器数据卷，用于数据保存和持久化工作；<br><strong>CMD</strong>：指定一个容器启动时要运行的命令；Dockerfile 中可以有多个 CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数替换（后面案例会具体说明）；(docker run)<br><strong>ENTRYPOINT</strong>：指定一个容器启动时要运行的命令；ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数；<br><strong>CMD</strong>与<strong>ENTRYPOINT</strong>的区别是CMD存在多个时只有最后一个生效以及CMD会被docker run之后的参数替换；而ENTRYPOINT是追加命令。<br><strong>ONBUILD</strong>：当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发<br><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638330806027-f7d631f5-99cd-4831-aea3-e9367ddf9d84.png" alt="img"></p><p>**entrypoint和cmd的用法实例:**包含cmd被覆盖对比</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220330130137701.png" alt="image-20220330130137701"></p><p>主要指令结构:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220330130322239.png" alt="image-20220330130322239"></p><p>.gitlab-ci.yml文件中的</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一些变量, 下面各阶段会使用</span></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">server_ip:</span> <span class="number">106.12</span><span class="number">.167</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">jar_name:</span> <span class="string">core-1.0-SNAPSHOT.jar</span></span><br><span class="line">  <span class="attr">java_path:</span> <span class="string">/usr/local/jdk/jdk1.8.0_321/bin</span></span><br><span class="line">  <span class="attr">TAG:</span> <span class="string">official-website:v1.0</span>  <span class="comment"># 镜像名称</span></span><br><span class="line">  <span class="attr">CONTAINER_NAME:</span> <span class="string">official-website-home</span></span><br><span class="line">  <span class="attr">PORT:</span> <span class="number">8999</span></span><br><span class="line">  <span class="attr">DOCKER_DRIVER:</span> <span class="string">overlay2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义执行的各个阶段及顺序</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 maven 镜像打包项目</span></span><br><span class="line"><span class="attr">maven-build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">maven:3.5.0-jdk-8</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">package</span> <span class="string">-B</span> <span class="string">-Dmaven.test.skip=true</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">m2-repo</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.m2/repository</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">core/target/$jar_name</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">build-master:</span> <span class="comment"># 定义的 Jobs 之一，用于构建 Docker 镜像。负责执行 deploy 这一流程。具体执行 build 和 run。</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">rmi</span> <span class="string">-f</span> <span class="string">$TAG</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">$TAG</span> <span class="string">.</span> <span class="comment"># 构件镜像</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">rm</span> <span class="string">-f</span> <span class="string">$CONTAINER_NAME</span> <span class="string">||</span> <span class="literal">true</span> <span class="comment"># 删除容器</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">--restart=always</span> <span class="string">--name</span> <span class="string">$CONTAINER_NAME</span> <span class="string">--net=host</span> <span class="string">$TAG</span> <span class="comment"># 运行容器</span></span><br><span class="line">  <span class="attr">only:</span> <span class="comment"># 指定哪些branch的push commit会触发执行该job，本例子指定只有master才会执行deploy这个job</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里是gitlab上面项目的dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/tmp&quot;</span>,<span class="string">&quot;/log&quot;</span>]</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./core/target/core-1.0-SNAPSHOT.jar core-1.0-SNAPSHOT.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8999</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;-Xmx400m&quot;</span>,<span class="string">&quot;./core-1.0-SNAPSHOT.jar&quot;</span>,<span class="string">&quot;&amp;&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="7-4-案例"><a href="#7-4-案例" class="headerlink" title="7.4 案例"></a>7.4 案例</h3><h4 id="1-Base镜像-scratch"><a href="#1-Base镜像-scratch" class="headerlink" title="1. Base镜像(scratch)"></a>1. Base镜像(scratch)</h4><p>Docker Hub 中 99% 的镜像都是通过在 base 镜像中安装和配置需要的软件构建出来的。</p><h4 id="2-自定义镜像mycentos"><a href="#2-自定义镜像mycentos" class="headerlink" title="2. 自定义镜像mycentos"></a>2. 自定义镜像mycentos</h4><p>Hub默认CentOS镜像什么情况：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638339665774-80743dc3-bd3f-4781-bd49-68edecce815a.png" alt="img"></p><p>自定义mycentos目的使我们自己的镜像具备如下：</p><p>登陆后的默认路径、vim编辑器、查看网络配置ifconfig支持</p><p>① 编写自定义镜像的Dockerfile</p><p>我们在宿主机的<code>/mydocker</code>文件夹下，新建一个Dockerfile：<code>vim Dockerfile2</code>，写入下面的内容</p><p>这是.gitlab-ci.yml文件中的东西</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一些变量, 下面各阶段会使用</span></span><br><span class="line">variables:</span><br><span class="line">  server_ip: <span class="number">106.12</span>.<span class="number">167.1</span></span><br><span class="line">  jar_name: core-<span class="number">1.0</span>-SNAPSHOT.jar</span><br><span class="line">  java_path: /usr/local/jdk/jdk1.<span class="number">8.0</span>_321/bin</span><br><span class="line">  TAG: official-website:v1.<span class="number">0</span>  <span class="comment"># 镜像名称</span></span><br><span class="line">  CONTAINER_NAME: official-website-home</span><br><span class="line">  PORT: <span class="number">8999</span></span><br><span class="line">  DOCKER_DRIVER: overlay2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义执行的各个阶段及顺序</span></span><br><span class="line">stages:</span><br><span class="line">  - build</span><br><span class="line">  - deploy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 maven 镜像打包项目</span></span><br><span class="line">maven-build:</span><br><span class="line">  stage: build</span><br><span class="line">  image: maven:<span class="number">3.5</span>.<span class="number">0</span>-jdk-<span class="number">8</span></span><br><span class="line">  script:</span><br><span class="line">    - mvn package -B -Dmaven.test.skip=true</span><br><span class="line">  cache:</span><br><span class="line">    key: m2-repo</span><br><span class="line">    paths:</span><br><span class="line">      - .m2/repository</span><br><span class="line">  artifacts:</span><br><span class="line">    paths:</span><br><span class="line">      - core/target/$jar_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">build-master: <span class="comment"># 定义的 Jobs 之一，用于构建 Docker 镜像。负责执行 deploy 这一流程。具体执行 build 和 run。</span></span><br><span class="line">  stage: deploy</span><br><span class="line">  script:</span><br><span class="line">    - docker rmi -f $TAG</span><br><span class="line">    - docker build -t $TAG . <span class="comment"># 构件镜像</span></span><br><span class="line">    - docker rm -f $CONTAINER_NAME || true <span class="comment"># 删除容器</span></span><br><span class="line">    - docker <span class="keyword">run</span><span class="language-bash"> -d --restart=always --name <span class="variable">$CONTAINER_NAME</span> --net=host <span class="variable">$TAG</span> <span class="comment"># 运行容器</span></span></span><br><span class="line">  only: <span class="comment"># 指定哪些branch的push commit会触发执行该job，本例子指定只有master才会执行deploy这个job</span></span><br><span class="line">    - master</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>② 构建自定义镜像——docker build</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f /mydocker/Dockerfile2 -t mycentos:0.1 .</span><br></pre></td></tr></table></figure><p>build语句最后面一个<code>.</code>表示当前目录。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638342897692-120c3467-e33e-45a7-b872-f384e5ea9e2d.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638342983932-5d1acdd1-4c9e-4181-b4ea-b7f569d245dc.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638342971620-02108df8-58de-4c01-b98b-fb160e364e7d.png" alt="img"></p><h4 id="③-运行自定义镜像——docker-run"><a href="#③-运行自定义镜像——docker-run" class="headerlink" title="③ 运行自定义镜像——docker run"></a>③ 运行自定义镜像——docker run</h4><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638343174481-5f9a3806-9c45-4b0f-9dc2-463a9ebc1a23.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it mycentos:0.1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638343199833-59ddfef7-fdbf-4eb8-a0dd-15e3eb71572d.png" alt="img"></p><p>默认目录是&#x2F;usr&#x2F;locl，可以看到我们自己的新镜像已经支持vim&#x2F;ifconfig命令，拓展成功。</p><h4 id="④-列出镜像的变更历史"><a href="#④-列出镜像的变更历史" class="headerlink" title="④ 列出镜像的变更历史"></a>④ 列出镜像的变更历史</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker history 镜像名</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638343381128-8ce9fb4b-13ca-44ce-81a0-d33fcd71fd56.png" alt="img"></p><h4 id="3-CMD-x2F-ENTRYPOINT-镜像案例"><a href="#3-CMD-x2F-ENTRYPOINT-镜像案例" class="headerlink" title="3. CMD&#x2F;ENTRYPOINT 镜像案例"></a>3. CMD&#x2F;ENTRYPOINT 镜像案例</h4><p>CMD&#x2F;ENTRYPOINT都是指定一个容器启动时要运行的命令</p><h5 id="①-CMD镜像案例"><a href="#①-CMD镜像案例" class="headerlink" title="① CMD镜像案例"></a>① CMD镜像案例</h5><p>Dockerfile 中可以有多个 CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数替换。</p><p>这里以tomcat为例，tomcat的dockerfile最后一句是</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638343671342-f35165d2-de7f-4432-83da-c923ee3dff59.png" alt="img"></p><p>正常我们启动tomcat的命令是：<code>docker run -it -p 主机端口:8080 tomcat</code> </p><p>现在我们执行这样一句命令：<code>docker run -it -p 8888:8080 tomcat ls -l</code></p><p>这样就相当于在tomcat的dockerfile后面又加了一句<code>CMD ls -l</code>，因此会覆盖掉之前的语句。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638343887509-4f0065c1-f5e1-46c5-9c20-df16d1955d1d.png" alt="img"></p><p>此时tomcat并没有运行，只是查看了默认路径下的文件。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638343953044-f74142c5-8327-4893-9634-e0fc4de40da7.png" alt="img"></p><h5 id="②-ENTRYPOINT镜像案例"><a href="#②-ENTRYPOINT镜像案例" class="headerlink" title="② ENTRYPOINT镜像案例"></a>② ENTRYPOINT镜像案例</h5><p>docker run 之后的参数会被当做参数传递给 ENTRYPOINT，之后形成新的命令组合。</p><p><strong>制作CMD版可以查询IP信息的容器：</strong></p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install -y curl</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-s&quot;</span>, <span class="string">&quot;https://ip.cn&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>crul命令解释：curl命令可以用来执行下载、发送各种HTTP请求，指定HTTP头部等操作。curl是将下载文件输出到stdout。</p><p>使用命令：curl <a href="http://www.baidu.com,执行后,www.baidu.com的html就会显示在屏幕上了.这是最简单的使用方法.用这个命令获得了http//curl.haxx.se%E6%8C%87%E5%90%91%E7%9A%84%E9%A1%B5%E9%9D%A2%EF%BC%8C%E5%90%8C%E6%A0%B7%EF%BC%8C%E5%A6%82%E6%9E%9C%E8%BF%99%E9%87%8C%E7%9A%84URL%E6%8C%87%E5%90%91%E7%9A%84%E6%98%AF%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E6%88%96%E8%80%85%E4%B8%80%E5%B9%85%E5%9B%BE%E9%83%BD%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%88%B0%E6%9C%AC%E5%9C%B0%E3%80%82%E5%A6%82%E6%9E%9C%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%98%AFHTML%E6%96%87%E6%A1%A3%EF%BC%8C%E9%82%A3%E4%B9%88%E7%BC%BA%E7%9C%81%E7%9A%84%E5%B0%86%E5%8F%AA%E6%98%BE%E7%A4%BA%E6%96%87%E4%BB%B6%E5%A4%B4%E9%83%A8%EF%BC%8C%E5%8D%B3HTML%E6%96%87%E6%A1%A3%E7%9A%84header%E3%80%82%E8%A6%81%E5%85%A8%E9%83%A8%E6%98%BE%E7%A4%BA%EF%BC%8C%E8%AF%B7%E5%8A%A0%E5%8F%82%E6%95%B0">http://www.baidu.com，执行后，www.baidu.com的html就会显示在屏幕上了。这是最简单的使用方法。用这个命令获得了http://curl.haxx.se指向的页面，同样，如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地。如果下载的是HTML文档，那么缺省的将只显示文件头部，即HTML文档的header。要全部显示，请加参数</a> -i</p><p>构建镜像：<code>docker build -f /mydocker/Dockerfile3 -t myip .</code></p><p>创建并启动容器：<code>docker run myip</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638345202928-05625f38-4bba-48cb-b1a7-3b4f89b034ff.png" alt="img"></p><p>现在返回的是网页的html文件。</p><p><strong>如果我们希望显示 HTTP 头信息</strong>，就需要加上 <code>-i</code> 参数：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638345312728-f6526519-cf9d-4471-a24e-02ac072f8bd1.png" alt="img"></p><p>加上<code>-i</code>后报错了。我们可以看到可执行文件找不到的报错，executable file not found。</p><p>之前我们说过，跟在镜像名后面的是 command，运行时会替换 CMD 的默认值。因此这里的 -i 替换了原来的 CMD，而不是添加在原来的 curl -s <a href="https://ip.cn/">https://ip.cn</a> 后面。而 -i 根本不是命令，所以自然找不到。那么如果我们希望加入 -i 这参数，我们就必须重新完整的输入这个命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run myip curl -s https://ip.cn -i</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638345446853-45d8a908-b0f9-4829-9dc4-26d36ff5642d.png" alt="img"></p><p>为了解决上述问题，<strong>制作ENTROYPOINT版查询IP信息的容器</strong>。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install -y curl</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-s&quot;</span>, <span class="string">&quot;http://ip.cn&quot;</span> ]</span></span><br><span class="line">docker build -f /mydocker/Dockerfile4 -t myip2</span><br><span class="line">docker <span class="keyword">run</span><span class="language-bash"> myip2 -i</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638345830872-e6ea7ad8-5414-4531-b40e-8ac0525ec186.png" alt="img"></p><p>现在只用追加一个<code>-i</code>即可打印请求头跟html文件。</p><h5 id="③-ONBUILD案例"><a href="#③-ONBUILD案例" class="headerlink" title="③ ONBUILD案例"></a>③ ONBUILD案例</h5><p>直接在Dockerfile4上修改，追加一句<code>ONBUILD RUN echo &quot;father onbuild-----------10086&quot;</code></p><p>然后使用Dockerfile4构建镜像：<code>docker build -f /mydocker/Dockerfile4 -t myip_father .</code></p><p>复制Dockerfile3命名为Dockerfile5，修改Dockerfile5，直接继承自Dockerfile4：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> myip_father</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install -y curl</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-s&quot;</span>, <span class="string">&quot;https://ip.cn&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>使用Dockerfile5构建镜像：<code>docker build -f /mydocker/Dockerfile5 -t myip_son .</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638346429961-5fa21a69-6fc1-4116-9153-5a772ed513d4.png" alt="img"></p><h3 id="7-5-自定义镜像Tomcat9"><a href="#7-5-自定义镜像Tomcat9" class="headerlink" title="7.5 自定义镜像Tomcat9"></a>7.5 自定义镜像Tomcat9</h3><h4 id="1-创建目录"><a href="#1-创建目录" class="headerlink" title="1. 创建目录"></a>1. 创建目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /mydocker/tomcat9</span><br></pre></td></tr></table></figure><p>在该目录下新建touch.txt文件</p><h4 id="2-将jdk和tomcat安装的压缩包拷贝进上述目录"><a href="#2-将jdk和tomcat安装的压缩包拷贝进上述目录" class="headerlink" title="2. 将jdk和tomcat安装的压缩包拷贝进上述目录"></a>2. 将jdk和tomcat安装的压缩包拷贝进上述目录</h4><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638349761007-70a682ef-bec4-47b8-afc1-a7f46998d9af.png" alt="img"></p><h4 id="3-在tomcat9目录下新建Dockerfile文件"><a href="#3-在tomcat9目录下新建Dockerfile文件" class="headerlink" title="3. 在tomcat9目录下新建Dockerfile文件"></a>3. 在tomcat9目录下新建Dockerfile文件</h4><p><strong>注意一下</strong>，Dockerfile文件里面涉及到<strong>jdk跟tomcat版本</strong>的地方<strong>一定要确定跟你放在tomcat9文件夹下的一致</strong>（别复制粘贴了就是build，到时候run运行不出来）</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span>         centos</span><br><span class="line"><span class="keyword">MAINTAINER</span>    mrzhme&lt;mrzhme@vip.qq.com&gt;</span><br><span class="line"><span class="comment">#把宿主机当前上下文的c.txt拷贝到容器/usr/local/路径下</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> c.txt /usr/local/cincontainer.txt</span></span><br><span class="line"><span class="comment">#把java与tomcat添加到容器中</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> jdk-8u301-linux-x64.tar.gz /usr/local/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> apache-tomcat-9.0.55.tar.gz /usr/local/</span></span><br><span class="line"><span class="comment">#安装vim编辑器</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install vim</span></span><br><span class="line"><span class="comment">#设置工作访问时候的WORKDIR路径，登录落脚点</span></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="comment">#配置java与tomcat环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/jdk1.<span class="number">8.0</span>_301</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"><span class="keyword">ENV</span> CATALINA_HOME /usr/local/apache-tomcat-<span class="number">9.0</span>.<span class="number">55</span></span><br><span class="line"><span class="keyword">ENV</span> CATALINA_BASE /usr/local/apache-tomcat-<span class="number">9.0</span>.<span class="number">55</span></span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"><span class="comment">#容器运行时监听的端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span>  <span class="number">8080</span></span><br><span class="line"><span class="comment">#启动时运行tomcat</span></span><br><span class="line"><span class="comment"># ENTRYPOINT [&quot;/usr/local/apache-tomcat-9.0.55/bin/startup.sh&quot; ]</span></span><br><span class="line"><span class="comment"># CMD [&quot;/usr/local/apache-tomcat-9.0.55/bin/catalina.sh&quot;,&quot;run&quot;]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /usr/local/apache-tomcat-9.0.55/bin/startup.sh &amp;&amp; <span class="built_in">tail</span> -F /usr/local/apache-tomcat-9.0.55/bin/logs/catalina.out</span></span><br></pre></td></tr></table></figure><h4 id="4-构建镜像：docker-build-t-mrlinxitomcat9"><a href="#4-构建镜像：docker-build-t-mrlinxitomcat9" class="headerlink" title="4. 构建镜像：docker build -t mrlinxitomcat9 ."></a>4. 构建镜像：<code>docker build -t mrlinxitomcat9 .</code></h4><p><strong>注意：</strong>这里为什么没有加 -f 和Dockerfile的路径？Dockerfile的标准文件名就是Dockerfile，当当前目录下用于构建镜像的Dockerfile的文件名是标准文件名时，可以省略-f+路径。这时Docker会直接读取当前目录下名为Dockerfile的文件进行镜像的构建。</p><h4 id="5-创建容器并启动"><a href="#5-创建容器并启动" class="headerlink" title="5. 创建容器并启动"></a>5. 创建容器并启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8888:8080 --name myt9 -v /mydocker/tomcat9/test:/usr/local/apache-tomcat-9.0.55/webapps/test -v /mydocker/tomcat9/tomcat9logs/:/usr/local/apache-tomcat-9.0.55/logs --privileged=true mrlinxitomcat9</span><br></pre></td></tr></table></figure><h4 id="6-测试"><a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试</h4><p>记得防火墙开放对应的端口（直接关闭防火墙也可以，但是不推荐）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-port=8888/tcp</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638356524487-9744cde1-e0f5-4dd6-bd3f-8bdc55c6249a.png" alt="img">访问成功。</p><h4 id="7-结合前述的容器卷将测试的web服务test发布"><a href="#7-结合前述的容器卷将测试的web服务test发布" class="headerlink" title="7. 结合前述的容器卷将测试的web服务test发布"></a>7. 结合前述的容器卷将测试的web服务test发布</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /mydocker/tomcat9/test</span><br><span class="line">mkdir WEB-INF  </span><br></pre></td></tr></table></figure><p>在test目录下创建a.jsp文件，在WEB-INF下创建web.xml文件</p><p>web.xml：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>test<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>a.jsp：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    -----------welcome------------</span><br><span class="line">    &lt;%=&quot;i am in docker tomcat self &quot;%&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &lt;% System.out.println(&quot;=============docker tomcat self&quot;);%&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>宿主机创建的文件已经同步过去了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638357904149-61440767-ec7e-4d2f-98e5-52f6283ad049.png" alt="img"></p><p>重启一下容器：<code>docker restart myt9</code>，访问我们刚才发布的test</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638358027262-c2776092-7632-40f8-9486-2a698fe1ae60.png" alt="img"></p><h3 id="7-6-总结"><a href="#7-6-总结" class="headerlink" title="7.6 总结"></a>7.6 总结</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638358194475-8fae9e61-e779-4b62-a12a-432c276b9466.png" alt="img"></p><h2 id="八、Docker常用安装"><a href="#八、Docker常用安装" class="headerlink" title="八、Docker常用安装"></a>八、Docker常用安装</h2><h3 id="8-1-总体步骤"><a href="#8-1-总体步骤" class="headerlink" title="8.1 总体步骤"></a>8.1 总体步骤</h3><p>搜索镜像-&gt;拉取镜像-&gt;查看镜像-&gt;启动镜像-&gt;停止容器-&gt;移除容器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search xxx` -&gt; `docker pull xxx:TAG` -&gt; `docker images xxx` -&gt; `docker run [-itd -p port:port] [--name yyy] xxx:TAG` -&gt; `docker stop 容器ID/yyy` -&gt; `docker rm [-f] yyy</span><br></pre></td></tr></table></figure><h3 id="8-2-安装mysql"><a href="#8-2-安装mysql" class="headerlink" title="8.2 安装mysql"></a>8.2 安装mysql</h3><h4 id="mysql5-7"><a href="#mysql5-7" class="headerlink" title="mysql5.7"></a>mysql5.7</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line">docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=10086 \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure><p>命令说明：</p><p>-p 12345:3306：将主机的3306端口映射到docker容器的3306端口。</p><p>–name mysql：运行服务名字</p><p>-v &#x2F;mydata&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql ：将主机&#x2F;mydata&#x2F;mysql&#x2F;conf目录，挂载到容器的&#x2F;etc&#x2F;mysql目录</p><p>-v &#x2F;mydata&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql：将主机的&#x2F;mydata&#x2F;mysql&#x2F;data目录，挂载到容器的&#x2F;var&#x2F;lib&#x2F;mysql目录</p><p>-v &#x2F;mydata&#x2F;mysql&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql：将主机的&#x2F;mydata&#x2F;mysql&#x2F;log目录，挂载到容器的&#x2F;var&#x2F;log&#x2F;mysql目录</p><p>-e MYSQL_ROOT_PASSWORD&#x3D;10086：初始化 root 用户的密码。</p><p>-d mysql:5.7 : 后台程序运行mysql5.7</p><p>使用windows上的sqlyog进行远程连接：</p><p>记得关闭宿主机防火墙或者开启3306端口</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看防火墙信息，看哪些端口可以访问</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者开启3306端口访问（推荐）</span></span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=3306/tcp</span><br><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638456614470-3fdeeed3-c09b-4f91-ab48-ad906e106adf.png" alt="img"></p><h4 id="mysql8"><a href="#mysql8" class="headerlink" title="mysql8"></a>mysql8</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:8.0.22</span><br><span class="line"></span><br><span class="line">docker run -p 3333:3306 --name mysql8 \</span><br><span class="line">-v /mydata/mysql8/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql8/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql8/conf:/etc/mysql \</span><br><span class="line">-v /mydata/mysql8/mysql-files:/var/lib/mysql-files \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=10086 \</span><br><span class="line">-d mysql:8.0.22</span><br></pre></td></tr></table></figure><p>mysql8 需要多加一个<code>-v /mydata/mysql8/mysql-files:/var/lib/mysql-files</code> 不然启动报错。我们尝试使用windows上的sqlyog远程连接docker启动的mysql8容器，发现报错</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638456847352-cf34e758-fd52-448c-bead-723e5ff170a5.png" alt="img"></p><p>这是因为mysql8默认使用caching_sha2_password加密方式，而sqlyog不支持，所以需要修改加密规则为mysql_native_password</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过/bin/bash 进入mysql8容器</span></span><br><span class="line">docker exec -it mysql8 /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登陆数据库</span></span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>随后我们需要查看是否有不受ip限制的用户，以及修改加密方式</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 切换到mysql数据库</span><br><span class="line">use mysql</span><br><span class="line"></span><br><span class="line"># 查看<span class="keyword">user</span>表中的用户和host信息</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>, host <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638500559346-3608511d-01fd-4333-9827-ac6af6ea4119.png" alt="img"></p><p>可以看到，root已经有一个%，现在修改root@%的加密规则（如果你想新建一个不受访问ip限制的用户也可以mysql高级篇有详细记录：<a href="https://www.yuque.com/mrlinxi/pxvr4g/rigw3d#hKp7S">远程访问授权</a>)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 修改<span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>用户的密码规则和密码</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;10086&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 设置密码永不过期</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;10086&#x27;</span> PASSWORD EXPIRE NEVER;</span><br><span class="line"></span><br><span class="line">#刷新权限</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>再次测试远程连接：</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22423156/1638500835658-c77b71e1-32af-488e-9820-284cd73cc9a1.png" alt="img"> 连接成功！</p><h4 id="使用docker对mysql容器中的数据进行备份"><a href="#使用docker对mysql容器中的数据进行备份" class="headerlink" title="使用docker对mysql容器中的数据进行备份"></a>使用docker对mysql容器中的数据进行备份</h4><p>将docker mysql容器中的所有数据库导出到宿主机的&#x2F;mydata&#x2F;mysql8&#x2F;all-databases.sql文件中</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec myql服务容器ID sh -c &#x27; exec mysqldump --all-databases -uroot -p&quot;10086&quot; &#x27; &gt; /mydata/mysql8/all-databases.sql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果使用UTF-16编码 用--result-file= 替换&gt;</span></span><br><span class="line">docker exec myql服务容器ID sh -c &#x27; exec mysqldump --all-databases -uroot -p&quot;10086&quot; &#x27; --result-file=/mydata/mysql8/all-databases.sql</span><br></pre></td></tr></table></figure><p>mysqldump是mysql自带的逻辑备份工具。命令格式：<a href="https://dev.mysql.com/doc/refman/8.0/en/mysqldump.html">官网mysqldump</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump [选项] 数据库名 [表名] &gt; /路径/filename.sql</span><br><span class="line">mysqldump [选项] --数据库名 [选项 表名] &gt; /路径/filename.sql</span><br><span class="line">mysqldump [选项] --all-databases [选项] &gt; /路径/filename.sql</span><br></pre></td></tr></table></figure><p>常用选项说明：</p><table><thead><tr><th>参数名</th><th>缩写</th><th>含义</th></tr></thead><tbody><tr><td>–host</td><td>-h</td><td>服务器IP地址</td></tr><tr><td>–port</td><td>-P</td><td>服务器端口号</td></tr><tr><td>–user</td><td>-u</td><td>mysql用户名</td></tr><tr><td>–password</td><td>-p</td><td>mysql密码</td></tr><tr><td>–database</td><td></td><td>指定要备份的数据库</td></tr><tr><td>–all-databases</td><td></td><td>备份mysql上的所有数据库</td></tr><tr><td>–compact</td><td></td><td>压缩模式，产生更少的输出</td></tr><tr><td>–comments</td><td></td><td>添加注释信息</td></tr></tbody></table><h3 id="8-3-安装redis"><a href="#8-3-安装redis" class="headerlink" title="8.3 安装redis"></a>8.3 安装redis</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br><span class="line"></span><br><span class="line">docker run -p 6379:6379 -v /mydata/redis/data:/data -v /mydata/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf  -d redis redis-server /usr/local/etc/redis/redis.conf --appendonly yes</span><br></pre></td></tr></table></figure><p>–appendonly yes 表示使用AOF进行持久化 （redis默认使用rdb进行持久化）</p><p>redis.conf是个文件夹，不是个文件 (小声BB：这个redis.conf文件夹是不是太容易引起歧义了？还有redis-server启动的时候，后面跟的那串不是指定的配置文件的路径吗，讲道理redis.conf应该就是个配置文件才对)；</p><p>在主机&#x2F;mydata&#x2F;redis&#x2F;conf&#x2F;redis.conf目录下新建redis.conf文件</p><p><code>vim /mydata/redis/conf/redis.conf</code>  <a href="https://www.yuque.com/attachments/yuque/0/2021/txt/22423156/1638542972834-f404cbca-6492-4a41-adcd-b6ff934282d3.txt">📎redis.conf.txt</a></p><p>测试redis-cli连接：<code>docker exec -it redis容器ID redis-cli</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638543060470-c9d2ae73-1dcf-40d9-8e07-c0f758b27352.png" alt="img"></p><p>测试生成持久化文件：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638543142322-5e0e0c2d-e57d-4801-b432-bf22bf018a99.png" alt="img"></p><h2 id="九、本地镜像发布到阿里云"><a href="#九、本地镜像发布到阿里云" class="headerlink" title="九、本地镜像发布到阿里云"></a>九、本地镜像发布到阿里云</h2><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638543174016-789c3bbe-217b-49d8-a3bf-7be236507bcc.png" alt="img"></p><h3 id="8-1-镜像的生成方法"><a href="#8-1-镜像的生成方法" class="headerlink" title="8.1 镜像的生成方法"></a>8.1 镜像的生成方法</h3><ul><li><p>前面讲过的DockerFile</p></li><li><p>从容器创建一个新的镜像：<code>docker commit [OPTIONS] 容器ID [REPOSITORY[:TAG]]</code></p></li><li><ul><li>OPTIONS选项说明：-a：提交的镜像作者、-m：提交时的说明文字</li></ul></li></ul><p>我们之前自己做了一个包含vim和ifconfig的centos——mycentos:0.1，现在我们把它更新到0.2，并生成一个0.2的镜像。</p><p>先看看mycentos:0.1有没有容器<code>docker ps -a</code>，没有就创建一个容器，<code>docker run -itd mycentos:0.1</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit -a mrlinxi -m &quot;new contos 0.2 from 0.1&quot; 容器ID mycentos:0.2</span><br></pre></td></tr></table></figure><p>这样就得到了mycentos:0.2的镜像</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638579150604-5e5e175b-d5de-4522-9a56-ff3e68d41028.png" alt="img"></p><h3 id="9-2-将本地镜像推送到阿里云"><a href="#9-2-将本地镜像推送到阿里云" class="headerlink" title="9.2 将本地镜像推送到阿里云"></a>9.2 将本地镜像推送到阿里云</h3><p>登陆阿里云，进入控制台</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22423156/1638579895193-548577ed-ca9a-42f2-a6fc-f9c04f6d4691.png" alt="img"></p><p>左上角菜单，点开搜索容器镜像服务：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638579944641-1dc91178-ba82-429f-8595-865c7455e682.png" alt="img"></p><p>实例列表—&gt;个人&#x2F;企业(要钱) 没有的需要创建一下，创建需要设置一个repository密码</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638580071904-e7a62348-3712-4a7d-bc0e-bcebcc8f4304.png" alt="img"></p><p>然后创建一个镜像仓库</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638580295659-6237e091-42d6-4894-a24e-2c41785ee3a4.png" alt="img"></p><p>然后下一步，选择本地仓库创建：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638580339243-c4662f2d-9894-419a-926c-d09d413d7f44.png" alt="img"></p><p>创建好仓库后，会有相应的操作指南：</p><p>aliyun给的操作指南:</p><h4 id="1-登录阿里云Docker-Registry"><a href="#1-登录阿里云Docker-Registry" class="headerlink" title="1. 登录阿里云Docker Registry"></a>1. 登录阿里云Docker Registry</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker login --username=兴趣使然的小小 registry.cn-chengdu.aliyuncs.com</span><br></pre></td></tr></table></figure><p>用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。</p><p>您可以在访问凭证页面修改凭证密码。</p><h4 id="2-从Registry中拉取镜像"><a href="#2-从Registry中拉取镜像" class="headerlink" title="2. 从Registry中拉取镜像"></a>2. 从Registry中拉取镜像</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker pull registry.cn-chengdu.aliyuncs.com/mrilinxi/mycentos:[镜像版本号]</span><br></pre></td></tr></table></figure><h4 id="3-将镜像推送到Registry"><a href="#3-将镜像推送到Registry" class="headerlink" title="3. 将镜像推送到Registry"></a>3. 将镜像推送到Registry</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker login --username=兴趣使然的小小 registry.cn-chengdu.aliyuncs.com$ docker tag [ImageId] registry.cn-chengdu.aliyuncs.com/mrilinxi/mycentos:[镜像版本号]$ docker push registry.cn-chengdu.aliyuncs.com/mrilinxi/mycentos:[镜像版本号]</span><br></pre></td></tr></table></figure><p>请根据实际镜像信息替换示例中的[ImageId]和[镜像版本号]参数。</p><h4 id="4-选择合适的镜像仓库地址"><a href="#4-选择合适的镜像仓库地址" class="headerlink" title="4. 选择合适的镜像仓库地址"></a>4. 选择合适的镜像仓库地址</h4><p>从ECS推送镜像时，可以选择使用镜像仓库内网地址。推送速度将得到提升并且将不会损耗您的公网流量。</p><p>如果您使用的机器位于VPC网络，请使用 registry-vpc.cn-chengdu.aliyuncs.com 作为Registry的域名登录。</p><h4 id="5-示例"><a href="#5-示例" class="headerlink" title="5. 示例"></a>5. 示例</h4><p>使用”docker tag”命令重命名镜像，并将它通过专有网络地址推送至Registry。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker imagesREPOSITORY                                                         TAG                 IMAGE ID            CREATED             VIRTUAL SIZEregistry.aliyuncs.com/acs/agent                                    0.7-dfb6816         37bb9c63c8b2        7 days ago          37.89 MB$ docker tag 37bb9c63c8b2 registry-vpc.cn-chengdu.aliyuncs.com/acs/agent:0.7-dfb6816</span><br></pre></td></tr></table></figure><p>使用 “docker push” 命令将该镜像推送至远程。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ docker push registry-vpc.cn-chengdu.aliyuncs.com/acs/agent:0.7-dfb6816</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638580567240-fcf9ded7-0175-4bb3-8205-0cfb9e359538.png" alt="img"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登陆仓库 首次登陆需要输入之前我们设置的仓库密码</span></span><br><span class="line">docker login --username=阿里云账户 registry.cn-hangzhou.aliyuncs.com</span><br><span class="line"></span><br><span class="line">docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/mrlinxi/mycentos:[镜像版本号]</span><br><span class="line">docker push registry.cn-hangzhou.aliyuncs.com/mrlinxi/mycentos:[镜像版本号]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638580765715-1f3cb6d4-173b-446e-bab4-b1a9b28731e1.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638581159286-1ad8f8a9-b24a-44b2-8a05-9ee291206f5d.png" alt="img"></p><p>提交后，本地也会有一份提交的镜像。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638600211757-8aec55a4-687f-497e-ae7d-811c7b639412.png" alt="img"></p><p>我们尝试从阿里云拉取我们刚才push的镜像。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除本地提交的镜像</span></span><br><span class="line">docker rmi -f registry.cn-hangzhou.aliyuncs.com/mrlinxi/mycentos:0.2.1</span><br><span class="line"></span><br><span class="line">dokcer pull registry.cn-hangzhou.aliyuncs.com/mrlinxi/mycentos:0.2.1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638600388706-ddeb4535-dc1e-4dcc-9d5b-24193a91e127.png" alt="img"></p><h2 id="十、Docker-Compose"><a href="#十、Docker-Compose" class="headerlink" title="十、Docker Compose"></a>十、Docker Compose</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><code>Compose</code>项目是Docker官方的开源项目，负责实现对Docker容器集群的快速编排。从功能上看，跟<code>OpenStack</code>中的<code>Heat</code>十分相似。</p><p><code>Compose</code>定位是[定义和运行多个<code>Dockerfile</code>模板文件]，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要更多应用容器来相互配合完成某个项目的情况。例如要实现一个Web项目，除了Web服务器本身，往往还需要再加上后端的数据服务容器，甚至还需要负载容器等。</p><p><code>Compose</code>恰好满足了这样的需求。它允许用户通过一个单独的<code>docker-compose.yml</code>模板文件(YAML格式)来定义一组相关联的应用容器为一个项目</p><p><code>Compose</code>中有两个重要的概念：</p><ul><li>服务(<code>service</code>)：一个应用的容器，实际上可以包括若干运行相同镜像实例。</li><li>项目(<code>project</code>)：由一组关联的应用容器组成的完整业务单元，在<code>docker-compose.yml</code>文件中定义。</li></ul><p><code>Compose</code>的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷的生命周期管理</p><p><code>Compose</code>项目由Python编写，实现上调用了Docker服务器提供的API来对容器进行管理。因此，只要所操纵的平台支持Docker API，就可以在其上利用<code>Compose</code>来进行编排项目</p><h4 id="Docker-Compose安装"><a href="#Docker-Compose安装" class="headerlink" title="Docker-Compose安装"></a>Docker-Compose安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64 &gt; /usr/local/bin/docker-compose <span class="comment">#下载docker-compose</span></span><br><span class="line">docker-compose --version <span class="comment">#查看docker-compose是否安装成功复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h4 id="Docker-Compose的入门"><a href="#Docker-Compose的入门" class="headerlink" title="Docker-Compose的入门"></a>Docker-Compose的入门</h4><ol><li><p>创建一个docker-compose.yml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> docker-compose.yml复制复制失败复制成功</span><br></pre></td></tr></table></figure></li><li><p>在配置文件中定义一个项目中存在哪些服务</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">webapp:</span>  <span class="comment">#服务名全局唯一</span></span><br><span class="line">        <span class="attr">image:</span> <span class="comment">#镜像名:tag</span></span><br><span class="line">        <span class="attr">ports:</span>  <span class="comment">#端口映射</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">            <span class="string">复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><p>3.通过docker-compose运行一组容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up    <span class="comment">#前台运行</span></span><br><span class="line">docker-compose up -d   <span class="comment">#后台运行复制复制失败复制成功</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="Docker-Compose命令模板指令"><a href="#Docker-Compose命令模板指令" class="headerlink" title="Docker-Compose命令模板指令"></a>Docker-Compose命令模板指令</h4><p>模板文件默认是使用<code>Compose</code>的核心，涉及到的指令关键字也比较多，默认的模板文件名称为<code>docker-compose.yml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">webapp:</span>  <span class="comment">#服务名全局唯一</span></span><br><span class="line">        <span class="attr">image:</span> <span class="comment">#镜像名:tag</span></span><br><span class="line">        <span class="attr">ports:</span>  <span class="comment">#端口映射(建议引号括起来)</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><p>注意每个服务都必须通过<code>image</code>指令指定镜像或<code>build</code>指令（需要Dockerfile）等来自动构建生成镜像</p><p>如果使用<code>build</code>指令，在Dockerfile中设置的选项（例如：<code>CMD</code>,<code>EXPOSE</code>,<code>VOLUME</code>,<code>ENV</code>等）将会自动被获取，无需在<code>docker-compose.yml</code>中重复设置。</p><h5 id="imgae"><a href="#imgae" class="headerlink" title="imgae"></a>imgae</h5><p>指定为镜像名称或镜像ID。如果镜像本地不存在，<code>Compose</code>将会尝试手动拉起这个镜像</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">ubuntu</span>        <span class="comment">#默认为最新版本</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">镜像名:版本号</span>    </span><br><span class="line"><span class="attr">image:</span> <span class="string">摘要复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h5 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h5><p>暴露端口信息。</p><p>使用宿主端口：容器端口（HOST：CONTAINER）格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ports:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;8000&quot;</span><span class="string">:&quot;8001&quot;复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><p>主要：当使用<code>HOST:CONTAINER</code>格式来映射端口时，如你使用的容器端口小于60并且没有放到引号里面，可能会得到错误的结果，因为<code>YAML</code>会自动解析xx:yy这种数字格式为60进制，为避免出现这种问题，建议采用引号包括起来的字符串格式</p><h5 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h5><p>数据卷所挂载路径设置，可以设置为宿主机路径(<code>HOST</code>:<code>CONTAINER</code>)或者数据卷的名称(<code>VOLUME</code>:<code>CONTAINER</code>)，并且可以设置访问模式(<code>HOST</code>:<code>CONTAINER:ro</code>)。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cache/:/tmp/cache</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">~/configs:/etc/configs/:ro复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><p>如果路径为数据卷名称，必须在文件中配置数据卷。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.2&#x27;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">    <span class="attr">tomcat:</span></span><br><span class="line">        <span class="attr">tomcat:</span> <span class="string">tomcat:8.0</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">        <span class="attr">voulumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">tomcatwebapps:/usr/local/tomcat/webapps</span></span><br><span class="line"><span class="attr">volumes:</span> <span class="comment">#声明上面容器使用的卷名</span></span><br><span class="line">    <span class="attr">tomcatwebapps:</span> <span class="comment">#使用的卷名</span></span><br><span class="line">        <span class="attr">external:</span>  <span class="comment">#使用自定义的卷名 </span></span><br><span class="line">            <span class="literal">true</span>    <span class="comment">#true确定使用指定卷名    注意：一旦使用外部自定义卷名，需要手动创建数据卷复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h5 id="networks"><a href="#networks" class="headerlink" title="networks"></a>networks</h5><p>配置容器连接的网络</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.2&#x27;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">    <span class="attr">tomcat01:</span></span><br><span class="line">        <span class="attr">tomcat:</span> <span class="string">tomcat:8.0</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">        <span class="attr">voulumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">tomcatwebapps01:/usr/local/tomcat/webapps</span></span><br><span class="line">        <span class="attr">networks:</span>    <span class="comment">#代表当前服务使用哪个网络桥</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">hello</span></span><br><span class="line">    <span class="attr">tomcat02:</span></span><br><span class="line">        <span class="attr">tomcat:</span> <span class="string">tomcat:8.0</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;8081:8080&quot;</span></span><br><span class="line">        <span class="attr">voulumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">tomcatwebapps01:/usr/local/tomcat/webapps</span></span><br><span class="line">        <span class="attr">networks:</span>    <span class="comment">#代表当前服务使用哪个网络桥</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">volumes:</span> <span class="comment">#声明上面容器使用的卷名</span></span><br><span class="line">    <span class="attr">tomcatwebapps01:</span> <span class="comment">#使用的卷名</span></span><br><span class="line">        <span class="attr">external:</span>  <span class="comment">#使用自定义的卷名 </span></span><br><span class="line">            <span class="literal">false</span>    <span class="comment">#true确定使用指定卷名    注意：一旦使用外部自定义卷名，需要手动创建数据卷</span></span><br><span class="line">    <span class="attr">tomcatwebapps02:</span></span><br><span class="line"><span class="attr">networks:</span> <span class="comment">#定义服务用到桥</span></span><br><span class="line">    <span class="attr">hello:</span> <span class="comment">#上面服务用到网桥名称，默认为bridge</span></span><br><span class="line">        <span class="attr">external:</span> </span><br><span class="line">            <span class="literal">true</span>    <span class="comment">#使用外部指定网桥    注意：网桥必须存在复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h5 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a>container_name</h5><p>指定容器名。默认将会使用<code>项目名称_服务名称_序号</code>这样子的格式</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">container_name:</span> <span class="string">docker-web-container复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：指定容器后，该服务无法进行扩展，因为Docker不允许多个容器具有相同的名称</p></blockquote><h5 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h5><p>设置环境变量，你可以使用数组或字典两种格式</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span> </span><br><span class="line">    <span class="attr">RACK_ENV:</span> <span class="string">development</span></span><br><span class="line">    <span class="attr">SESSION_SECRET:</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">RACK_ENV=development</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SESSION_SECRET复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><p>如果变量名称或者值中用到<code>true</code>|<code>false</code>,<code>yes</code>|<code>no</code>等表达<strong>布尔</strong>含义的词汇，最好放到引号里，避免YAML自动内容为对应的布尔语义</p><h5 id="command"><a href="#command" class="headerlink" title="command"></a>command</h5><p>覆盖容器启动后执行的命令</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">command:</span> <span class="string">echo</span> <span class="string">&quot;hello world&quot;</span><span class="string">复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h5 id="env-file"><a href="#env-file" class="headerlink" title="env_file"></a>env_file</h5><p>从文件中获取环境变量，可以单独的文件路径或列表</p><p>如果通过<code>docker-compose -f FILE</code>方式来指定Compose模板文件，则<code>env_file</code>中变量的路径会基于模板文件路径</p><p>如果有变量名称与<code>environment</code>指令冲突，则按照惯例，以后者为准</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">env_file:</span> <span class="string">.env</span></span><br><span class="line"><span class="attr">env_file:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">./common.env</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./apps/web.env</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/opt/secrets.env复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><p>环境变量文件中的每一行必须符合格式，支持<code>#</code>开头的注释行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Common.env: Set development enviroment</span><br><span class="line">PROG_ENV=development复制复制失败复制成功</span><br></pre></td></tr></table></figure><h5 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a>depends_on</h5><p>解决容器的依赖，启动先后问题。下面的例子中会先启动<code>redis db</code>再启动<code>web</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">    <span class="attr">web:</span> </span><br><span class="line">        <span class="attr">build:</span> </span><br><span class="line">        <span class="attr">depends_on:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">db</span>    <span class="comment">#服务名</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">redis</span>    <span class="comment">#服务名</span></span><br><span class="line">    <span class="attr">redis:</span> </span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">db:</span> </span><br><span class="line">        <span class="attr">image:</span> <span class="string">postgres复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>web</code>服务不会等待<code>redis db</code>[完全启动]之后才启动</p></blockquote><h5 id="healthcheck"><a href="#healthcheck" class="headerlink" title="healthcheck"></a>healthcheck</h5><p>通过命令检查容器是否健康运行</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">healthcheck:</span> </span><br><span class="line">    <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>,<span class="string">&quot;curl&quot;</span>,<span class="string">&quot;-f&quot;</span>,<span class="string">&quot;http://localhost&quot;</span>]</span><br><span class="line">    <span class="attr">interval:</span> <span class="string">1m30s</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">retries:</span> <span class="number">3</span><span class="string">复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h5 id="sysctls"><a href="#sysctls" class="headerlink" title="sysctls"></a><a href="https://docs.hwawy.cn/#/Docker/?id=sysctls">sysctls</a></h5><p>配置容器内核参数</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sysctls:</span></span><br><span class="line">    <span class="attr">net.core.somaxconn:</span> <span class="number">1024</span></span><br><span class="line">    <span class="attr">net.ipv4.tcp_syncookies:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">sysctls:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">net.core.somaxconn=1024</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">net.ipv4.tcp_syncookies=0复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h5 id="ulimits"><a href="#ulimits" class="headerlink" title="ulimits"></a>ulimits</h5><p>指定容器的ulimits限制数</p><p>例如，指定最大进程数为65535，指定文件句柄数位2000(软限制，应用可以随时修改，不能操作限制)和40000（系统硬件限制，只能root用户提高）</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ulimits:</span></span><br><span class="line">    <span class="attr">nproc:</span> <span class="number">65535</span></span><br><span class="line">    <span class="attr">nofile:</span> </span><br><span class="line">        <span class="attr">soft:</span> <span class="number">20000</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">40000</span><span class="string">复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h5 id="build"><a href="#build" class="headerlink" title="build"></a>build</h5><p>用来将指定的Dockerfile打包成镜像，然后再运行该镜像</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span> </span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">        <span class="attr">build:</span>    <span class="comment">#用来指定Dockerfile所在目录，先根据build中的Dockerfile自动构建镜像，自动运行容器</span></span><br><span class="line">            <span class="attr">context:</span> <span class="comment">#指定上下文目录dockerfile所在的目录</span></span><br><span class="line">            <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span> <span class="comment">#dockerfile构建文件名字</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">容器名</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;8080:9091&quot;</span></span><br><span class="line">        <span class="attr">network:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">hello</span></span><br><span class="line">        <span class="attr">depends_on:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">tomcat01复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h4 id="Docker-Compose中的常用命令"><a href="#Docker-Compose中的常用命令" class="headerlink" title="Docker-Compose中的常用命令"></a>Docker-Compose中的常用命令</h4><h5 id="命令对象与格式"><a href="#命令对象与格式" class="headerlink" title="命令对象与格式"></a>命令对象与格式</h5><p>对于<code>Compose</code>来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务和容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会收到命令影响</p><p>执行<code>docker-compose [COMMAND] --help</code> 或者<code>docker-compose help [COMMAND]</code>可以查看具体是某个命令的使用格式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose [-f=&lt;args&gt;...] [options] [COMMAND] [ARGS...]复制复制失败复制成功</span><br></pre></td></tr></table></figure><h5 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h5><ul><li><code>-f</code> ,<code>--file FILE</code>指定使用的Compose模板文件，默认为docker-compose.yml，可以多次指定</li><li><code>-p</code>,’–project-name NAME’指定项目名称，默认使用所在目录作为项目名</li><li><code>--x-networking</code>使用Docker的可插拔网络后端特性</li><li><code>--verbose</code>输出更多调试信息</li><li><code>-v,--version</code>打印版本并退出</li></ul><h5 id="命令使用说明"><a href="#命令使用说明" class="headerlink" title="命令使用说明"></a>命令使用说明</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">up</span><br></pre></td></tr></table></figure><p>格式为<code>docker-compose up [option] [SERVICE...]</code></p><ul><li>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并管理服务相关容器的一系列操作</li><li>链接的服务都将自动启动，除非已经处于运行状态</li><li>大部分时候可以通过该命令来启动一个项目</li><li>默认情况，<code>docker-compose up</code>启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便的进行调试</li><li>当通过<code>Ctrl -C</code> 停止命令时，所有容器将会停止</li><li>如果通过<code>docker-compose up</code>，将会在后台启动并运行所有的容器，一般推荐生产环境下使用该选项</li><li>默认情况下，如果服务容器已经存在，<code>docker-compose up</code>将会尝试停止该容器，然后重新创建（保持使用<code>volumes-from</code>挂载的卷），以保证新启动的服务匹配<code>docker-compose.yml</code>文件的最新内容</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dwon</span><br></pre></td></tr></table></figure><ul><li>此命令将会停止<code>up</code>命令启动的容器，并移除网络</li></ul><p><code>exec</code><strong>只能通过服务ID进入</strong></p><ul><li>进入指定容器</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps</span><br></pre></td></tr></table></figure><ul><li>格式为<code>docker-compose ps [options][SERVICE...]</code></li><li>列出选项中目前的所有容器</li><li>选项<ul><li><code>-q</code> 只打印容器的ID信息</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">restart</span><br></pre></td></tr></table></figure><ul><li>格式为<code>docker-compose rm [OPTION][SERVICE]</code></li><li>重启项目中的服务</li><li>选项：<ul><li><code>-t,--timeout TIMEOUT</code>指定重启前停止容器的操作（默认为10秒）</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm</span><br></pre></td></tr></table></figure><ul><li>格式为<code>docker-compose rm [OPTION][SERVICE]</code></li><li>删除所有（停止状态）服务容器，推荐先执行<code>docker-compose stop</code>来停止容器</li><li>选项：<ul><li><code>-f,--force</code>强制直接删除，包括非停止状态的容器，一般尽量不要使用该选项</li><li><code>-v</code>删除容器所挂在的数据卷</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">statr</span><br></pre></td></tr></table></figure><ul><li>格式为<code>docker-compose start [SERVICE...]</code></li><li>启动已经存在的服务容器</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stop</span><br></pre></td></tr></table></figure><ul><li>格式为<code>docker-compose stop [options][SERVICE...]</code></li><li>停止已经处于运行状态的容器，但不删除它。通过<code>docker-compose start</code>可以再次启动这些容器</li><li>选项：<ul><li><code>-t,--timeout TIMEOUT</code>停止容器时候的超时（默认为10秒）</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><ul><li>查看各个服务容器内运行的进度</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unpause</span><br></pre></td></tr></table></figure><ul><li>格式为docker-compose unpause [SEVICE..]</li><li>恢复处于暂停状态的容器</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logs</span><br></pre></td></tr></table></figure><ul><li>查看服务日志</li></ul><p><a href="https://www.yuque.com/mrlinxi/pxvr4g/polyyw#fV3l8">借鉴链接1</a><br><a href="https://docs.hwawy.cn/#/Docker/">借鉴链接2</a></p><h2 id="还需要把compose个看完-推荐链接传送门"><a href="#还需要把compose个看完-推荐链接传送门" class="headerlink" title="还需要把compose个看完,推荐链接传送门"></a>还需要把compose个看完,推荐链接<a href="https://www.bilibili.com/video/BV1gr4y1U7CY?spm_id_from=333.337.search-card.all.click">传送门</a></h2>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>restful接口设计规范</title>
      <link href="/2022/03/21/restful/"/>
      <url>/2022/03/21/restful/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>本文学习 RESTful API 设计相关的一些原则和规范。</p><p>少量的API在使用时不知不觉，但是当后续API不断增加了，需求变动也会导致API版本的变化。主要是为了可以进行规范化开发，并非是只能使用该规范，其他做法亦可，只是作为前人大佬已经在实践中进行总结整理。学习好的编程设计规范总是便捷有利的。</p><h2 id="二、常见规范"><a href="#二、常见规范" class="headerlink" title="二、常见规范"></a>二、常见规范</h2><h3 id="1、协议和域名"><a href="#1、协议和域名" class="headerlink" title="1、协议和域名"></a>1、协议和域名</h3><p>API通讯使用http协议，如果能使用https尽量使用https。</p><p>尽量使用独立域名，</p><p><a href="https://ladfeng.top/">https://ladfeng.top</a></p><p><a href="http://ladfeng.top/">http://ladfeng.top</a></p><p>如果不能使用可以以api 打头区分访问</p><p><a href="https://ladfeng.top/api">https://ladfeng.top/api</a></p><h3 id="2、版本变化"><a href="#2、版本变化" class="headerlink" title="2、版本变化"></a>2、版本变化</h3><p>常见的三种版本方式：</p><ol><li>在uri中放版本信息：<code>GET /v1/users/1</code></li><li>Accept Header：<code>Accept: application/json+v1</code></li><li>自定义 Header：<code>X-Api-Version: 1</code></li></ol><p>推荐用第一种，虽然没有那么优雅，最明显最方便。</p><h3 id="3、URI资源"><a href="#3、URI资源" class="headerlink" title="3、URI资源"></a>3、URI资源</h3><h3 id="3、URI资源-1"><a href="#3、URI资源-1" class="headerlink" title="3、URI资源"></a>3、URI资源</h3><h4 id="（1）URI概念"><a href="#（1）URI概念" class="headerlink" title="（1）URI概念"></a>（1）URI概念</h4><p>URI 表示资源，资源一般对应服务器端领域模型中的实体类。<br>URI规范</p><ul><li>不用大写;</li><li>用中杠<code>-</code>而不用下杠<code>_</code>;</li><li>参数列表要encode;</li><li>URI中的名词表示资源集合，使用复数形式;</li><li>避免层级过深</li><li>带上版本号</li></ul><h4 id="（2）资源路径"><a href="#（2）资源路径" class="headerlink" title="（2）资源路径"></a>（2）资源路径</h4><p><strong>资源集合：</strong></p><p>所有动物园</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/zoos/　　　　</span><br></pre></td></tr></table></figure><p>id为1的动物园内的所有动物</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">/zoos/1/animals</span><br></pre></td></tr></table></figure><p><strong>单个资源：</strong></p><p>比如：id为1的动物园</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">/zoos/1      </span><br></pre></td></tr></table></figure><p>id为1,2,3的动物园</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">/zoos/1;2;3   </span><br></pre></td></tr></table></figure><p><strong>层级过深资源：</strong></p><p>过深的导航容易导致url膨胀，不易维护，如 <code>GET /zoos/1/areas/3/animals/4</code>，尽量使用查询参数代替路径中的实体导航，如<code>GET /animals?zoo=1&amp;area=3</code>;</p><h3 id="4、操作类型"><a href="#4、操作类型" class="headerlink" title="4、操作类型"></a>4、操作类型</h3><p>对于资源的具体操作类型，由HTTP动词表示。</p><p>常用的HTTP动词有下面五个。</p><table><thead><tr><th align="left">HTTP动作</th><th align="left">含义</th><th align="left">对应的SQL操作</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">从服务器取出资源（一项或多项）</td><td align="left">SELECT</td></tr><tr><td align="left">POST</td><td align="left">在服务器新建一个资源。</td><td align="left">CREATE</td></tr><tr><td align="left">PUT</td><td align="left">在服务器更新资源（客户端提供改变后的完整资源）</td><td align="left">UPDATE</td></tr><tr><td align="left">PATCH</td><td align="left">在服务器更新资源（客户端提供改变的属性）</td><td align="left">UPDATE</td></tr><tr><td align="left">DELETE</td><td align="left">从服务器删除资源。</td><td align="left">DELETE</td></tr><tr><td align="left">HEAD</td><td align="left">获取资源的元数据。</td><td align="left"></td></tr><tr><td align="left">OPTIONS</td><td align="left">获取信息，关于资源的哪些属性是客户端可以改变的。</td><td align="left"></td></tr></tbody></table><p>示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">GET /zoos：列出所有动物园</span><br><span class="line">POST /zoos：新建一个动物园</span><br><span class="line">GET /zoos/ID：获取某个指定动物园的信息</span><br><span class="line">PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</span><br><span class="line">PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</span><br><span class="line">DELETE /zoos/ID：删除某个动物园</span><br><span class="line">GET /zoos/ID/animals：列出某个指定动物园的所有动物</span><br><span class="line">DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</span><br></pre></td></tr></table></figure><h3 id="5、条件过滤"><a href="#5、条件过滤" class="headerlink" title="5、条件过滤"></a>5、条件过滤</h3><p>记录数量很多，不能全返回，需要对数据进行过滤。API应该提供参数，过滤返回结果。</p><p>下面是一些常见的参数（分页条件、查询条件）</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">?limit=10：指定返回记录的数量</span><br><span class="line">?offset=10：指定返回记录的开始位置。</span><br><span class="line">?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</span><br><span class="line">?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br><span class="line">?animal_type_id=1：指定筛选条件</span><br></pre></td></tr></table></figure><p>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET &#x2F;zoo&#x2F;ID&#x2F;animals 与 GET &#x2F;animals?zoo_id&#x3D;ID 的含义是相同的。</p><h3 id="6、状态码"><a href="#6、状态码" class="headerlink" title="6、状态码"></a>6、状态码</h3><h4 id="（1）常规状态码"><a href="#（1）常规状态码" class="headerlink" title="（1）常规状态码"></a>（1）常规状态码</h4><p>常规的状态主要是参考 HTTP 状态码。</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</span><br><span class="line">201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</span><br><span class="line">202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</span><br><span class="line">204 NO CONTENT - [DELETE]：用户删除数据成功。</span><br><span class="line">400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</span><br><span class="line">401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</span><br><span class="line">403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</span><br><span class="line">404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</span><br><span class="line">406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</span><br><span class="line">410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</span><br><span class="line">422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</span><br><span class="line">500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</span><br></pre></td></tr></table></figure><p><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">HTTP状态码</a></p><h4 id="（2）业务类状态码"><a href="#（2）业务类状态码" class="headerlink" title="（2）业务类状态码"></a>（2）业务类状态码</h4><p>系统较多的时候，将系统码也带上，使用数字的定义也可以参考HTTP进行设计。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">业务系统码+四位数字</span><br></pre></td></tr></table></figure><p>具体的可以根据需求来。</p><h4 id="（3）错误与异常"><a href="#（3）错误与异常" class="headerlink" title="（3）错误与异常"></a>（3）错误与异常</h4><p>发生错误或异常时：</p><ol><li><p>不响应2xx开头的状态码，客户端可能会缓存成功的http请求；</p></li><li><p>正确设置http状态码，遵循HTTP协议规范；</p></li><li><p>Response body 需要提供的信息</p><ol><li><p>错误的代码，方便定位日志，排查问题；</p></li><li><p>直接正面的描述错误的文本。</p></li></ol></li></ol><p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p><table><thead><tr><th align="left">状态码</th><th align="left">场景</th></tr></thead><tbody><tr><td align="left">400</td><td align="left">参数校验失败</td></tr><tr><td align="left">401</td><td align="left">未验证的用户，未登录</td></tr><tr><td align="left">403</td><td align="left">无权限</td></tr><tr><td align="left">404</td><td align="left">资源不存在</td></tr><tr><td align="left">500</td><td align="left">非业务类异常</td></tr></tbody></table><p>业务类异常，一般自定义Exception，见词知义。</p><p>常规异常：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;failed&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">400</span>，</span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;参数xxx校验失败&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>业务类异常：系统名为ABCD</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;failed&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span>ABCD2001，</span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XXX数据已经过期。&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="（4）正常返回"><a href="#（4）正常返回" class="headerlink" title="（4）正常返回"></a>（4）正常返回</h4><p>正常返回，减少数据层级。</p><p>判断操作成功失败的标记 和操作的单个数据</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span>，</span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;操作成功&quot;</span>，</span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;zhangxiaocai&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>msg可选。</p><p>分页查询</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;paging&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;limit&quot;</span><span class="punctuation">:</span><span class="number">10</span><span class="punctuation">,</span><span class="attr">&quot;offset&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;total&quot;</span><span class="punctuation">:</span><span class="number">119</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>...<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>操作与响应</p><table><thead><tr><th align="left">HTTP操作</th><th align="left">响应格式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">状态标记+集合、单个对象</td></tr><tr><td align="left">POST</td><td align="left">状态标记+新增成功的对象</td></tr><tr><td align="left">PUT&#x2F;PATCH</td><td align="left">状态标记+更新成功的对象</td></tr><tr><td align="left">DELETE</td><td align="left">状态标记</td></tr></tbody></table><h4 id="（5）异步任务"><a href="#（5）异步任务" class="headerlink" title="（5）异步任务"></a>（5）异步任务</h4><p>对耗时的异步任务，服务器端接受客户端传递的参数后，应返回创建成功的任务资源，其中包含了任务的执行状态。客户端可以轮训该任务获得最新的执行进度。</p><p>比如常见信息：</p><p>任务ID，任务执行状态，发起人。<br>请求：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">GET /task/3    </span><br></pre></td></tr></table></figure><p>返回：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;taskId&quot;</span><span class="punctuation">:</span><span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;createBy&quot;</span><span class="punctuation">:</span><span class="string">&quot;Anonymous&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;success&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;taskId&quot;</span><span class="punctuation">:</span><span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;createBy&quot;</span><span class="punctuation">:</span><span class="string">&quot;Anonymous&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;running&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>批量请求：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">POST /batchTasks/1;2;3;</span><br></pre></td></tr></table></figure><p>批量返回：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;taskId&quot;</span><span class="punctuation">:</span><span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;createBy&quot;</span><span class="punctuation">:</span><span class="string">&quot;Anonymous&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;success&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>...<span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;from&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;to&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;info&quot;</span><span class="punctuation">:</span><span class="string">&quot;Runing 50 %&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>...<span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>如果任务的执行状态包括较多信息，可以把“执行状态”抽象成组合资源，客户端查询该状态资源了解任务的执行情况。</p><p>提交：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /task/3/status</span><br></pre></td></tr></table></figure><p>返回：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;progress&quot;</span><span class="punctuation">:</span><span class="string">&quot;50%&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span><span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span><span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fail&quot;</span><span class="punctuation">:</span><span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="7、Hypermedia-API"><a href="#7、Hypermedia-API" class="headerlink" title="7、Hypermedia API"></a>7、Hypermedia API</h3><p>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p><p>比如，当用户向api.doname.com的根目录发出请求，会得到这样一个文档。</p><blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;link&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;rel&quot;</span><span class="punctuation">:</span>   <span class="string">&quot;collection https://www.example.com/zoos&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span>  <span class="string">&quot;https://api.example.com/zoos&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;List of zoos&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span>  <span class="string">&quot;application/vnd.yourformat+json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></blockquote><p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。</p><p>Hypermedia API的设计被称为<a href="http://en.wikipedia.org/wiki/HATEOAS">HATEOAS</a>。Github的API就是这种设计，访问<a href="https://api.github.com/">api.github.com</a>会得到一个所有可用API的网址列表。</p><blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;current_user_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/user&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;authorizations_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/authorizations&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></blockquote><p>从上面可以看到，如果想获取当前用户的信息，应该去访问<a href="https://api.github.com/user">api.github.com&#x2F;user</a>，然后就得到了下面结果。</p><blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Requires authentication&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;documentation_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://developer.github.com/v3&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></blockquote><p>上面代码表示，服务器给出了提示信息，以及文档的网址。</p><h3 id="8、数据格式"><a href="#8、数据格式" class="headerlink" title="8、数据格式"></a>8、数据格式</h3><p>JSON 或 XML 按要求使用即可。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> restful </tag>
            
            <tag> 项目规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>restful在后端的体现</title>
      <link href="/2022/03/21/restful%E5%9C%A8%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%BD%93%E7%8E%B0/"/>
      <url>/2022/03/21/restful%E5%9C%A8%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%BD%93%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>之前寒假做互联网+项目的时候,看到组长的后端api接口写得那叫一个优雅;</p><p>在分布式、微服务盛行的今天，绝大部分项目都采用的微服务框架，前后端分离方式。题外话：前后端的工作职责越来越明确，现在的前端都称之为大前端，技术栈以及生态圈都已经非常成熟；以前后端人员瞧不起前端人员，那现在后端人员要重新认识一下前端，前端已经很成体系了。</p><h2 id="现代系统架构"><a href="#现代系统架构" class="headerlink" title="现代系统架构:"></a>现代系统架构:</h2><p><strong>一般系统的大致整体架构图如下：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/a3a46ff2ff174c29b71da687f72abbdb~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp"></p><h2 id="接口交互"><a href="#接口交互" class="headerlink" title="接口交互"></a><strong>接口交互</strong></h2><p>前端和后端进行交互，前端按照约定请求URL路径，并传入相关参数，后端服务器接收请求，进行业务处理，返回数据给前端。</p><p>针对URL路径的restful风格，以及传入参数的公共请求头的要求（如：app_version,api_version,device等），老顾这里就不介绍了，小伙伴们可以自行去了解，也比较简单。</p><p>着重介绍一下后端服务器如何实现把数据返回给前端？</p><h3 id="返回格式"><a href="#返回格式" class="headerlink" title="返回格式"></a><strong>返回格式</strong></h3><p>后端返回给前端我们一般用JSON体方式，定义如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    #返回状态码</span><br><span class="line">    code<span class="punctuation">:</span>integer<span class="punctuation">,</span>       </span><br><span class="line">    #返回信息描述</span><br><span class="line">    message<span class="punctuation">:</span>string<span class="punctuation">,</span></span><br><span class="line">    #返回值</span><br><span class="line">    data<span class="punctuation">:</span>object</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="CODE状态码"><a href="#CODE状态码" class="headerlink" title="CODE状态码"></a><strong>CODE状态码</strong></h3><p>code返回状态码，一般小伙伴们是在开发的时候需要什么，就添加什么。<br>如接口要返回用户权限异常，我们加一个状态码为101吧，下一次又要加一个数据参数异常，就加一个102的状态码。这样虽然能够照常满足业务，但状态码太凌乱了</p><p>我们应该可以参考HTTP请求返回的状态码，下面是常见的HTTP状态码<a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">传送门</a>：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</span><br><span class="line">201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</span><br><span class="line">202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</span><br><span class="line">204 NO CONTENT - [DELETE]：用户删除数据成功。</span><br><span class="line">400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</span><br><span class="line">401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</span><br><span class="line">403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</span><br><span class="line">404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</span><br><span class="line">406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</span><br><span class="line">410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</span><br><span class="line">422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</span><br><span class="line">500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</span><br></pre></td></tr></table></figure><table><thead><tr><th>分类</th><th>区间</th><th>分类描述</th></tr></thead><tbody><tr><td>100</td><td>100~199</td><td>信息，服务器收到请求，需要请求者这执行操作</td></tr><tr><td>200</td><td>200~299</td><td>成功，操作被成功接受并处理</td></tr><tr><td>300</td><td>300~399</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td>400</td><td>400~499</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td>500</td><td>500~599</td><td>服务器的错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><p>规定:</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">#1表示成功</span><br><span class="line">#1001～1999 区间表示参数错误</span><br><span class="line">#2001～2999 区间表示用户错误</span><br><span class="line">#3001～3999 区间表示接口异常</span><br></pre></td></tr></table></figure><p>这样前端开发人员在得到返回值后，根据状态码就可以知道，大概什么错误，再根据message相关的信息描述，可以快速定位。</p><h3 id="Message"><a href="#Message" class="headerlink" title="Message"></a><strong>Message</strong></h3><p>这个字段相对理解比较简单，就是发生错误时，如何友好的进行提示。一般的设计是和code状态码一起设计，如</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 规定:</span></span><br><span class="line"><span class="comment"> * #1表示成功</span></span><br><span class="line"><span class="comment"> * #1001～1999 区间表示参数错误</span></span><br><span class="line"><span class="comment"> * #2001～2999 区间表示用户错误</span></span><br><span class="line"><span class="comment"> * #3001～3999 区间表示接口异常</span></span><br><span class="line"><span class="comment"> * 统一错误枚举类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 成功 */</span></span><br><span class="line">    SUCCESS(<span class="number">200</span>, <span class="string">&quot;成功&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 默认失败 */</span></span><br><span class="line">    COMMON_FAIL(<span class="number">999</span>, <span class="string">&quot;失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    CUSTOM_FAIL(<span class="number">9999</span>, <span class="string">&quot;自定义错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 参数错误：1000～1999 */</span></span><br><span class="line">    PARAM_NOT_VALID(<span class="number">1001</span>, <span class="string">&quot;参数无效&quot;</span>),</span><br><span class="line">    PARAM_IS_BLANK(<span class="number">1002</span>, <span class="string">&quot;参数为空&quot;</span>),</span><br><span class="line">    PARAM_TYPE_ERROR(<span class="number">1003</span>, <span class="string">&quot;参数类型错误&quot;</span>),</span><br><span class="line">    PARAM_NOT_COMPLETE(<span class="number">1004</span>, <span class="string">&quot;参数缺失&quot;</span>),</span><br><span class="line">    FAIL_COPY_PROPERTIES(<span class="number">1076</span>, <span class="string">&quot;创建对象失败或拷贝对象属性失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 微信小程序登录 */</span></span><br><span class="line">    WEI_XIN_CODE_ERROR(<span class="number">3001</span>, <span class="string">&quot;携带code向小程序请求失败&quot;</span>),</span><br><span class="line">    WEI_XIN_SKEY_VALID(<span class="number">3002</span>, <span class="string">&quot;skey无效&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 用户错误 */</span></span><br><span class="line">    USER_NOT_LOGIN(<span class="number">2001</span>, <span class="string">&quot;用户未登录&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_EXPIRED(<span class="number">2002</span>, <span class="string">&quot;账号已过期&quot;</span>),</span><br><span class="line">    USER_CREDENTIALS_ERROR(<span class="number">2003</span>, <span class="string">&quot;密码错误&quot;</span>),</span><br><span class="line">    USER_CREDENTIALS_EXPIRED(<span class="number">2004</span>, <span class="string">&quot;密码过期&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_DISABLE(<span class="number">2005</span>, <span class="string">&quot;账号不可用&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_LOCKED(<span class="number">2006</span>, <span class="string">&quot;账号被锁定&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_NOT_EXIST(<span class="number">2007</span>, <span class="string">&quot;账号不存在&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_ALREADY_EXIST(<span class="number">2008</span>, <span class="string">&quot;账号已存在&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_USE_BY_OTHERS(<span class="number">2009</span>, <span class="string">&quot;账号下线&quot;</span>),</span><br><span class="line">    USER_IS_EMPTY(<span class="number">2010</span>, <span class="string">&quot;用户为空&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Token错误*/</span></span><br><span class="line">    TOKEN_EXPIRED(<span class="number">4001</span>, <span class="string">&quot;登陆信息过期&quot;</span>),</span><br><span class="line">    TOKEN_ERROR(<span class="number">4002</span>, <span class="string">&quot;信息被更改,请重新登陆&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 业务错误 */</span></span><br><span class="line">    NO_PERMISSION(<span class="number">5001</span>, <span class="string">&quot;没有权限&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*订单错误*/</span></span><br><span class="line">    EXISTED_ORDER(<span class="number">6001</span>, <span class="string">&quot;该商品的订单已存在，请支付或取消后再重新下单&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*商品错误*/</span></span><br><span class="line">    EXISTED_GOOD(<span class="number">7001</span>, <span class="string">&quot;已存在该商品&quot;</span>),</span><br><span class="line">    EXISTED_GOOD_INCART(<span class="number">7002</span>,<span class="string">&quot;购物车中已经存在该商品&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*招投标错误*/</span></span><br><span class="line">    EXISTED_SUBMISSION(<span class="number">8001</span>,<span class="string">&quot;已经存在该投标了&quot;</span>),</span><br><span class="line">    EXISTED_INVITATION(<span class="number">8002</span>,<span class="string">&quot;已经存在该招标了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ResultCode(Integer code, String message) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResultCode <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResultCode <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据code获取message</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 状态码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMessageByCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (ResultCode ele : values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ele.getCode().equals(code)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ele.getMessage();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>状态码和信息就会一一对应，比较好维护。</p><h3 id="DATA"><a href="#DATA" class="headerlink" title="DATA"></a>DATA</h3><p>返回数据体，JSON格式，根据不同的业务又不同的JSON体。<br>我们要设计一个返回体类Result</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonResult</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Boolean succeed;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : ResultCode.COMMON_FAIL.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : ResultCode.COMMON_FAIL.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed, ResultCode resultEnum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getCode() : resultEnum.getCode());</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getMessage() : resultEnum.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : ResultCode.COMMON_FAIL.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : ResultCode.COMMON_FAIL.getMessage();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed, ResultCode resultEnum, T data)</span> &#123;</span><br><span class="line">        <span class="comment">//如多成功true,就走成功的code和message,否者就看传进来的resultEnum</span></span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getCode() : resultEnum.getCode());</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getMessage() : resultEnum.getMessage());</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getSucceed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> succeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSucceed</span><span class="params">(Boolean succeed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CommonResult&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;succeed=&quot;</span> + succeed +</span><br><span class="line">                <span class="string">&quot;, code=&quot;</span> + code +</span><br><span class="line">                <span class="string">&quot;, message=&#x27;&quot;</span> + message + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, data=&quot;</span> + data +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层Controller"><a href="#控制层Controller" class="headerlink" title="控制层Controller"></a><strong>控制层Controller</strong></h2><p>我们会在controller层处理业务请求，并返回给前端，以下面的材料查询为例:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/details/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult&lt;GoodDetailInfoVO&gt; <span class="title function_">getDetailsByGoodId</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">    <span class="type">GoodDetailInfoVO</span> <span class="variable">goodDetailInfoVO</span> <span class="operator">=</span> goodService.getGoodDetailById(id);</span><br><span class="line">    CommonResult&lt;GoodDetailInfoVO&gt;  result = <span class="keyword">new</span> <span class="title class_">CommonResult</span>&lt;&gt;(<span class="literal">true</span>,ResultCode.SUCCESS,goodDetailInfoVO);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果加上结果封装类ResultUtil类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; CommonResult&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">true</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title function_">fail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title function_">fail</span><span class="params">(ResultCode resultEnum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">false</span>, resultEnum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>材料查询就可以变成这样(更加简洁了):</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/detail/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult&lt;GoodDetailInfoVO&gt; <span class="title function_">getDetailByGoodId</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ResultUtil.success(goodService.getGoodDetailById(id));</span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>代码比较简洁了，也美观了。</p><p>到这里一般都满足日常开发的需求了如果还需要更简洁的话,可以参考以下内容:</p><h2 id="优雅优化"><a href="#优雅优化" class="headerlink" title="优雅优化"></a><strong>优雅优化</strong></h2><p>上面我们看到在Result类中增加了静态方法，使得业务处理代码简洁了。但小伙伴们有没有发现这样有几个问题：</p><p>1、每个方法的返回都是Result封装对象，没有业务含义</p><p>2、在业务代码中，成功的时候我们调用Result.success，异常错误调用Result.failure。是不是很多余</p><p>3、上面的代码，判断id是否为null，其实我们可以使用hibernate validate做校验，没有必要在方法体中做判断。</p><p>我们最好的方式直接返回真实业务对象，最好不要改变之前的业务方式，如下图</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-f9e0a277cbd0e5eca01a3969fc11d1d7_720w.jpg" alt="img"></p><p><strong>实现方案</strong></p><p>小伙伴们怎么去实现是不是有点思路，在这个过程中，我们需要做几个事情</p><ul><li>1、定义一个注解@ResponseResult，表示这个接口返回的值需要包装一下</li><li>2、拦截请求，判断此请求是否需要被@ResponseResult注解</li><li>3、核心步骤就是实现接口ResponseBodyAdvice和@ControllerAdvice，判断是否需要包装返回值，如果需要，就把Controller接口的返回值进行重写。</li></ul><p><strong>注解类</strong></p><p>用来标记方法的返回值，是否需要包装</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220322171452303.png" alt="image-20220322171452303"></p><p><strong>拦截器</strong></p><p>拦截请求，是否此请求返回的值需要包装，其实就是运行的时候，解析@ResponseResult注解</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-353b2bd7d82a4f301e402964eb63fbd6_720w.jpg" alt="img"></p><p>此代码核心思想，就是获取此请求，是否需要返回值包装，设置一个属性标记。</p><p><strong>重写返回体</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-a586efcf09669c7090807e0859fbeb40_720w.jpg" alt="img"></p><p>上面代码就是判断是否需要返回值包装，如果需要就直接包装。这里我们只处理了正常成功的包装，如果方法体报异常怎么办？处理异常也比较简单，只要判断body是否为异常类。</p><p><img src="https://pic3.zhimg.com/80/v2-bd9890ec7d4dc0de08ea46b485faf05e_720w.jpg" alt="img"></p><p>怎么做全局的异常处理，篇幅原因，这里就不做介绍了，只要思路理清楚了，自行改造就行。</p><p><strong>重写Controller</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-113c72e7ce1f6cb0744029e67b17ff76_720w.jpg" alt="img"></p><p>在控制器类上或者方法体上加上@ResponseResult注解，这样就ok了，简单吧。到此返回的设计思路完成，是不是又简洁，又优雅。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个方案还有没有别的优化空间，当然是有的。如：每次请求都要反射一下，获取请求的方法是否需要包装，其实可以做个缓存，不需要每次都需要解析。当然整体思路了解，小伙伴们就可以在此基础上面自行扩展。谢谢！！！</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> restful </tag>
            
            <tag> 项目规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea快捷键</title>
      <link href="/2022/03/21/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/03/21/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="Ctrl-Alt-O"><a href="#Ctrl-Alt-O" class="headerlink" title="Ctrl + Alt + O"></a>Ctrl + Alt + O</h3><p>功能：清理不需要的导入</p><h3 id="Ctrl-F12"><a href="#Ctrl-F12" class="headerlink" title="Ctrl+F12"></a>Ctrl+F12</h3><p>功能：查看当前类中的所有成员：方法、属性、内部类<br>亮点：直接显示所有成员的列表，支持搜索功能快速定位到某个成员的位置上。</p><p>搜索类中某个成员位置，直接输入关键字就会匹配出当前类中所有符合的成员。</p><p>选择查询结果直接定位到跳转到代码位置。</p><h3 id="Alt-7"><a href="#Alt-7" class="headerlink" title="Alt+7"></a>Alt+7</h3><p>功能：显示当前类的所有成员：方法、属性<br>亮点：显示当前类的继承关系，同时支持搜索功能快速定位到某个成员的位置上</p><h3 id="Ctrl-Shift-F"><a href="#Ctrl-Shift-F" class="headerlink" title="Ctrl+Shift+F"></a>Ctrl+Shift+F</h3><p>功能：在整个项目中搜索匹配符合关键词的位置</p><h3 id="Shift-Shift"><a href="#Shift-Shift" class="headerlink" title="Shift + Shift"></a>Shift + Shift</h3><p>在整个项目中搜索匹配符合关键词的位置<br>亮点：Symbols支持模糊查询只要记住几个字母就能查询出位置</p><h3 id="Ctrl-e"><a href="#Ctrl-e" class="headerlink" title="Ctrl+e"></a>Ctrl+e</h3><p>功能：查看最近操作的文件</p><h3 id="Ctrl-h"><a href="#Ctrl-h" class="headerlink" title="Ctrl+h"></a>Ctrl+h</h3><p>查看该类的家族表</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220402212741719.png" alt="image-20220402212741719"></p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot快速入门</title>
      <link href="/2022/03/21/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dspringboot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/21/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dspringboot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><p>对spingboot的复习;</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速入门 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis(plus)找不到xml文件的坑</title>
      <link href="/2022/03/21/mybatis(plus)%E6%89%BE%E4%B8%8D%E5%88%B0xml%E6%96%87%E4%BB%B6%E7%9A%84%E5%9D%91/"/>
      <url>/2022/03/21/mybatis(plus)%E6%89%BE%E4%B8%8D%E5%88%B0xml%E6%96%87%E4%BB%B6%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-plus-找不到xml文件的坑"><a href="#Mybatis-plus-找不到xml文件的坑" class="headerlink" title="Mybatis(plus)找不到xml文件的坑"></a>Mybatis(plus)找不到xml文件的坑</h1><p>如图，启动SpringBoot项目时报错，</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220321132310967.png" alt="image-20220321132310967"></p><p>image</p><p>解决思路：</p><p>第一步：检查常规配置项是否正确，例如包名，命名空间名，xml中方法名和dao中方法名是否一致等…</p><p>第二步：确认使用的是Mybatis还是MybatisPlus,两者使用的配置项是不同的（这是我遇到的问题）</p><p><strong>properties文件:</strong></p><p>MybatisPlus引的包是<strong>mybatis-plus-boot-starter</strong>，对应的配置项是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mybatis-plus.mapper-locations=classpath:mapper/*.xml</span><br></pre></td></tr></table></figure><p>Mybatis对应的配置项是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mybatis.mapper-locations=classpath:mapper/*.xml</span><br></pre></td></tr></table></figure><p><strong>yaml文件:</strong></p><p>MybatisPlus对应的配置项是</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:com/feng/mapper/xml/*.xml</span></span><br></pre></td></tr></table></figure><p>第三部：检查xml文件是放在resource目录下单独的目录中还是和dao接口类放在一起，如果放在一起的话，需要在pom.xml中的build中增加</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--引入静态文件--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--引入mapper对应的xml文件--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小东西 </tag>
            
            <tag> mybatis </tag>
            
            <tag> mybatis-plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jwt的加密原理</title>
      <link href="/2022/03/20/jwt%E7%9A%84%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86,%E5%92%8Ctoken%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/03/20/jwt%E7%9A%84%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86,%E5%92%8Ctoken%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="1-两种token认证方式"><a href="#1-两种token认证方式" class="headerlink" title="1. 两种token认证方式"></a>1. 两种token认证方式</h2><p><strong>传统的token认证</strong></p><p>用户登录，服务端给前端返回token，并将token保存在服务端。<br>以后用户再来访问时，需要携带token，服务端获取token后再去数据库获取token做校验。</p><p><strong>JWT的token认证</strong></p><p>用户登录，服务端给用户返回一个token（服务端不保存）<br>以后用户再来访问时，需要携带token，服务端获取token做校验</p><p><strong>两种认证方式对比：</strong><br><strong>jwt相对于传统的token认证，无需将token保存在服务端。</strong></p><p>因为HTTP request 本身是stateless的，所以要不在server端使用session来判断，要不就用JWT，也就是bearer token，包含的有效期信息，以及user 信息来进行状态判断是否接受HTTP的request（比如用户是否已经登录），来避免存储session，以及服务器集群之间还要实现session同步的麻烦，现在只要定义一个secret_key就行。</p><p>每当用户想要访问受保护的路由或资源时，用户代理应该发送 JWT，通常在<strong>Authorization</strong>标头中使用<strong>Bearer</strong>模式。标头的内容应如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure><p><strong>JOSN Web Token</strong>(jwt)包含头部（header），载荷（claim set), 和签名(signature)。可以在载荷中存放预定义的元数据，只要是JOSON格式就可以了。</p><h2 id="2-jwt的token加密解密过程"><a href="#2-jwt的token加密解密过程" class="headerlink" title="2. jwt的token加密解密过程"></a>2. jwt的token加密解密过程</h2><p><strong>2.1 生成token</strong></p><p>用户登录成功后，使用jwt创建一个token，并返回给用户，token格式如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Base64URL(header)//第一段header</span><br><span class="line">.base64UrlEncode(payload)//第二段payload</span><br><span class="line">.HMACSHA256(Base64URL(header).base64UrlEncode(payload),secret)//第三段verify signature</span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiJ9//第一段</span><br><span class="line">.eyJvcGVuSWQiOiJvam5NVjVKQ3htdTI1Zjl6ai1SYU5xN0JiZTJvIiwianRpIjoidG9rZW5JZCIsImlhdCI6MTY0NDEzNDI5MywiZXhwIjoxNjQ0MTM2OTIwfQ//第二段</span><br><span class="line">.MRx_xPGNa9lzDGj4nrcdENCA2OgIp4En0TL_GH-_0BI//第三段</span><br></pre></td></tr></table></figure><p>注意：jwt生成的token是由三段字符串拼接而成，使用 . 连接起来</p><p><strong>1.token的第一段字符串：由下面的json数据通过base64（可逆）加密算法得到。</strong></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span>   <span class="comment">//第三段字符串的不可逆加密类型HS256</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span>   <span class="comment">//token类型JWT</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>2.token的第二段字符串：是由下面的payload信息通过base64（可逆）加密算法得到</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// payload信息 为自定义值，一般不放敏感信息</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,   <span class="comment">//用户id</span></span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>,<span class="comment">//用户名</span></span><br><span class="line">  <span class="string">&quot;exp&quot;</span>: <span class="number">1516239022</span>,<span class="comment">//token过期时间</span></span><br><span class="line">  <span class="string">&quot;openId&quot;</span>: <span class="string">&quot;fasdkhgflksdhfgsdkjlf&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.token的第三段字符串构成：<br>1)先将第一段和第二段的密文拼接起来<br>2)对拼接起来的密文字符串和自定义的盐进行 上边指定的HS256加密<br>3)对HS256加密后的密文再做base64加密</strong></p><p>注意：第一、二部分可以通过<code>Base64</code>解密得到，但第三部分不可以！</p><p>生成token代码如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 创建JWT</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(Map&lt;String, Object&gt; claims, Long time)</span> &#123;</span><br><span class="line">      <span class="comment">//指定签名的时候使用的签名算法，也就是header那部分，jjwt已经将这部分内容封装好了。</span></span><br><span class="line">      <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line">      <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">      <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">      <span class="comment">//生成JWT的时间</span></span><br><span class="line">      <span class="type">long</span> <span class="variable">nowMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">      <span class="comment">//下面就是在为payload添加各种标准声明和私有声明了</span></span><br><span class="line">      <span class="comment">//这里其实就是new一个JwtBuilder，设置jwt的body</span></span><br><span class="line">      <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">              <span class="comment">//如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的</span></span><br><span class="line">              .setClaims(claims)</span><br><span class="line">              <span class="comment">//设置jti(JWT ID)：是JWT的唯一标识，根据业务需要，这个可以设置为一个不重复的值，主要用来作为一次性token,从而回避重放攻击。</span></span><br><span class="line">              .setId(jwtId)</span><br><span class="line">              <span class="comment">//iat: jwt的签发时间</span></span><br><span class="line">              .setIssuedAt(now)</span><br><span class="line">              <span class="comment">//设置签名使用的签名算法和签名使用的秘钥</span></span><br><span class="line">              .signWith(signatureAlgorithm, secretKey);</span><br><span class="line">      <span class="keyword">if</span> (time &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> nowMillis + time;</span><br><span class="line">          <span class="type">Date</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line">          <span class="comment">//设置过期时间</span></span><br><span class="line">          builder.setExpiration(exp);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> builder.compact();</span><br><span class="line">      <span class="comment">//然后返回token</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.2 验证（解密）token</strong></p><p>当用户再来访问时，需要携带token，后端需要对token进行校验</p><ul><li>①：获取token</li><li>②：对token进行切割成三部分</li><li>③：对第二段字符串进行base64解密，检测token是否超时？</li><li>④：对第一二段字符串拼接，再次进行HS256加密，得到密文字符串</li><li>⑤：对token的第三段HS256加密</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证jwt</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">verifyJwt</span><span class="params">(String token)</span> &#123;</span><br><span class="line">    <span class="comment">//签名秘钥，和生成的签名的秘钥一模一样</span></span><br><span class="line">    <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> generalKey();</span><br><span class="line">    Claims claims;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        claims = Jwts.parser()  <span class="comment">//得到DefaultJwtParser</span></span><br><span class="line">                .setSigningKey(key)         <span class="comment">//设置签名的秘钥</span></span><br><span class="line">                .parseClaimsJws(token).getBody();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        claims = <span class="literal">null</span>;</span><br><span class="line">    &#125;<span class="comment">//设置需要解析的jwt</span></span><br><span class="line">    <span class="keyword">return</span> claims;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ps : token一旦生成，在过期时间内永久有效，即使项目重启！想要失效token必须等待过期，或者重置盐值！</p><h2 id="3-token登出、改密后失效"><a href="#3-token登出、改密后失效" class="headerlink" title="3. token登出、改密后失效"></a>3. token登出、改密后失效</h2><p>使用jwt时，一般修改密码或退出登录时，需要把正在使用的token做失效处理，防止别的客户端使用失效token访问信息。</p><ul><li><strong>方案一</strong>：在每次修改密码或者退出登录后，修改一下自定义的盐值。当进行下次访问时，会根据自定义盐值验证<code>token</code>，修改了自定义盐值，自然访问不通过。</li><li><strong>方案二</strong>：利用数据库，存放一个修改或者登出的时间，在创建<code>token</code>时，标注上创建时间。如果这个创建时间小于修改或登出的时间，就表示它是修改或者登出之前的<code>token</code>，为过期<code>token</code>(有点不是很懂,好像就是判断token是否过期)</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据userId和openid生成token</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String openId)</span> &#123;</span><br><span class="line">       Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       map.put(<span class="string">&quot;openId&quot;</span>, openId);</span><br><span class="line">       <span class="keyword">return</span> createJWT(map, tokenExpiredTime);<span class="comment">//直接调用上面的createJWT方法</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * token是否过期,就是拿到</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  true：过期</span></span><br><span class="line"><span class="comment">    * lastLoginDate 数据库记录的最后一次登出时间</span></span><br><span class="line"><span class="comment">    * issueDate token 创建时间</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isTokenExpired</span><span class="params">(Date expiration,Date lastLoginDate,Date issueDate)</span> &#123;</span><br><span class="line">       <span class="comment">//token创建时间小于数据库记录的最后一次登出时间 过期</span></span><br><span class="line">       <span class="keyword">if</span>(lastLoginDate == <span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> expiration.before(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> issueDate.before(lastLoginDate);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拦截器的判断:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(jwtUtils.isTokenExpired(claims.getExpiration(),user.getLoginDate(),claims.getIssuedAt()))&#123;</span><br><span class="line">           <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> ResultGenerator.genFailResult(ResultCode.UNAUTHORIZED,<span class="string">&quot;token失效,请重新登录&quot;</span>);</span><br><span class="line">           SendMsgUtil.sendJsonMessage(response,result);</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-token的自动续期、一定时间内无操作掉线"><a href="#4-token的自动续期、一定时间内无操作掉线" class="headerlink" title="4. token的自动续期、一定时间内无操作掉线"></a>4. token的自动续期、一定时间内无操作掉线</h2><p><strong>场景</strong>：用户登陆后，token的过期时间为30分钟，如果在这30分钟内没有操作，则重新登录，如果30分钟内有操作，就给token自动续一个新的时间。避免用户正在操作时掉线重登！</p><p><strong>实现①：在jwt生成token时先不设置过期时间，过期时间的操作放在redis中。</strong>()这一次官网项目好像就有这个)</p><ul><li>①：在登陆时，把用户信息（或者token）放进redis，并设置过期时间</li><li>②：如果30分钟内用户有操作，前端带着token来访问，过滤器解析token得到用户信息，去redis中验证用户信息，验证成功则在redis中增加过期时间，验证失败，返回token错误。实现了token时间的自动更新。</li><li>③：如果30分钟内用户无操作，redis中的用户信息已过期，此时再进行操作，token解析出的用户信息在redis中验证失败，则重新登录。实现了一定时间内无操作掉线！</li></ul><p><strong>实现②：使用access_token、refresh_token 解决</strong></p><ul><li><p>登录获取token(包括访问令牌<code>access_token</code>，刷新令牌<code>refresh_token</code>），其中access_token设置过期时间为5分钟，refresh_token设置过期时间为30分钟。不能同时过期</p></li><li><p>前端保存<code>access_token</code>和<code>refresh_token</code>，每次请求带着<code>access_token</code>去访问服务器资源</p></li><li><p>服务器校验<code>access_token</code>有效性，通过解析<code>access_token</code>看是否能解析出用户信息。如果用户信息为<code>null</code>，说明<code>token</code>无效，返回<code>401</code>，让用户重新登录</p></li><li><p>服务器端校验<code>access_token</code>是否过期</p></li><li><p>如果<code>access_token</code>没有过期，则token正常，继续执行业务逻辑</p><ul><li><p>如果<code>access_token</code>过期，计算 过期后到当前的时间大小 是否在<code>refresh_token</code>过期时间之内（是否大于<code>30 - 5 - 5 = 20</code>分钟，为什么不是<code>30 - 5 = 25</code>分钟呢？主要是想对正在请求的用户token做一个缓存，保证在最后五分钟内，新、老token都有效！防止正在进行的请求token突然失效！），</p><ul><li>如果大于<code>refresh_token</code>的过期时间，则表示用户长时间无操作，token真正过期了，返回401，让用户重新登录</li></ul></li><li><p>如果小于<code>refresh_token</code>的过期时间，则继续让该<code>access_token</code>访问业务，但返回给前端标识，提示token已过期，让前端带着<code>refresh_token</code>去服务器获取新的<code>access_token</code>，并保存在前端，后续使用新的<code>access_token</code>去访问！</p></li></ul></li></ul><h2 id="5-JWT工具类"><a href="#5-JWT工具类" class="headerlink" title="5.JWT工具类"></a>5.JWT工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.io.BaseEncoding;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtBuilder;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> tokenExpiredTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String jwtId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String jwtSecret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建JWT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(Map&lt;String, Object&gt; claims, Long time)</span> &#123;</span><br><span class="line">        <span class="comment">//指定签名的时候使用的签名算法，也就是header那部分，jjwt已经将这部分内容封装好了。</span></span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="comment">//生成JWT的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">nowMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//下面就是在为payload添加各种标准声明和私有声明了</span></span><br><span class="line">        <span class="comment">//这里其实就是new一个JwtBuilder，设置jwt的body</span></span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                <span class="comment">//如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的</span></span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                <span class="comment">//设置jti(JWT ID)：是JWT的唯一标识，根据业务需要，这个可以设置为一个不重复的值，主要用来作为一次性token,从而回避重放攻击。</span></span><br><span class="line">                .setId(jwtId)</span><br><span class="line">                <span class="comment">//iat: jwt的签发时间</span></span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                <span class="comment">//设置签名使用的签名算法和签名使用的秘钥</span></span><br><span class="line">                .signWith(signatureAlgorithm, secretKey);</span><br><span class="line">        <span class="keyword">if</span> (time &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> nowMillis + time;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line">            <span class="comment">//设置过期时间</span></span><br><span class="line">            builder.setExpiration(exp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证jwt</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">verifyJwt</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="comment">//签名秘钥，和生成的签名的秘钥一模一样</span></span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        Claims claims;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims = Jwts.parser()  <span class="comment">//得到DefaultJwtParser</span></span><br><span class="line">                    .setSigningKey(key)         <span class="comment">//设置签名的秘钥</span></span><br><span class="line">                    .parseClaimsJws(token).getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            claims = <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="comment">//设置需要解析的jwt</span></span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由字符串生成加密key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SecretKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title function_">generalKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">stringKey</span> <span class="operator">=</span> jwtSecret;</span><br><span class="line">        <span class="type">byte</span>[] encodedKey = BaseEncoding.base64().decode(stringKey);</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(encodedKey, <span class="number">0</span>, encodedKey.length, <span class="string">&quot;HmacSHA256&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据userId和openid生成token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String openId)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;openId&quot;</span>, openId);</span><br><span class="line">        <span class="keyword">return</span> createJWT(map, tokenExpiredTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.token-expired-time&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTokenExpiredTime</span><span class="params">(<span class="type">long</span> tokenExpiredTime)</span> &#123;</span><br><span class="line">        JwtUtils.tokenExpiredTime = tokenExpiredTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJwtId</span><span class="params">(String jwtId)</span> &#123;</span><br><span class="line">        JwtUtils.jwtId = jwtId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.secret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJwtSecret</span><span class="params">(String jwtSecret)</span> &#123;</span><br><span class="line">        JwtUtils.jwtSecret = jwtSecret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getTokenExpiredTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tokenExpiredTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJwtId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jwtId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJwtSecret</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jwtSecret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-整合springboot"><a href="#6-整合springboot" class="headerlink" title="6.整合springboot"></a>6.整合springboot</h2><p><strong>搭建springboot+mybatis-plus+jwt环境</strong></p><p><strong>引入依赖:</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--解决生成JWT时base64加密错误--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>31.0.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--引入jwt--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--引入lombok--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入druid--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.feng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springbootmybatisplus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>yaml中的配置信息:</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8989</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">nihao123</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">initialSize:</span> <span class="number">10</span>   <span class="comment">#初始化连接个数</span></span><br><span class="line">      <span class="attr">minIdle:</span> <span class="number">10</span>       <span class="comment">#最小空闲连接个数</span></span><br><span class="line">      <span class="attr">maxActive:</span> <span class="number">100</span>    <span class="comment">#最大连接个数</span></span><br><span class="line">      <span class="attr">maxWait:</span> <span class="number">60000</span>    <span class="comment">#获取连接时最大等待时间，单位毫秒。</span></span><br><span class="line">      <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span>  <span class="comment">#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class="line">      <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">30000</span>     <span class="comment">#配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class="line">      <span class="attr">validationQuery:</span> <span class="string">select</span> <span class="string">&#x27;x&#x27;</span> <span class="comment">#用来检测连接是否有效的sql，要求是一个查询语句。</span></span><br><span class="line">      <span class="attr">testWhileIdle:</span> <span class="literal">true</span>       <span class="comment">#建议配置为true，不影响性能，并且保证安全性。如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span></span><br><span class="line">      <span class="attr">testOnBorrow:</span> <span class="literal">true</span>        <span class="comment">#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</span></span><br><span class="line">      <span class="attr">testOnReturn:</span> <span class="literal">false</span>       <span class="comment">#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</span></span><br><span class="line">      <span class="attr">poolPreparedStatements:</span> <span class="literal">false</span> <span class="comment">#是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</span></span><br><span class="line">      <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">-1</span> <span class="comment">#要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall</span> <span class="comment">#通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat，日志用的filter:log4j，防御sql注入的filter:wall</span></span><br><span class="line">      <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span> <span class="comment"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span></span><br><span class="line">      <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">false</span> <span class="comment"># 合并多个DruidDataSource的监控数据</span></span><br><span class="line"><span class="attr">jwt:</span></span><br><span class="line">  <span class="comment">#设置token的过期时间，单位为秒</span></span><br><span class="line">  <span class="attr">token-expired-time:</span> <span class="number">36000</span> <span class="comment">#10小时</span></span><br><span class="line">  <span class="comment">#设置token的id</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">tokenId</span></span><br><span class="line">  <span class="comment">#设置密钥</span></span><br><span class="line">  <span class="attr">secret:</span> <span class="string">aPbOBbnH4gnZBzIYEY7mxWNu49kYljNPMeva9Fjrwwqzw0bFlO0kPXZTCGaVcw0j</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:com/feng/mapper/xml/*.xml</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>创建一个简单的数据表</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">80</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户密码&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>记得插入账号和密码信息</p><p><strong>entity类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/21 11:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain=true)</span><span class="comment">//这是干啥用的哦</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>service里面的</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    User <span class="title function_">login</span><span class="params">(User user)</span>;<span class="comment">//登录接口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.SUPPORTS)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">login</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">userDB</span> <span class="operator">=</span> userMapper.login(user);</span><br><span class="line">        <span class="keyword">if</span>(userDB!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> userDB;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;登录失败~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>mapper里面:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    User <span class="title function_">login</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml文件中</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.feng.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里就写的简单点了毕竟不是重点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.feng.entity.User&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.feng.entity.User&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from user</span><br><span class="line">        where name = #&#123;name&#125;</span><br><span class="line">          and password = #&#123;password&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>controller类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 登录判断,得到一个token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: ladidol</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2022/3/21 13:40 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: [user]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span>: java.util.Map&lt;java.lang.String,java.lang.Object&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        Map&lt;String,Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        log.info(<span class="string">&quot;用户名: [&#123;&#125;]&quot;</span>, user.getName());</span><br><span class="line">        log.info(<span class="string">&quot;密码: [&#123;&#125;]&quot;</span>, user.getPassword());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">userDB</span> <span class="operator">=</span> userService.login(user);</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">//用来存放payload</span></span><br><span class="line">            map.put(<span class="string">&quot;id&quot;</span>,userDB.getId());</span><br><span class="line">            map.put(<span class="string">&quot;username&quot;</span>, userDB.getName());</span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtils.createJWT(map,<span class="number">10000000L</span>);</span><br><span class="line">            result.put(<span class="string">&quot;state&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">            result.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;登录成功!!!&quot;</span>);</span><br><span class="line">            result.put(<span class="string">&quot;token&quot;</span>,token); <span class="comment">//成功返回token信息</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            result.put(<span class="string">&quot;state&quot;</span>,<span class="string">&quot;false&quot;</span>);</span><br><span class="line">            result.put(<span class="string">&quot;msg&quot;</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 再次判断token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: ladidol</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2022/3/21 13:40 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: [token]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span>: java.util.Map&lt;java.lang.String,java.lang.Object&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">test</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JwtUtils.verifyJwt(token);</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;验证通过~~~&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException e) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Token已经过期!!!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureVerificationException e)&#123;</span><br><span class="line">            map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;签名错误!!!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlgorithmMismatchException e)&#123;</span><br><span class="line">            map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;加密算法不匹配!!!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;无效token~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加拦截器:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">  Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    JWTUtils.verify(token);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (TokenExpiredException e) &#123;</span><br><span class="line">    map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Token已经过期!!!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SignatureVerificationException e)&#123;</span><br><span class="line">    map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;签名错误!!!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (AlgorithmMismatchException e)&#123;</span><br><span class="line">    map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;加密算法不匹配!!!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;无效token~~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(map);</span><br><span class="line">  response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">  response.getWriter().println(json);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">JwtTokenInterceptor</span>()).</span><br><span class="line">          excludePathPatterns(<span class="string">&quot;/user/**&quot;</span>)</span><br><span class="line">          .addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可以在postman里面测试:</strong></p><p>登录接口:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220321135050610.png" alt="image-20220321135050610"></p><p>测试接口:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220321134257642.png" alt="image-20220321134257642"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> jwt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jwt </tag>
            
            <tag> 加密原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git注意事项</title>
      <link href="/2022/03/20/git%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2022/03/20/git%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="1、gitHub-提交"><a href="#1、gitHub-提交" class="headerlink" title="1、gitHub 提交"></a>1、gitHub 提交</h3><p>（1）创建本地的新仓库然后提交：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# springboot-batch-demo project&quot;</span> &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin  https://&lt;your_token&gt;@github.com/ladidol/springboot-batch-demo.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>（2）提交一个已经本地已经存在的仓库：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin  https://&lt;your_token&gt;@github.com/ladidol/springboot-batch-demo.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>…</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 注意事项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java算法小知识点</title>
      <link href="/2022/03/20/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5Djava%E7%AE%97%E6%B3%95%E5%B0%8F%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/03/20/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5Djava%E7%AE%97%E6%B3%95%E5%B0%8F%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><p>回声实验室的算法路线<a href="https://git.pyhub.club/star/list/-/blob/main/AlgorithmStudyList.md">传送门</a></p><p>这里主要是一些小小知识点,希望以后能不断完善并总结更系统更有条理的…</p><h1 id="片段"><a href="#片段" class="headerlink" title="片段:"></a>片段:</h1><h2 id="java的一个快速输入"><a href="#java的一个快速输入" class="headerlink" title="java的一个快速输入:"></a>java的一个快速输入:</h2><p><strong>通过BufferedReader来实现(一般就用这个就行):</strong></p><p>&#x2F;&#x2F;注意要引入这个**java.io.***包<br>&#x2F;&#x2F;同时还有异常要抛出</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//基本输入</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Integer.parseInt(br.readLine());</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        String[] tmp = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">a</span> <span class="operator">=</span> Long.parseLong(tmp[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">long</span> <span class="variable">b</span> <span class="operator">=</span> Long.parseLong(tmp[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日期差简单运算"><a href="#日期差简单运算" class="headerlink" title="日期差简单运算:"></a>日期差简单运算:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/20 15:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> class 日期处理 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//基本输入</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        <span class="comment">//通过SimpleDateFormat来解析设置日期格式:</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd hh:mm&quot;</span>);</span><br><span class="line">        <span class="comment">/*天数差*/</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">fromDate</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;2022-03-20 12:00&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">toDate</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;2090-03-20 12:00&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">from</span> <span class="operator">=</span> fromDate.getTime();</span><br><span class="line">        <span class="type">long</span> <span class="variable">to</span> <span class="operator">=</span> toDate.getTime();</span><br><span class="line">        <span class="type">int</span> <span class="variable">days</span> <span class="operator">=</span> (<span class="type">int</span>) ((to - from)/(<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;两个时间之间的天数差为: &quot;</span> + days);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简单的类的排序"><a href="#简单的类的排序" class="headerlink" title="简单的类的排序:"></a>简单的类的排序:</h2><p><strong>通过新建一个实现了Comparable的类:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt; &#123;</span><br><span class="line">        <span class="comment">//注意static</span></span><br><span class="line">        String name;</span><br><span class="line">        Integer totalFenShu;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, Integer totalFenShu)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.totalFenShu = totalFenShu;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">            <span class="comment">//一定重写compareTo这个方法</span></span><br><span class="line">            <span class="keyword">return</span> totalFenShu.compareTo(o.totalFenShu);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, totalFenShu=&quot;</span> + totalFenShu +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//基本输入</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Integer.parseInt(br.readLine());</span><br><span class="line"></span><br><span class="line">        Student[] students = <span class="keyword">new</span> <span class="title class_">Student</span>[n];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            String[] tmp = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> tmp[<span class="number">0</span>];</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">totalFenShu</span> <span class="operator">=</span> Integer.parseInt(tmp[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">            students[i] = <span class="keyword">new</span> <span class="title class_">Student</span>(name,totalFenShu);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用Arrays.sort()对数组进行排序</span></span><br><span class="line">        Arrays.sort(students);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Student i: students) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">feng 123</span><br><span class="line">xiao 122</span><br><span class="line">qiang 112</span><br><span class="line">quan 1166</span><br><span class="line">Student&#123;name=&#x27;qiang&#x27;, totalFenShu=112&#125;</span><br><span class="line">Student&#123;name=&#x27;xiao&#x27;, totalFenShu=122&#125;</span><br><span class="line">Student&#123;name=&#x27;feng&#x27;, totalFenShu=123&#125;</span><br><span class="line">Student&#123;name=&#x27;quan&#x27;, totalFenShu=1166&#125;</span><br></pre></td></tr></table></figure><h2 id="常用进制转换"><a href="#常用进制转换" class="headerlink" title="常用进制转换:"></a>常用进制转换:</h2><p><strong>十进制转十六进制:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer.toHexString(shu)<span class="comment">//shu是十进制int型</span></span><br></pre></td></tr></table></figure><p><strong>十六进制转十进制</strong>:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Long.parseLong(hex,<span class="number">16</span>)<span class="comment">//这个hex是String字符串类型</span></span><br></pre></td></tr></table></figure><h2 id="最大公约数的寻找"><a href="#最大公约数的寻找" class="headerlink" title="最大公约数的寻找:"></a>最大公约数的寻找:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">gongYueShu</span><span class="params">(<span class="type">int</span> A, <span class="type">int</span> B)</span>&#123;</span><br><span class="line">    <span class="type">return</span> <span class="variable">B</span> <span class="operator">=</span>= <span class="number">0</span>? A: gongYueShu(B, A % B);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找:"></a>二分查找:</h2><p>目标值小了就去左侧找,大了就去右侧找</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">indexOfMid</span> <span class="operator">=</span> (right - left) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> arr[indexOfMid];</span><br><span class="line">        <span class="keyword">if</span> (target &gt; mid)&#123;</span><br><span class="line">            <span class="comment">//从右侧找,就要把左边界给缩小;</span></span><br><span class="line">            left = indexOfMid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target &lt; mid)&#123;</span><br><span class="line">            <span class="comment">//从左侧找,就要把右边界给缩小;</span></span><br><span class="line">            right = indexOfMid - <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//说明找到了,那就返回坐标;</span></span><br><span class="line">            <span class="keyword">return</span> indexOfMid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="java中有一种大数"><a href="#java中有一种大数" class="headerlink" title="java中有一种大数:"></a>java中有一种大数:</h2><p><strong>BigInteger</strong></p><p>例题题目:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">求两个超大数的最大公因数</span><br><span class="line">输入:</span><br><span class="line">12 16</span><br><span class="line">输出:</span><br><span class="line">4</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        String[] tmp = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(tmp[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(tmp[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(yueFen(a,b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BigInteger <span class="title function_">yueFen</span><span class="params">(BigInteger a, BigInteger b)</span> &#123;</span><br><span class="line">        <span class="comment">//注意,这里return b==0 ? a : yueFeng(b, a.mod(b));</span></span><br><span class="line">        <span class="comment">//注意等于用b.equals(BigInteger.ZERO)</span></span><br><span class="line">        <span class="keyword">return</span> b.equals(BigInteger.ZERO) ? a : yueFen(b,a.mod(b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora和PicGo的整合</title>
      <link href="/2022/03/20/typora%E5%92%8Cpicgo%E7%9A%84%E7%BB%93%E5%90%88/"/>
      <url>/2022/03/20/typora%E5%92%8Cpicgo%E7%9A%84%E7%BB%93%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/%E5%A4%87%E7%94%A814.png" alt="备用14"></p><p>图床上传软件picgo的一些简单配置<a href="https://blog.csdn.net/yefcion/article/details/88412025">传送门</a></p><p>结合详情请看这个博客<a href="https://blog.csdn.net/bruce_6/article/details/104821531?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_paycolumn_v3&utm_relevant_index=1">传送门</a></p><p>这个也是一个<a href="https://blog.csdn.net/u011291916/article/details/119194338">传送门</a></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>作为图床的仓库最好<strong>不能超过 1G</strong>，因为仓库超过 1G 后会有人工审核仓库内容。一旦发现用于图床可能会被删库也可能会被封号！！！所以建议在 1G 之前就换个仓库</li><li>仓库是<strong>公开</strong>的，所以图片放上去要注意隐私问题，特别是单位的一些涉密资料</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 小东西 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PageResult类的使用</title>
      <link href="/2022/03/17/PageResult%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/03/17/PageResult%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 一般返回全部东西的话就要用到page页面,</span><br><span class="line">* 然后一般返回普通的page(import com.baomidou.mybatisplus.extension.plugins.pagination.Page</span><br><span class="line">* 其中要新建一个页面的到页面的大小,页面页数</span><br></pre></td></tr></table></figure><p>PageResult类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cuit.epoch.util.result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Pymjl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/1/21 22:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageResult</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt;, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">3720998571176536865L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; records = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一共有多少条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> totalElements;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> currentPage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一页数据最多有多少条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> pageSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一共有多少页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> totalPages;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页数有多少条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> numberOfElements;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法，只用把原来的page类放进来即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 查出来的分页对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageResult</span><span class="params">(Page&lt;T&gt; page)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.records = page.getRecords();</span><br><span class="line">        <span class="built_in">this</span>.totalElements = page.getTotal();</span><br><span class="line">        <span class="built_in">this</span>.currentPage = page.getCurrent();</span><br><span class="line">        <span class="built_in">this</span>.pageSize = page.getSize();</span><br><span class="line">        <span class="built_in">this</span>.numberOfElements = page.getRecords().size();</span><br><span class="line">        <span class="built_in">this</span>.totalPages = page.getPages();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有前一页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPrevious</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getCurrentPage() &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有下一页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getCurrentPage() + <span class="number">1</span> &lt; getTotalPages();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取总的页数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> long</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getTotalPages</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.totalPages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前页的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List&lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;T&gt; <span class="title function_">getRecords</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableList(records);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> records 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRecords</span><span class="params">(List&lt;T&gt; records)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.records = records;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasRecords</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getNumberOfElements() &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单页大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getPageSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置单页大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageSize</span><span class="params">(Long pageSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pageSize = pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取全部元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getTotalElements</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> totalElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置全部元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotalElements</span><span class="params">(<span class="type">long</span> totalElements)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.totalElements = totalElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前页号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getCurrentPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置当前页号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCurrentPage</span><span class="params">(Long currentPage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.currentPage = currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单页元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumberOfElements</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> numberOfElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置单页元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNumberOfElements</span><span class="params">(<span class="type">int</span> numberOfElements)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.numberOfElements = numberOfElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getRecords().iterator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PrizeService:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PrizeService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Prize&gt; &#123;</span><br><span class="line">    Page&lt;Prize&gt; <span class="title function_">getPrizeByEverything</span><span class="params">(Integer currentPage, Integer pageSize, PrizeUpdateDTO PrizeUpdateDTO)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PrizeServiceImpl:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/17 21:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrizeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;PrizeMapper, Prize&gt; <span class="keyword">implements</span> <span class="title class_">PrizeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    PrizeMapper prizeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    通过奖项的一些属性筛选,查询,通过分页返回</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Page&lt;Prize&gt; <span class="title function_">getPrizeByEverything</span><span class="params">(Integer currentPage, Integer pageSize, PrizeUpdateDTO prizeUpdateDTO)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Prize&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;需要查询的班级为:&quot;</span> + prizeUpdateDTO.getClbum());</span><br><span class="line">        queryWrapper</span><br><span class="line">                .like(Strings.isNotBlank(prizeUpdateDTO.getPrizeName()),Prize::getPrizeName,prizeUpdateDTO.getPrizeName())</span><br><span class="line">                .like(Strings.isNotBlank(prizeUpdateDTO.getPrizeWinner()),Prize::getPrizeWinner,prizeUpdateDTO.getPrizeWinner())</span><br><span class="line">                .like(Strings.isNotBlank(prizeUpdateDTO.getClbum()),Prize::getClbum,prizeUpdateDTO.getClbum())</span><br><span class="line">                .like(Strings.isNotBlank(prizeUpdateDTO.getGrade()),Prize::getGrade,prizeUpdateDTO.getGrade())</span><br><span class="line">                .like(Strings.isNotBlank(prizeUpdateDTO.getProfession()),Prize::getProfession,prizeUpdateDTO.getProfession())</span><br><span class="line">                .like(Strings.isNotBlank(prizeUpdateDTO.getPrizeName()),Prize::getPrizeName,prizeUpdateDTO.getPrizeName());</span><br><span class="line">        <span class="keyword">if</span> (prizeUpdateDTO.getPrizeTime() != <span class="literal">null</span>)&#123;</span><br><span class="line">            queryWrapper.like(Prize::getPrizeTime,prizeUpdateDTO.getPrizeTime());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Page&lt;Prize&gt; prizePage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(currentPage, pageSize);</span><br><span class="line">        prizeMapper.selectPage(prizePage,queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> prizePage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PrizeController:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: todo 异常拦截</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/17 20:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/prizes&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrizeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    PrizeService prizeService</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 通过分类筛选,你想要怎么筛选都可以,你直接传一个prize对象给我就行</span></span><br><span class="line"><span class="comment">     * 这里的prizeUpdateDTO没有将json中的class识别转换成clbum,一个小bug,是因为,没有加<span class="doctag">@requestBody</span>这个注解,这里是直接从require参数中取值,不是json中取值,<span class="doctag">@Json</span>就没有很大的作用,可以新建一个类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: ladidol</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2022/3/18 11:28</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span>:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/searchByEverything&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;PageResult&lt;Prize&gt;&gt; <span class="title function_">getPrizesByEverything</span><span class="params">(<span class="meta">@RequestParam(&quot;currentPage&quot;)</span>Integer currentPage, <span class="meta">@RequestParam(&quot;pageSize&quot;)</span>Integer pageSize, PrizeUpdateDTO prizeUpdateDTO)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="keyword">new</span> <span class="title class_">PageResult</span>&lt;&gt;(prizeService.getPrizeByEverything(currentPage, pageSize, prizeUpdateDTO)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>PrizeUpdateDTO:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/17 21:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrizeUpdateDTO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;奖项id不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;奖项者不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String prizeWinner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;奖项名字不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String prizeName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;奖项时间不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date prizeTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;奖项文件不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;专业不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String profession;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;年级不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String grade;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;班级不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;class&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String clbum;<span class="comment">//班级</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>apifox上查询结果:</p><p>例一:</p><p>途中是对奖项名字prizeName带有”奖项”和奖项专业profession带有计算机的进行的筛选返回</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220318124622466.png" alt="image-20220318124622466"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220318124600563.png" alt="image-20220318124600563"></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;records&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小小1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;奖项11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小小2&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;奖项11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:17&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:17&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小小3&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;奖项11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:22&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:22&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小小4&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;奖项11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:29&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:29&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;succeed&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;totalElements&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;currentPage&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pageSize&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;totalPages&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;numberOfElements&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;succeed&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>例二:直接查询全部奖项</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220318124910533.png" alt="image-20220318124910533"></p><p>结果:</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;records&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小李&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;蓝桥杯一等奖省&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-09 20:42:25&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 15:09:34&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 15:09:36&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;202&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小钱&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;奖项1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;电子信息&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 15:17:39&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 15:17:42&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;208&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小金&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获奖1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 20:42:31&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;大气&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;19级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 16:35:24&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 16:35:24&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;191&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小彭&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获奖3&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 20:42:36&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;区块链&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;18级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 16:42:22&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 16:42:22&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;181&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小刚&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获奖7&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 20:42:41&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;资环&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;17级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 17:46:13&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 17:46:13&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;176&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李华&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获奖8&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 20:42:44&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;资环&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;19级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 17:54:23&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 17:54:23&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;194&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小小&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获奖9&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 20:42:47&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;外国语&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;21级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 21:55:14&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 21:55:14&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;212&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小强&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;项11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:26:15&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:26:15&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小小1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;奖项11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小小2&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;奖项11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:17&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:17&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;succeed&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;totalElements&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;currentPage&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pageSize&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;totalPages&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;numberOfElements&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;succeed&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(未完成)JavaScript学习</title>
      <link href="/2022/03/17/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5DJavaScript%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/17/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5DJavaScript%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><p><strong>JavaScript</strong>是一种属于网络的脚本语言，有它自身的基本数据类型、表达式和算术运算符及程序的基本程序框架，已经被广泛用于Web应用开发。</p><p>更重要的是JavaScript同HTML5一样具有<strong>跨平台性</strong>。</p><p><strong>简单</strong>是JavaScript的又一大优点。</p><p>随着服务器的强壮，引擎如V8和框架如Node.js的发展，及其事件驱动及异步IO等特性，<strong>JavaScript</strong>也逐渐被用来编写服务器端程序</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> web前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-plus快速入门</title>
      <link href="/2022/03/16/Mybatis-plus%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/16/Mybatis-plus%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><p>官网文档也有入门介绍，如果有耐心和一定基础的小伙伴可以直接看官网<a href="https://baomidou.com/">传送门</a></p><h2 id="准备依赖"><a href="#准备依赖" class="headerlink" title="准备依赖"></a>准备依赖</h2><p>1.mybatis-plus依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.mysql驱动JDBC依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.mysql驱动、JDBC和其他springboot依赖可以在IDEA中构建springboot项目时选择添加，这里就不加概述。</p><h2 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h2><p>创建user表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> mybatis_plus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE mybatis_plus;</span><br><span class="line"></span><br><span class="line">USE mybatis_plus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">    id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    create_time DATETIME COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time DATETIME COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="初始化工程"><a href="#初始化工程" class="headerlink" title="初始化工程"></a>初始化工程</h2><p>用IDEA初始化一个springboot项目</p><h2 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h2><p>在resource目录下的配置文件里配置自己的数据源，建议在application.yml中配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">nihao123</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?useSSL=true&amp;useUnicode=true&amp;characterEcoding=utf-8</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>注意，我这里使用的mysql驱动是8+，在url中还需要配置时区，因为我在mysql配置文件中设置了默认时区，所以这里我没有配置时区。如果没有设置时区请加上serverTimezone&#x3D;Asia&#x2F;Shanghai.</p><p>另外，如果mysql驱动用的5+版本则应这样driver-class-name: com.mysql.jdbc.Driver配置驱动。</p><p>下面的mybatis-plus配置是开启日志，因为我没有导入其他的日志依赖，所以用的是自带的日志</p><h2 id="创建User实体类"><a href="#创建User实体类" class="headerlink" title="创建User实体类"></a>创建User实体类</h2><p>在pojo包下创建User对象，这里我引入了Lombok，用Lombok给对象创建构造器以及getter和setter</p><p>注意：若之前在IDEA中并未使用过Lombok，请先在IDEA中安装Lombok插件，Lombok</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ToString</span> <span class="comment">//重写toString方法</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">//创建有参构造</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//创建getter和setter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">//创建无参构造，用了创建有参构造的注解是默认没有无参构造的，需要手动创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span> <span class="comment">//主键注解，具体参考官方文档，注意使用AUTO创建表时请把主键设置为自增</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span><span class="comment">//字段注解，具体参考官方文档</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的@TableField后面会讲到,可以先暂时跳过</p><h2 id="配置Mybatis-Plus"><a href="#配置Mybatis-Plus" class="headerlink" title="配置Mybatis-Plus"></a>配置Mybatis-Plus</h2><p>在main&#x2F;src目录下创建mapper文件夹，在mapper文件夹下创建UserMapper这个接口，让这个接口继承BaseMapper ,注意泛型里面是要操作的实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis_plus.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.mybatis_plus.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Repository</span></span><br><span class="line"><span class="meta">@Mapper</span><span class="comment">//一般就是用这个注解了</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"><span class="comment">//这里可以自己写sql，用法和mybatis一样。现在暂时不写，仅测试mybatis-plus的实现类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后还要在springboot启动类上添加扫描注解，扫描这个mapper</p><p>注意：扫描包名千万别写错了，否则后面的代码全部白写</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis_plus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@MapperScan(&quot;com.mybatis_plus.Mapper&quot;)如果mapper层注释为repository就加一个这个注解</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在spring boot测试类里面编写测试类</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>查询所有用户</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis_plus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mybatis_plus.Mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.mybatis_plus.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);<span class="comment">//这里的参数是一个条件构造器wrapper,这里先暂时不讲，后面会讲到</span></span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，得到结果(因为开启了日志，所以在控制台看到了sql这个执行过程,因为我之前测试过，所以表里的数据有些不一样)</p><p>控制台输出:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::                (v2.6.4)</span><br><span class="line"></span><br><span class="line">2022-03-12 14:27:54.068  INFO 9548 --- [           main] com.feng.MybatisplusApplicationTests     : Starting MybatisplusApplicationTests using Java 1.8.0_202 on SmallWolfberry with PID 9548 (started by 冯小强 in E:\Java\springboot\mybatisplus)</span><br><span class="line">2022-03-12 14:27:54.069  INFO 9548 --- [           main] com.feng.MybatisplusApplicationTests     : No active profile set, falling back to 1 default profile: &quot;default&quot;</span><br><span class="line">Logging initialized using &#x27;class org.apache.ibatis.logging.stdout.StdOutImpl&#x27; adapter.</span><br><span class="line">Property &#x27;mapperLocations&#x27; was not specified.</span><br><span class="line"> _ _   |_  _ _|_. ___ _ |    _ </span><br><span class="line">| | |\/|_)(_| | |_\  |_)||_|_\ </span><br><span class="line">     /               |         </span><br><span class="line">                        3.4.3 </span><br><span class="line">This primary key of &quot;id&quot; is primitive !不建议如此请使用包装类 in Class: &quot;com.feng.entity.User&quot;</span><br><span class="line">2022-03-12 14:27:56.229  INFO 9548 --- [           main] com.feng.MybatisplusApplicationTests     : Started MybatisplusApplicationTests in 2.544 seconds (JVM running for 3.685)</span><br><span class="line"></span><br><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@350a94ce] was not registered for synchronization because synchronization is not active</span><br><span class="line">2022-03-12 14:27:56.449  INFO 9548 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...</span><br><span class="line">2022-03-12 14:27:57.551  INFO 9548 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.</span><br><span class="line">JDBC Connection [HikariProxyConnection@488422671 wrapping com.mysql.cj.jdbc.ConnectionImpl@6fa13e6] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: SELECT id,name,age,email,create_time,update_time FROM user</span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==    Columns: id, name, age, email, create_time, update_time</span><br><span class="line">&lt;==        Row: 1, Jone, 18, test1@baomidou.com, null, null</span><br><span class="line">&lt;==        Row: 2, Jack, 20, test2@baomidou.com, null, null</span><br><span class="line">&lt;==        Row: 3, Tom, 28, test3@baomidou.com, null, null</span><br><span class="line">&lt;==        Row: 4, Sandy, 21, test4@baomidou.com, null, null</span><br><span class="line">&lt;==        Row: 5, Billie, 24, test5@baomidou.com, null, null</span><br><span class="line">&lt;==      Total: 5</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@350a94ce]</span><br><span class="line">User(id=1, name=Jone, age=18, email=test1@baomidou.com, createTime=null, updateTime=null)</span><br><span class="line">User(id=2, name=Jack, age=20, email=test2@baomidou.com, createTime=null, updateTime=null)</span><br><span class="line">User(id=3, name=Tom, age=28, email=test3@baomidou.com, createTime=null, updateTime=null)</span><br><span class="line">User(id=4, name=Sandy, age=21, email=test4@baomidou.com, createTime=null, updateTime=null)</span><br><span class="line">User(id=5, name=Billie, age=24, email=test5@baomidou.com, createTime=null, updateTime=null)</span><br><span class="line"></span><br><span class="line">2022-03-12 14:27:57.631  INFO 9548 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...</span><br><span class="line">2022-03-12 14:27:57.633  INFO 9548 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>除此之外，除了selectList（）方法以外，mybatis-plus还带有很多其他的查询方法方法，在此不一一演示</p><p>，读者可以自行探索</p><h2 id="使用Service层来调用服务"><a href="#使用Service层来调用服务" class="headerlink" title="使用Service层来调用服务:"></a>使用Service层来调用服务:</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作:"></a>准备工作:</h3><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-fo0xsDA4-1647069309210)(E:&#x2F;myblog&#x2F;source&#x2F;images&#x2F;mybatis-plus%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B&#x2F;image-20220312150929158.png)]</p><p>新建一个UserService类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.feng.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/12 14:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    Boolean <span class="title function_">saveUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新建一个UserServiceImpl实现类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.feng.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.feng.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.feng.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/12 14:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt;   <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">saveUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">                .eq(User::getId, <span class="number">6</span>)</span><br><span class="line">                .eq(User::getName, <span class="string">&quot;ladidol&quot;</span>)</span><br><span class="line">                .eq(User::getEmail, <span class="string">&quot;599426945@qq.com&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">oldUser</span> <span class="operator">=</span> baseMapper.selectOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(oldUser)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">User</span> <span class="variable">newUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        newUser.setAge(<span class="number">20</span>);</span><br><span class="line">        newUser.setName(<span class="string">&quot;ladidol&quot;</span>);</span><br><span class="line">        newUser.setEmail(<span class="string">&quot;ladidol@outlook.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> baseMapper.insert(newUser) &gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试类中新添加方法:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.feng.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.feng.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MybatisplusApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BaseMapper&lt;User&gt; baseMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = baseMapper.selectList(<span class="literal">null</span>);<span class="comment">//这里的参数是一个条件构造器wrapper,这里先暂时不讲，后面会讲到</span></span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        userService.saveUser();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::                (v2.6.4)</span><br><span class="line"></span><br><span class="line">2022-03-12 15:06:39.024  INFO 14752 --- [           main] com.feng.MybatisplusApplicationTests     : Starting MybatisplusApplicationTests using Java 1.8.0_202 on SmallWolfberry with PID 14752 (started by 冯小强 in E:\Java\springboot\mybatisplus)</span><br><span class="line">2022-03-12 15:06:39.025  INFO 14752 --- [           main] com.feng.MybatisplusApplicationTests     : No active profile set, falling back to 1 default profile: &quot;default&quot;</span><br><span class="line">Logging initialized using &#x27;class org.apache.ibatis.logging.stdout.StdOutImpl&#x27; adapter.</span><br><span class="line">Property &#x27;mapperLocations&#x27; was not specified.</span><br><span class="line"> _ _   |_  _ _|_. ___ _ |    _ </span><br><span class="line">| | |\/|_)(_| | |_\  |_)||_|_\ </span><br><span class="line">     /               |         </span><br><span class="line">                        3.4.3 </span><br><span class="line">2022-03-12 15:06:41.136  INFO 14752 --- [           main] com.feng.MybatisplusApplicationTests     : Started MybatisplusApplicationTests in 2.669 seconds (JVM running for 3.816)</span><br><span class="line"></span><br><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@790a251b] was not registered for synchronization because synchronization is not active</span><br><span class="line">2022-03-12 15:06:41.387  INFO 14752 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...</span><br><span class="line">2022-03-12 15:06:42.509  INFO 14752 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.</span><br><span class="line">JDBC Connection [HikariProxyConnection@1134011961 wrapping com.mysql.cj.jdbc.ConnectionImpl@24841372] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: SELECT id,name,age,email,create_time,update_time FROM user WHERE (id = ? AND name = ? AND email = ?)</span><br><span class="line">==&gt; Parameters: 6(Integer), ladidol(String), 599426945@qq.com(String)</span><br><span class="line">&lt;==      Total: 0</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@790a251b]</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@47406941] was not registered for synchronization because synchronization is not active</span><br><span class="line">JDBC Connection [HikariProxyConnection@1643565953 wrapping com.mysql.cj.jdbc.ConnectionImpl@24841372] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: INSERT INTO user ( name, age, email, create_time, update_time ) VALUES ( ?, ?, ?, ?, ? )</span><br><span class="line">==&gt; Parameters: ladidol(String), 20(Integer), ladidol@outlook.com(String), null, null</span><br><span class="line">&lt;==    Updates: 1</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@47406941]</span><br><span class="line"></span><br><span class="line">2022-03-12 15:06:42.596  INFO 14752 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...</span><br><span class="line">2022-03-12 15:06:42.599  INFO 14752 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.</span><br></pre></td></tr></table></figure><h1 id="代码自动生成器"><a href="#代码自动生成器" class="headerlink" title="代码自动生成器"></a>代码自动生成器</h1><p>mybatis-plus可以通过代码自动生成代码</p><p>需要导入如下依赖:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写运行程序代码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.*;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 演示例子，执行 main 方法控制台输入模块表名回车自动生成对应项目目录中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 需要构建一个 代码自动生成器 对象</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line"><span class="comment">// 配置策略</span></span><br><span class="line"><span class="comment">// 1、全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">projectPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);<span class="comment">//用户当前的目录,可以根据需求改</span></span><br><span class="line">        gc.setOutputDir(projectPath+<span class="string">&quot;/src/main/java&quot;</span>);<span class="comment">//配置输出路径</span></span><br><span class="line">        gc.setAuthor(<span class="string">&quot;Ladidol&quot;</span>);<span class="comment">//配置作者</span></span><br><span class="line">        gc.setOpen(<span class="literal">false</span>);</span><br><span class="line">        gc.setFileOverride(<span class="literal">false</span>); <span class="comment">// 是否覆盖</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>); <span class="comment">// 去Service的I前缀</span></span><br><span class="line">        gc.setIdType(IdType.AUTO);</span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        gc.setSwagger2(<span class="literal">true</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"><span class="comment">//2、设置数据源</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis_plus?useSSL=true&amp;useUnicode=true&amp;characterEcoding=utf-8&quot;</span>);<span class="comment">//配置数据库url</span></span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);<span class="comment">//用户</span></span><br><span class="line">        dsc.setPassword(<span class="string">&quot;nihao123&quot;</span>);<span class="comment">//密码</span></span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"><span class="comment">//3、包的配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        pc.setModuleName(<span class="string">&quot;feng&quot;</span>);<span class="comment">//需要将auto生成的代码放在的那一个包下面</span></span><br><span class="line">        pc.setParent(<span class="string">&quot;com&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"><span class="comment">//4、策略配置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        strategy.setInclude(<span class="string">&quot;user&quot;</span>);<span class="comment">//映射表名，这里也可以添加多个表</span></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setEntityLombokModel(<span class="literal">true</span>); <span class="comment">// 自动lombok；</span></span><br><span class="line">        strategy.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);<span class="comment">//配置逻辑删除</span></span><br><span class="line"><span class="comment">// 自动填充配置</span></span><br><span class="line">        <span class="type">TableFill</span> <span class="variable">createTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFill</span>(<span class="string">&quot;create_time&quot;</span>, FieldFill.INSERT);</span><br><span class="line">        <span class="type">TableFill</span> <span class="variable">updateTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFill</span>(<span class="string">&quot;update_time&quot;</span>, FieldFill.INSERT_UPDATE);</span><br><span class="line">        ArrayList&lt;TableFill&gt; tableFills = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        tableFills.add(createTime);</span><br><span class="line">        tableFills.add(updateTime);</span><br><span class="line">        strategy.setTableFillList(tableFills);</span><br><span class="line"><span class="comment">// 乐观锁</span></span><br><span class="line">        strategy.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">        strategy.setRestControllerStyle(<span class="literal">true</span>);</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="literal">true</span>); <span class="comment">//   localhost:8080/hello_id_2</span></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        mpg.execute(); <span class="comment">//执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行这个方法就会得到生成的代码了！</p><p>注意配置自己的数据库，另外，映射表名时注意对应自己表里面的字段。</p><h1 id="小知识点补充"><a href="#小知识点补充" class="headerlink" title="小知识点补充:"></a>小知识点补充:</h1><p><strong>对于实体类有@Accessor(chain&#x3D;true)这个注解，一个小小知识点的补充：</strong></p><p>一、来源<br>@Accessors注解是来自这个包下—&gt;lombok.experimental</p><p>二、功能介绍<br>@Accessors 注解用来配置lombok如何产生和显示get和set的方法,@Accessors(chain &#x3D; true)加上参数以后就可以开启链式编程.</p><p>传统set方法赋值(臃肿、占空间)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person.setName(<span class="string">&quot;wang&quot;</span>);</span><br><span class="line">person.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">person.setEmail(<span class="string">&quot;123@qq.com&quot;</span>);</span><br><span class="line">person.setDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">person.setAddr(<span class="string">&quot;山东&quot;</span>);</span><br></pre></td></tr></table></figure><p>加上@Accessors(chain &#x3D; true)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person.setName(<span class="string">&quot;wang&quot;</span>).setSex(<span class="string">&quot;男&quot;</span>).setEmail(<span class="string">&quot;123@qq.com&quot;</span>).setDate(<span class="keyword">new</span> <span class="title class_">Date</span>()).setAddr(<span class="string">&quot;山东&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------或者向下面这样,不太推荐-------------</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>().setName(<span class="string">&quot;wang&quot;</span>).setSex(<span class="string">&quot;男&quot;</span>).setEmail(<span class="string">&quot;123@qq.com&quot;</span>)</span><br><span class="line">.setDate(<span class="keyword">new</span> <span class="title class_">Date</span>()).setAddr(<span class="string">&quot;山东&quot;</span>);</span><br></pre></td></tr></table></figure><p>三、总结<br>这样一来解决了开发中字段一百个要set一百行的情况,一个注解,非常好用,大力推荐!!!</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 快速入门 </tag>
            
            <tag> Mybatis-plus </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用拦截器</title>
      <link href="/2022/03/16/%E5%B8%B8%E7%94%A8%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
      <url>/2022/03/16/%E5%B8%B8%E7%94%A8%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>拦截器的在springboot中的一点小认识:<a href="https://blog.csdn.net/qq_40771567/article/details/115097428">传送门</a></p><p>interceptor中编写我们的拦截器,</p><p>在config中注册我们的拦截器</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/20210322204340530.png" alt="img"></p><h2 id="Mybatis-plus自动填充配置"><a href="#Mybatis-plus自动填充配置" class="headerlink" title="Mybatis-plus自动填充配置:"></a>Mybatis-plus自动填充配置:</h2><p><strong>MyMetaObjectHandler类:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;lastVisitedTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;finishedTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;lastVisitedTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理:"></a>全局异常处理:</h2><p><strong>AppException类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.util.result.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AppException</span><span class="params">(ResultCode resultCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = resultCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = resultCode.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>全局异常处理类:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.util.result.CommonResult;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.util.result.ResultCode;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.util.result.ResultUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">error</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        log.error(e.getMessage());</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.fail(ResultCode.COMMON_FAIL.setMessage(e.getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(AppException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">error</span><span class="params">(AppException e)</span> &#123;</span><br><span class="line">        log.error(e.getMessage());</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.fail(ResultCode.CUSTOM_FAIL.setCode(e.getCode()).setMessage(e.getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="登录拦截"><a href="#登录拦截" class="headerlink" title="登录拦截:"></a>登录拦截:</h2><p><strong>jwt验证实例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.ExpiredJwtException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.entity.user.OpenIdAndSessionKey;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.entity.user.User;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.handler.exception.AppException;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.mapper.user.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.util.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.util.RedisService;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.util.result.ResultCode;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RedisService redisService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(header) &amp;&amp; header.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//获取token</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> header.substring(<span class="number">7</span>);</span><br><span class="line">            log.info(<span class="string">&quot;开始验证token==&gt; &quot;</span> + token);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//验证token</span></span><br><span class="line">                <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtils.verifyJwt(token);</span><br><span class="line">                <span class="comment">//根据token从redis中获取openId和sessionKey</span></span><br><span class="line">                <span class="type">OpenIdAndSessionKey</span> <span class="variable">openIdAndSessionKey</span> <span class="operator">=</span> (OpenIdAndSessionKey) redisService.get(token);</span><br><span class="line">                <span class="comment">//将用户的openId和sessionKey放入request作用域中</span></span><br><span class="line">                request.setAttribute(<span class="string">&quot;openId&quot;</span>, openIdAndSessionKey.getOpenId());</span><br><span class="line">                log.info(<span class="string">&quot;用户的openId==&gt; &quot;</span> + openIdAndSessionKey.getOpenId());</span><br><span class="line">                request.setAttribute(<span class="string">&quot;sessionKey&quot;</span>, openIdAndSessionKey.getSessionKey());</span><br><span class="line">                log.info(<span class="string">&quot;用户的sessionKey==&gt; &quot;</span> + openIdAndSessionKey.getSessionKey());</span><br><span class="line">                <span class="comment">//从redis中获取用户信息</span></span><br><span class="line">                log.info(<span class="string">&quot;开始从redis中获取用户信息&quot;</span>);</span><br><span class="line">                user = (User) redisService.get(openIdAndSessionKey.getOpenId());</span><br><span class="line">                <span class="comment">//如果redis中数据为空，从数据库中获取</span></span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isEmpty(user)) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;从redis中获取用户信息失败，开始从数据库中获取用户信息&quot;</span>);</span><br><span class="line">                    LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">                            .eq(User::getOpenId, openIdAndSessionKey.getOpenId());</span><br><span class="line">                    user = userMapper.selectOne(wrapper);</span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.isEmpty(user)) &#123;</span><br><span class="line">                        log.warn(<span class="string">&quot;用户首次登录，redis和数据库中均无该用户信息，request域中user值为null&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//将用户信息保存在request中,key=user</span></span><br><span class="line">                request.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AppException</span>(ResultCode.TOKEN_EXPIRED);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AppException</span>(ResultCode.TOKEN_ERROR);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AppException</span>(ResultCode.USER_NOT_LOGIN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
            <tag> handler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html学习</title>
      <link href="/2022/03/16/html%E5%AD%A6%E4%B9%A02/"/>
      <url>/2022/03/16/html%E5%AD%A6%E4%B9%A02/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-HTML5概述"><a href="#第一章-HTML5概述" class="headerlink" title="第一章 HTML5概述"></a>第一章 <a href="https://so.csdn.net/so/search?q=HTML5&spm=1001.2101.3001.7020">HTML5</a>概述</h1><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220327152229756.png" alt="image-20220327152229756"></p><h2 id="1-1、什么是HTML"><a href="#1-1、什么是HTML" class="headerlink" title="1.1、什么是HTML"></a>1.1、什么是HTML</h2><p>HTML（<strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage，超文本标记语言）是用来描述网页的一种语言，它不是一种编程语言，而是一种<strong>标记</strong>语言。</p><h2 id="1-2、什么是HTML5"><a href="#1-2、什么是HTML5" class="headerlink" title="1.2、什么是HTML5"></a>1.2、什么是HTML5</h2><p>HTML5是构建Web内容的一种语言描述方式，HTML5是互联网的下一代标准，是构建以及呈现互联网内容的一种语言方式，被认为是互联网的核心技术之一。HTML产生于1990年，1997年HTML4成为互联网标准，并广泛应用于互联网应用的开发。</p><p>HTML5是Web中核心语言HTML的规范，用户使用任何手段进行网页浏览时看到的内容原本都是HTML格式的，在浏览器中通过一些技术处理将其转换成为了可识别的信息，HTML5在从前HTML4.01的基础上进行了一定的改进。</p><h2 id="1-3、本文重要说明"><a href="#1-3、本文重要说明" class="headerlink" title="1.3、本文重要说明"></a>1.3、本文重要说明</h2><p>由于HTML5只是在HTML的基础上进行了新增或者废弃一些标签或者特性，本文默认均为HTML5语法，被废弃的部分就不再提起，HTML一般用于描述网页的结构，所以一些样式和脚本方面的标签和属性以及关于JavaScript部分的特性也不再提及，重点在于梳理常用标签体系。</p><h2 id="1-4、浏览器的版本"><a href="#1-4、浏览器的版本" class="headerlink" title="1.4、浏览器的版本"></a>1.4、浏览器的版本</h2><p>现今浏览器的许多新功能都是从HTML5标准中发展而来的。目前常用的浏览器有IE、火狐、谷歌、Safari和Opera等等，通过对这些主流web浏览器的发展策略调查，发现它们都支持HTML5上采取了措施。</p><p><strong>（1）IE浏览器</strong></p><p>2010年3月16日，微软MIX10技术大会上宣布其推出的IE9浏览器已经支持HTML5。同时还声称，随后将会更多的支持HTML新标准和CSS3新特性。</p><p><strong>（2）FireFox浏览器</strong></p><p>2010年7月，Mozilla基金会发布了即将推出的Firefox4浏览器的第一个早期测试版，该版本中Firefox浏览器中进行了大幅改进，包括新的HTML5语法分析器，以及支持更多的HTML5语法分析器，以及支持更多的HTML5形式的控制等。从官方文档来看，Firefox4对HTML5是完全级别的支持。目前，包括在线视频，在线音频在内的多种应用都已经在版本中实现。</p><p><strong>（3）Google浏览器</strong></p><p>2010年2月19日，谷歌Gears项目经理通过微博宣布，谷歌将放弃对Gears浏览器插件项目的支持，以重点开发HTML5项目。据费特表示，目前在谷歌看来，Gears应用用于HTML5的诸多创新非常相似，并且谷歌一直积极发展HTML5项目。因此只要谷歌不断以加强网络标准的应用功能为工作重点，那么为Gears增加新功能就无太大意义了。另外，Gears面临的需求也在日益下降，这也是谷歌做出吊证的重要原因。</p><p><strong>（4）Safari浏览器</strong></p><p>2010年6月7日，苹果在开发者发布会公布Safari5，这款浏览器支持10个以上的HTML5新技术，包括全屏幕播放、HTML5视频、HTML5地理位置、HTML5切片元素、HTML5的可拖动属性、HTML5的形式验证、HTML5的Ruby、HTML5的Ajaxl.ishi和WebSocket字幕。</p><p><strong>（5）Opera浏览器</strong></p><p>2010年5月5日，Opera软件公司首席技术官，号称“CSS之父”的Hakon Wium Lie认为，HTML5和CSS3，将会是全球互联网发展的未来趋势，包括目前Opera在内的诸多浏览器厂商，纷纷研发HTML5的相关产品，web未来属于HTML5。</p><p>综上所述，目前这些浏览器纷纷朝着HTML5的方向迈进，HTML5的时代即将来临</p><h1 id="第二章-HTML5语法"><a href="#第二章-HTML5语法" class="headerlink" title="第二章 HTML5语法"></a>第二章 HTML5语法</h1><h2 id="2-1、基本结构"><a href="#2-1、基本结构" class="headerlink" title="2.1、基本结构"></a>2.1、基本结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2、语法规范"><a href="#2-2、语法规范" class="headerlink" title="2.2、语法规范"></a>2.2、语法规范</h2><ul><li>HTML中不区分大小写，但是我们一般都使用小写</li><li>HTML中的注释不能嵌套</li><li>HTML标签必须结构完整，要么成对出现，要么自结束标签</li><li>HTML标签可以嵌套，但是不能交叉嵌套</li><li>HTML标签中的属性必须有值，且值必须加引号(双引号单引号都可以)</li></ul><h2 id="2-3、标签规范"><a href="#2-3、标签规范" class="headerlink" title="2.3、标签规范"></a>2.3、标签规范</h2><p>单标签:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;标签名 [属性名=属性值,...]&gt;</span><br></pre></td></tr></table></figure><p>成对标签:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;标签名 [属性名=属性值,...]&gt;&lt;/标签名&gt;</span><br></pre></td></tr></table></figure><h1 id="第三章-HTML5标签"><a href="#第三章-HTML5标签" class="headerlink" title="第三章 HTML5标签"></a>第三章 HTML5标签</h1><h2 id="标签的前言"><a href="#标签的前言" class="headerlink" title="标签的前言:"></a>标签的前言:</h2><h3 id="0-1-什么是元素显示模式"><a href="#0-1-什么是元素显示模式" class="headerlink" title="0.1 什么是元素显示模式"></a>0.1 什么是元素显示模式</h3><p><strong>作用：</strong>网页的标签非常多，在不同地方会用到不同类型的标签，了解他们的特点可以更好的布局我们的网页。</p><p><code>元素显示模式</code> 就是元素（标签）以什么方式进行显示，比如 <code>&lt;div&gt;</code> 自己占一行，比如一行可以放多个 <code>&lt;span&gt;</code>。</p><p>HTML 元素一般分为 <code>块元素</code> 和 <code>行内元素</code> 两种类型。</p><h3 id="0-2-块元素"><a href="#0-2-块元素" class="headerlink" title="0.2 块元素"></a>0.2 块元素</h3><p>常见的块元素有 <code>&lt;h1&gt; ~ &lt;h6&gt;</code>、<code>&lt;p&gt;</code>、<code>&lt;div&gt;</code>、<code>&lt;ul&gt;</code>、<code>&lt;ol&gt;</code>、<code>&lt;li&gt;</code>、<code>&lt;dl&gt;</code>、<code>&lt;dt&gt;</code>、<code>&lt;dd&gt;</code>、<code>&lt;table&gt;</code>、<code>&lt;tr&gt;</code>、<code>&lt;form&gt;</code> 等，其中 <code>&lt;div&gt;</code> 标签是最典型的块元素。</p><p><strong>块级元素的特点：</strong></p><ul><li>比较霸道，自己独占一行</li><li>高度，宽度、外边距以及内边距都可以控制</li><li>宽度默认是容器（父级宽度）的 100%</li><li>是一个容器及盒子，里面可以放行内或者块级元素</li></ul><p><strong>注意：</strong></p><ul><li>文字类的块级元素内不能放置块级元素，会发生语法错误</li><li><code>&lt;p&gt;</code> 标签主要用于存放文字，因此 <code>&lt;p&gt;</code> 里面不能放块级元素，特别是不能放 <code>&lt;div&gt;</code></li><li>同理， <code>&lt;h1&gt; ~ &lt;h6&gt;</code> 等都是文字类块级标签，里面也不能放其他块级元素</li></ul><h3 id="0-3-行内元素"><a href="#0-3-行内元素" class="headerlink" title="0.3 行内元素"></a>0.3 行内元素</h3><p>常见的行内元素有 <code>&lt;a&gt;</code>、<code>&lt;span&gt;</code>、<code>&lt;em&gt;</code>、<code>&lt;strong&gt;</code> 等，其中 <code>&lt;span&gt;</code> 标签是最典型的行内元素，有的地方也将行内元素称为内联元素。</p><p><strong>行内元素的特点：</strong></p><ul><li>相邻行内元素在一行上，一行可以显示多个</li><li>高、宽直接设置是无效的</li><li>默认宽度就是它本身内容的宽度</li><li>行内元素只能容纳文本或其他行内元素（a 除外）</li></ul><p><strong>注意：</strong></p><ul><li>链接里面不能再放链接</li><li>特殊情况链接 <code>&lt;a&gt;</code> 里面可以放块级元素，但是给 <code>&lt;a&gt;</code> 转换一下块级模式最安全</li></ul><h3 id="0-4-行内块元素"><a href="#0-4-行内块元素" class="headerlink" title="0.4 行内块元素"></a>0.4 行内块元素</h3><p>在行内元素中有几个特殊的标签：<code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;th&gt;</code>、<code>&lt;td&gt;</code>，它们同时具有 <code>块元素</code> 和 <code>行内元素</code> 的特点，有些资料称它们为 <code>行内块元素</code>。</p><p><strong>行内块元素的特点：</strong></p><ul><li>和相邻行内元素（行内块）在一行上，但是他们之间会有空白缝隙。一行可以显示多个（行内元素特点）</li><li>默认宽度就是它本身内容的宽度（行内元素特点）</li><li>高度，行高、外边距以及内边距都可以控制（块级元素特点）</li></ul><h3 id="0-5-元素显示模式总结"><a href="#0-5-元素显示模式总结" class="headerlink" title="0.5 元素显示模式总结"></a>0.5 元素显示模式总结</h3><table><thead><tr><th>元素模式</th><th>元素排列</th><th>设置样式</th><th>默认宽度</th><th>包含</th></tr></thead><tbody><tr><td>块级元素</td><td>一行只能放一个块级元素</td><td>可以设置宽度和高度</td><td>容器的 100%</td><td>容量级可以包含任何标签</td></tr><tr><td>行内元素</td><td>一行可以放多个行内元素</td><td>不可以直接设置宽度和高度</td><td>它本身内容的宽度</td><td>容纳文本或其他行内元素</td></tr><tr><td>行内块元素</td><td>一行放多个行内块元素</td><td>可以设置宽度和高度</td><td>它本身内容的宽度</td><td></td></tr></tbody></table><p>学习元素显示模式的主要目的是分清它们各自的特点，当我们网页布局的时候，在合适的地方用合适的标签元素。</p><p><strong>这里后续会在我的css里面再次讲到!</strong> </p><h2 id="3-1、标题标签"><a href="#3-1、标题标签" class="headerlink" title="3.1、标题标签"></a>3.1、标题标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>这是五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>这是六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2、段落标签"><a href="#3-2、段落标签" class="headerlink" title="3.2、段落标签"></a>3.2、段落标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-3、链接标签"><a href="#3-3、链接标签" class="headerlink" title="3.3、链接标签"></a>3.3、链接标签</h2><p><strong>使用示例：</strong></p><p><a href="https://www.ladidol.top">不要点开呀!点了你就后悔的！</a></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.c&quot;</span>&gt;</span>不要点开呀!点了你就后悔的！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>常见属性：</strong></p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>href</td><td>URL</td><td>规定链接的目标 URL。</td></tr><tr><td>target</td><td>_blank   _parent    _self _top framename</td><td>规定在何处打开目标 URL。 仅在 href 属性存在时使用。就好比是新建窗口打开</td></tr></tbody></table><h2 id="3-4、图像标签"><a href="#3-4、图像标签" class="headerlink" title="3.4、图像标签"></a>3.4、图像标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;百度LOGO&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-5、表格标签"><a href="#3-5、表格标签" class="headerlink" title="3.5、表格标签"></a>3.5、表格标签</h2><table border="1px" cellpadding="10px" cellspacing="0px">    <tr><!--一行的开始-->        <th>表头一</th>        <th>表头二</th>        <th>表头三</th>        <th>表头四</th>    </tr>    <tr><!--新一行的开始-->        <td>单元格一</td>        <td>单元格二</td>        <td>单元格三</td>        <td>单元格四</td>    </tr></table><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;10px&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--一行的开始--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头一<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头二<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头三<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头四<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--新一行的开始--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格一<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格二<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-6、列表标签"><a href="#3-6、列表标签" class="headerlink" title="3.6、列表标签"></a>3.6、列表标签</h2><p><strong>无序列表：</strong></p><ul>    <li>列表项</li>    <li>列表项</li>    <li>列表项</li>    <li>列表项</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>有序列表：</strong></p><ol>    <li>列表项</li>    <li>列表项</li>    <li>列表项</li>    <li>列表项</li></ol><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>自定义列表：</strong></p><dl>    <dt>+</dt><dd>列表项</dd>    <dt>+</dt><dd>列表项</dd>    <dt>+</dt><dd>列表项</dd></dl><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>+<span class="tag">&lt;/<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">dd</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>+<span class="tag">&lt;/<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">dd</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>+<span class="tag">&lt;/<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">dd</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-7、分组标签"><a href="#3-7、分组标签" class="headerlink" title="3.7、分组标签"></a>3.7、分组标签</h2><p>1.1 HTML 区块元素</p><p>大多数 HTML 元素被定义为块级元素或内联元素。<br>块级元素在浏览器显示时，通常会以新行来开始（和结束）。<br>实例: <code>&lt;h1&gt;</code>, <code>&lt;p&gt;</code>,<code>&lt;ul&gt;</code>, <code>&lt;table&gt;</code>,<code>&lt;div&gt;</code></p><p>1.2 HTML 内联元素</p><p>内联元素在显示时通常不会以新行开始。<br>实例: <code>&lt;b&gt;</code>, <code>&lt;td&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code>,<code>&lt;span&gt;</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>具体内容,可以储存其他html元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>具体内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例子:</p><p>这是一些文本。</p><div style="color:#0000FF">  <h3>这是一个在 div 元素中的标题。</h3>  <p>这是一个在 div 元素中的文本。</p></div><p>这是一些文本。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一些文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:#0000FF&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是一个在 div 元素中的标题。<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个在 div 元素中的文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一些文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>例子:</p><p>我的母亲有     <span style="color:blue;font-weight:bold">蓝色</span>     的眼睛，我的父亲有     <span style="color:darkolivegreen;font-weight:bold">碧绿色</span>     的眼睛。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的母亲有 </span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:blue;font-weight:bold&quot;</span>&gt;</span>蓝色<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">    的眼睛，我的父亲有 </span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:darkolivegreen;font-weight:bold&quot;</span>&gt;</span>碧绿色<span class="tag">&lt;/<span class="name">span</span>&gt;</span> </span><br><span class="line">    的眼睛。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-8、页面结构分析"><a href="#3-8、页面结构分析" class="headerlink" title="3.8、页面结构分析"></a>3.8、页面结构分析</h2><p><strong>常见标签：</strong>(主要是为了让结构清晰)</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">| 标签         | 描述                                               |</span><br><span class="line">| ------------ | -------------------------------------------------- |</span><br><span class="line">| <span class="tag">&lt;<span class="name">header</span>&gt;</span>     | 规定文档或节的页眉。                               |</span><br><span class="line">| <span class="tag">&lt;<span class="name">footer</span>&gt;</span>     | 定义文档或节的页脚。                               |</span><br><span class="line">| <span class="tag">&lt;<span class="name">main</span>&gt;</span>       | 规定文档的主内容。                                 |</span><br><span class="line">| <span class="tag">&lt;<span class="name">section</span>&gt;</span>    | 定义文档的节。                                     |</span><br><span class="line">| <span class="tag">&lt;<span class="name">article</span>&gt;</span>    | 定义文档的文章。                                   |</span><br><span class="line">| <span class="tag">&lt;<span class="name">aside</span>&gt;</span>      | 定义页面内容以外的内容。                           |</span><br><span class="line">| <span class="tag">&lt;<span class="name">nav</span>&gt;</span>        | 定义导航链接。                                     |</span><br><span class="line">| <span class="tag">&lt;<span class="name">mark</span>&gt;</span>       | 定义重要的或强调的文本。                           |</span><br><span class="line">| <span class="tag">&lt;<span class="name">figure</span>&gt;</span>     | 规定自包含内容，比如图示、图表、照片、代码清单等。 |</span><br><span class="line">| <span class="tag">&lt;<span class="name">figcaption</span>&gt;</span> | 定义 <span class="tag">&lt;<span class="name">figure</span>&gt;</span> 元素的标题。                         |</span><br><span class="line">| <span class="tag">&lt;<span class="name">details</span>&gt;</span>    | 定义用户能够查看或隐藏的额外细节。                 |</span><br><span class="line">| <span class="tag">&lt;<span class="name">summary</span>&gt;</span>    | 定义 <span class="tag">&lt;<span class="name">details</span>&gt;</span> 元素的可见标题。                    |</span><br><span class="line">| <span class="tag">&lt;<span class="name">time</span>&gt;</span>       | 定义日期/时间。                                    |</span><br></pre></td></tr></table></figure><p><strong>基本布局：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220327153642906.png" alt="image-20220327153642906"></p><p>eg.</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页头部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页主题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页脚步<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-9、表单标签"><a href="#3-9、表单标签" class="headerlink" title="3.9、表单标签"></a>3.9、表单标签</h2><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220327153659695.png" alt="image-20220327153659695"></p><p><strong>常见标签：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">| 标签       | 描述                                           |</span><br><span class="line">| ---------- | ---------------------------------------------- |</span><br><span class="line">| <span class="tag">&lt;<span class="name">form</span>&gt;</span>     | 定义供用户输入的表单。                         |</span><br><span class="line">| <span class="tag">&lt;<span class="name">input</span>&gt;</span>    | 定义输入域。                                   |</span><br><span class="line">| <span class="tag">&lt;<span class="name">label</span>&gt;</span>    | 定义了 <span class="tag">&lt;<span class="name">input</span>&gt;</span> 元素的标签，一般为输入标题。    |</span><br><span class="line">| <span class="tag">&lt;<span class="name">textarea</span>&gt;</span> | 定义文本域 (一个多行的输入控件)。              |</span><br><span class="line">| <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span> | 定义了一组相关的表单元素，并使用外框包含起来。 |</span><br><span class="line">| <span class="tag">&lt;<span class="name">legend</span>&gt;</span>   | 定义了 <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span> 元素的标题。                 |</span><br><span class="line">| <span class="tag">&lt;<span class="name">select</span>&gt;</span>   | 定义了下拉选项列表。                           |</span><br><span class="line">| <span class="tag">&lt;<span class="name">optgroup</span>&gt;</span> | 定义选项组。                                   |</span><br><span class="line">| <span class="tag">&lt;<span class="name">option</span>&gt;</span>   | 定义下拉列表中的选项。                         |</span><br><span class="line">| <span class="tag">&lt;<span class="name">button</span>&gt;</span>   | 定义一个点击按钮。                             |</span><br><span class="line">| <span class="tag">&lt;<span class="name">datalist</span>&gt;</span> | 指定一个预先定义的输入控件选项列表。           |</span><br><span class="line">| <span class="tag">&lt;<span class="name">keygen</span>&gt;</span>   | 定义了表单的密钥对生成器字段。                 |</span><br><span class="line">| <span class="tag">&lt;<span class="name">output</span>&gt;</span>   | 定义一个计算结果。                      </span><br></pre></td></tr></table></figure><p><strong>案例演示：</strong></p><p>1、form、input、label演示</p><!--表单formaction 表示提交奥德地方,可以是网站,可以是一个请求地址method post和get方法来请求--><form action="" method="get">       <!--浏览器通过get方法或者post方法来请求    get可能暴露一些,post先对安全一些-->    <p>        <label for="username">账户：</label>        <input type="text" name="username" id="username">    </p>    <p>        <label for="password">密码：</label>        <input type="password" name="password" id="password">    </p>    <p><input type="submit">        <input type="reset">    </p></form><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--表单form</span></span><br><span class="line"><span class="comment">action 表示提交奥德地方,可以是网站,可以是一个请求地址</span></span><br><span class="line"><span class="comment">method post和get方法来请求--&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span></span><br><span class="line">       <span class="comment">&lt;!--浏览器通过get方法或者post方法来请求</span></span><br><span class="line"><span class="comment">    get可能暴露一些,post先对安全一些--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>账户：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、textarea演示</p><form action="" method="post">    <textarea name="mycontext" cols="30" rows="10"></textarea>    <!--就是提交按钮-->    <input type="submit"></form><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;mycontext&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--就是提交按钮--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、fieldset、legend、select、optgroup、option演示</p><form action="" method="post">    <fieldset>        <legend>请选择你的爱好：</legend>            <select name="myhobby" id="myhobby">        <optgroup label="运动">            <option value="篮球">篮球</option>            <option value="足球">足球</option>        </optgroup>        <optgroup label="电子">            <option value="看电影">看电影</option>            <option value="看电视">看电视</option>        </optgroup>    </select></fieldset></form><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>请选择你的爱好：<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;myhobby&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myhobby&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;运动&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span>&gt;</span>足球<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;电子&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;看电影&quot;</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;看电视&quot;</span>&gt;</span>看电视<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、datalist演示</p><form action="" method="post">    <input list="browsers">    <datalist id="browsers">        <option value="Internet Explorer">        <option value="Firefox">        <option value="Chrome">        <option value="Opera">        <option value="Safari">    </datalist></form><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">list</span>=<span class="string">&quot;browsers&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;browsers&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Internet Explorer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Firefox&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Chrome&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Opera&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Safari&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、单选框演示</p><form action="" method="post">    <input type="radio" name="sex" id="male" value="male" checked>    <label for="male">Male</label>    <input type="radio" name="sex" id="female" value="female"><label for="female">female</label></form><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span>female<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6、复选框演示</p><form action="" method="post">    <input type="checkbox" name="vehicle" id="bike" value="bike">    <label for="bike">I have a bike</label>    <input type="checkbox" name="vehicle" id="car" value="car">    <label for="car">I have a car</label></form><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vehicle&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bike&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;bike&quot;</span>&gt;</span>I have a bike<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vehicle&quot;</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">value</span>=<span class="string">&quot;car&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;car&quot;</span>&gt;</span>I have a car<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-10、框架标签"><a href="#3-10、框架标签" class="headerlink" title="3.10、框架标签"></a>3.10、框架标签</h2><iframe src="https://www.bilibili.com" frameborder="0" width="500px" height="500px"></iframe><!--就是类似一个新建标签页,然后内置与当前页面--><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220327153810058.png" alt="image-20220327153810058"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://www.bilibili.com&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--就是类似一个新建标签页,然后内置与当前页面--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-11、音频标签"><a href="#3-11、音频标签" class="headerlink" title="3.11、音频标签"></a>3.11、音频标签</h2><audio controls>    <source src="horse.ogg" type="audio/ogg">    <source src="horse.mp3" type="audio/mpeg">    您的浏览器不支持 Audio 标签。</audio><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;horse.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;horse.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class="line">    您的浏览器不支持 Audio 标签。</span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-12、视频标签"><a href="#3-12、视频标签" class="headerlink" title="3.12、视频标签"></a>3.12、视频标签</h2><video width="320" height="240" controls>  <source src="movie.mp4" type="video/mp4">  <source src="movie.ogg" type="video/ogg">    您的浏览器不支持 Video 标签。</video><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;320&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span></span><br><span class="line">    您的浏览器不支持 Video 标签。</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-13、其它标签"><a href="#3-13、其它标签" class="headerlink" title="3.13、其它标签"></a>3.13、其它标签</h2><p>每一个加了个换行符来更好演示一下</p><p>效果如下:</p><p>水平线：<hr><br>换行：<br><br><b>粗体文本</b><br><code>计算机代码</code><br><em>强调文本</em><br><i>斜体文本</i><br><kbd>键盘输入</kbd></p><pre>预格式化文本</pre><p><small>更小的文本</small><br><strong>重要的文本</strong><br><abbr>缩写词或者首字母缩略词</abbr></p><address>联系信息</address><bdo>文字方向</bdo><blockquote>从另一个源引用的部分</blockquote><cite>工作的名称</cite><del>删除的文本</del><ins>插入的文本</ins><sub>下标文本</sub><sup>上标文本</sup><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">水平线：<span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">换行：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体文本<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">code</span>&gt;</span>计算机代码<span class="tag">&lt;/<span class="name">code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>强调文本<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体文本<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>键盘输入<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pre</span>&gt;</span>预格式化文本<span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>更小的文本<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>重要的文本<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">abbr</span>&gt;</span>缩写词或者首字母缩略词<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span>联系信息<span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bdo</span>&gt;</span>文字方向<span class="tag">&lt;/<span class="name">bdo</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>从另一个源引用的部分<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">cite</span>&gt;</span>工作的名称<span class="tag">&lt;/<span class="name">cite</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除的文本<span class="tag">&lt;/<span class="name">del</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>插入的文本<span class="tag">&lt;/<span class="name">ins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sub</span>&gt;</span>下标文本<span class="tag">&lt;/<span class="name">sub</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sup</span>&gt;</span>上标文本<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-14、头部标签"><a href="#3-14、头部标签" class="headerlink" title="3.14、头部标签"></a>3.14、头部标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">| 标签     | 描述                                 |</span><br><span class="line">| -------- | ------------------------------------ |</span><br><span class="line">| <span class="tag">&lt;<span class="name">head</span>&gt;</span>   | 定义了文档的信息。                   |</span><br><span class="line">| <span class="tag">&lt;<span class="name">title</span>&gt;</span>  | 定义了文档的标题。                   |</span><br><span class="line">| <span class="tag">&lt;<span class="name">base</span>&gt;</span>   | 定义了页面链接标签的默认链接地址。   |</span><br><span class="line">| <span class="tag">&lt;<span class="name">link</span>&gt;</span>   | 定义了一个文档和外部资源之间的关系。 |</span><br><span class="line">| <span class="tag">&lt;<span class="name">meta</span>&gt;</span>   | 定义了HTML文档中的元数据。           |</span><br><span class="line">| <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-handlebars"><span class="language-xml"> | 定义了客户端的脚本文件。             |</span></span></span><br><span class="line"><span class="language-xml"><span class="language-handlebars">| <span class="tag">&lt;<span class="name">style</span>&gt;</span>  | 定义了HTML文档的样式文件。           |</span></span></span><br></pre></td></tr></table></figure><h2 id="部分小结"><a href="#部分小结" class="headerlink" title="部分小结:"></a>部分小结:</h2><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220327153854097.png" alt="image-20220327153854097"></p><h1 id="第四章-HTML5属性"><a href="#第四章-HTML5属性" class="headerlink" title="第四章 HTML5属性"></a>第四章 HTML5属性</h1><h2 id="4-1、属性概述"><a href="#4-1、属性概述" class="headerlink" title="4.1、属性概述"></a>4.1、属性概述</h2><p>HTML标签可以设置属性，属性总是以名称&#x2F;值对的形式出现，比如：name&#x3D;“value”，它的主要作用是控制或修饰标签。</p><h2 id="4-2、通用属性"><a href="#4-2、通用属性" class="headerlink" title="4.2、通用属性"></a>4.2、通用属性</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>accesskey</td><td>设置访问元素的键盘快捷键。</td></tr><tr><td>class</td><td>规定元素的类名（classname）。</td></tr><tr><td>contenteditable</td><td>规定是否可编辑元素的内容。</td></tr><tr><td>contextmenu</td><td>指定一个元素的上下文菜单。当用户右击该元素，出现上下文菜单。</td></tr><tr><td>data-*</td><td>用于存储页面的自定义数据。</td></tr><tr><td>dir</td><td>设置元素中内容的文本方向。</td></tr><tr><td>draggable</td><td>指定某个元素是否可以拖动。</td></tr><tr><td>dropzone</td><td>指定是否将数据复制，移动，或链接，或删除。</td></tr><tr><td>hidden</td><td>hidden 属性规定对元素进行隐藏。</td></tr><tr><td>id</td><td>规定元素的唯一 id。</td></tr><tr><td>lang</td><td>设置元素中内容的语言代码。</td></tr><tr><td>spellcheck</td><td>检测元素是否拼写错误。</td></tr><tr><td>style</td><td>规定元素的行内样式（inline style）。</td></tr><tr><td>tabindex</td><td>设置元素的 Tab 键控制次序。</td></tr><tr><td>title</td><td>规定元素的额外信息（可在工具提示中显示）。</td></tr><tr><td>translate</td><td>指定是否一个元素的值在页面载入时是否需要翻译。</td></tr></tbody></table><h1 id="第五章-HTML5事件-好像用的少"><a href="#第五章-HTML5事件-好像用的少" class="headerlink" title="第五章 HTML5事件(好像用的少)"></a>第五章 HTML5事件(好像用的少)</h1><h2 id="5-1、事件概述"><a href="#5-1、事件概述" class="headerlink" title="5.1、事件概述"></a>5.1、事件概述</h2><p>HTML事件可以触发浏览器中的行为，比方说当用户点击某个 HTML 元素时启动一段 JavaScript。</p><h2 id="5-2、窗口事件"><a href="#5-2、窗口事件" class="headerlink" title="5.2、窗口事件"></a>5.2、窗口事件</h2><p>由窗口触发该事件 (同样适用于 <body> 标签)：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>onafterprint</td><td>script</td><td>在打印文档之后运行脚本。</td></tr><tr><td>onbeforeprint</td><td>script</td><td>在文档打印之前运行脚本。</td></tr><tr><td>onbeforeonload</td><td>script</td><td>在文档加载之前运行脚本。</td></tr><tr><td>onblur</td><td>script</td><td>当窗口失去焦点时运行脚本。</td></tr><tr><td>onerror</td><td>script</td><td>当错误发生时运行脚本。</td></tr><tr><td>onfocus</td><td>script</td><td>当窗口获得焦点时运行脚本。</td></tr><tr><td>onhashchange</td><td>script</td><td>当文档改变时运行脚本。</td></tr><tr><td>onload</td><td>script</td><td>当文档加载时运行脚本。</td></tr><tr><td>onmessage</td><td>script</td><td>当触发消息时运行脚本。</td></tr><tr><td>onoffline</td><td>script</td><td>当文档离线时运行脚本。</td></tr><tr><td>ononline</td><td>script</td><td>当文档上线时运行脚本。</td></tr><tr><td>onpagehide</td><td>script</td><td>当窗口隐藏时运行脚本。</td></tr><tr><td>onpageshow</td><td>script</td><td>当窗口可见时运行脚本。</td></tr><tr><td>onpopstate</td><td>script</td><td>当窗口历史记录改变时运行脚本。</td></tr><tr><td>onredo</td><td>script</td><td>当文档执行再执行操作（redo）时运行脚本。</td></tr><tr><td>onresize</td><td>script</td><td>当调整窗口大小时运行脚本。</td></tr><tr><td>onstorage</td><td>script</td><td>当 Web Storage 区域更新时（存储空间中的数据发生变化时）运行脚本。</td></tr><tr><td>onundo</td><td>script</td><td>当文档执行撤销时运行脚本。</td></tr><tr><td>onunload</td><td>script</td><td>当用户离开文档时运行脚本。</td></tr></tbody></table><h2 id="5-3、表单事件"><a href="#5-3、表单事件" class="headerlink" title="5.3、表单事件"></a>5.3、表单事件</h2><p>表单事件在HTML表单中触发 (适用于所有 HTML 元素，但该HTML元素需在form表单内)：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>onblur</td><td>script</td><td>当元素失去焦点时运行脚本。</td></tr><tr><td>onchange</td><td>script</td><td>当元素改变时运行脚本。</td></tr><tr><td>oncontextmenu</td><td>script</td><td>当触发上下文菜单时运行脚本。</td></tr><tr><td>onfocus</td><td>script</td><td>当元素获得焦点时运行脚本。</td></tr><tr><td>onformchange</td><td>script</td><td>当表单改变时运行脚本。</td></tr><tr><td>onforminput</td><td>script</td><td>当表单获得用户输入时运行脚本。</td></tr><tr><td>oninput</td><td>script</td><td>当元素获得用户输入时运行脚本。</td></tr><tr><td>oninvalid</td><td>script</td><td>当元素无效时运行脚本。</td></tr><tr><td>onselect</td><td>script</td><td>当选取元素时运行脚本。</td></tr><tr><td>onsubmit</td><td>script</td><td>当提交表单时运行脚本。</td></tr></tbody></table><h2 id="5-4、键盘事件"><a href="#5-4、键盘事件" class="headerlink" title="5.4、键盘事件"></a>5.4、键盘事件</h2><p>通过键盘触发事件，类似用户的行为：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>onkeydown</td><td>script</td><td>当按下按键时运行脚本。</td></tr><tr><td>onkeypress</td><td>script</td><td>当按下并松开按键时运行脚本。</td></tr><tr><td>onkeyup</td><td>script</td><td>当松开按键时运行脚本。</td></tr></tbody></table><h2 id="5-5、鼠标事件"><a href="#5-5、鼠标事件" class="headerlink" title="5.5、鼠标事件"></a>5.5、鼠标事件</h2><p>通过鼠标触发事件，类似用户的行为：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>onclick</td><td>script</td><td>当单击鼠标时运行脚本</td></tr><tr><td>ondblclick</td><td>script</td><td>当双击鼠标时运行脚本</td></tr><tr><td>ondrag</td><td>script</td><td>当拖动元素时运行脚本</td></tr><tr><td>ondragend</td><td>script</td><td>当拖动操作结束时运行脚本</td></tr><tr><td>ondragenter</td><td>script</td><td>当元素被拖动至有效的拖放目标时运行脚本</td></tr><tr><td>ondragleave</td><td>script</td><td>当元素离开有效拖放目标时运行脚本</td></tr><tr><td>ondragover</td><td>script</td><td>当元素被拖动至有效拖放目标上方时运行脚本</td></tr><tr><td>ondragstart</td><td>script</td><td>当拖动操作开始时运行脚本</td></tr><tr><td>ondrop</td><td>script</td><td>当被拖动元素正在被拖放时运行脚本</td></tr><tr><td>onmousedown</td><td>script</td><td>当按下鼠标按钮时运行脚本</td></tr><tr><td>onmousemove</td><td>script</td><td>当鼠标指针移动时运行脚本</td></tr><tr><td>onmouseout</td><td>script</td><td>当鼠标指针移出元素时运行脚本</td></tr><tr><td>onmouseover</td><td>script</td><td>当鼠标指针移至元素之上时运行脚本</td></tr><tr><td>onmouseup</td><td>script</td><td>当松开鼠标按钮时运行脚本</td></tr><tr><td>onmousewheel</td><td>script</td><td>当转动鼠标滚轮时运行脚本</td></tr><tr><td>onscroll</td><td>script</td><td>当滚动元素的滚动条时运行脚本</td></tr></tbody></table><h2 id="5-6、媒体事件"><a href="#5-6、媒体事件" class="headerlink" title="5.6、媒体事件"></a>5.6、媒体事件</h2><p>通过视频（videos），图像（images）或音频（audio） 触发该事件，多应用于HTML媒体元素比如：<embed>，<object>，<img>，<audio>和<video>。</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>onabort</td><td>script</td><td>当发生中止事件时运行脚本。</td></tr><tr><td>oncanplay</td><td>script</td><td>当媒介能够开始播放但可能因缓冲而需要停止时运行脚本。</td></tr><tr><td>oncanplaythrough</td><td>script</td><td>当媒介能够无需因缓冲而停止即可播放至结尾时运行脚本。</td></tr><tr><td>ondurationchange</td><td>script</td><td>当媒介长度改变时运行脚本。</td></tr><tr><td>onemptied</td><td>script</td><td>当媒介资源元素突然为空时（网络错误、加载错误等）运行脚本。</td></tr><tr><td>onended</td><td>script</td><td>当媒介已抵达结尾时运行脚本。</td></tr><tr><td>onerror</td><td>script</td><td>当在元素加载期间发生错误时运行脚本。</td></tr><tr><td>onloadeddata</td><td>script</td><td>当加载媒介数据时运行脚本。</td></tr><tr><td>onloadedmetadata</td><td>script</td><td>当媒介元素的持续时间以及其他媒介数据已加载时运行脚本。</td></tr><tr><td>onloadstart</td><td>script</td><td>当浏览器开始加载媒介数据时运行脚本。</td></tr><tr><td>onpause</td><td>script</td><td>当媒介数据暂停时运行脚本。</td></tr><tr><td>onplay</td><td>script</td><td>当媒介数据将要开始播放时运行脚本。</td></tr><tr><td>onplaying</td><td>script</td><td>当媒介数据已开始播放时运行脚本。</td></tr><tr><td>onprogress</td><td>script</td><td>当浏览器正在取媒介数据时运行脚本。</td></tr><tr><td>onratechange</td><td>script</td><td>当媒介数据的播放速率改变时运行脚本。</td></tr><tr><td>onreadystatechange</td><td>script</td><td>当就绪状态（ready-state）改变时运行脚本。</td></tr><tr><td>onseeked</td><td>script</td><td>当媒介元素的定位属性不再为真且定位已结束时运行脚本。</td></tr><tr><td>onseeking</td><td>script</td><td>当媒介元素的定位属性为真且定位已开始时运行脚本。</td></tr><tr><td>onstalled</td><td>script</td><td>当取回媒介数据过程中（延迟）存在错误时运行脚本。</td></tr><tr><td>onsuspend</td><td>script</td><td>当浏览器已在取媒介数据但在取回整个媒介文件之前停止时运行脚本。</td></tr><tr><td>ontimeupdate</td><td>script</td><td>当媒介改变其播放位置时运行脚本。</td></tr><tr><td>onvolumechange</td><td>script</td><td>当媒介改变音量亦或当音量被设置为静音时运行脚本。</td></tr><tr><td>onwaiting</td><td>script</td><td>当媒介已停止播放但打算继续播放时运行脚本。</td></tr></tbody></table><h2 id="5-7、其它事件"><a href="#5-7、其它事件" class="headerlink" title="5.7、其它事件"></a>5.7、其它事件</h2><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>onshow</td><td>script</td><td>当 <menu> 元素在上下文显示时触发。</td></tr><tr><td>ontoggle</td><td>script</td><td>当用户打开或关闭 <details> 元素时触发。</td></tr></tbody></table><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾:"></a>结尾:</h2><p>如果感觉不是很清楚可以看一下这个博主的<a href="https://github.com/JERRY-Z-J-R/I-love-you-3-thousand/blob/master/%E6%88%91%E7%88%B1%E4%BD%A0%EF%BC%8C%E4%B8%8D%E6%AD%A2%E4%B8%89%E5%8D%83%E9%81%8D/HTML%20CSS/1%E3%80%81%E3%80%90HTML%E5%9F%BA%E7%A1%80%E3%80%91/%E3%80%90HTML%E5%9F%BA%E7%A1%80%E3%80%91.md">戳这里</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> web前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
            <tag> html </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>common-utils</title>
      <link href="/2022/03/16/common-utils/"/>
      <url>/2022/03/16/common-utils/</url>
      
        <content type="html"><![CDATA[<p>做前后端项目中,为了方便对接,前后端会有相应的规范,这些类一般都是常用的</p><h2 id="CommonResult类"><a href="#CommonResult类" class="headerlink" title="CommonResult类:"></a>CommonResult类:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.utils.result;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonResult</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Boolean succeed;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : ResultCode.COMMON_FAIL.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : ResultCode.COMMON_FAIL.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed, ResultCode resultEnum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getCode() : resultEnum.getCode());</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getMessage() : resultEnum.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : ResultCode.COMMON_FAIL.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : ResultCode.COMMON_FAIL.getMessage();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed, ResultCode resultEnum, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getCode() : resultEnum.getCode());</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getMessage() : resultEnum.getMessage());</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getSucceed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> succeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSucceed</span><span class="params">(Boolean succeed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CommonResult&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;succeed=&quot;</span> + succeed +</span><br><span class="line">                <span class="string">&quot;, code=&quot;</span> + code +</span><br><span class="line">                <span class="string">&quot;, message=&#x27;&quot;</span> + message + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, data=&quot;</span> + data +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回类的封装工具类"><a href="#返回类的封装工具类" class="headerlink" title="返回类的封装工具类:"></a>返回类的封装工具类:</h2><p>ResultUtil类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.utils.result;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; CommonResult&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">true</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title function_">fail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title function_">fail</span><span class="params">(ResultCode resultEnum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">false</span>, resultEnum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="PageResult类"><a href="#PageResult类" class="headerlink" title="PageResult类:"></a>PageResult类:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.utils.result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageResult</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt;, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">3720998571176536865L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; records = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一共有多少条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> totalElements;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> currentPage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一页数据最多有多少条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> pageSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一共有多少页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> totalPages;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页数有多少条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> numberOfElements;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法，只用把原来的page类放进来即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 查出来的分页对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageResult</span><span class="params">(Page&lt;T&gt; page)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.records = page.getRecords();</span><br><span class="line">        <span class="built_in">this</span>.totalElements = page.getTotal();</span><br><span class="line">        <span class="built_in">this</span>.currentPage = page.getCurrent();</span><br><span class="line">        <span class="built_in">this</span>.pageSize = page.getSize();</span><br><span class="line">        <span class="built_in">this</span>.numberOfElements = page.getRecords().size();</span><br><span class="line">        <span class="built_in">this</span>.totalPages = page.getPages();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有前一页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPrevious</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getCurrentPage() &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有下一页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getCurrentPage() + <span class="number">1</span> &lt; getTotalPages();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取总的页数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> long</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getTotalPages</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.totalPages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前页的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List&lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;T&gt; <span class="title function_">getRecords</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableList(records);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> records 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRecords</span><span class="params">(List&lt;T&gt; records)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.records = records;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasRecords</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getNumberOfElements() &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单页大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getPageSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置单页大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageSize</span><span class="params">(Long pageSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pageSize = pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取全部元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getTotalElements</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> totalElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置全部元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotalElements</span><span class="params">(<span class="type">long</span> totalElements)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.totalElements = totalElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前页号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getCurrentPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置当前页号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCurrentPage</span><span class="params">(Long currentPage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.currentPage = currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单页元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumberOfElements</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> numberOfElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置单页元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNumberOfElements</span><span class="params">(<span class="type">int</span> numberOfElements)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.numberOfElements = numberOfElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getRecords().iterator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ResultCode类-枚举"><a href="#ResultCode类-枚举" class="headerlink" title="ResultCode类(枚举):"></a>ResultCode类(枚举):</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.utils.result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 规定:</span></span><br><span class="line"><span class="comment"> * #1表示成功</span></span><br><span class="line"><span class="comment"> * #1001～1999 区间表示参数错误</span></span><br><span class="line"><span class="comment"> * #2001～2999 区间表示用户错误</span></span><br><span class="line"><span class="comment"> * #3001～3999 区间表示接口异常</span></span><br><span class="line"><span class="comment"> * 统一错误枚举类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 成功 */</span></span><br><span class="line">    SUCCESS(<span class="number">200</span>, <span class="string">&quot;成功&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 默认失败 */</span></span><br><span class="line">    COMMON_FAIL(<span class="number">999</span>, <span class="string">&quot;失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    CUSTOM_FAIL(<span class="number">9999</span>, <span class="string">&quot;自定义错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 参数错误：1000～1999 */</span></span><br><span class="line">    PARAM_NOT_VALID(<span class="number">1001</span>, <span class="string">&quot;参数无效&quot;</span>),</span><br><span class="line">    PARAM_IS_BLANK(<span class="number">1002</span>, <span class="string">&quot;参数为空&quot;</span>),</span><br><span class="line">    PARAM_TYPE_ERROR(<span class="number">1003</span>, <span class="string">&quot;参数类型错误&quot;</span>),</span><br><span class="line">    PARAM_NOT_COMPLETE(<span class="number">1004</span>, <span class="string">&quot;参数缺失&quot;</span>),</span><br><span class="line">    FAIL_COPY_PROPERTIES(<span class="number">1076</span>, <span class="string">&quot;创建对象失败或拷贝对象属性失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 微信小程序登录 */</span></span><br><span class="line">    WEI_XIN_CODE_ERROR(<span class="number">3001</span>, <span class="string">&quot;携带code向小程序请求失败&quot;</span>),</span><br><span class="line">    WEI_XIN_SKEY_VALID(<span class="number">3002</span>, <span class="string">&quot;skey无效&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 用户错误 */</span></span><br><span class="line">    USER_NOT_LOGIN(<span class="number">2001</span>, <span class="string">&quot;用户未登录&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_EXPIRED(<span class="number">2002</span>, <span class="string">&quot;账号已过期&quot;</span>),</span><br><span class="line">    USER_CREDENTIALS_ERROR(<span class="number">2003</span>, <span class="string">&quot;密码错误&quot;</span>),</span><br><span class="line">    USER_CREDENTIALS_EXPIRED(<span class="number">2004</span>, <span class="string">&quot;密码过期&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_DISABLE(<span class="number">2005</span>, <span class="string">&quot;账号不可用&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_LOCKED(<span class="number">2006</span>, <span class="string">&quot;账号被锁定&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_NOT_EXIST(<span class="number">2007</span>, <span class="string">&quot;账号不存在&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_ALREADY_EXIST(<span class="number">2008</span>, <span class="string">&quot;账号已存在&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_USE_BY_OTHERS(<span class="number">2009</span>, <span class="string">&quot;账号下线&quot;</span>),</span><br><span class="line">    USER_IS_EMPTY(<span class="number">2010</span>, <span class="string">&quot;用户为空&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Token错误*/</span></span><br><span class="line">    TOKEN_EXPIRED(<span class="number">4001</span>, <span class="string">&quot;登陆信息过期&quot;</span>),</span><br><span class="line">    TOKEN_ERROR(<span class="number">4002</span>, <span class="string">&quot;信息被更改,请重新登陆&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 业务错误 */</span></span><br><span class="line">    NO_PERMISSION(<span class="number">5001</span>, <span class="string">&quot;没有权限&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*订单错误*/</span></span><br><span class="line">    EXISTED_ORDER(<span class="number">6001</span>, <span class="string">&quot;该商品的订单已存在，请支付或取消后再重新下单&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*商品错误*/</span></span><br><span class="line">    EXISTED_GOOD(<span class="number">7001</span>, <span class="string">&quot;已存在该商品&quot;</span>),</span><br><span class="line">    EXISTED_GOOD_INCART(<span class="number">7002</span>,<span class="string">&quot;购物车中已经存在该商品&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*招投标错误*/</span></span><br><span class="line">    EXISTED_SUBMISSION(<span class="number">8001</span>,<span class="string">&quot;已经存在该投标了&quot;</span>),</span><br><span class="line">    EXISTED_INVITATION(<span class="number">8002</span>,<span class="string">&quot;已经存在该招标了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ResultCode(Integer code, String message) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResultCode <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResultCode <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据code获取message</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 状态码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMessageByCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (ResultCode ele : values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ele.getCode().equals(code)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ele.getMessage();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常返回类"><a href="#异常返回类" class="headerlink" title="异常返回类"></a>异常返回类</h2><p>GlobalException类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">error</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        log.error(e.getMessage());</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.fail(ResultCode.COMMON_FAIL.setMessage(e.getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(AppException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">error</span><span class="params">(AppException e)</span> &#123;</span><br><span class="line">        log.error(e.getMessage());</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.fail(ResultCode.CUSTOM_FAIL.setCode(e.getCode()).setMessage(e.getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>APPExceptin类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AppException</span><span class="params">(ResultCode resultCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = resultCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = resultCode.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redis工具类"><a href="#Redis工具类" class="headerlink" title="Redis工具类:"></a>Redis工具类:</h2><p><strong>redis接口类:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RedisService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存存属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">get</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">del</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">del</span><span class="params">(List&lt;String&gt; keys)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">getExpire</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否有该属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hasKey</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按delta递增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按delta递减</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Hash结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">hGet</span><span class="params">(String key, String hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Hash结构中放入一个属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Hash结构中放入一个属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接获取整个Hash结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;Object, Object&gt; <span class="title function_">hGetAll</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接设置整个Hash结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接设置整个Hash结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Hash结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hDel</span><span class="params">(String key, Object... hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断Hash结构中是否有该属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hHasKey</span><span class="params">(String key, String hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash结构中属性递增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">hIncr</span><span class="params">(String key, String hashKey, Long delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash结构中属性递减</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">hDecr</span><span class="params">(String key, String hashKey, Long delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Set结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Set&lt;Object&gt; <span class="title function_">sMembers</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Set结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sAdd</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Set结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sAdd</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否为Set中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">sIsMember</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Set结构的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sSize</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Set结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sRemove</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取List结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Object&gt; <span class="title function_">lRange</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取List结构的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lSize</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引获取List中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">lIndex</span><span class="params">(String key, <span class="type">long</span> index)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPush</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPush</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中批量添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPushAll</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中批量添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPushAll</span><span class="params">(String key, Long time, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从List结构中移除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>redis接口实现类:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">RedisService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">del</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">del</span><span class="params">(List&lt;String&gt; keys)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(keys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getExpire</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hasKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hGet</span><span class="params">(String key, String hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hashKey, value);</span><br><span class="line">        <span class="keyword">return</span> expire(key, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hashKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hGetAll</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">        <span class="keyword">return</span> expire(key, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hDel</span><span class="params">(String key, Object... hashKey)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hHasKey</span><span class="params">(String key, String hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">hIncr</span><span class="params">(String key, String hashKey, Long delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, hashKey, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">hDecr</span><span class="params">(String key, String hashKey, Long delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, hashKey, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">sMembers</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sAdd</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sAdd</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">sIsMember</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sRemove</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">lRange</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">lIndex</span><span class="params">(String key, <span class="type">long</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPush</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPush</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">index</span> <span class="operator">=</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPushAll</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPushAll</span><span class="params">(String key, Long time, Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JWT工具类"><a href="#JWT工具类" class="headerlink" title="JWT工具类:"></a>JWT工具类:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.io.BaseEncoding;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtBuilder;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> tokenExpiredTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String jwtId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String jwtSecret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建JWT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(Map&lt;String, Object&gt; claims, Long time)</span> &#123;</span><br><span class="line">        <span class="comment">//指定签名的时候使用的签名算法，也就是header那部分，jjwt已经将这部分内容封装好了。</span></span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="comment">//生成JWT的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">nowMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//下面就是在为payload添加各种标准声明和私有声明了</span></span><br><span class="line">        <span class="comment">//这里其实就是new一个JwtBuilder，设置jwt的body</span></span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                <span class="comment">//如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的</span></span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                <span class="comment">//设置jti(JWT ID)：是JWT的唯一标识，根据业务需要，这个可以设置为一个不重复的值，主要用来作为一次性token,从而回避重放攻击。</span></span><br><span class="line">                .setId(jwtId)</span><br><span class="line">                <span class="comment">//iat: jwt的签发时间</span></span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                <span class="comment">//设置签名使用的签名算法和签名使用的秘钥</span></span><br><span class="line">                .signWith(signatureAlgorithm, secretKey);</span><br><span class="line">        <span class="keyword">if</span> (time &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> nowMillis + time;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line">            <span class="comment">//设置过期时间</span></span><br><span class="line">            builder.setExpiration(exp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证jwt</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">verifyJwt</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="comment">//签名秘钥，和生成的签名的秘钥一模一样</span></span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        Claims claims;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims = Jwts.parser()  <span class="comment">//得到DefaultJwtParser</span></span><br><span class="line">                    .setSigningKey(key)         <span class="comment">//设置签名的秘钥</span></span><br><span class="line">                    .parseClaimsJws(token).getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            claims = <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="comment">//设置需要解析的jwt</span></span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由字符串生成加密key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SecretKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title function_">generalKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">stringKey</span> <span class="operator">=</span> jwtSecret;</span><br><span class="line">        <span class="type">byte</span>[] encodedKey = BaseEncoding.base64().decode(stringKey);</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(encodedKey, <span class="number">0</span>, encodedKey.length, <span class="string">&quot;HmacSHA256&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据userId和openid生成token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String openId)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;openId&quot;</span>, openId);</span><br><span class="line">        <span class="keyword">return</span> createJWT(map, tokenExpiredTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.token-expired-time&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTokenExpiredTime</span><span class="params">(<span class="type">long</span> tokenExpiredTime)</span> &#123;</span><br><span class="line">        JwtUtils.tokenExpiredTime = tokenExpiredTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJwtId</span><span class="params">(String jwtId)</span> &#123;</span><br><span class="line">        JwtUtils.jwtId = jwtId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.secret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJwtSecret</span><span class="params">(String jwtSecret)</span> &#123;</span><br><span class="line">        JwtUtils.jwtSecret = jwtSecret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getTokenExpiredTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tokenExpiredTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJwtId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jwtId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJwtSecret</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jwtSecret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>待补充…</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux入门</title>
      <link href="/2022/03/16/linux%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/16/linux%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="linux介绍"><a href="#linux介绍" class="headerlink" title="linux介绍:"></a>linux介绍:</h1><p><a href="https://www.runoob.com/linux/linux-command-manual.html">详细较全面的linux命令</a>)</p><p>本文主要写linux的操作过程知识点。</p><h2 id="开机"><a href="#开机" class="headerlink" title="开机"></a>开机</h2><p>开机会启动许多程序。它们在Windows叫做”服务”（service），在Linux就叫做”守护进程”（daemon）。</p><hr><blockquote><p>守护进程</p></blockquote><p>守护进程是提供基本操作系统下可能无法使用的多种功能的服务。其主要任务是监听服务请求，同时对这些请求采取行动。服务完成后，它将断开连接并等待进一步的请求。守护进程是脱离于终端并且在后台运行的进程，脱离终端是为了避免在执行的过程中的信息在终端上显示，并且进程也不会被任何终端所产生的终端信息所打断。</p><p>守护进程一般的生命周期是系统启动到系统停止运行。</p><p>我们用daemon来做什么事情呢？我们可以用守护进程监控一个进程的运行，如果发现其被kill了，那就重新启动进程。简单来说，就是用来守护其它进程。</p><p>做法也很简单，首先生成这个守护进程，在这个进程中启动个定时器或者while循环：让其不断检测另外一个进程是否还在运行，如果没有在运行那就启动之。当然，也可以不用检测，直接不断的循环去启动即可！ 如果已经正常启动，再次去启动就会失败，这无所谓。如果已经kill,则立即将之启动。</p><hr><p>开机成功后，它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份，密码是不显示的，输完回车即可！</p><p>一般来说，用户的登录方式有三种：</p><ul><li>命令行登录</li><li>ssh登录</li><li>图形界面登录</li></ul><p>最高权限账户为 root，可以操作一切！</p><h2 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h2><p>在linux领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。</p><p>关机指令为：shutdown ；</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sync # 将数据由内存同步到硬盘中。</span><br><span class="line"></span><br><span class="line">shutdown # 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</span><br><span class="line"></span><br><span class="line">shutdown –h 10 # 这个命令告诉大家，计算机将在10分钟后关机</span><br><span class="line"></span><br><span class="line">shutdown –h now # 立马关机</span><br><span class="line"></span><br><span class="line">shutdown –h 20:25 # 系统会在今天20:25关机</span><br><span class="line"></span><br><span class="line">shutdown –h +10 # 十分钟后关机</span><br><span class="line"></span><br><span class="line">shutdown –r now # 系统立马重启</span><br><span class="line"></span><br><span class="line">shutdown –r +10 # 系统十分钟后重启</span><br><span class="line"></span><br><span class="line">reboot # 就是重启，等同于 shutdown –r now</span><br><span class="line"></span><br><span class="line">halt # 关闭系统，等同于shutdown –h now 和 poweroff</span><br></pre></td></tr></table></figure><p>最后总结一下，不管是重启系统还是关闭系统，首先要运行 sync 命令，把内存中的数据写到磁盘中。</p><h2 id="系统目录介绍"><a href="#系统目录介绍" class="headerlink" title="系统目录介绍"></a>系统目录介绍</h2><p>可以通过ls查看系统下面的目录</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220309173857323.png" alt="image-20220309173857323"></p><p>树状目录结构:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220309174037598.png" alt="image-20220309174037598"></p><ul><li><strong>&#x2F;bin：</strong>bin是Binary的缩写, 这个目录存放着最经常使用的命令。</li><li>&#x2F;boot： 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。(不要动)</li><li>&#x2F;dev ： dev是Device(设备)的缩写, 存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</li><li><strong>&#x2F;etc：</strong> 这个目录用来存放所有的系统管理所需要的配置文件和子目录。</li><li>&#x2F;<strong>home</strong>：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</li><li>&#x2F;lib：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。(不要动)</li><li>&#x2F;lost+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。(存放突然关机的一些文件)</li><li>&#x2F;media：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</li><li>&#x2F;mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在&#x2F;mnt&#x2F;上，然后进入该目录就可以查看光驱里的内容了。</li><li>&#x2F;opt：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</li><li>&#x2F;proc：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</li><li>&#x2F;<strong>root</strong>：该目录为系统管理员，也称作超级权限者的用户主目录。</li><li>&#x2F;sbin：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</li><li>&#x2F;srv：该目录存放一些服务启动之后需要提取的数据。</li><li>&#x2F;sys：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。</li><li>&#x2F;tmp：这个目录是用来存放一些临时文件的。(用完就可以丢的文件,安装包啥的)</li><li>&#x2F;<strong>usr</strong>：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</li><li>&#x2F;usr&#x2F;bin： 系统用户使用的应用程序。</li><li>&#x2F;usr&#x2F;sbin： 超级用户使用的比较高级的管理程序和系统守护程序。</li><li>&#x2F;usr&#x2F;src： 内核源代码默认的放置目录。</li><li>&#x2F;var：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</li><li>&#x2F;run：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。</li></ul><h1 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h1><blockquote><p>绝对路径和相对路径</p></blockquote><p>我们知道Linux的目录结构为树状结构，最顶级的目录为根目录 <code>/</code>。</p><p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p><p>在开始本教程前我们需要先知道什么是绝对路径与相对路径。</p><blockquote><p>绝对路径：</p></blockquote><p>路径的写法，由根目录 <code>/</code> 写起，例如：<code>/usr/share/doc</code> 这个目录。</p><blockquote><p>相对路径：</p></blockquote><p>路径的写法，不是由 <code>/</code> 写起，例如由 <code>/usr/share/doc</code> 要到 <code>/usr/share/man</code> 底下时，可以写成：<code>cd ../man</code> 这就是相对路径的写法啦！</p><blockquote><p>处理目录的常用命令</p></blockquote><ul><li>ls: 列出目录</li><li>ll:  一列表的形式列出目录</li><li>cd：切换目录</li><li>pwd：显示目前的目录</li><li>mkdir：创建一个新的目录</li><li>rmdir：删除一个空的目录</li><li>cp: 复制文件或目录</li><li>rm: 移除文件或目录</li><li>mv: 移动文件与目录，或修改文件与目录的名称</li></ul><p>你可以使用 man [命令] 来查看各个命令的使用文档，如 ：man cp。</p><h2 id="ls-（列出目录）"><a href="#ls-（列出目录）" class="headerlink" title="ls （列出目录）"></a>ls （列出目录）</h2><p>在Linux系统当中， ls 命令可能是最常被运行的。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# ls [-aAdfFhilnrRSt] 目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</p><p>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</p><p>将目录下的所有文件列出来(含属性与隐藏档)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# ls -al ~</span><br><span class="line">ll -al 列出全部的文件(包括隐藏文件)</span><br></pre></td></tr></table></figure><p>补充：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -A 列出除.及..的其它文件</span><br><span class="line">ls -r 反序排列</span><br><span class="line">ls -t 以文件修改时间排序</span><br><span class="line">ls -S 以文件大小排序</span><br><span class="line">ls -h 以易读大小显示</span><br><span class="line">ls -l  == ll列出全部的文件(不包括隐藏文件)</span><br></pre></td></tr></table></figure><h2 id="cd-（切换目录）"><a href="#cd-（切换目录）" class="headerlink" title="cd （切换目录）"></a>cd （切换目录）</h2><p>cd是Change Directory的缩写，这是用来变换工作目录的命令。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd [相对路径或绝对路径]</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 切换到用户目录下</span><br><span class="line">[root@kuangshen /]# cd home  </span><br><span class="line"></span><br><span class="line"># 使用 mkdir 命令创建 kuangstudy 目录</span><br><span class="line">[root@kuangshen home]# mkdir kuangstudy</span><br><span class="line"></span><br><span class="line"># 进入 kuangstudy 目录</span><br><span class="line">[root@kuangshen home]# cd kuangstudy</span><br><span class="line"></span><br><span class="line"># 回到上一级</span><br><span class="line">[root@kuangshen kuangstudy]# cd ..</span><br><span class="line"></span><br><span class="line"># 回到根目录</span><br><span class="line">[root@kuangshen kuangstudy]# cd /</span><br><span class="line"></span><br><span class="line"># 表示回到自己的家目录，亦即是 /root 这个目录</span><br><span class="line">[root@kuangshen kuangstudy]# cd ~</span><br></pre></td></tr></table></figure><h2 id="pwd-显示目前所在的目录"><a href="#pwd-显示目前所在的目录" class="headerlink" title="pwd ( 显示目前所在的目录 )"></a>pwd ( 显示目前所在的目录 )</h2><p>pwd 是 Print Working Directory 的缩写，也就是显示目前所在目录的命令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen kuangstudy]#pwd [-P]</span><br></pre></td></tr></table></figure><p>选项与参数：-P ：显示出确实的路径，而非使用连接(link) 路径。</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 单纯显示出目前的工作目录</span><br><span class="line">[root@kuangshen ~]# pwd</span><br><span class="line">/root</span><br><span class="line"></span><br><span class="line"># 如果是链接，要显示真实地址，可以使用 -P参数</span><br><span class="line">[root@kuangshen /]# cd bin</span><br><span class="line">[root@kuangshen bin]# pwd -P</span><br><span class="line">/usr/bin</span><br></pre></td></tr></table></figure><h2 id="mkdir-（创建新目录）"><a href="#mkdir-（创建新目录）" class="headerlink" title="mkdir （创建新目录）"></a>mkdir （创建新目录）</h2><p>如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir [-mp] 目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</p><p>-p ：帮助你直接将所需要的目录(包含上一级目录)<strong>递归</strong>创建起来！</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入我们用户目录下</span><br><span class="line">[root@kuangshen /]# cd /home</span><br><span class="line"></span><br><span class="line"># 创建一个 test 文件夹</span><br><span class="line">[root@kuangshen home]# mkdir test</span><br><span class="line"></span><br><span class="line"># 创建多层级目录</span><br><span class="line">[root@kuangshen home]# mkdir test1/test2/test3/test4</span><br><span class="line">mkdir: cannot create directory ‘test1/test2/test3/test4’:</span><br><span class="line">No such file or directory  # &lt;== 没办法直接创建此目录啊！</span><br><span class="line"></span><br><span class="line"># 加了这个 -p 的选项，可以自行帮你创建多层目录！</span><br><span class="line">[root@kuangshen home]# mkdir -p test1/test2/test3/test4</span><br><span class="line"></span><br><span class="line"># 创建权限为 rwx--x--x 的目录。</span><br><span class="line">[root@kuangshen home]# mkdir -m 711 test2</span><br><span class="line">[root@kuangshen home]# ls -l</span><br><span class="line">drwxr-xr-x 2 root root  4096 Mar 12 21:55 test</span><br><span class="line">drwxr-xr-x 3 root root  4096 Mar 12 21:56 test1</span><br><span class="line">drwx--x--x 2 root root  4096 Mar 12 21:58 test2</span><br></pre></td></tr></table></figure><h2 id="rmdir-删除空的目录"><a href="#rmdir-删除空的目录" class="headerlink" title="rmdir ( 删除空的目录 )"></a>rmdir ( 删除空的目录 )</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rmdir [-p] 目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：-p ：连同上一级『空的』目录也一起删除</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 看看有多少目录存在？[root@kuangshen home]# ls -ldrwxr-xr-x 2 root root  4096 Mar 12 21:55 testdrwxr-xr-x 3 root root  4096 Mar 12 21:56 test1drwx--x--x 2 root root  4096 Mar 12 21:58 test2# 可直接删除掉，没问题[root@kuangshen home]# rmdir test# 因为尚有内容，所以无法删除！[root@kuangshen home]# rmdir test1rmdir: failed to remove ‘test1’: Directory not empty# 利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 依次删除。[root@kuangshen home]# rmdir -p test1/test2/test3/test4</span><br></pre></td></tr></table></figure><p>注意：这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录，后面我们会将学习！</p><h2 id="cp-复制文件或目录"><a href="#cp-复制文件或目录" class="headerlink" title="cp ( 复制文件或目录 )"></a>cp ( 复制文件或目录 )</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# cp [-adfilprsu] 来源档(source) 目标档(destination)[root@www ~]# cp [options] source1 source2 source3 .... directory</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</p><p>-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</p><p>-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</p><p>-r：递归持续复制，用於目录的复制行为；(常用)</p><p>-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</p><p>-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</p><p>-l：进行硬式连结(hard link)的连结档创建，而非复制文件本身。</p><p>-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</p><p>-u：若 destination 比 source 旧才升级 destination ！</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 找一个有文件的目录，我这里找到 root目录[root@kuangshen home]# cd /root[root@kuangshen ~]# lsinstall.sh[root@kuangshen ~]# cd /home# 复制 root目录下的install.sh 到 home目录下[root@kuangshen home]# cp /root/install.sh /home[root@kuangshen home]# lsinstall.sh# 再次复制，加上-i参数，增加覆盖询问？[root@kuangshen home]# cp -i /root/install.sh /homecp: overwrite ‘/home/install.sh’? y # n不覆盖，y为覆盖</span><br></pre></td></tr></table></figure><h2 id="rm-移除文件或目录"><a href="#rm-移除文件或目录" class="headerlink" title="rm ( 移除文件或目录 )"></a>rm ( 移除文件或目录 )</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm [-fir] 文件或目录</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</p><p>-i ：互动模式，在删除前会询问使用者是否动作</p><p>-r ：递归删除啊！最常用在目录的删除了！<strong>这是非常危险的选项！！！</strong></p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将刚刚在 cp 的实例中创建的 install.sh删除掉！[root@kuangshen home]# rm -i install.shrm: remove regular file ‘install.sh’? y# 如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！# 尽量不要在服务器上使用 rm -rf /</span><br></pre></td></tr></table></figure><h2 id="mv-移动文件与目录，或修改名称"><a href="#mv-移动文件与目录，或修改名称" class="headerlink" title="mv  ( 移动文件与目录，或修改名称 )"></a>mv  ( 移动文件与目录，或修改名称 )</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# mv [-fiu] source destination[root@www ~]# mv [options] source1 source2 source3 .... directory</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</p><p>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</p><p>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 复制一个文件到当前目录[root@kuangshen home]# cp /root/install.sh /home# 创建一个文件夹 test[root@kuangshen home]# mkdir test# 将复制过来的文件移动到我们创建的目录，并查看[root@kuangshen home]# mv install.sh test[root@kuangshen home]# lstest[root@kuangshen home]# cd test[root@kuangshen test]# lsinstall.sh# 将文件夹重命名，然后再次查看！[root@kuangshen test]# cd ..[root@kuangshen home]# mv test mvtest[root@kuangshen home]# lsmvtest</span><br></pre></td></tr></table></figure><h1 id="Linux-文件基本属性"><a href="#Linux-文件基本属性" class="headerlink" title="Linux 文件基本属性"></a>Linux 文件基本属性</h1><p>Linux 系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。</p><p>为了保护系统的安全性，Linux 系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p><p>在 Linux 中我们通常使用以下两个命令来修改文件或目录的所属用户与权限：</p><ul><li>chown (change owner) ： 修改所属用户与组。</li><li>chmod (change mode) ： 修改用户的权限。</li></ul><p>下图中通过 chown 来授权用户，通过 chmod 为用户设置可以开门的权限。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1_151733904241.png" alt="img"></p><p>在 Linux 中我们可以使用 <strong>ll</strong> 或者 <strong>ls –l</strong> 命令来显示一个文件的属性以及文件所属的用户和组，如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www /]# ls -ltotal 64dr-xr-xr-x   2 root root 4096 Dec 14  2012 bindr-xr-xr-x   4 root root 4096 Apr 19  2012 boot……</span><br></pre></td></tr></table></figure><p>实例中，<strong>bin</strong> 文件的第一个属性用 <strong>d</strong> 表示。<strong>d</strong> 在 Linux 中代表该文件是一个目录文件。</p><p>在 Linux 中第一个字符代表这个文件是目录、文件或链接文件等等。</p><ul><li>当为 <strong>d</strong> 则是目录</li><li>当为 <strong>-</strong> 则是文件；</li><li>若是 <strong>l</strong> 则表示为链接文档(link file)；</li><li>若是 <strong>b</strong> 则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li><li>若是 <strong>c</strong> 则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li></ul><p>接下来的字符中，以三个为一组，且均为 <strong>rwx</strong> 的三个参数的组合。其中， <strong>r</strong> 代表可读(read)、 <strong>w</strong> 代表可写(write)、 <strong>x</strong> 代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号 <strong>-</strong> 而已。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/file-llls22.jpg" alt="img"></p><p>每个文件的属性由左边第一部分的 10 个字符来确定（如下图）。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/363003_1227493859FdXT-16468222156635.png" alt="363003_1227493859FdXT"></p><p>从左至右用 <strong>0-9</strong> 这些数字来表示。</p><p>第 <strong>0</strong> 位确定文件类型，第 <strong>1-3</strong> 位确定属主（该文件的所有者）拥有该文件的权限。</p><p>第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p><p>其中，</p><p>第 <strong>1、4、7</strong> 位表示<strong>读权限</strong>，如果用 <strong>r</strong> 字符表示，则有读权限，如果用 <strong>-</strong> 字符表示，则没有读权限；</p><p>第 <strong>2、5、8</strong> 位表示<strong>写权限</strong>，如果用 <strong>w</strong> 字符表示，则有写权限，如果用 <strong>-</strong> 字符表示没有写权限；</p><p>第 <strong>3、6、9</strong> 位表示<strong>可执行权限</strong>，如果用 <strong>x</strong> 字符表示，则有执行权限，如果用 <strong>-</strong> 字符表示，则没有执行权限。</p><p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p><p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p><p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p><p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p><p>在以上实例中，boot 文件是一个目录文件，属主和属组都为 root。</p><h1 id="修改文件属性"><a href="#修改文件属性" class="headerlink" title="修改文件属性"></a>修改文件属性</h1><h2 id="chgrp：更改文件属组"><a href="#chgrp：更改文件属组" class="headerlink" title="chgrp：更改文件属组"></a>chgrp：更改文件属组</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chgrp [-R] 属组名 文件名</span><br></pre></td></tr></table></figure><p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</p><h2 id="chown：更改文件属主，也可以同时更改文件属组"><a href="#chown：更改文件属主，也可以同时更改文件属组" class="headerlink" title="chown：更改文件属主，也可以同时更改文件属组"></a>chown：更改文件属主，也可以同时更改文件属组</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown [–R] 属主名 文件名chown [-R] 属主名：属组名 文件名</span><br></pre></td></tr></table></figure><h2 id="chmod：更改文件9个属性"><a href="#chmod：更改文件9个属性" class="headerlink" title="chmod：更改文件9个属性"></a>chmod：更改文件9个属性</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod [-R] xyz 文件或目录</span><br></pre></td></tr></table></figure><p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p><p>Linux文件的基本权限就有九个，分别是<strong>owner&#x2F;group&#x2F;others</strong>三种身份各有自己的<strong>read&#x2F;write&#x2F;execute</strong>权限。</p><p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p><p><strong>r:4 w:2 x:1</strong><br>每种身份(owner&#x2F;group&#x2F;others)各自的三个权限(r&#x2F;w&#x2F;x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：</p><p>owner &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</p><p>group &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</p><p>others&#x3D; — &#x3D; 0+0+0 &#x3D; 0</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 770 filename</span><br></pre></td></tr></table></figure><h1 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Linux系统中使用以下命令来查看文件的内容：</p><ul><li>cat 由第一行开始显示文件内容</li><li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li><li>nl 显示的时候，顺道输出行号！</li><li>more 一页一页的显示文件内容</li><li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li><li>head 只看头几行</li><li>tail 只看尾巴几行</li></ul><p>你可以使用 man [命令]来查看各个命令的使用文档，如 ：man cp。</p><h2 id="cat-由第一行开始显示文件内容"><a href="#cat-由第一行开始显示文件内容" class="headerlink" title="cat 由第一行开始显示文件内容"></a>cat 由第一行开始显示文件内容</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat [-AbEnTv]</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</p><p>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</p><p>-E ：将结尾的断行字节 $ 显示出来；</p><p>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</p><p>-T ：将 [tab] 按键以 ^I 显示出来；</p><p>-v ：列出一些看不出来的特殊字符</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看网络配置: 文件地址 /etc/sysconfig/network-scripts/[root@kuangshen ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0DEVICE=eth0BOOTPROTO=dhcpONBOOT=yes</span><br></pre></td></tr></table></figure><h2 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h2><p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen ~]# tac /etc/sysconfig/network-scripts/ifcfg-eth0ONBOOT=yesBOOTPROTO=dhcpDEVICE=eth0</span><br></pre></td></tr></table></figure><h2 id="nl-显示行号"><a href="#nl-显示行号" class="headerlink" title="nl 显示行号"></a>nl 显示行号</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nl [-bnw] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)；</p><p>-n ：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ；</p><p>-w ：行号栏位的占用的位数。</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen ~]# nl /etc/sysconfig/network-scripts/ifcfg-eth01DEVICE=eth02BOOTPROTO=dhcp3ONBOOT=yes</span><br></pre></td></tr></table></figure><h2 id="more-一页一页翻动"><a href="#more-一页一页翻动" class="headerlink" title="more 一页一页翻动"></a>more 一页一页翻动</h2><p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p><p>空白键 (space)：代表向下翻一页；</p><p>Enter ：代表向下翻『一行』；</p><p>&#x2F;字串 ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</p><p>:f ：立刻显示出档名以及目前显示的行数；</p><p>q ：代表立刻离开 more ，不再显示该文件内容。</p><p>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen etc]# more /etc/csh.login....(中间省略)....--More--(28%) # 重点在这一行喔！你的光标也会在这里等待你的命令</span><br></pre></td></tr></table></figure><h2 id="less-一页一页翻动，以下实例输出-x2F-etc-x2F-man-config文件的内容："><a href="#less-一页一页翻动，以下实例输出-x2F-etc-x2F-man-config文件的内容：" class="headerlink" title="less 一页一页翻动，以下实例输出&#x2F;etc&#x2F;man.config文件的内容："></a>less 一页一页翻动，以下实例输出&#x2F;etc&#x2F;man.config文件的内容：</h2><p>less运行时可以输入的命令有：</p><p>空白键 ：向下翻动一页；</p><p>[pagedown]：向下翻动一页；</p><p>[pageup] ：向上翻动一页；</p><p>&#x2F;字串 ：向下搜寻『字串』的功能；</p><p>?字串 ：向上搜寻『字串』的功能；</p><p>n ：重复前一个搜寻 (与 &#x2F; 或 ? 有关！)</p><p>N ：反向的重复前一个搜寻 (与 &#x2F; 或 ? 有关！)</p><p>q ：离开 less 这个程序；</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen etc]# more /etc/csh.login....(中间省略)....:   # 这里可以等待你输入命令！</span><br></pre></td></tr></table></figure><h2 id="head-取出文件前面几行"><a href="#head-取出文件前面几行" class="headerlink" title="head 取出文件前面几行"></a>head 取出文件前面几行</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">head [-n number] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：-n 后面接数字，代表显示几行的意思！</p><p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen etc]# head -n 20 /etc/csh.login</span><br></pre></td></tr></table></figure><h2 id="tail-取出文件后面几行"><a href="#tail-取出文件后面几行" class="headerlink" title="tail 取出文件后面几行"></a>tail 取出文件后面几行</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail [-n number] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-n ：后面接数字，代表显示几行的意思</p><p>默认的情况中，显示最后 10 行！若要显示最后 20 行，就得要这样：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen etc]# tail -n 20 /etc/csh.login</span><br></pre></td></tr></table></figure><h1 id="拓展：Linux-链接概念-了解即可"><a href="#拓展：Linux-链接概念-了解即可" class="headerlink" title="拓展：Linux 链接概念(了解即可)"></a>拓展：Linux 链接概念(了解即可)</h1><p>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。</p><p>情况下，ln 命令产生硬链接。</p><blockquote><p>硬连接(并列关系)</p></blockquote><p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，<strong>A 和 B 对文件系统来说是完全平等的</strong>。删除其中任何一个都不会影响另外一个的访问。</p><p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，<strong>文件真正删除的条件是与之相关的所有硬连接文件均被删除。</strong></p><blockquote><p>软连接(主从关系)</p></blockquote><p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。<strong>软链接文件有类似于 Windows 的快捷方式</strong>。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是<strong>“主从”关系</strong>，<strong>如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</strong></p><p>语法:</p><p><strong>ln</strong> 创建连接</p><p><strong>touch</strong> 创建文件夹</p><p><strong>echo</strong> 输入字符串,也可以是输入到指定文件中</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln 源文件名 硬连接文件名ln -s 源文件名 软连接文件名</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@kuangshen /]# cd /home[root@kuangshen home]# touch f1 # 创建一个测试文件f1[root@kuangshen home]# lsf1[root@kuangshen home]# ln f1 f2     # 创建f1的一个硬连接文件f2[root@kuangshen home]# ln -s f1 f3   # 创建f1的一个符号连接文件f3[root@kuangshen home]# ls -li       # -i参数显示文件的inode节点信息397247 -rw-r--r-- 2 root root     0 Mar 13 00:50 f1397247 -rw-r--r-- 2 root root     0 Mar 13 00:50 f2397248 lrwxrwxrwx 1 root root     2 Mar 13 00:50 f3 -&gt; f1</span><br></pre></td></tr></table></figure><p>从上面的结果中可以看出，硬连接文件 f2 与原文件 f1 的 inode 节点相同，均为 397247，然而符号连接文件的 inode 节点不同。</p><p><strong>echo 字符串输出 &gt;&gt; f1 输出到 f1文件</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># echo 字符串输出 &gt;&gt; f1 输出到 f1文件[root@kuangshen home]# echo &quot;I am f1 file&quot; &gt;&gt;f1[root@kuangshen home]# cat f1I am f1 file[root@kuangshen home]# cat f2I am f1 file[root@kuangshen home]# cat f3I am f1 file[root@kuangshen home]# rm -f f1[root@kuangshen home]# cat f2I am f1 file[root@kuangshen home]# cat f3cat: f3: No such file or directory</span><br></pre></td></tr></table></figure><p>通过上面的测试可以看出：当删除原始文件 f1 后，硬连接 f2 不受影响，但是符号连接 f1 文件无效；</p><p>依此您可以做一些相关的测试，可以得到以下全部结论：</p><p>删除符号连接f3,对f1,f2无影响；</p><p>删除硬连接f2，对f1,f3也无影响；</p><p>删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效；</p><p>同时删除原文件f1,硬连接f2，整个文件会真正的被删除。</p><h1 id="Linux-vi-x2F-vim"><a href="#Linux-vi-x2F-vim" class="headerlink" title="Linux vi&#x2F;vim"></a>Linux vi&#x2F;vim</h1><p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p><p>但是目前我们使用比较多的是 vim 编辑器。</p><p>vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。</p><p>相关文章：<a href="https://www.runoob.com/w3cnote/all-vim-cheatsheat.html">史上最全Vim快捷键键位图 — 入门到进阶</a></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/vi-vim-cheat-sheet-sch.gif" alt="img">vi&#x2F;vim 的使用</p><p>基本上 vi&#x2F;vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。 这三种模式的作用分别是：</p><h3 id="命令模式："><a href="#命令模式：" class="headerlink" title="命令模式："></a>命令模式：</h3><p>用户刚刚启动 vi&#x2F;vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p>以下是常用的几个命令：</p><ul><li><strong>i</strong> 切换到输入模式，以输入字符。</li><li><strong>x</strong> 删除当前光标所在处的字符。</li><li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li></ul><p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p><p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><h3 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h3><p>在命令模式下按下i就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及Shift组合</strong>，输入字符</li><li><strong>ENTER</strong>，回车键，换行</li><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>DEL</strong>，删除键，删除光标后一个字符</li><li><strong>方向键</strong>，在文本中移动光标</li><li><strong>HOME</strong>&#x2F;<strong>END</strong>，移动光标到行首&#x2F;行尾</li><li><strong>Page Up</strong>&#x2F;<strong>Page Down</strong>，上&#x2F;下翻页</li><li><strong>Insert</strong>，切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><h3 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h3><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li>q 退出程序</li><li>w 保存文件</li></ul><p>按ESC键可随时退出底线命令模式。</p><p>简单的说，我们可以将这三个模式想成底下的图标来表示</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/vim-vi-workmodel.png" alt="img"></p><h2 id="vi-x2F-vim-使用实例"><a href="#vi-x2F-vim-使用实例" class="headerlink" title="vi&#x2F;vim 使用实例"></a>vi&#x2F;vim 使用实例</h2><h3 id="使用-vi-x2F-vim-进入一般模式"><a href="#使用-vi-x2F-vim-进入一般模式" class="headerlink" title="使用 vi&#x2F;vim 进入一般模式"></a>使用 vi&#x2F;vim 进入一般模式</h3><p>如果你想要使用 vi 来建立一个名为 runoob.txt 的文件时，你可以这样做：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim runoob.txt</span><br></pre></td></tr></table></figure><p>直接输入 <strong>vi 文件名</strong> 就能够进入 vi 的一般模式了。请注意，记得 vi 后面一定要加文件名，不管该文件存在与否！</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/078207F0-B204-4464-AAEF-982F45EDDAE9.jpg" alt="img"></p><h3 id="按下-i-进入输入模式-也称为编辑模式-，开始编辑文字"><a href="#按下-i-进入输入模式-也称为编辑模式-，开始编辑文字" class="headerlink" title="按下 i 进入输入模式(也称为编辑模式)，开始编辑文字"></a>按下 i 进入输入模式(也称为编辑模式)，开始编辑文字</h3><p>在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！</p><p>在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。</p><p>这个时候，键盘上除了 <strong>Esc</strong> 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1C928383-471E-4AF1-A61E-9E2CCBD5A913.jpg" alt="img"></p><h3 id="按下-ESC-按钮回到一般模式"><a href="#按下-ESC-按钮回到一般模式" class="headerlink" title="按下 ESC 按钮回到一般模式"></a>按下 ESC 按钮回到一般模式</h3><p>好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 <strong>Esc</strong> 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！</p><h3 id="在一般模式中按下-wq-储存后离开-vi"><a href="#在一般模式中按下-wq-储存后离开-vi" class="headerlink" title="在一般模式中按下 :wq 储存后离开 vi"></a>在一般模式中按下 <strong>:wq</strong> 储存后离开 vi</h3><p>OK，我们要存档了，存盘并离开的指令很简单，输入 <strong>:wq</strong> 即可保存离开！</p><p><img src="/../imgs/B2FB5146-327C-4019-AC96-DD7A8EE7460C.jpg" alt="img"></p><p>OK! 这样我们就成功创建了一个 runoob.txt 的文件。</p><hr><h2 id="vi-x2F-vim-按键说明"><a href="#vi-x2F-vim-按键说明" class="headerlink" title="vi&#x2F;vim 按键说明"></a>vi&#x2F;vim 按键说明</h2><p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p><h3 id="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等"><a href="#第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等" class="headerlink" title="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等"></a>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</h3><table><thead><tr><th align="left">移动光标的方法</th><th></th></tr></thead><tbody><tr><td align="left">h 或 向左箭头键(←)</td><td>光标向左移动一个字符</td></tr><tr><td align="left">j 或 向下箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td align="left">k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td align="left">l 或 向右箭头键(→)</td><td>光标向右移动一个字符</td></tr><tr><td align="left">如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</td><td></td></tr><tr><td align="left">[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td align="left">[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td align="left">+</td><td>光标移动到非空格符的下一行</td></tr><tr><td align="left">-</td><td>光标移动到非空格符的上一行</td></tr><tr><td align="left">n<space></td><td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。</td></tr><tr><td align="left">0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td align="left">$ 或功能键[End]</td><td>移动到这一行的最后面字符处(常用)</td></tr><tr><td align="left">H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td align="left">M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td align="left">L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td align="left">G</td><td>移动到这个档案的最后一行(常用)</td></tr><tr><td align="left">nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td align="left">gg</td><td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td></tr><tr><td align="left">n<Enter></td><td>n 为数字。光标向下移动 n 行(常用)</td></tr><tr><td align="left">搜索替换</td><td></td></tr><tr><td align="left">&#x2F;word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 &#x2F;vbird 即可！ (常用)</td></tr><tr><td align="left">?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td align="left">n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 &#x2F;vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td align="left">N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 &#x2F;vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td></tr><tr><td align="left">使用 &#x2F;word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！</td><td></td></tr><tr><td align="left">:n1,n2s&#x2F;word1&#x2F;word2&#x2F;g</td><td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s&#x2F;vbird&#x2F;VBIRD&#x2F;g』。(常用)</td></tr><tr><td align="left"><strong>:1,$s&#x2F;word1&#x2F;word2&#x2F;g</strong> 或 <strong>:%s&#x2F;word1&#x2F;word2&#x2F;g</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td></tr><tr><td align="left"><strong>:1,$s&#x2F;word1&#x2F;word2&#x2F;gc</strong> 或 <strong>:%s&#x2F;word1&#x2F;word2&#x2F;gc</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td></tr><tr><td align="left">删除、复制与贴上</td><td></td></tr><tr><td align="left">x, X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td align="left">nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td align="left">dd</td><td>剪切游标所在的那一整行(常用)，用 p&#x2F;P 可以粘贴。</td></tr><tr><td align="left">ndd</td><td>n 为数字。剪切光标所在的向下 n 行，例如 20dd 则是剪切 20 行(常用)，用 p&#x2F;P 可以粘贴。</td></tr><tr><td align="left">d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td align="left">dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td align="left">d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td align="left">d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td align="left">yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td align="left">nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td align="left">y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td align="left">yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td align="left">y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td align="left">y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td align="left">p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td></tr><tr><td align="left">J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td align="left">c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td align="left">u</td><td>复原前一个动作。(常用)</td></tr><tr><td align="left">[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr><tr><td align="left">这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</td><td></td></tr><tr><td align="left">.</td><td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)</td></tr></tbody></table><h3 id="第二部分：一般模式切换到编辑模式的可用的按钮说明"><a href="#第二部分：一般模式切换到编辑模式的可用的按钮说明" class="headerlink" title="第二部分：一般模式切换到编辑模式的可用的按钮说明"></a>第二部分：一般模式切换到编辑模式的可用的按钮说明</h3><table><thead><tr><th align="left">进入输入或取代的编辑模式</th><th></th></tr></thead><tbody><tr><td align="left">i, I</td><td>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td></tr><tr><td align="left">a, A</td><td>进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td align="left">o, O</td><td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)</td></tr><tr><td align="left">r, R</td><td>进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td align="left">上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td><td></td></tr><tr><td align="left">[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><h3 id="第三部分：一般模式切换到指令行模式的可用的按钮说明"><a href="#第三部分：一般模式切换到指令行模式的可用的按钮说明" class="headerlink" title="第三部分：一般模式切换到指令行模式的可用的按钮说明"></a>第三部分：一般模式切换到指令行模式的可用的按钮说明</h3><table><thead><tr><th align="left">指令行的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td align="left">:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td align="left">:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td align="left">:q</td><td>离开 vi (常用)</td></tr><tr><td align="left">:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td align="left">:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td align="left">ZZ</td><td>这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td></tr><tr><td align="left">ZQ</td><td>不保存，强制退出。效果等同于 **:q!**。</td></tr><tr><td align="left">:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td align="left">:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td align="left">:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td align="left">:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls &#x2F;home』即可在 vi 当中察看 &#x2F;home 底下以 ls 输出的档案信息！</td></tr><tr><td align="left">vim 环境的变更</td><td></td></tr><tr><td align="left">:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td align="left">:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><p>特别注意，在 vi&#x2F;vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。</p><p>举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot整合redis</title>
      <link href="/2022/03/15/springboot%E6%95%B4%E5%90%88redis/"/>
      <url>/2022/03/15/springboot%E6%95%B4%E5%90%88redis/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot整合redis"><a href="#springboot整合redis" class="headerlink" title="springboot整合redis"></a>springboot整合redis</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>Redis是目前使用最多的缓存，包括Spring Boot 中我们也是会用Redis做很多事情。那么今天就来说一说Spring Boot如何整合Redis。Spring Boot整合Redis 需要那些步骤呢？</p><h2 id="整合redis"><a href="#整合redis" class="headerlink" title="整合redis:"></a>整合redis:</h2><h3 id="一-pom-xml增加依赖如下"><a href="#一-pom-xml增加依赖如下" class="headerlink" title="一 pom.xml增加依赖如下:"></a>一 pom.xml增加依赖如下:</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- redis 连接池 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--新版本连接池lettuce--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二-资源文件application-yaml中增加Redis相关配置"><a href="#二-资源文件application-yaml中增加Redis相关配置" class="headerlink" title="二 资源文件application.yaml中增加Redis相关配置"></a>二 资源文件application.yaml中增加Redis相关配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">//这里用的是本地的redis</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">-1ms</span> <span class="comment"># 连接池最大阻塞等待时间，负值表示没有限制</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三-封装redis工具类"><a href="#三-封装redis工具类" class="headerlink" title="三 封装redis工具类"></a>三 封装redis工具类</h3><p>这个工具类就是封装操作redisTemplate的实现类,基本涵盖了redis常用的基本类型</p><p><strong>redis工具类接口</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cuit.epoch.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RedisService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存存属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">get</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">del</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">del</span><span class="params">(List&lt;String&gt; keys)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">getExpire</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否有该属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hasKey</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按delta递增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按delta递减</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Hash结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">hGet</span><span class="params">(String key, String hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Hash结构中放入一个属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Hash结构中放入一个属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接获取整个Hash结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;Object, Object&gt; <span class="title function_">hGetAll</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接设置整个Hash结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接设置整个Hash结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Hash结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hDel</span><span class="params">(String key, Object... hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断Hash结构中是否有该属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hHasKey</span><span class="params">(String key, String hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash结构中属性递增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">hIncr</span><span class="params">(String key, String hashKey, Long delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash结构中属性递减</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">hDecr</span><span class="params">(String key, String hashKey, Long delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Set结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Set&lt;Object&gt; <span class="title function_">sMembers</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Set结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sAdd</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Set结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sAdd</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否为Set中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">sIsMember</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Set结构的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sSize</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Set结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sRemove</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取List结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Object&gt; <span class="title function_">lRange</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取List结构的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lSize</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引获取List中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">lIndex</span><span class="params">(String key, <span class="type">long</span> index)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPush</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPush</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中批量添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPushAll</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中批量添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPushAll</span><span class="params">(String key, Long time, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从List结构中移除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>redis工具类实现类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cuit.epoch.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">RedisService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">del</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">del</span><span class="params">(List&lt;String&gt; keys)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(keys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getExpire</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hasKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hGet</span><span class="params">(String key, String hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hashKey, value);</span><br><span class="line">        <span class="keyword">return</span> expire(key, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hashKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hGetAll</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">        <span class="keyword">return</span> expire(key, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hDel</span><span class="params">(String key, Object... hashKey)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hHasKey</span><span class="params">(String key, String hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">hIncr</span><span class="params">(String key, String hashKey, Long delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, hashKey, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">hDecr</span><span class="params">(String key, String hashKey, Long delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, hashKey, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">sMembers</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sAdd</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sAdd</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">sIsMember</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sRemove</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">lRange</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">lIndex</span><span class="params">(String key, <span class="type">long</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPush</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPush</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">index</span> <span class="operator">=</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPushAll</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPushAll</span><span class="params">(String key, Long time, Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-创建RedisController控制器"><a href="#四-创建RedisController控制器" class="headerlink" title="四 创建RedisController控制器"></a>四 创建RedisController控制器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.feng.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.feng.utils.RedisService;</span><br><span class="line"><span class="keyword">import</span> com.feng.utils.result.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.feng.utils.result.ResultUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/redis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/nihao&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">niHao</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这里是nihao方法!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;User&gt; <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">111L</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;ladidol&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        redis.set(<span class="string">&quot;json:user&quot;</span>, user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getUsers&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Map&lt;Object, Object&gt;&gt; <span class="title function_">getJsonList</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setId(<span class="number">111L</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;ladidol1&quot;</span>);</span><br><span class="line">        user1.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setId(<span class="number">111L</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;ladidol2&quot;</span>);</span><br><span class="line">        user2.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user3.setId(<span class="number">111L</span>);</span><br><span class="line">        user3.setName(<span class="string">&quot;ladidol3&quot;</span>);</span><br><span class="line">        user3.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;ladidol1&quot;</span>, user1);</span><br><span class="line">        map.put(<span class="string">&quot;ladidol2&quot;</span>, user2);</span><br><span class="line">        map.put(<span class="string">&quot;ladidol3&quot;</span>, user3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        redis.hSetAll(<span class="string">&quot;json:userMaps&quot;</span>, map, <span class="number">2000</span>);</span><br><span class="line">        Map&lt;Object, Object&gt; userMaps = redis.hGetAll(<span class="string">&quot;json:userMaps&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success(userMaps);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果截图:</p><p>单个用户查询:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220311173344155.png" alt="image-20220311173344155"></p><p>查询全部用户:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220311173322149.png" alt="image-20220311173322149"></p><p>在idea中项目的最终结构是这样:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220311175106978.png" alt="image-20220311175106978"></p><p>tips:这里面导入了一些工具类,可以去我其他博客看一下;</p><p><strong>一些小小瑕疵:</strong></p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">用这个redis工具类的时候会出现,key值在redis中存储有多余的前缀</span><br><span class="line">类似这种:</span><br><span class="line">\xac\xed\x00\x05t\x00\x0djson:userMaps</span><br><span class="line">\xac\xed\x00\x05t\x00\x08ladidol2</span><br><span class="line">但是不影响使用;</span><br></pre></td></tr></table></figure><p>key值有前缀乱码解决方法:(好像并没有全部解决,有点寄)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis数据库自定义key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REDIS_KEY_DATABASE</span> <span class="operator">=</span> <span class="string">&quot;community&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance,ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">//key序列化方式</span></span><br><span class="line">        template.setKeySerializer(redisSerializer);</span><br><span class="line">        <span class="comment">//value序列化</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//value hashmap序列化</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="comment">//解决查询缓存转换异常的问题</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance,ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span></span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">        <span class="type">RedisCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/03/15/hello-world/"/>
      <url>/2022/03/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第一篇 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
