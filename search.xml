<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>sso单点登录</title>
      <link href="/2022/03/24/sso%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/"/>
      <url>/2022/03/24/sso%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP协议的无状态性"><a href="#HTTP协议的无状态性" class="headerlink" title="HTTP协议的无状态性"></a><strong>HTTP协议的无状态性</strong></h2><p>HTTP是无状态协议，浏览器的每一次请求，服务器都会独立处理，不与之前或之后的请求产生关联，所以，任何用户都可以通过浏览器访问服务器资源。 </p><h3 id="session和cookie机制"><a href="#session和cookie机制" class="headerlink" title="session和cookie机制"></a><strong>session和cookie机制</strong></h3><p>其实前文已经有简单的了解cookie和session了。</p><p>session是服务器级别的，cookie是浏览器级别的。</p><p><strong>session：</strong>浏览器第一次请求服务器，服务器创建一个会话，并将会话的id作为响应的一部分发送给浏览器，浏览器存储会话id，之后浏览器的每一次访问服务器都会带上会话id，服务器根据会话id就知道是不是同一个用户了。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220324220432828.png" alt="image-20220324220432828"></p><p><strong>cookie：</strong>session机制每一次浏览器访问服务器，服务器都要判断一次会话id，显然不太合适。于是浏览器来维护会话id就是cookie机制。浏览器每次访问服务器都会自动附带cookie信息。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220324224426998.png" alt="image-20220324224426998"></p><p>cookie和session机制就可以确保一个用户登录到一个系统后，之后的操作在一定时间内就不需要再次登录系统。</p><blockquote><p>以上的 session和 cookie都只适用于<strong>单系统</strong>，但是系统数量变多成为<strong>多系统</strong>时，我们总不能访问一个分支系统就登录一次吧，于是将这些子系统的域名统一到一个顶级域名中，然后将cookie域设置成顶级域名，于是各个子系统之间就可以共享cookie。</p></blockquote><h2 id="何为单点登录？"><a href="#何为单点登录？" class="headerlink" title="何为单点登录？"></a><strong>何为单点登录？</strong></h2><ul><li><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a><strong>是什么</strong></h3></li></ul><p>单点登录全称 single sign on，简称 SSO，指在多系统应用群中登录一个系统，便可在其他所有系统中得到授权而无需再次登录，包括单点登录和单点注销两部分。比如你用<strong>阿里系产品</strong>，你一旦打开浏览器登陆过<strong>淘宝网</strong>，接下来你会发现你再打开<strong>天猫</strong>，其竟然自动登录了！</p><ul><li><h3 id="从哪来"><a href="#从哪来" class="headerlink" title="从哪来"></a><strong>从哪来</strong></h3></li></ul><p>由于共享 cookie有很多局限性。例如：<strong>域名难以统一</strong>，<strong>子系统技术难以统一</strong>。所以，需要一种全新的登录方式实现多系统应用群的登录 <strong>单点登录</strong></p><h2 id="单点登录实现原理"><a href="#单点登录实现原理" class="headerlink" title="单点登录实现原理"></a><strong>单点登录实现原理</strong></h2><ul><li><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a><strong>登录</strong></h3></li></ul><p>sso需要一个独立的<strong>认证中心</strong>，只有认证中心能接受用户的用户名密码等安全信息，其他系统不提供登录入口，只接受认证中心的间接授权。间接授权通过令牌实现，sso认证中心验证用户的用户名密码没问题，创建授权令牌，在接下来的跳转过程中，授权令牌作为参数发送给各个子系统，子系统拿到令牌，即得到了授权，可以借此创建局部会话，局部会话登录方式与单系统的登录方式相同。具体过程如图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220324224440940.png" alt="image-20220324224440940"></p><p>操作步骤如下：</p><ol><li>用户访问<strong>系统1</strong>的受保护资源，系统1发现用户未登录，<strong>跳转</strong>至sso认证中心，并将自己的地址作为参数</li><li>sso认证中心发现用户未登录，将用户引导至登录页面</li><li>用户输入用户名密码提交登录申请</li><li>sso认证中心校验用户信息，创建用户与sso认证中心之间的会话，称为全局会话，同时创建授权令牌</li><li>sso认证中心带着令牌跳转会最初的请求地址（系统1）</li><li>系统1拿到令牌，去sso认证中心校验令牌是否有效</li><li>sso认证中心校验令牌，返回有效，注册系统1</li><li>系统1使用该令牌创建与用户的会话，称为局部会话，返回受保护资源</li><li>用户访问系统2的受保护资源</li><li>系统2发现用户未登录，跳转至sso认证中心，并将自己的地址作为参数</li><li>sso认证中心发现用户已登录，跳转回系统2的地址，并附上令牌</li><li>系统2拿到令牌，去sso认证中心校验令牌是否有效</li><li>sso认证中心校验令牌，返回有效，注册系统2</li><li>系统2使用该令牌创建与用户的局部会话，返回受保护资源</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
          <category> 登录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sso </tag>
            
            <tag> 登录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文简单搞懂session和cookies</title>
      <link href="/2022/03/24/%E7%AE%80%E5%8D%95%E6%90%9E%E6%87%82cookie%E5%92%8Csession/"/>
      <url>/2022/03/24/%E7%AE%80%E5%8D%95%E6%90%9E%E6%87%82cookie%E5%92%8Csession/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>这里简单聊一下,cookies和session</p><h2 id="为什么需要cookie和session"><a href="#为什么需要cookie和session" class="headerlink" title="为什么需要cookie和session"></a><strong>为什么需要cookie和session</strong></h2><p>在Web发展史中，我们知道浏览器与服务器间采用的是 <code>http</code>协议，而这种协议是<strong>无状态</strong>的，所以这就导致了服务器无法知道是谁在浏览网页，但很明显，一些网页需要知道用户的状态，例如登陆，购物车等。</p><p>所以为了解决这一问题，先后出现了四种技术，分别是<strong>隐藏表单域</strong>，<strong>URL重写</strong>，<strong>cookie</strong>，<strong>session</strong>，而用的最多也是比较重要的就是cookie和session了。</p><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a><strong>Cookie</strong></h2><h3 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a><strong>是什么</strong></h3><p><code>cookie</code>是浏览器保存在用户电脑上的一小段文本，通俗的来讲就是当一个用户通过 <code>http</code>访问到服务器时，服务器会将一些 <code>Key/Value</code>键值对返回给客户端浏览器，并给这些数据加上一些限制条件，在条件符合时这个用户下次访问这个服务器时，数据通过请求头又被完整地给带回服务器，服务器根据这些信息来判断不同的用户。</p><blockquote><p>也就是说， <code>cookie</code>是服务器传给客户端并保存在客户端的一段信息，这个 <code>Cookie</code>是有大小，数量限制的！！</p></blockquote><h3 id="Cookie的创建"><a href="#Cookie的创建" class="headerlink" title="Cookie的创建"></a><strong>Cookie的创建</strong></h3><p>当前 <code>Cookie</code>有两个版本，分别对应两种设置响应头：<code>“Set-Cookie”</code>和 <code>“Set-Cookie2”</code>。在Servlet中并不支持Set-Cookie2，所以我们来看看Set-Cookie的属性项：</p><table><thead><tr><th>属性名</th><th>描述</th></tr></thead><tbody><tr><td>name</td><td>Cookie的名称，Cookie一旦创建，名称便不可更改</td></tr><tr><td>value</td><td>Cookie的值,键值对</td></tr><tr><td>maxAge</td><td>Cookie失效的时间，单位秒。如果为整数，则该Cookie在maxAge秒后失效。如果为负数，该Cookie为临时Cookie，关闭浏览器即失效，浏览器也不会以任何形式保存该Cookie。如果为0，表示删除该Cookie。默认为-1。</td></tr><tr><td>secure</td><td>该Cookie是否仅被使用安全协议传输。安全协议。安全协议有HTTPS，SSL等，在网络上传输数据之前先将数据加密。默认为false。</td></tr><tr><td>path</td><td>Cookie的使用路径。如果设置为“&#x2F;sessionWeb&#x2F;”，则只有contextPath为“&#x2F;sessionWeb”的程序可以访问该Cookie。如果设置为“&#x2F;”，则本域名下contextPath都可以访问该Cookie。注意最后一个字符必须为“&#x2F;”。</td></tr><tr><td>domain</td><td>可以访问该Cookie的域名。如果设置为“.google.com”，则所有以“google.com”结尾的域名都可以访问该Cookie。注意第一个字符必须为“.”。</td></tr><tr><td>comment</td><td>该Cookie的用处说明，浏览器显示Cookie信息的时候显示该说明。</td></tr><tr><td>version</td><td>Cookie使用的版本号。0表示遵循Netscape的Cookie规范，1表示遵循W3C的RFC 2109规范</td></tr></tbody></table><p>这些属性项，其他的都说的很清楚了，我们来看看<strong>Domain</strong>有什么用：</p><p>现在，我们假设这里有两个域名：</p><blockquote><p>域名A：a.b.f.com.cn 域名B：c.d.f.com.cn</p></blockquote><p>显然，域名A和域名B都是 <code>f.com.cn</code>的子域名</p><ul><li>如果我们在域名A中的Cookie的domain设置为f.com.cn，那么f.com.cn及其子域名都可以获取这个Cookie，即域名A和域名B都可以获取这个Cookie</li><li>如果域名A和域名B同时设置Cookie的doamin为f.com.cn，那么将出现覆盖的现象</li><li>如果域名A没有显式设置Cookie的domain方法，那么domain就为a.b.f.com.cn，不一样的是，这时，域名A的子域名将无法获取这个Cookie</li></ul><p>好的，现在了解完了Set-Cookie的属性项，开始创建Cookie</p><p>Web服务器通过发送一个称为Set-Cookie的http消息来创建一个Cookie：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Set-Cookie: value[; expires=date][; domain=domain][; path=path][; secure]</span><br></pre></td></tr></table></figure><blockquote><p>这里我们思考一个问题，当我们在服务器创建多个Cookie时，这些Cookie最终是在一个Header项中还是以独立的Header存在的呢？</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220324212645258.png" alt="image-20220324212645258">我们可以看到，构建http返回字节流时是将Header中所有的项顺序写出，而没有进行任何修改。所以可以想象在浏览器在接收http返回的数据时是分别解析每一个Header项。</p><p>接着，在客户端进行保存，如何保存呢？这里又要对Cookie进行进一步的了解</p><h3 id="Cookie的分类"><a href="#Cookie的分类" class="headerlink" title="Cookie的分类"></a><strong>Cookie的分类</strong></h3><ul><li>会话级别Cookie：所谓会话级别Cookie，就是在浏览器关闭之后Cookie就会失效。</li><li>持久级别Cookie：保存在硬盘的Cookie，只要设置了过期时间就是硬盘级别Cookie。</li></ul><p>好的，现在cookie保存在了客户端，当我们去请求一个URL时，浏览器会根据这个URL路径将符合条件的Cookie放在请求头中传给服务器。</p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a><strong>Session</strong></h2><h3 id="为啥用session"><a href="#为啥用session" class="headerlink" title="为啥用session"></a>为啥用session</h3><p>Cookie是有大小限制和数量限制的，并且越来越多的Cookie代表客户端和服务器的传输量增加，可不可以每次传的时候不传所有cookie值，而只传一个唯一ID，通过这个ID直接在服务器查找用户信息呢？答案是有的，这就是我们的session。</p><h3 id="Session是基于Cookie来工作的"><a href="#Session是基于Cookie来工作的" class="headerlink" title="Session是基于Cookie来工作的"></a><strong>Session是基于Cookie来工作的</strong></h3><p>同一个客户端每次访问服务器时，只要当浏览器在第一次访问服务器时，服务器设置一个id并保存一些信息(例如登陆就保存用户信息，视具体情况)，并把这个id通过Cookie存到客户端，客户端每次和服务器交互时只传这个id，就可以实现维持浏览器和服务器的状态，而这个ID通常是NAME为JSESSIONID的一个Cookie。</p><h3 id="实际上，有四种方式让Session正常工作："><a href="#实际上，有四种方式让Session正常工作：" class="headerlink" title="实际上，有四种方式让Session正常工作："></a><strong>实际上，有四种方式让Session正常工作：</strong></h3><ul><li>通过URL传递SessionID</li><li>通过Cookie传递SessionID</li><li>通过SSL传递SessionID</li><li>通过隐藏表单传递SessionID</li></ul><p><strong>第一种情况：</strong></p><p>当浏览器不支持Cookie功能时，浏览器会将用户的SessionCookieName(默认为JSESSIONID)重写到用户请求的URL参数中。格式：&#x2F;path&#x2F;Servlet;name&#x3D;value;name2&#x3D;value2?Name3&#x3D;value3</p><p><strong>第三种情况：</strong></p><p>会根据javax.servlet.request.ssl_session属性值设置SessionID。</p><blockquote><p>注：如果客户端支持Cookie，又通过URL重写，Tomcat仍然会解析Cookie中的SessionID并覆盖URL中的SessionID</p></blockquote><h3 id="session工作原理"><a href="#session工作原理" class="headerlink" title="session工作原理"></a><strong>session工作原理</strong></h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220324212923083.png" alt="image-20220324212923083"></p><p><strong>一、创建session</strong></p><p>当客户端访问到服务器，服务器会为这个客户端通过request.getSession()方法创建一个Session，如果当前SessionID还没有对应的HttpSession对象，就创建一个新的，并添加到org.apache.catalina.Manager的sessions容器中保存，这就做到了对状态的保持。当然，这个SessionID是唯一的</p><p><strong>二、session保存</strong></p><p>由图可知，session对象已经保存在了Manager类中，StandardManager作为实现类，通过requestedSessionId从StandardManager的sessions集合中取出StandardSession对象。</p><p>我们来看看StandardManager时如何对所有StandardSession对象进行生命周期管理</p><p>当Servlet容器关闭：</p><blockquote><p>StandardManager将持久化没过期的StandardSession对象(必须调用Servlet容器中的stop和start命令，不能直接kill)</p></blockquote><p>当Servlet容器重启时：</p><blockquote><p>StandardManager初始化会重读这个文件，解析出所有session对象。</p></blockquote><p><strong>三、session的销毁</strong></p><p>这里有一个误区，也是我之前的错误理解，就是我将session的生命周期理解成一次会话，浏览器打开就创建，浏览器关闭就销毁，这样理解是错的！！</p><p>session的声明周期是从创建到超时过期</p><p>也就是说，当session创建后，浏览器关闭，会话级别的Cookie被销毁，如果没有超过设定时间，该SessionID对应的session是没有被销毁的，</p><p><strong>检查session失效</strong></p><p>检查每个Session是否失效是在Tomcat的一个后台线程完成的(backgroundProcess()方法中)；除了后台进程检验session是否失效外，调用request.getSession()也会检查该session是否过期，当然，调用这种方法如果过期的话又会重新创建一个新的session。</p><h2 id="小-结"><a href="#小-结" class="headerlink" title="小  结"></a><strong>小  结</strong></h2><h3 id="二者的异同"><a href="#二者的异同" class="headerlink" title="二者的异同"></a><strong>二者的异同</strong></h3><p>相同点(有关系的地方)：</p><ul><li>Session和Cookie都是为了让http协议又状态而存在</li><li>Session通过Cookie工作，Cookie传输的SessionID让Session知道这个客户端到底是谁</li></ul><p>不同点：</p><ul><li>Session将信息保存到服务器，Cookie将信息保存在客户端</li></ul><h3 id="现在主要的工作流程"><a href="#现在主要的工作流程" class="headerlink" title="现在主要的工作流程"></a><strong>现在主要的工作流程</strong></h3><p>当浏览器第一次访问服务器时，服务器创建Session并将SessionID通过Cookie带给浏览器保存在客户端，同时服务器根据业务逻辑保存相应的客户端信息保存在session中；客户端再访问时上传Cookie，服务器得到Cookie后获取里面的SessionID，来维持状态。</p><h3 id="结尾："><a href="#结尾：" class="headerlink" title="结尾："></a>结尾：</h3><p>如果想要深入了解cookies和session&#x3D;&#x3D;&gt;<a href="https://www.cnblogs.com/l199616j/p/11195667.html#_label0">传送门</a></p><p>本文来自：<a href="https://mp.weixin.qq.com/s?__biz=MzU4ODI1MjA3NQ==&mid=2247484429&idx=1&sn=9725b000eac262cb8ad887d637e0195c&chksm=fdded2c9caa95bdfd340ae9f3ba584194be6526d0b1bbd55b64402d8babbc1a28f2b69ea1f13&scene=21#wechat_redirect">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javaweb </tag>
            
            <tag> session和cookie </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>学长的面经汇总</title>
      <link href="/2022/03/24/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5D%E5%AD%A6%E9%95%BF%E7%9A%84%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB/"/>
      <url>/2022/03/24/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5D%E5%AD%A6%E9%95%BF%E7%9A%84%E9%9D%A2%E7%BB%8F%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="4acb215ff3babdc586cacd5e3d03ac558f1bced0cbf929dce8b71ce284e1969c">c92271cf075fe1244ae5c161f435c003a8840a878c31d67271965e5b503895f1991d18e227238b4315061b8582d45c1259524635c76b694672b7fd9ab271d43186321687473b3a040c3e0d41cba55dd3e3628f8ff6ab43ccc78690f69f55c6240124995b9b1f79903e7757d7c871f6b66a27f6e8e3166b9deaf373dcfd40d72062edff2711b6cbdae4325fae6ca37c59ad66d63e954fe11a93780737b806919ae35cd5157eba6cce67912840e469b1948bec16ef59fd31c505f08992121a210dc2dc859d9ee6424dc676c4fd9dbc9a28e1eed822cc2619596cc6b9033c4d450f46783b8d59ebc2bd88ebf8c303f79a0261b781396f378134b197a9d08100f61949591428f8de5b085e95075aba3486838a8524069419d3b8e62596b378c1ae56072e4704b96a2c9cc2f9869efcab452301d4b4d87387b73f3e1210b3d82456e15b53172576ad1bd71fc9566070089e3dfcf46254317c06d8d0aff0ba94990d70a5fb74ce4c26a69e94507cc5c04b33fbeb48af702be528824c0a6c73c1965931dbc136cacad449ae14992be63e0a30efa0fe8e1a87baca5409e83c015e1bd8c8e2ed92020cc166fc641427c23267ba6c419c6caee6b893f733ed7d17eb26738664dd283b047d0300b2c57450b683156282a36822ace3dd04dae534a28b8c6938178134bae9b46895df169ce43f21a967289cd4c0ebf0e5822099f98191d2cc374727db7f6703bfa5afb97fa1bf8659d21657cc528d404771b41482de03db06439538f1a0ea8b47ac063b63c2c8abc7e3185facc5ab0ec57be7fbdfa707e4648aead2a78875e2e4a1b10c59ba59b3ce45303054e3fb653b93dc30a45a343accc5a6247949144845d6056b3b7163dfb50476f11fc71c9bdca058b411d6a3ac0ee2fa9fff9a25a992882da7ba944ba5a9d00376d13838822ee1a88e9e02998f217964f39cd7df222c0cc52966b50d81631d997ecca9d9d667a5a74f2388a8e8c68cd3db907ff92d97acbed88c71189d0e2fcbf5dd975909b6ded6c28485fba7f799ec072b0fba46c3aa88ff04343a038a9c68dc021bc6ebaceaf4335592469b1761c14986d20de5e89d5961a751486492d2213ac2f304d6dbe16900eb7ffd10da9227d2fb50e6c9bc6bb922215cecfafef5ea4894ee9da105c91c48b2ba87d5020af21190dfb97c6526afff79e8779901ddccfbcbef3e35702e8e0f0a1bb577a897f9f747873ab61fd2177b4b43598a04eefeb9cc5e65639ca28d056d8b771c4ea39bf409a9c756ed0b781b07ae420dc2afc6deabbe38ee42d06841db706b87703e6d12bb62f081ef8d97ba08f2bb72cca6921fe6a9c7e514b6d03bddfa1ce578e6de323eeaa5b7cec378bf1a4a7673998c84a1ef71c139f751ab86a650f9aec0d6d2f5353c8dc1d2a4aa93e6df2e1aa3a4c669b7aa2dc205bdac8bab74367a5e6e06ac0ef3c534a99c64b88bd6d094e02d5a3ece0c3324f39029505cd9863979232fc6abb8b3f2f21ec959fd48906cc71e369aef38b084b9942dea463d24645a36d547e89fe9caede1516b98e7dec58c7cfbcf94384217fedb47456e9677e0fb373912c44ecd6475d8d158c3f1cc9749c4832eaa4762e2eb8782c6934694496dd76a0802f0b127864228e9cfa6b657aba8e2b974e2985e69c90119a95f26be3d42a6d568766559de4a54083472f30c1cd48080d1428d7e64e46ef07976a839dc5119f0ef851f0389c72ceec88bb18129e8f6489c1bcd4a8c670efb012e3957d19cc1dee45df974af8f1e99932f8c06d98bcdad4760c6bfde2ab582bbe08454688a71e58a55fa007eb10fa472a592ae2a840ef9a574a4e989a5c1deab1a299e15c6bd9c21c41879525e7b15945819e4fbfdb60d78a7aca10b17167d94b7f11da8f47bdf268d100117cb9029e6c4ef65981646238174437f71bf305a03977e0d07fdaa84b4a769ee5d9b9544b0a5b3c0b98024adf87db94b1f972b4077476eddc50040169234175a397dd6ec3febfd23d675</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，博主可能还没写完，所以这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 加密文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
            <tag> 大厂面经 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringSecurity</title>
      <link href="/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5DSpringSecurity/"/>
      <url>/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5DSpringSecurity/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="f4918e94febdc842734c49986474a622604fc3467c5f236711d06a920ec9427b">c92271cf075fe1244ae5c161f435c003d27ecbda7ceb8b7a9afb1afb02623f7c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，博主可能还没写完，所以这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 加密文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shiro权限管理</title>
      <link href="/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dshiro%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
      <url>/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dshiro%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。]">  <script id="hbeData" type="hbeData" data-hmacdigest="b69d367e11bc2d386571f38a8ee72c8b0bb87d27fc214c12621739d483c81bf6">c92271cf075fe1244ae5c161f435c003a8336e6a7799af7c391512984743f9963e5087349d222bd242d1fa570cf866e6374c8e11008d1e3256383cc33814f7d687313c783a70738a7e6204a4feb7f6708b1cb83ad0658a56a07c79babb500ba1871a36a112bf1882c339b2f578938418d25998982eb633f372bed1e3c41c2ef401fe16eec89c74bc853d4b6aeb460427a5bb4cc56ac9b2a1f1c42e368ca15620</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，博主可能还没写完，所以这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 加密文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sso简单实现</title>
      <link href="/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dsso%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
      <url>/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dsso%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="f4918e94febdc842734c49986474a622604fc3467c5f236711d06a920ec9427b">c92271cf075fe1244ae5c161f435c003d27ecbda7ceb8b7a9afb1afb02623f7c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，博主可能还没写完，所以这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 加密文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 加密文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅理解动态规划</title>
      <link href="/2022/03/24/%E6%B5%85%E7%90%86%E8%A7%A3%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>/2022/03/24/%E6%B5%85%E7%90%86%E8%A7%A3%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>传送门<a href="https://zhuanlan.zhihu.com/p/365698607">动态规划</a></p><ul><li>什么是动态规划？</li><li>动态规划的核心思想</li><li>一个例子走进动态规划</li><li>动态规划的解题套路</li><li>leetcode案例分析</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-b59d18a44f75449af26f34fd65d938cc_720w.jpg" alt="img"></p><h2 id="一、什么是动态规划？"><a href="#一、什么是动态规划？" class="headerlink" title="一、什么是动态规划？"></a>一、什么是动态规划？</h2><p>动态规划（英语：Dynamic programming，简称 DP），是一种在数学、管理科学、计算机科学、经济学和生物信息学中使用的，通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。动态规划常常适用于有重叠子问题和最优子结构性质的问题。</p><blockquote><p>★ dynamic programming is a method for solving a complex problem by breaking it down into a collection of simpler subproblems.<br>”</p></blockquote><p>以上定义来自维基百科，看定义感觉还是有点抽象。简单来说，动态规划其实就是，给定一个问题，我们把它拆成一个个子问题，直到子问题可以直接解决。然后呢，把子问题答案保存起来，以减少重复计算。再根据子问题答案反推，得出原问题解的一种方法。</p><blockquote><p>★ 一般这些子问题很相似，可以通过函数关系式递推出来。然后呢，动态规划就致力于解决每个子问题一次，减少重复计算,比如斐波那契数列就可以看做入门级的经典动态规划问题。<br>”</p></blockquote><h2 id="二、动态规划核心思想"><a href="#二、动态规划核心思想" class="headerlink" title="二、动态规划核心思想"></a>二、动态规划核心思想</h2><p>动态规划最核心的思想，就在于<strong>拆分子问题，记住过往，减少重复计算</strong>。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220325190623706.png" alt="image-20220325190623706"></p><p>我们来看下，网上比较流行的一个例子：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- A ： &quot;1+1+1+1+1+1+1+1 =？&quot;</span><br><span class="line">- A ： &quot;上面等式的值是多少&quot;</span><br><span class="line">- B ： 计算 &quot;8&quot;</span><br><span class="line">- A : 在上面等式的左边写上 &quot;1+&quot; 呢？</span><br><span class="line">- A : &quot;此时等式的值为多少&quot;</span><br><span class="line">- B : 很快得出答案 &quot;9&quot;</span><br><span class="line">- A : &quot;你怎么这么快就知道答案了&quot;</span><br><span class="line">- A : &quot;只要在8的基础上加1就行了&quot;</span><br><span class="line">- A : &quot;所以你不用重新计算，因为你记住了第一个等式的值为8!动态规划算法也可以说是 &#x27;记住求过的解来节省时间&#x27;&quot;</span><br></pre></td></tr></table></figure><h2 id="三、一个例子带你走进动态规划-–-青蛙跳阶问题"><a href="#三、一个例子带你走进动态规划-–-青蛙跳阶问题" class="headerlink" title="三、一个例子带你走进动态规划 – 青蛙跳阶问题"></a>三、一个例子带你走进动态规划 – 青蛙跳阶问题</h2><h3 id="1-先讲讲暴力递归（自顶向下"><a href="#1-先讲讲暴力递归（自顶向下" class="headerlink" title="1.先讲讲暴力递归（自顶向下)"></a>1.先讲讲暴力递归（自顶向下)</h3><h4 id="常规递归解法-不高效"><a href="#常规递归解法-不高效" class="headerlink" title="常规递归解法(不高效):"></a>常规递归解法(不高效):</h4><blockquote><p>leetcode原题：一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 10 级的台阶总共有多少种跳法。</p></blockquote><p>有些小伙伴第一次见这个题的时候，可能会有点蒙圈，不知道怎么解决。其实可以试想：</p><ul><li>要想跳到第10级台阶，要么是先跳到第9级，然后再跳1级台阶上去;要么是先跳到第8级，然后一次迈2级台阶上去。</li><li>同理，要想跳到第9级台阶，要么是先跳到第8级，然后再跳1级台阶上去;要么是先跳到第7级，然后一次迈2级台阶上去。</li><li>要想跳到第8级台阶，要么是先跳到第7级，然后再跳1级台阶上去;要么是先跳到第6级，然后一次迈2级台阶上去。</li></ul><p>假设跳到第n级台阶的跳数我们定义为f(n)，很显然就可以得出以下公式：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">f（10） = f（9）+f(8)</span><br><span class="line">f (9)  = f(8) + f(7)</span><br><span class="line">f (8)  = f(7) + f(6)</span><br><span class="line">...</span><br><span class="line">f(3) = f(2) + f(1)</span><br><span class="line"></span><br><span class="line">即通用公式为: f(n) = f(n-1) + f(n-2)</span><br></pre></td></tr></table></figure><p>那f(2) 或者 f(1) 等于多少呢？</p><ul><li>当只有2级台阶时，有两种跳法，第一种是直接跳两级，第二种是先跳一级，然后再跳一级。即f(2) &#x3D; 2;</li><li>当只有1级台阶时，只有一种跳法，即f（1）&#x3D; 1；</li></ul><p>因此可以用递归去解决这个问题：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numWays</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">if</span>(n == <span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> numWays(n-<span class="number">1</span>) + numWays(n-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去leetcode提交一下，发现有问题，超出时间限制了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-11825c00527f415cbe77f057fa46ecf7_720w.jpg" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-2dc11311d9321f61c7bb8a3d9058c636_720w.jpg" alt="img"></p><ul><li>要计算原问题 f(10)，就需要先计算出子问题 f(9) 和 f(8)</li><li>然后要计算 f(9)，又要先算出子问题 f(8) 和 f(7)，以此类推。</li><li>一直到 f(2) 和 f(1），递归树才终止。</li></ul><p>我们先来看看这个递归的时间复杂度吧：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">递归时间复杂度 = 解决一个子问题时间*子问题个数</span><br></pre></td></tr></table></figure><ul><li>一个子问题时间 &#x3D; f（n-1）+f（n-2），也就是一个加法的操作，所以复杂度是 O(1)；</li><li>问题个数 &#x3D; 递归树节点的总数，递归树的总节点 &#x3D; 2^n-1，所以是复杂度O(2^n)。</li></ul><p>因此，青蛙跳阶，递归解法的时间复杂度 &#x3D; O(1) * O(2^n) &#x3D; O(2^n)，就是指数级别的，爆炸增长的，如果n比较大的话，超时很正常的了。</p><p>回过头来，你仔细观察这颗递归树，你会发现存在大量重复计算，比如f（8）被计算了两次，f（7）被重复计算了3次…所以这个递归算法低效的原因，就是<strong>存在大量的重复计算</strong>！</p><p>既然存在大量重复计算，那么我们可以先把计算好的答案存下来，即造一个备忘录，等到下次需要的话，先去备忘录查一下，如果有，就直接取就好了，备忘录没有才开始计算，那就可以省去重新重复计算的耗时啦！这就是带备忘录的解法。</p><h4 id="带备忘录的递归解法（高效）"><a href="#带备忘录的递归解法（高效）" class="headerlink" title="带备忘录的递归解法（高效）"></a>带备忘录的递归解法（高效）</h4><p>一般使用一个数组或者一个哈希map充当这个<strong>备忘录</strong>。</p><ul><li>第一步，f（10）&#x3D; f(9) + f(8)，f(9) 和f（8）都需要计算出来，然后再加到备忘录中，如下：</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-f31e17b883d1eb45a906a83760b5e7f3_720w.jpg" alt="img"></p><ul><li>第二步， f(9) &#x3D; f（8）+ f（7），f（8）&#x3D; f（7）+ f(6), 因为 f(8) 已经在备忘录中啦，所以可以省掉，f(7),f（6）都需要计算出来，加到备忘录中~</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-5c553e02bb63d74f9f1f3b91b994f584_720w.jpg" alt="img"></p><p>第三步， f(8) &#x3D; f（7）+ f(6),发现f(8)，f(7),f（6）全部都在备忘录上了，所以都可以剪掉。</p><p><img src="https://pic4.zhimg.com/80/v2-7675d5727f4e81db7fc897051ae2cecf_720w.jpg" alt="img"></p><p>所以呢，用了备忘录递归算法，递归树变成光秃秃的树干咯，如下：</p><p><img src="https://pic2.zhimg.com/80/v2-6c180511b9a2ef31f76c225b50f7cb9d_720w.jpg" alt="img"></p><p>带<strong>备忘录</strong>的递归算法，子问题个数&#x3D;树节点数&#x3D;n，解决一个子问题还是O(1),所以带<strong>备忘录</strong>的递归算法的时间复杂度是O(n)。接下来呢，我们用带<strong>备忘录</strong>的递归算法去撸代码，解决这个青蛙跳阶问题的超时问题咯~，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">//使用哈希map，充当备忘录的作用</span></span><br><span class="line">    Map&lt;Integer, Integer&gt; tempMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numWays</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="comment">// n = 0 也算1种</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n &lt;= <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先判断有没计算过，即看看备忘录有没有</span></span><br><span class="line">        <span class="keyword">if</span> (tempMap.containsKey(n)) &#123;</span><br><span class="line">            <span class="comment">//备忘录有，即计算过，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> tempMap.get(n);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 备忘录没有，即没有计算过，执行递归计算,并且把结果保存到备忘录map中，对1000000007取余（这个是leetcode题目规定的）</span></span><br><span class="line">            tempMap.put(n, (numWays(n - <span class="number">1</span>) + numWays(n - <span class="number">2</span>)) % <span class="number">1000000007</span>);</span><br><span class="line">            <span class="keyword">return</span> tempMap.get(n);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>去leetcode提交一下，如图，稳了：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-5e58ee59743f9c1ac5633e5fb7bdd937_720w.jpg" alt="img"></p><p>其实，还可以用动态规划解决这道题。</p><p>重点来了….用动态规划</p><h3 id="2-再来看看动态规划（自底而上）"><a href="#2-再来看看动态规划（自底而上）" class="headerlink" title="2.再来看看动态规划（自底而上）"></a>2.再来看看动态规划（自底而上）</h3><h4 id="题目分析："><a href="#题目分析：" class="headerlink" title="题目分析："></a>题目分析：</h4><p>动态规划跟带备忘录的递归解法基本思想是一致的，都是减少重复计算，时间复杂度也都是差不多。但是呢：</p><ul><li>带备忘录的递归，是从f(10)往f(1）方向延伸求解的，所以也称为<strong>自顶向下</strong>的解法。</li><li>动态规划从较小问题的解，由交叠性质，逐步决策出较大问题的解，它是从f(1)往f(10）方向，往上推求解，所以称为<strong>自底向上</strong>的解法。</li></ul><p>动态规划有几个典型特征，<strong>最优子结构、状态转移方程、边界、重叠子问题</strong>。在青蛙跳阶问题中：</p><ul><li>f(n-1)和f(n-2) 称为 f(n) 的最优子结构</li><li>f(n)&#x3D; f（n-1）+f（n-2）就称为状态转移方程</li><li>f(1) &#x3D; 1, f(2) &#x3D; 2 就是边界啦</li><li>比如f(10)&#x3D; f(9)+f(8),f(9) &#x3D; f(8) + f(7) ,f(8)就是重叠子问题。</li></ul><p>我们来看下自底向上的解法，从f(1)往f(10）方向，想想是不是直接一个for循环就可以解决啦，如下：</p><p><img src="https://pic2.zhimg.com/80/v2-ace286214f56e1f2c70ff22307ac8ea9_720w.jpg" alt="img"></p><p>带备忘录的递归解法，空间复杂度是O(n)，但是呢，仔细观察上图，可以发现，f（n）只依赖前面两个数，所以只需要两个变量a和b来存储，就可以满足需求了，因此空间复杂度是O(1)就可以啦</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-cc5e4b5d5b8bc9062f1c3256792bb5c7_720w.jpg" alt="img"></p><p>动态规划实现代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">numWays</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            temp = (a + b)% <span class="number">1000000007</span>;</span><br><span class="line">            a = b;</span><br><span class="line">            b = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="四、动态规划的解题套路"><a href="#四、动态规划的解题套路" class="headerlink" title="四、动态规划的解题套路"></a>四、动态规划的解题套路</h2><h3 id="什么样的问题可以考虑使用动态规划解决呢？"><a href="#什么样的问题可以考虑使用动态规划解决呢？" class="headerlink" title="什么样的问题可以考虑使用动态规划解决呢？"></a><strong>什么样的问题可以考虑使用动态规划解决呢？</strong></h3><blockquote><p>★ 如果一个问题，可以把所有可能的答案穷举出来，并且穷举出来后，发现存在重叠子问题，就可以考虑使用动态规划。<br>”</p></blockquote><p>比如一些求最值的场景，如<strong>最长递增子序列、最小编辑距离、背包问题、凑零钱问题</strong>等等，都是动态规划的经典应用场景。</p><h3 id="动态规划的解题思路"><a href="#动态规划的解题思路" class="headerlink" title="动态规划的解题思路"></a><strong>动态规划的解题思路</strong></h3><p>动态规划的核心思想就是<strong>拆分子问题，记住过往，减少重复计算。</strong> 并且动态规划一般都是自底向上的，因此到这里，基于<strong>青蛙跳阶</strong>问题，我总结了一下我做动态规划的思路：</p><ul><li>穷举分析</li><li>确定边界</li><li>找出规律，确定最优子结构</li><li>写出状态转移方程</li></ul><h4 id="1-穷举分析"><a href="#1-穷举分析" class="headerlink" title="1. 穷举分析"></a><strong>1. 穷举分析</strong></h4><ul><li>当台阶数是1的时候，有一种跳法，f（1） &#x3D;1</li><li>当只有2级台阶时，有两种跳法，第一种是直接跳两级，第二种是先跳一级，然后再跳一级。即f(2) &#x3D; 2;</li><li>当台阶是3级时，想跳到第3级台阶，要么是先跳到第2级，然后再跳1级台阶上去，要么是先跳到第 1级，然后一次迈 2 级台阶上去。所以f(3) &#x3D; f(2) + f(1) &#x3D;3</li><li>当台阶是4级时，想跳到第3级台阶，要么是先跳到第3级，然后再跳1级台阶上去，要么是先跳到第 2级，然后一次迈 2 级台阶上去。所以f(4) &#x3D; f(3) + f(2) &#x3D;5</li><li>当台阶是5级时……</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-cc5e4b5d5b8bc9062f1c3256792bb5c7_720w.jpg" alt="img"></p><h4 id="2-确定边界"><a href="#2-确定边界" class="headerlink" title="2. 确定边界"></a><strong>2. 确定边界</strong></h4><p>通过穷举分析，我们发现，当台阶数是1的时候或者2的时候，可以明确知道青蛙跳法。f（1） &#x3D;1，f(2) &#x3D; 2，当台阶n&gt;&#x3D;3时，已经呈现出规律f(3) &#x3D; f(2) + f(1) &#x3D;3，因此f（1） &#x3D;1，f(2) &#x3D; 2就是青蛙跳阶的边界。</p><h4 id="3-找规律，确定最优子结构"><a href="#3-找规律，确定最优子结构" class="headerlink" title="3. 找规律，确定最优子结构"></a><strong>3. 找规律，确定最优子结构</strong></h4><p>n&gt;&#x3D;3时，已经呈现出规律 f(n) &#x3D; f(n-1) + f(n-2) ，因此，f(n-1)和f(n-2) 称为 f(n) 的最优子结构。什么是最优子结构？有这么一个解释：</p><blockquote><p>★ 一道动态规划问题，其实就是一个递推问题。假设当前决策结果是f(n),则最优子结构就是要让 f(n-k) 最优,最优子结构性质就是能让转移到n的状态是最优的,并且与后面的决策没有关系,即让后面的决策安心地使用前面的局部最优解的一种性质<br>”</p></blockquote><h4 id="4，-写出状态转移方程"><a href="#4，-写出状态转移方程" class="headerlink" title="4， 写出状态转移方程"></a><strong>4， 写出状态转移方程</strong></h4><p>通过前面3步，穷举分析，确定边界，最优子结构，我们就可以得出状态转移方程啦：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-17700257363921acdbd5718beaed8266_720w.jpg" alt="img"></p><h4 id="5-代码实现"><a href="#5-代码实现" class="headerlink" title="5. 代码实现"></a><strong>5. 代码实现</strong></h4><p>我们实现代码的时候，一般注意从底往上遍历哈，然后关注下边界情况，空间复杂度，也就差不多啦。动态规划有个框架的，大家实现的时候，可以考虑适当参考一下：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">dp[0][0][...] = 边界值</span><br><span class="line">for(状态1 ：所有状态1的值)&#123;</span><br><span class="line">    for(状态2 ：所有状态2的值)&#123;</span><br><span class="line">        for(...)&#123;</span><br><span class="line">          //状态转移方程</span><br><span class="line">          dp[状态1][状态2][...] = 求最值</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、案例分析"><a href="#五、案例分析" class="headerlink" title="五、案例分析"></a>五、案例分析</h2><h3 id="一个leetcode-案例分析"><a href="#一个leetcode-案例分析" class="headerlink" title="一个leetcode 案例分析"></a>一个leetcode 案例分析</h3><p>我们一起来分析一道经典leetcode题目吧</p><blockquote><p>★ 给你一个整数数组 nums ，找到其中最长严格递增子序列的长度。<br>”</p></blockquote><p>示例 1：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">输入：nums = [10,9,2,5,3,7,101,18]</span><br><span class="line">输出：4</span><br><span class="line">解释：最长递增子序列是 [2,3,7,101]，因此长度为 4 。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">输入：nums = [0,1,0,3,2,3]</span><br><span class="line">输出：4</span><br></pre></td></tr></table></figure><p>我们按照以上动态规划的解题思路，</p><ul><li>穷举分析</li><li>确定边界</li><li>找规律，确定最优子结构</li><li>状态转移方程</li></ul><h4 id="1-自底向上的穷举分析"><a href="#1-自底向上的穷举分析" class="headerlink" title="1. 自底向上的穷举分析"></a>1. 自底向上的穷举分析</h4><p>因为动态规划，核心思想包括<strong>拆分子问题，记住过往，减少重复计算。</strong> 所以我们在思考原问题：<strong>数组num[i]的最长递增子序列长度时</strong>，可以思考下<strong>相关子问题</strong>，比如原问题是否跟<strong>子问题</strong>num[i-1]的最长递增子序列长度有关呢？</p><p>这里观察规律，显然是有关系的，我们还是遵循动态规划<strong>自底向上</strong>的原则，基于示例1的数据，从数组只有一个元素开始分析。</p><ul><li>当nums只有一个元素10时，最长递增子序列是[10],长度是1.</li><li>当nums需要加入一个元素9时，最长递增子序列是[10]或者[9],长度是1。</li><li>当nums再加入一个元素2时，最长递增子序列是[10]或者[9]或者[2],长度是1。</li><li>当nums再加入一个元素5时，最长递增子序列是[2,5],长度是2。</li><li>当nums再加入一个元素3时，最长递增子序列是[2,5]或者[2,3],长度是2。</li><li>当nums再加入一个元素7时，,最长递增子序列是[2,5,7]或者[2,3,7],长度是3。</li><li>当nums再加入一个元素101时，最长递增子序列是[2,5,7,101]或者[2,3,7,101],长度是4。</li><li>当nums再加入一个元素18时，最长递增子序列是[2,5,7,101]或者[2,3,7,101]或者[2,5,7,18]或者[2,3,7,18],长度是4。</li><li>当nums再加入一个元素7时,最长递增子序列是[2,5,7,101]或者[2,3,7,101]或者[2,5,7,18]或者[2,3,7,18],长度是4.</li></ul><h4 id="2-分析找规律，拆分子问题"><a href="#2-分析找规律，拆分子问题" class="headerlink" title="2. 分析找规律，拆分子问题"></a>2. 分析找规律，拆分子问题</h4><p>通过上面分析，我们可以<strong>发现一个规律</strong>：</p><p>如果新加入一个元素nums[i], 最长递增子序列要么<strong>是以nums[i]结尾的递增子序列</strong>，要么就是<strong>nums[i-1]的最长递增子序列</strong>。看到这个，是不是很开心，nums[i]的最长递增子序列已经跟<strong>子问题</strong> nums[i-1]的最长递增子序列有关联了。</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">原问题数组nums[i]的最长递增子序列 = 子问题数组nums[i-1]的最长递增子序列/nums[i]结尾的最长递增子序列</span><br></pre></td></tr></table></figure><p>是不是感觉成功了一半呢？但是<strong>如何把nums[i]结尾的递增子序列也转化为对应的子问题</strong>呢？要是nums[i]结尾的递增子序列也跟nums[i-1]的最长递增子序列有关就好了。又或者nums[i]结尾的最长递增子序列，跟前面子问题num[j]（0&#x3D;&lt;j&lt;i）结尾的最长递增子序列有关就好了，带着这个想法，我们又回头看看穷举的过程：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-f30ec7b249e7d8c9216f49935f5bc25d_720w.jpg" alt="img"></p><p>nums[i]的最长递增子序列，不就是<strong>从以数组num[i]每个元素结尾的最长子序列集合，取元素最多（也就是长度最长）那个嘛</strong>，所以原问题，我们转化成求出以数组nums每个元素结尾的最长子序列集合，再取<strong>最大值</strong>嘛。哈哈，想到这，我们就可以<strong>用dp[i]表示以num[i]这个数结尾的最长递增子序列的长度</strong>啦，然后再来看看其中的规律：</p><p><img src="https://pic4.zhimg.com/80/v2-abfda01a6a07fa930c6760ece8b3e47b_720w.jpg" alt="img"></p><p>其实，<strong>nums[i]结尾的自增子序列，只要找到比nums[i]小的子序列，加上nums[i]</strong> 就可以啦。显然，可能形成多种新的子序列，我们选最长那个，就是dp[i]的值啦</p><blockquote><p>★</p></blockquote><ul><li>nums[3]&#x3D;5,以<code>5</code>结尾的最长子序列就是<code>[2,5]</code>,因为从数组下标<code>0到3</code>遍历，只找到了子序列<code>[2]</code>比<code>5</code>小，所以就是<code>[2]+[5]</code>啦，即<code>dp[4]=2</code></li><li>nums[4]&#x3D;3,以<code>3</code>结尾的最长子序列就是<code>[2,3]</code>,因为从数组下标<code>0到4</code>遍历，只找到了子序列<code>[2]</code>比<code>3</code>小，所以就是<code>[2]+[3]</code>啦，即<code>dp[4]=2</code></li><li>nums[5]&#x3D;7，以<code>7</code>结尾的最长子序列就是<code>[2,5,7]</code>和<code>[2,3,7]</code>,因为从数组下标<code>0到5</code>遍历，找到<code>2,5和3</code>都比7小，所以就有<code>[2,7],[5,7],[3,7],[2,5,7]和[2,3,7]</code>这些子序列，最长子序列就是<code>[2,5,7]和[2,3,7]</code>，它俩不就是以<code>5</code>结尾和<code>3</code>结尾的最长递增子序列+[7]来的嘛！所以，<code>**dp[5]=3 =dp[3]+1=dp[4]+1**</code>。</li></ul><p>”</p><p>很显然有这个规律：一个以nums[i]结尾的数组nums</p><ul><li>如果存在j属于区间[0，i-1],并且num[i]&gt;num[j]的话，则有，dp(i) &#x3D;max(dp(j))+1，</li></ul><h4 id="3-最简单的边界情况"><a href="#3-最简单的边界情况" class="headerlink" title="3. 最简单的边界情况"></a>3. 最简单的边界情况</h4><p>当nums数组只有一个元素时，最长递增子序列的长度dp(1)&#x3D;1,当nums数组有两个元素时，dp(2) &#x3D;2或者1， 因此边界就是dp(1)&#x3D;1。</p><h4 id="4-确定最优子结构"><a href="#4-确定最优子结构" class="headerlink" title="4. 确定最优子结构"></a>4. 确定最优子结构</h4><p>从穷举分析，我们可以得出，以下的最优结构：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">dp(i) =max(dp(j))+1，存在j属于区间[0，i-1],并且num[i]&gt;num[j]。</span><br></pre></td></tr></table></figure><p><strong>max(dp(j))</strong> 就是最优子结构。</p><h4 id="5-状态转移方程"><a href="#5-状态转移方程" class="headerlink" title="5.状态转移方程"></a>5.状态转移方程</h4><p>通过前面分析，我们就可以得出状态转移方程啦：</p><p><img src="https://pic4.zhimg.com/80/v2-6a5bebb12a1c9a69e49e6e35103895f3_720w.jpg" alt="img"></p><p>所以数组num[i]的最长递增子序列就是：</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">最长递增子序列 =max(dp[i])</span><br></pre></td></tr></table></figure><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a><strong>代码实现</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">lengthOfLIS</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[nums.length];</span><br><span class="line">        <span class="comment">//初始化就是边界情况</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">maxans</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//自底向上遍历</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            dp[i] = <span class="number">1</span>;</span><br><span class="line">            <span class="comment">//从下标0到i遍历</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="comment">//找到前面比nums[i]小的数nums[j],即有dp[i]= dp[j]+1</span></span><br><span class="line">                <span class="keyword">if</span> (nums[j] &lt; nums[i]) &#123;</span><br><span class="line">                    <span class="comment">//因为会有多个小于nums[i]的数，也就是会存在多种组合了嘛，我们就取最大放到dp[i]</span></span><br><span class="line">                    dp[i] = Math.max(dp[i], dp[j] + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//求出dp[i]后，dp最大那个就是nums的最长递增子序列啦</span></span><br><span class="line">            maxans = Math.max(maxans, dp[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一个蓝桥杯上的省赛题："><a href="#一个蓝桥杯上的省赛题：" class="headerlink" title="一个蓝桥杯上的省赛题："></a>一个蓝桥杯上的省赛题：</h3><h4 id="题目-2604-蓝桥杯2021年第十二届省赛真题-砝码称重"><a href="#题目-2604-蓝桥杯2021年第十二届省赛真题-砝码称重" class="headerlink" title="题目 2604: 蓝桥杯2021年第十二届省赛真题-砝码称重"></a>题目 2604: 蓝桥杯2021年第十二届省赛真题-砝码称重</h4><p>时间限制: 1Sec 内存限制: 128MB 提交: 1797 解决: 590</p><p><strong>题目描述</strong></p><p>你有一架天平和 N 个砝码，这 N 个砝码重量依次是 W1, W2, · · · , WN。<br>请你计算一共可以称出多少种不同的重量？<br>注意砝码可以放在天平两边。</p><p><strong>输入</strong></p><p>输入的第一行包含一个整数 N。<br>第二行包含 N 个整数：W1, W2, W3, · · · , WN。</p><p><strong>输出</strong></p><p>输出一个整数代表答案。</p><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 4 6</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【样例说明】</span><br><span class="line">能称出的 10 种重量是：1、2、3、4、5、6、7、9、10、11。</span><br><span class="line">1 = 1；</span><br><span class="line">2 = 6 4 (天平一边放 6，另一边放 4)；</span><br><span class="line">3 = 4 1；</span><br><span class="line">4 = 4；</span><br><span class="line">5 = 6 1；</span><br><span class="line">6 = 6；</span><br><span class="line">7 = 1 + 6；</span><br><span class="line">9 = 4 + 6 1；</span><br><span class="line">10 = 4 + 6；</span><br><span class="line">11 = 1 + 4 + 6。</span><br></pre></td></tr></table></figure><p>【评测用例规模与约定】<br>对于 50% 的评测用例，1 ≤ N ≤ 15。<br>对于所有评测用例，1 ≤ N ≤ 100，N 个砝码总重不超过 100000。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">状态转移方程就是:</span><br><span class="line">dp[i]的全部可能=dp[i-1]+和以前的加减新组合</span><br></pre></td></tr></table></figure><p>代码实现：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> class 砝码称重 &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> N;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] W;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> COUNT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        N = scanner.nextInt();</span><br><span class="line">        W = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            sum += W[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        COUNT = sum;</span><br><span class="line">        <span class="comment">//Arrays.sort(W);</span></span><br><span class="line">        dpFaMa();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    状态转移方程就是:</span></span><br><span class="line"><span class="comment">    dp[i]的全部可能=dp[i-1]+和以前的加减新组合</span></span><br><span class="line"><span class="comment">    数组dp[i]的大小为全部砝码的总和  COUNT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dpFaMa</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[W.length][COUNT + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; W.length; i++) &#123;</span><br><span class="line">            <span class="comment">//对于dp数组的初始化  对于目标为0的配重 都置为true</span></span><br><span class="line">            <span class="comment">// 对于每一行和砝码重量相同的目标配重也置为true</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">            dp[i][W[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从第二块砝码开始递推</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">            <span class="comment">//第一列配重为0跳过</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; COUNT + <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="comment">//加当前砝码w[i]之前,就存在的;</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i - <span class="number">1</span>][j]) &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//情况一:砝码和j在一起</span></span><br><span class="line">                <span class="keyword">if</span> (W[i] + j &lt;= COUNT &amp;&amp; dp[i - <span class="number">1</span>][W[i] + j]) &#123;</span><br><span class="line">                    <span class="comment">//当前砝码和目标都放到同一边,然后有已经可以测的重量在另一侧</span></span><br><span class="line">                    <span class="comment">//还有个限制,就是当前砝码,和当前测量j之和不能超过总重,即数组的总重;</span></span><br><span class="line">                    <span class="comment">//如果有的话,当前j就能true</span></span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//情况二:砝码和j分开</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i - <span class="number">1</span>][Math.abs(j - W[i])]) &#123;</span><br><span class="line">                    <span class="comment">//j可以被当前砝码和以前的砝码组成,</span></span><br><span class="line">                    <span class="comment">//或者j加以前的砝码等于当前砝码;</span></span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= COUNT; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[N - <span class="number">1</span>][i]) &#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> dp动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spingclouds的学习</title>
      <link href="/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dspingclouds%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dspingclouds%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java后端 </tag>
            
            <tag> springclouds </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JUC并发</title>
      <link href="/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5DJUC%E5%B9%B6%E5%8F%91/"/>
      <url>/2022/03/24/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5DJUC%E5%B9%B6%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>可以跟着视频走:</p><p><a href="https://www.bilibili.com/video/BV1Kw411Z7dF?spm_id_from=333.999.0.0">尚硅谷传送门</a></p><p>跟着这两个博客走一下:</p><p><a href="https://juejin.cn/post/6997767449567313927">掘金传送门</a></p><p><a href="https://blog.csdn.net/weixin_47872288/article/details/119453092">csdn传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JUC </tag>
            
            <tag> 并发 </tag>
            
            <tag> java后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CI配置文件.gitlab-ci.yaml详解</title>
      <link href="/2022/03/24/gitlab%E4%B8%AD%E7%9A%84ci.yaml%E6%96%87%E4%BB%B6/"/>
      <url>/2022/03/24/gitlab%E4%B8%AD%E7%9A%84ci.yaml%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉，这个密码看着不太对，请再试试。" data-whm="抱歉，这个文章不能被纠正，不过您还是能看看解密后的内容。">  <script id="hbeData" type="hbeData" data-hmacdigest="ae76a4d3e26e3ad2f9d2177e1d130b9c2dfea1465c8c1c41dea609d2b2204302"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">您好，博主可能还没写完，所以这里需要密码。</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 私密文章 </category>
          
          <category> gitlab </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitlab </tag>
            
            <tag> CI </tag>
            
            <tag> 配置 </tag>
            
            <tag> 私密文章 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx学习</title>
      <link href="/2022/03/24/nginx%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/03/24/nginx%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p> <a href="https://lark-assets-prod-aliyun.oss-cn-hangzhou.aliyuncs.com/yuque/0/2021/pdf/22423156/1635859606986-cb7e317b-c3ad-4c6e-8872-7846d50cef30.pdf?OSSAccessKeyId=LTAI4GGhPJmQ4HWCmhDAn4F5&Expires=1648095724&Signature=1Ji7GOGzEc3N0fG1O/GH7S8ViXw=&response-content-disposition=attachment;filename*=UTF-8%27%27nginx%25E8%25AF%25BE%25E4%25BB%25B6v1.0.pdf#view=FitH,to&toolbar=0">nginx课堂课件</a></p><p><a href="https://lark-assets-prod-aliyun.oss-cn-hangzhou.aliyuncs.com/yuque/0/2021/pdf/22423156/1635859615340-7a4a8130-533f-4db5-8152-f253335336df.pdf?OSSAccessKeyId=LTAI4GGhPJmQ4HWCmhDAn4F5&Expires=1648095960&Signature=VZQfAeVhyf8RXu1aKYboWz3MHoQ=&response-content-disposition=attachment;filename*=UTF-8%27%27nginx%25E8%25AF%25BE%25E5%25A0%2582%25E7%25AC%2594%25E8%25AE%25B0.pdf#view=FitH,to&toolbar=0">nginx课堂笔记</a></p><p><a href="https://blog.csdn.net/xj0927/category_10548178.html">传送门</a></p><h1 id="一、Nginx简介"><a href="#一、Nginx简介" class="headerlink" title="一、Nginx简介"></a>一、Nginx简介</h1><ul><li>Nginx是什么，做什么事情</li><li>反向代理</li><li>负载均衡</li><li>动静分离</li></ul><h2 id="1-1-Nginx概述"><a href="#1-1-Nginx概述" class="headerlink" title="1.1 Nginx概述"></a>1.1 Nginx概述</h2><p>Nginx (“engine x”) 是一个<strong>高性能的 HTTP 和反向代理服务器</strong>,特点是占有<strong>内存少</strong>，<strong>并发能力强</strong>，事实上 nginx 的并发能力确实在同类型的网页服务器中表现较好。</p><h2 id="1-2-Nginx-作为-web-服务器"><a href="#1-2-Nginx-作为-web-服务器" class="headerlink" title="1.2 Nginx 作为 web 服务器"></a>1.2 Nginx 作为 web 服务器</h2><p>Nginx 可以作为静态页面的 web 服务器，同时还支持 CGI 协议的动态语言，比如 perl、php等。但是不支持 java。Java 程序只能通过与 tomcat 配合完成。Nginx 专为性能优化而开发，性能是其最重要的考量,实现上非常注重效率 ，能经受高负载的考验,有报告表明能支持高达 50,000 个并发连接数。</p><h2 id="1-3-正向代理"><a href="#1-3-正向代理" class="headerlink" title="1.3 正向代理"></a>1.3 正向代理</h2><p>如果把局域网外的 Internet 想象成一个巨大的资源库，则局域网中的客户端要访问 Internet，则需要通过代理服务器来访问，这种代理服务就称为正向代理。</p><p>在客户端（浏览器）配置代理服务器，通过代理服务器进行互联网访问。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635861095719-3ab68f46-3e0a-467c-ad41-880df6af010a.png" alt="img"></p><h2 id="1-4-反向代理"><a href="#1-4-反向代理" class="headerlink" title="1.4 反向代理"></a>1.4 反向代理</h2><p>反向代理中，客户端对代理无感知（客户端不知道进行了代理），因为客户端不需要进行任何配置就可以访问，我们只需要将请求发送到反向代理服务器，由反向代理服务器去选择目标服务器获取数据后，在返回给客户端，此时反向代理服务器和目标服务器对外就是一个服务器，<strong>暴露的是代理服务器地址，隐藏了真实服务器 IP 地址</strong>。</p><p>通俗的来讲，反向代理服务器就类似于中介，请求尽管发给中介，然后中介给你反馈，至于中介是如何进行工作的，客户端不需要知道。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635861557065-e6f5d248-d805-48e1-802c-081ca3239c5d.png" alt="img"></p><h2 id="1-5-负载均衡"><a href="#1-5-负载均衡" class="headerlink" title="1.5 负载均衡"></a>1.5 负载均衡</h2><p>客户端发送多个请求到服务器，服务器处理请求，有一些可能要与数据库进行交互，服务器处理完毕后，再将结果返回给客户端。这种模式在高并发情况下，服务器会崩溃。</p><p>因此通过增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器上的情况改为将请求分发到多个服务器上，将<strong>负载分发到不同的服务器，也就是我们所说的负载均衡。</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635862109006-3cb1e77d-17da-455f-941c-77973f419ed7.png" alt="img"></p><h2 id="1-6-动静分离"><a href="#1-6-动静分离" class="headerlink" title="1.6 动静分离"></a>1.6 动静分离</h2><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度。降低原来单个服务器的压力。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220324151030346.png" alt="image-20220324151030346"></p><h1 id="二、Nginx的安装-Linux"><a href="#二、Nginx的安装-Linux" class="headerlink" title="二、Nginx的安装 Linux"></a>二、Nginx的安装 Linux</h1><h2 id="2-1-进入Nginx官网，下载"><a href="#2-1-进入Nginx官网，下载" class="headerlink" title="2.1 进入Nginx官网，下载"></a>2.1 进入Nginx官网，下载</h2><p>官网：<a href="http://nginx.org/">http://nginx.org/</a></p><h2 id="2-2-安装Nginx"><a href="#2-2-安装Nginx" class="headerlink" title="2.2 安装Nginx"></a>2.2 安装Nginx</h2><p>先查看是否安装了gcc   <code>gcc -v</code></p><p>如果没有安装 执行  <code>yum -y install gcc gcc-c++</code></p><p>在安装Nginx之前需要的依赖：pcre、openssl、zlib</p><p>通过yum直接安装以上即可，执行以下命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install pcre pcre-devel openssl openssl-devel zlib zlib-devel</span><br></pre></td></tr></table></figure><p>我把Nginx的压缩包放在了  &#x2F;user&#x2F;local&#x2F;moudle 下</p><p>cd到 &#x2F;user&#x2F;local&#x2F;moudle</p><p>解压下载的Nginx压缩包 <code> tar -zxvf  nginx-1.20.1.tar.gz</code></p><p>cd到 nginx-1.20.1目录下</p><p>然后分别执行以下命令</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>然后Nginx就安装在了 &#x2F;user&#x2F;local&#x2F;nginx 目录下</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635907807491-6e05b71d-584f-48f5-bd6d-1c56011b7b0b.png" alt="image.png"></p><h2 id="2-3-nginx-常用的命令和配置文件"><a href="#2-3-nginx-常用的命令和配置文件" class="headerlink" title="2.3 nginx 常用的命令和配置文件"></a>2.3 nginx 常用的命令和配置文件</h2><h3 id="Nginx常用的命令"><a href="#Nginx常用的命令" class="headerlink" title="Nginx常用的命令"></a>Nginx常用的命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看nginx的版本号</span></span><br><span class="line">nginx -v</span><br><span class="line"><span class="comment"># 启动nginx</span></span><br><span class="line">nginx</span><br><span class="line"><span class="comment"># 关闭nginx</span></span><br><span class="line">nginx -s stop</span><br><span class="line"><span class="comment"># 重新加载nginx</span></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h2 id="Nginx的配置文件"><a href="#Nginx的配置文件" class="headerlink" title="Nginx的配置文件"></a>Nginx的配置文件</h2><p>我的阿里云服务器上面的nginx.conf文件中的内容</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user  www www;</span><br><span class="line">worker_processes auto;</span><br><span class="line">error_log  /www/wwwlogs/nginx_error.log  crit;</span><br><span class="line">pid        /www/server/nginx/logs/nginx.pid;</span><br><span class="line">worker_rlimit_nofile 51200;</span><br><span class="line"></span><br><span class="line">stream &#123;</span><br><span class="line">    log_format tcp_format &#x27;$time_local|$remote_addr|$protocol|$status|$bytes_sent|$bytes_received|$session_time|$upstream_addr|$upstream_bytes_sent|$upstream_bytes_received|$upstream_connect_time&#x27;;</span><br><span class="line">  </span><br><span class="line">    access_log /www/wwwlogs/tcp-access.log tcp_format;</span><br><span class="line">    error_log /www/wwwlogs/tcp-error.log;</span><br><span class="line">    include /www/server/panel/vhost/nginx/tcp/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">events</span><br><span class="line">    &#123;</span><br><span class="line">        use epoll;</span><br><span class="line">        worker_connections 51200;</span><br><span class="line">        multi_accept on;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">http</span><br><span class="line">    &#123;</span><br><span class="line">        include       mime.types;</span><br><span class="line">#include luawaf.conf;</span><br><span class="line"></span><br><span class="line">include proxy.conf;</span><br><span class="line"></span><br><span class="line">        default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">        server_names_hash_bucket_size 512;</span><br><span class="line">        client_header_buffer_size 32k;</span><br><span class="line">        large_client_header_buffers 4 32k;</span><br><span class="line">        client_max_body_size 50m;</span><br><span class="line"></span><br><span class="line">        sendfile   on;</span><br><span class="line">        tcp_nopush on;</span><br><span class="line"></span><br><span class="line">        keepalive_timeout 60;</span><br><span class="line"></span><br><span class="line">        tcp_nodelay on;</span><br><span class="line"></span><br><span class="line">        fastcgi_connect_timeout 300;</span><br><span class="line">        fastcgi_send_timeout 300;</span><br><span class="line">        fastcgi_read_timeout 300;</span><br><span class="line">        fastcgi_buffer_size 64k;</span><br><span class="line">        fastcgi_buffers 4 64k;</span><br><span class="line">        fastcgi_busy_buffers_size 128k;</span><br><span class="line">        fastcgi_temp_file_write_size 256k;</span><br><span class="line">fastcgi_intercept_errors on;</span><br><span class="line"></span><br><span class="line">        gzip on;</span><br><span class="line">        gzip_min_length  1k;</span><br><span class="line">        gzip_buffers     4 16k;</span><br><span class="line">        gzip_http_version 1.1;</span><br><span class="line">        gzip_comp_level 2;</span><br><span class="line">        gzip_types     text/plain application/javascript application/x-javascript text/javascript text/css application/xml;</span><br><span class="line">        gzip_vary on;</span><br><span class="line">        gzip_proxied   expired no-cache no-store private auth;</span><br><span class="line">        gzip_disable   &quot;MSIE [1-6]\.&quot;;</span><br><span class="line"></span><br><span class="line">        limit_conn_zone $binary_remote_addr zone=perip:10m;</span><br><span class="line">limit_conn_zone $server_name zone=perserver:10m;</span><br><span class="line"></span><br><span class="line">        server_tokens off;</span><br><span class="line">        access_log off;</span><br><span class="line"></span><br><span class="line">server</span><br><span class="line">    &#123;</span><br><span class="line">        listen 888;</span><br><span class="line">        server_name phpmyadmin;</span><br><span class="line">        index index.html index.htm index.php;</span><br><span class="line">        root  /www/server/phpmyadmin;</span><br><span class="line">            location ~ /tmp/ &#123;</span><br><span class="line">                return 403;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        #error_page   404   /404.html;</span><br><span class="line">        include enable-php.conf;</span><br><span class="line"></span><br><span class="line">        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class="line">        &#123;</span><br><span class="line">            expires      30d;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ .*\.(js|css)?$</span><br><span class="line">        &#123;</span><br><span class="line">            expires      12h;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location ~ /\.</span><br><span class="line">        &#123;</span><br><span class="line">            deny all;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        access_log  /www/wwwlogs/access.log;</span><br><span class="line">    &#125;</span><br><span class="line">include /www/server/panel/vhost/nginx/*.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Nginx的配置文件由三部分组成：</p><ul><li><p>第一部分 全局块</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">从配置文件开始到events块之间的内容，</span><br><span class="line">主要会设置一些影响nginx服务器整体运行的配置指令，</span><br><span class="line">主要包括配置运行</span><br><span class="line"><span class="bullet">*</span> Nginx服务器的用户（组），</span><br><span class="line"><span class="bullet">*</span> 允许生产的worker process数，</span><br><span class="line"><span class="bullet">*</span> 进程PID存放路径、</span><br><span class="line"><span class="bullet">*</span> 日志存放路径和</span><br><span class="line"><span class="bullet">*</span> 类似以及配置文件的引入等</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是Nginx服务器并发处理服务的关键配置</span></span><br><span class="line"><span class="comment"># worker_processes值越大，可以支持的并发处理量也越多，但是会受到硬件、软件等设备的制约</span></span><br><span class="line"><span class="attribute">worker_processes</span> <span class="number">1</span>;</span><br></pre></td></tr></table></figure></li><li><p>第二部分 events块</p><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">enevnts块设计的指令主要影响Nginx服务器与用户的网络连接</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">worker_connections</span> <span class="number">1024</span>;   <span class="comment">#表示nginx支持最大的连接数为1024</span></span><br></pre></td></tr></table></figure></li><li><p>第三部分 http块</p></li></ul><p>这算是Nginx服务器配置中最频繁的部分，代理、缓存和日志定义等绝大多数功能和第三方模块的配置都在里面</p>  <figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">http块包括http全局块、server块</span><br></pre></td></tr></table></figure><p>  <strong>http全局块：</strong></p><p>   http全局快配置的指令包括<strong>文件的引入</strong>、<strong>MIME-TYPE定义</strong>、<strong>日志自定义</strong>、<strong>连接超时时间</strong>、<strong>单链接请求数上限</strong>等。</p><p>  <strong>server块：</strong></p><blockquote><p>每个http块可以包括多个server块，而每个server块就相当于一个虚拟主机。</p><p>而每个server块也分为全局server块和localtion块</p></blockquote><ul><li><p>全局server块</p><p>最常见的配置是本虚拟机主机的监听配置和本虚拟机的名称和IP配置</p></li><li><p>location块</p><p>一个server块可以配置多个location块</p><p>这块的主要作用是基于Nginx服务器接收到的请求字符串（例如server_name&#x2F;uri-string），对虚拟主机名称（也可以是IP别名）之外的字符串（例如前面的&#x2F;uri-string）进行匹配，对特定的请求进行处理。地址定向、数据缓存和应答控制等功能，还有许多第三方的模块配置也在这里进行。</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1636094522321-ffc6642d-1d25-4d53-830e-07e99c8ddbf7.png" alt="image.png"></p><h1 id="三、nginx-配置实例-反向代理"><a href="#三、nginx-配置实例-反向代理" class="headerlink" title="三、nginx 配置实例-反向代理"></a>三、nginx 配置实例-反向代理</h1><h2 id="3-1-前置准备——tomcat安装"><a href="#3-1-前置准备——tomcat安装" class="headerlink" title="3.1 前置准备——tomcat安装"></a>3.1 前置准备——tomcat安装</h2><p>使用nginx反向代理，访问<a href="http://www.123.com/">www.123.com</a> 直接跳转到localhost:8080，再此之前需要在Linux上装tomcat。</p><ul><li>tomcat安装文件放到Linux系统中，解压</li><li>进入tomcat的bin目录，<code>./startup.sh</code> 启动tomcat服务器</li></ul><p>log文件夹下执行<code>tail -f catalina.out</code> 可以查看日志</p><p>同样，这里需要在防火墙添加远程访问窗口（我直接把防火墙关闭了，所以不需要设置）</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">firewall-cmd --add-port=8080/tcp --permanent</span><br><span class="line">firewall-cmd –reload</span><br></pre></td></tr></table></figure><p>通过windows的浏览器访问tomcat的主页，访问成功</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635924569900-29d55075-0f68-44e4-8038-3f63ce116e45.png" alt="img"></p><h2 id="3-2-配置反向代理实例（一）"><a href="#3-2-配置反向代理实例（一）" class="headerlink" title="3.2 配置反向代理实例（一）"></a>3.2 配置反向代理实例（一）</h2><h3 id="3-2-1-访问过程分析："><a href="#3-2-1-访问过程分析：" class="headerlink" title="3.2.1 访问过程分析："></a>3.2.1 访问过程分析：</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635924846707-0b445ef9-1d06-41a6-a169-3e68a3ff4eb5.png" alt="img"></p><h3 id="3-2-2-具体操作"><a href="#3-2-2-具体操作" class="headerlink" title="3.2.2 具体操作"></a>3.2.2 具体操作</h3><h4 id="1-修改windows的hosts文件"><a href="#1-修改windows的hosts文件" class="headerlink" title="(1) 修改windows的hosts文件"></a>(1) 修改windows的hosts文件</h4><p>修改windows端host文件，使<a href="http://www.123.com跟虚拟机上的ip映射起来/">www.123.com跟虚拟机上的Ip映射起来</a></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635925030883-8400a093-d31d-45a3-a2f4-ca6d3d4f8d6e.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635925121611-fe647302-0bab-43b5-b546-aa5d427f57bf.png" alt="img"></p><p>前面的IP地址是我自己虚拟机的IP</p><h4 id="2-在nginx进行请求转发的配置（反向代理配置）"><a href="#2-在nginx进行请求转发的配置（反向代理配置）" class="headerlink" title="(2) 在nginx进行请求转发的配置（反向代理配置）"></a>(2) 在nginx进行请求转发的配置（反向代理配置）</h4><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635926048705-ba2e69fa-f442-40f1-99c6-fcbbfe2a86d9.png" alt="img"></p><p>修改完成后保存，重启nginx。</p><h3 id="3-2-3-测试"><a href="#3-2-3-测试" class="headerlink" title="3.2.3 测试"></a>3.2.3 测试</h3><p>访问<a href="http://www.123.com/">www.123.com</a></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635926260979-8bf4b5c8-4caf-4e65-8795-cc18af750cf2.png" alt="img"></p><p>测试成功！</p><h2 id="3-3-配置反向代理实例（二）"><a href="#3-3-配置反向代理实例（二）" class="headerlink" title="3.3 配置反向代理实例（二）"></a>3.3 配置反向代理实例（二）</h2><p>实现效果：使用 nginx 反向代理，根据访问的路径跳转到不同端口的服务中。</p><p>nginx 监听端口为 9001，</p><p>访问 <a href="http://127.0.0.1:9001/edu/">http://127.0.0.1:9001/edu/</a> 直接跳转到 127.0.0.1:8080</p><p>访问 <a href="http://127.0.0.1:9001/vod/">http://127.0.0.1:9001/vod/</a> 直接跳转到 127.0.0.1:8081</p><h3 id="3-3-1-准备工作"><a href="#3-3-1-准备工作" class="headerlink" title="3.3.1 准备工作"></a>3.3.1 准备工作</h3><h4 id="准备两个tomcat服务器，一个8080端口，一个8081端口"><a href="#准备两个tomcat服务器，一个8080端口，一个8081端口" class="headerlink" title="准备两个tomcat服务器，一个8080端口，一个8081端口"></a>准备两个tomcat服务器，一个8080端口，一个8081端口</h4><p>在&#x2F;usr&#x2F;local 下新建一个tomcat8081，加tomcat解压到8081中。</p><p>进入tomcat8081的conf文件夹</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635927975973-941af423-b377-48ca-8264-1e3601f35ff5.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635927978484-9482102b-5f0c-4a2f-83bd-c94ec89a581a.png" alt="img"></p><p>保存后启动tomcat8081。然后再启动8080</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635928106349-9d1e1383-9069-4e98-a413-60655e18b0af.png" alt="img"><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635928123196-3ffb4eb2-dd99-4c84-9b50-8268312e5d82.png" alt="img"></p><p>现在就有两个tomcat了。</p><h4 id="创建文件夹和测试页面"><a href="#创建文件夹和测试页面" class="headerlink" title="创建文件夹和测试页面"></a>创建文件夹和测试页面</h4><p>在8080的tomcat  &#x2F;usr&#x2F;local&#x2F;apache-tomcat-8.5.72&#x2F;webapps 下创建&#x2F;edu文件夹</p><p>在里面创建一个a.html文件  touch a.html</p><p>写入 <h1>8080!!</h1></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635928686765-10d10489-02de-4817-8b6a-d5fbd8343226.png" alt="img"></p><p>同样，在8081的tomcat  &#x2F;webapps 下创建&#x2F;vod文件夹 将a.html 复制过来 里面改成8081</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635928867431-480bb0ee-5e47-4cb0-8db1-49f7b664a52e.png" alt="img"></p><h3 id="3-3-2-nginx-conf-反向代理配置"><a href="#3-3-2-nginx-conf-反向代理配置" class="headerlink" title="3.3.2 nginx.conf 反向代理配置"></a>3.3.2 nginx.conf 反向代理配置</h3><p>&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf 下nginx.conf 文件</p><p>之前我们配置了一个server</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635929174082-166be11e-5ad5-4f71-a51a-cc651b35879f.png" alt="img"></p><p>现在我们需要新加上一个server</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635930983051-d7717f87-81ae-419b-961a-55542cb3cd15.png" alt="img"></p><p>~后面的&#x2F;edu&#x2F;跟 &#x2F;vod&#x2F;是正则表达式</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635930571772-3d405da0-d667-4263-829e-9820ddb44e2e.png" alt="img"></p><p>同样需要开放9001端口号对外访问（关闭了防火墙就略过）</p><p>firewall-cmd –add-port&#x3D;9001&#x2F;tcp –permanent</p><p>firewall-cmd –add-port&#x3D;8081&#x2F;tcp –permanent</p><p>firewall-cmd –reload</p><p>重启nginx。</p><h3 id="3-3-3-测试"><a href="#3-3-3-测试" class="headerlink" title="3.3.3 测试"></a>3.3.3 测试</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635932029972-f20d03a5-de30-4b8d-a26b-c2b8d04756d7.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635932041346-ad902c4a-ce10-4d7e-9485-ee088f3e3934.png" alt="img"></p><h1 id="四、-nginx-配置实例-负载均衡"><a href="#四、-nginx-配置实例-负载均衡" class="headerlink" title="四、 nginx 配置实例-负载均衡"></a>四、 nginx 配置实例-负载均衡</h1><p>浏览器访问<a href="http://www.123.com:9001/edu/a.html%EF%BC%8C%E5%AE%9E%E7%8E%B0%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%EF%BC%8C%E5%B0%86%E8%AF%B7%E6%B1%82%E5%B9%B3%E5%9D%87%E5%88%86%E6%91%8A%E5%88%B08080%E5%92%8C8081%E4%B8%8A">http://www.123.com:9001/edu/a.html，实现负载均衡，将请求平均分摊到8080和8081上</a></p><h2 id="4-1-准备工作"><a href="#4-1-准备工作" class="headerlink" title="4.1 准备工作"></a>4.1 准备工作</h2><p>需要准备两台tomcat服务器，一台8080，一台8081，之前已经配置过了。</p><p>在两台 tomcat 里面 webapps 目录中，创建名称是 edu 文件夹，在 edu 文件夹中创建</p><p>页面 a.html，用于测试。</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22423156/1635943534388-6cfeb344-fe70-4bc5-b651-9bb319eb70e1.png" alt="img"></p><h2 id="4-2-在-nginx-的配置文件中进行负载均衡的配置"><a href="#4-2-在-nginx-的配置文件中进行负载均衡的配置" class="headerlink" title="4.2 在 nginx 的配置文件中进行负载均衡的配置"></a>4.2 在 nginx 的配置文件中进行负载均衡的配置</h2><p>在&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf 目录下将<code>nginx.conf</code>配置文件复制为<code>nginx_lb.conf</code>配置文件，用来作为负载均衡的配置文件。</p><p>对负载均衡的配置进行修改，在http块中加上如下配置：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">......</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">负载均衡集群配置 命名为myserver</span></span><br><span class="line">upstream myserver &#123;</span><br><span class="line">    server 192.168.190.131:8080;</span><br><span class="line">        server 192.168.190.131:8081;</span><br><span class="line">    &#125;</span><br><span class="line">......</span><br><span class="line">    server &#123;</span><br><span class="line">    location / &#123;</span><br><span class="line">      ......</span><br><span class="line">          proxy_pass http://myserver; # 代理到我们创建的负载均衡集群上</span><br><span class="line">          ......</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635944748204-884886e9-dc77-4d18-8073-3b4b7bb2cb37.png" alt="image.png"></p><p>cd 到nginx的sbin文件下</p><p>执行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -t -c /usr/local/nginx/conf/nginx_lb.conf</span><br></pre></td></tr></table></figure><p>测试我们刚才编辑的配置文件有没有错误。 <img src="https://cdn.nlark.com/yuque/0/2021/png/22423156/1635945821599-625db282-daee-4a1f-94c1-43526067b56e.png" alt="image.png"></p><p>指定nginx以<code>nginx_lb.conf</code>配置启动</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -c /usr/local/nginx/conf/nginx_lb.conf</span><br></pre></td></tr></table></figure><p>测试，实现了负载均衡。</p><h2 id="4-3-nginx提供了几种不同的负载均衡策略"><a href="#4-3-nginx提供了几种不同的负载均衡策略" class="headerlink" title="4.3 nginx提供了几种不同的负载均衡策略"></a>4.3 nginx提供了几种不同的负载均衡策略</h2><h3 id="4-3-1-轮询（默认）"><a href="#4-3-1-轮询（默认）" class="headerlink" title="4.3.1 轮询（默认）"></a>4.3.1 轮询（默认）</h3><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器 down 掉，能自动剔除。</p><h3 id="4-3-2-weight"><a href="#4-3-2-weight" class="headerlink" title="4.3.2 weight"></a>4.3.2 weight</h3><p>weight 代表权,重默认为 1,权重越高被分配的客户端越多；指定轮询几率，weight 和访问比率成正比，用于后端服务器性能不均的情况。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upstream server_pool&#123; </span><br><span class="line">    server 192.168.5.21 weight=10; </span><br><span class="line">    server 192.168.5.22 weight=10; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-3-ip-hash"><a href="#4-3-3-ip-hash" class="headerlink" title="4.3.3 ip_hash"></a>4.3.3 ip_hash</h3><p>每个请求按访问 ip 的 hash 结果分配，这样每个访客固定访问一个后端服务器，可以解决 session 的问题。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upstream server_pool&#123; </span><br><span class="line">    ip_hash; </span><br><span class="line">    server 192.168.5.21:80; </span><br><span class="line">    server 192.168.5.22:80; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-4-fair"><a href="#4-3-4-fair" class="headerlink" title="4.3.4 fair"></a>4.3.4 fair</h3><p>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">upstream server_pool&#123; </span><br><span class="line">    server 192.168.5.21:80; </span><br><span class="line">    server 192.168.5.22:80; </span><br><span class="line">    fair; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、nginx-配置实例-动静分离"><a href="#五、nginx-配置实例-动静分离" class="headerlink" title="五、nginx 配置实例-动静分离"></a>五、nginx 配置实例-动静分离</h1><h2 id="5-1-动静分离的概念"><a href="#5-1-动静分离的概念" class="headerlink" title="5.1 动静分离的概念"></a>5.1 动静分离的概念</h2><p>Nginx 动静分离简单来说就是<strong>把动态跟静态请求分开</strong>，不能理解成只是单纯的把动态页面和静态页面物理分离。严格意义上说应该是<strong>动态请求（通过tomcat查询数据库）</strong>跟<strong>静态请求（访问html文件）</strong>分开，可以理解成使用 <strong>Nginx 处理静态页面</strong>，<strong>Tomcat 处理动态页面</strong>。</p><p>动静分离从目前实现角度来讲大致分为两种：</p><ul><li>一种是纯粹把静态文件独立成单独的域名，放在独立的服务器上，也是目前主流推崇的方案；</li><li>另外一种方法就是动态跟静态文件混合在一起发布，通过 nginx 来分开。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635949438895-339d78cd-8eb5-4471-8d14-5b70dd3f3255.png" alt="image.png">通过 location 指定不同的后缀名实现不同的请求转发。通过 expires 参数设置，可以使浏览器缓存过期时间，减少与服务器之前的请求和流量。具体 Expires 定义：是给一个资源设定一个过期时间，也就是说无需去服务端验证，直接通过浏览器自身确认是否过期即可，所以不会产生额外的流量。此种方法非常适合不经常变动的资源。（如果经常更新的文件，不建议使用 Expires 来缓存)，我这里设置 3d，表示在这 3 天之内访问这个 URL，发送一个请求，<strong>比对服务器该文件最后更新时间没有变化，则不会从服务器抓取，返回状态码 304，如果有修改，则直接从服务器重新下载，返回状态码 200。</strong></p><h2 id="5-2-准备工作"><a href="#5-2-准备工作" class="headerlink" title="5.2 准备工作"></a>5.2 准备工作</h2><p>在Linux系统中准备一些静态资源，用于访问。在根目录下创建data文件夹，data文件夹下创建两个文件夹image和page分别存放图片和网页</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635950056018-95fb8b7f-1c4b-459f-a4ee-0b8c13602a22.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635950064343-c31c6c45-bb99-4426-b1b2-c6cc6100dd4c.png" alt="img"></p><h2 id="5-3-具体配置"><a href="#5-3-具体配置" class="headerlink" title="5.3 具体配置"></a>5.3 具体配置</h2><p>复制一份nginx.conf，重命名为nginx_ds.conf作为动静分离的配置文件。</p><p>修改配置文件</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635950550162-26abb624-6ba6-4f46-a972-2b0dbecc2476.png" alt="img"></p><p>然后指定以nginx_ds.conf配置文件重启nginx</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">./nginx -c /usr/local/nginx/conf/nginx_ds.conf</span><br></pre></td></tr></table></figure><h2 id="5-4-测试"><a href="#5-4-测试" class="headerlink" title="5.4 测试"></a>5.4 测试</h2><p>浏览器访问<a href="http://192.168.190.131/image/01.jpg">http://192.168.190.131/image/01.jpg</a>  <a href="http://192.168.190.131/page/a.html">http://192.168.190.131/page/a.html</a></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635951078771-8cc0bd8a-e5a5-4823-b158-1d48ef0d781f.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635951115528-45bbe75a-358b-474d-968f-1fcdecb96c67.png" alt="img"></p><p>我们访问<a href="http://192.168.190.131/image/">http://192.168.190.131/image/</a>  可以看到把image文件夹下的文件列出来了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1635951190235-6696a8a5-eae4-419c-9c8d-d0bfd2206b94.png" alt="img"></p><p>因为配置文件配置了 <code>autoindex on</code>  这个的意思就是列出当前文件夹中的内容，page文件夹就不行。</p><h1 id="六、集群的搭建"><a href="#六、集群的搭建" class="headerlink" title="六、集群的搭建"></a>六、集群的搭建</h1><p><a href="https://blog.csdn.net/XJ0927/article/details/109501333">传送门</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java后端 </tag>
            
            <tag> nginx </tag>
            
            <tag> 代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蓝桥杯原题刷</title>
      <link href="/2022/03/22/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5D%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AE%AD%E7%BB%83%E9%A2%98%E9%9B%86/"/>
      <url>/2022/03/22/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5D%E8%93%9D%E6%A1%A5%E6%9D%AF%E8%AE%AD%E7%BB%83%E9%A2%98%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h4 id="题目-2604-蓝桥杯2021年第十二届省赛真题-砝码称重"><a href="#题目-2604-蓝桥杯2021年第十二届省赛真题-砝码称重" class="headerlink" title="题目 2604: 蓝桥杯2021年第十二届省赛真题-砝码称重"></a>题目 2604: 蓝桥杯2021年第十二届省赛真题-砝码称重</h4><p>时间限制: 1Sec 内存限制: 128MB 提交: 1797 解决: 590</p><p><strong>题目描述</strong></p><p>你有一架天平和 N 个砝码，这 N 个砝码重量依次是 W1, W2, · · · , WN。<br>请你计算一共可以称出多少种不同的重量？<br>注意砝码可以放在天平两边。</p><p><strong>输入</strong></p><p>输入的第一行包含一个整数 N。<br>第二行包含 N 个整数：W1, W2, W3, · · · , WN。</p><p><strong>输出</strong></p><p>输出一个整数代表答案。</p><p>样例输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">1 4 6</span><br></pre></td></tr></table></figure><p>样例输出</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><p><strong>提示</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【样例说明】</span><br><span class="line">能称出的 10 种重量是：1、2、3、4、5、6、7、9、10、11。</span><br><span class="line">1 = 1；</span><br><span class="line">2 = 6 4 (天平一边放 6，另一边放 4)；</span><br><span class="line">3 = 4 1；</span><br><span class="line">4 = 4；</span><br><span class="line">5 = 6 1；</span><br><span class="line">6 = 6；</span><br><span class="line">7 = 1 + 6；</span><br><span class="line">9 = 4 + 6 1；</span><br><span class="line">10 = 4 + 6；</span><br><span class="line">11 = 1 + 4 + 6。</span><br></pre></td></tr></table></figure><p>【评测用例规模与约定】<br>对于 50% 的评测用例，1 ≤ N ≤ 15。<br>对于所有评测用例，1 ≤ N ≤ 100，N 个砝码总重不超过 100000。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"><span class="keyword">public</span> class 砝码称重 &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> N;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] W;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> COUNT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">        N = scanner.nextInt();</span><br><span class="line">        W = <span class="keyword">new</span> <span class="title class_">int</span>[N];</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line">            sum += W[i] = scanner.nextInt();</span><br><span class="line">        &#125;</span><br><span class="line">        COUNT = sum;</span><br><span class="line">        <span class="comment">//Arrays.sort(W);</span></span><br><span class="line">        dpFaMa();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    最优子结构就是:</span></span><br><span class="line"><span class="comment">    dp[i]的全部可能=dp[i-1]+和以前的加减新组合</span></span><br><span class="line"><span class="comment">    数组dp[i]的大小为全部砝码的总和  COUNT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dpFaMa</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[][] dp = <span class="keyword">new</span> <span class="title class_">boolean</span>[W.length][COUNT + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; W.length; i++) &#123;</span><br><span class="line">            <span class="comment">//对于dp数组的初始化  对于目标为0的配重 都置为true</span></span><br><span class="line">            <span class="comment">// 对于每一行和砝码重量相同的目标配重也置为true</span></span><br><span class="line">            dp[i][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">            dp[i][W[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从第二块砝码开始递推</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">            <span class="comment">//第一列配重为0跳过</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">1</span>; j &lt; COUNT + <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="comment">//加当前砝码w[i]之前,就存在的;</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i - <span class="number">1</span>][j]) &#123;</span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//情况一:砝码和j在一起</span></span><br><span class="line">                <span class="keyword">if</span> (W[i] + j &lt;= COUNT &amp;&amp; dp[i - <span class="number">1</span>][W[i] + j]) &#123;</span><br><span class="line">                    <span class="comment">//当前砝码和目标都放到同一边,然后有已经可以测的重量在另一侧</span></span><br><span class="line">                    <span class="comment">//还有个限制,就是当前砝码,和当前测量j之和不能超过总重,即数组的总重;</span></span><br><span class="line">                    <span class="comment">//如果有的话,当前j就能true</span></span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//情况二:砝码和j分开</span></span><br><span class="line">                <span class="keyword">if</span> (dp[i - <span class="number">1</span>][Math.abs(j - W[i])]) &#123;</span><br><span class="line">                    <span class="comment">//j可以被当前砝码和以前的砝码组成,</span></span><br><span class="line">                    <span class="comment">//或者j加以前的砝码等于当前砝码;</span></span><br><span class="line">                    dp[i][j] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt;= COUNT; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dp[N - <span class="number">1</span>][i]) &#123;</span><br><span class="line">                sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(sum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 蓝桥 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语语法框架学习</title>
      <link href="/2022/03/22/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/03/22/%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="简单句simple-sentences"><a href="#简单句simple-sentences" class="headerlink" title="简单句simple sentences:"></a>简单句simple sentences:</h1><p>什么+怎么样<br>主语(subject)+谓语(predicate)<br>人或物+动作:发生了什么事(广义动作:语法上的动词Verb)</p><h2 id="动作分类-动词"><a href="#动作分类-动词" class="headerlink" title="动作分类(动词)"></a>动作分类(动词)</h2><p>1.可以独立完成的动作:不及物动词Intransitive Verbs(没有承受者的动词)<br>Papa Rabbit <strong>sleeps</strong>.<br>主语+(不及物)动词<br>2.有一个<strong>动作</strong>的承受者:单及物动词Transitive Verbs(没有承受者就没有实际意义)<br>Papa Rabbit <strong>likes</strong> you.<br>主语+(及物)动词+宾语<br>3.有<strong>两个</strong>动作承受者<br>Papa Rabbit <strong>teach</strong> you English.<br>主语+(双及物)动词+间接宾语+直接宾语<br>4.只有一个动作承受者(不同于2):复杂及物动词<br>Papa Rabbit <strong>considers</strong> you smart.<br>主语+(复杂及物)动词+宾语+(宾语)补语<br>5.把这个词后面的信息赋予给前面的词:联系动词(系动词)<br>Papa Rabbit <strong>is</strong> tall.<br>Papa Rabbit <strong>looks</strong> tall.<br>Papa Rabbit <strong>smell</strong> nice.<br>主语+(系)动词+(主语)补语</p><h2 id="句子成分"><a href="#句子成分" class="headerlink" title="句子成分"></a>句子成分</h2><p>1.主语 Subject<br>2.谓语动词(谓语) Predicate Verb<br>3.宾语 Object<br>4.宾语补语 Object Complement<br>5.主语补语(表语) Subject Complement<br>6.定语 Arrributive<br><strong>The little white</strong> rabbit ate <strong>a large</strong> carrot.<br>前者是rabbit的定语,后者是carrot的定语.<br>7.状语Adverbial<br>The rabbit ate <strong>quickly</strong>.<br>quickly是ate的状语.<br>8.同位语Appositive<br>Papa Rabbit ,an English teacher, eats a carrot. 用来再说一遍主语</p><h1 id="简单句的组合"><a href="#简单句的组合" class="headerlink" title="简单句的组合"></a>简单句的组合</h1><h2 id="复合句-Compound-Sentence"><a href="#复合句-Compound-Sentence" class="headerlink" title="复合句 Compound Sentence"></a>复合句 Compound Sentence</h2><h2 id="复杂句-Complex-Sentence"><a href="#复杂句-Complex-Sentence" class="headerlink" title="复杂句 Complex Sentence"></a>复杂句 Complex Sentence</h2><p>主句Main Clause +从句Subordinate Clause<br>1.名词性从句<br>主语从句:修改一个简单句,充当另一个句子的主句<br>宾语从句:修改一个简单句,充当另一个句子的宾语 主语表语从句<br>同位语从句</p><p>2.定语从句<br>3.状语从句</p><h1 id="词类"><a href="#词类" class="headerlink" title="词类"></a>词类</h1><p>1.名词 Nouns<br>2.冠词 Articles<br>3.代词 Pronouns<br>4.形容词 Adjectives<br>5.数词 Numerals<br>6.副词 Adverbs<br>7.介词 Prepostions<br>8.叹词 Interjections<br>9.连词 Conjunctions<br>10.动词</p><p>句子成分和词类不是同一种概念</p><h1 id="谓语动词"><a href="#谓语动词" class="headerlink" title="谓语动词"></a>谓语动词</h1><p>特点:<br>1.表示动作的时间 现在.过去.将来.过去将来<br>2.表示动作的状态 一般.完成.进行时.完成进行时<br>3.表示动作的假设,感情等 如:<br>if I were a rabbit … 虚拟语气<br>i ate a carrot and …. 陈述语气<br>eat this carrot and … 祈使语气 合称<strong>时态</strong> : 4*4&#x3D;16种时态</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1ce3bf51359c4b90b32b52607de8b65d~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> 英语 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 英语 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker入门</title>
      <link href="/2022/03/21/Docker%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/21/Docker%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p><strong>1.前提知识:</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">springboot,springclouds,</span><br><span class="line">git push pull,</span><br><span class="line">redis </span><br><span class="line">nginx </span><br><span class="line">mysql</span><br><span class="line">linux centos ubuntu</span><br></pre></td></tr></table></figure><h2 id="Docker-一篇入门"><a href="#Docker-一篇入门" class="headerlink" title="Docker 一篇入门"></a>Docker 一篇入门</h2><p>这里有阮一峰老师的docker简介<a href="https://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html">传送门</a></p><p>这里有个语雀大佬的笔记<a href="https://www.yuque.com/mrlinxi/pxvr4g/polyyw">传送门</a></p><p><a href="https://mp.weixin.qq.com/s/YlcvlUQ-xkz25PuYkeEQqw">后序也可以参考这个文章</a></p><h2 id="一、Docker-简介"><a href="#一、Docker-简介" class="headerlink" title="一、Docker 简介"></a>一、Docker 简介</h2><h3 id="1、基本概述"><a href="#1、基本概述" class="headerlink" title="1、基本概述"></a>1、基本概述</h3><p>Docker是世界领先的软件容器平台。</p><p>Docker是基于Go语言实现的云开源项目。</p><p>Docker的主要目标是“<strong>Build，Ship and Run Any App,Anywhere</strong>”。</p><p>通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到<strong>“一次封装，到处运行”</strong>。</p><p>因为虚拟机模拟的就是带操作系统和环境的，其资源占用多、冗余步骤多、启动慢等不足，Linux 发展出了另一种虚拟化技术：Linux 容器（Linux Containers，缩写为 LXC）。<strong>Linux 容器不是模拟一个完整的操作系统，而是对进程进行隔离。</strong>有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。</p><p>Docker 在Linux 容器技术的基础上发展过来的。将应用运行在 Docker 容器上面，而 Docker 容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。只需要一次配置好环境，换到不同的机器上就可以一键部署好，大大简化了操作。这样是顺应了 DevOps 开发运维理念。</p><p>针对集群环境，可以快速部署安装。</p><p>Docker是不携带操作系统的，所有Docker的应用就非常的轻巧。另外在调用宿主机的CPU、磁盘等这些资源的时候，拿内存举例，虚拟机时利用Htpervisor去虚拟化内存，整个调用过程时<strong>虚拟化内存-&gt;虚拟物理内存-&gt;真正物理内存</strong>,但是Docker是利用Docker Engine去调用宿主机的资源，这个过程是<strong>虚拟内存-&gt;物理内存</strong>。</p><h2 id="二、Docker-安装"><a href="#二、Docker-安装" class="headerlink" title="二、Docker 安装"></a>二、Docker 安装</h2><h3 id="1、环境检查"><a href="#1、环境检查" class="headerlink" title="1、环境检查"></a>1、环境检查</h3><p>CentOS Docker 安装<br>Docker支持以下的CentOS版本：<br>CentOS 7 (64-bit)<br>CentOS 6.5 (64-bit) 或更高的版本</p><p>前提条件<br>目前，CentOS 仅发行版本中的内核支持 Docker。<br>Docker 运行在 CentOS 7 上，要求系统为64位、系统内核版本为 3.10 以上。<br>Docker 运行在 CentOS-6.5 或更高的版本的 CentOS 上，要求系统为64位、系统内核版本为 2.6.32-431 或者更高版本。</p><p>Linux 检查内核版本命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uname</span> -a</span><br><span class="line"><span class="built_in">cat</span> /proc/version</span><br><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure><p>笔者的服务器linux内核版本为:</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">Linux version 3.10.0-1160.11.1.el7.x86_64 (mockbuild@kbuilder.bsys.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC) ) #1 SMP Fri Dec 18 16:34:56 UTC 2020</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZ2vc5bu6hb90ck1lw0pdtZ ~]<span class="comment"># lsb_release -a</span></span><br><span class="line">LSB Version::core-4.1-amd64:core-4.1-noarch</span><br><span class="line">Distributor ID:CentOS</span><br><span class="line">Description:CentOS Linux release 7.9.2009 (Core)</span><br><span class="line">Release:7.9.2009</span><br><span class="line">Codename:Core</span><br></pre></td></tr></table></figure><p>如果命令 <code>lsb_release -a</code>提示<code>command not found</code>则需要安装<code>yum install redhat-lsb -y</code>。</p><h3 id="2、基本组成"><a href="#2、基本组成" class="headerlink" title="2、基本组成"></a>2、基本组成</h3><p>docker主机(Host)：安装了Docker程序的机器，Docker直接安装在操作系统（windows &#x2F; linux）上；<br>docker客户端(Client)：连接docker主机进行操作；<br><strong>docker仓库(Registry)：</strong>用来保存各种打包好的软件镜像；<br><strong>docker镜像(Images)：</strong>软件打包好的镜像；放在docker仓库中；<br><strong>docker容器(Container)：</strong>镜像启动后的实例称为一个容器；容器是独立运行的一个或一组应用。</p><p>架构图：</p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/docketVSvmware.jpg" alt="img"></h3><h3 id="3、安装步骤"><a href="#3、安装步骤" class="headerlink" title="3、安装步骤"></a>3、安装步骤</h3><p>官方文档也有安装步骤：<a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></p><p><strong>Centos 6.8 安装Docker：</strong></p><p>（1）环境准备</p><p>Docker使用EPEL发布，RHEL系的OS首先要确保已经持有EPEL仓库，否则先检查OS的版本，然后安装相应的EPEL包。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y epel-release</span><br></pre></td></tr></table></figure><p>（2）安装docker</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y docker-io</span><br></pre></td></tr></table></figure><p>（3）配置文件</p><p>安装后的配置文件：&#x2F;etc&#x2F;sysconfig&#x2F;docker</p><p>（4）启停操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">service docker start</span><br><span class="line">service docker stop</span><br></pre></td></tr></table></figure><p>（5）验证</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p><strong>Centos 7 安装Docker：</strong></p><p>（1）环境检查</p><p>版本确认：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/redhat-release</span><br></pre></td></tr></table></figure><p>联网检查</p><p>（2）gcc环境安装</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install gcc</span><br><span class="line">yum -y install gcc-c++</span><br></pre></td></tr></table></figure><p>（3）旧版卸载</p><p>可参考官网操作，新机器可省略此操作。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-selinux \</span><br><span class="line">                  docker-engine-selinux \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure><p>（4）安装依赖包</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><p>（5）修改镜像仓库</p><p>主要是为了优化下载速度</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>（6）更新yum包索引</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure><p>（7）安装Docker CE</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum -y install docker-ce</span><br></pre></td></tr></table></figure><p>（8）启停操作</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure><p>（9）测试验证</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p>（10）配置镜像加速</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /etc/docker</span><br><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">systemctl daemon-reload  <span class="comment"># 重新加载</span></span><br><span class="line">systemctl restart docker <span class="comment"># 重启</span></span><br></pre></td></tr></table></figure><p><code>daemon.json</code> 内容：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">#网易云</span><br><span class="line">&#123;&quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;] &#125;</span><br><span class="line"></span><br><span class="line">或</span><br><span class="line"></span><br><span class="line"> #阿里云</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://｛自已的编码｝.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不注册就是用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">&quot;registry-mirrors&quot;: [&quot;https://registry.docker-cn.com&quot;, &quot;http://hub-mirror.c.163.com&quot;,&quot;https://docker.mirrors.ustc.edu.cn&quot;] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（11）卸载docker</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br><span class="line">yum -y remove docker-ce</span><br><span class="line"><span class="built_in">rm</span> -rf /var/lib/docker</span><br></pre></td></tr></table></figure><p>关于阿里云或网易云镜像加速</p><p>注册阿里云账户，登录阿里云开发者平台，获取加速器地址，配置参考第（10）步。</p><p>（12）更多命令</p><p> （A） ：<a href="https://docs.docker.com/engine/reference/commandline/docker/">Docker 官方文档</a></p><p> （B）：参考每一个镜像的文档。</p><h3 id="4-测试运行hello-world"><a href="#4-测试运行hello-world" class="headerlink" title="4.测试运行hello-world"></a>4.测试运行hello-world</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323171124370.png" alt="image-20220323171124370"></p><p>run干了什么：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638188169013-68f7d053-b6a9-4795-ae3a-e61f4a38deae.png" alt="image.png"></p><h2 id="三、Docker-原理"><a href="#三、Docker-原理" class="headerlink" title="三、Docker 原理"></a>三、Docker 原理</h2><h3 id="docker是怎么工作的"><a href="#docker是怎么工作的" class="headerlink" title="docker是怎么工作的"></a>docker是怎么工作的</h3><p>Docker是一个Client-Server结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。 <strong>容器，是一个运行时环境，就是我们前面说到的集装箱。</strong></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22423156/1638188268502-e7e8cdf3-cc93-446f-a18a-7a827d2dd55c.png" alt="image.png"></p><h3 id="为什么Docker比VM快"><a href="#为什么Docker比VM快" class="headerlink" title="为什么Docker比VM快"></a>为什么Docker比VM快</h3><p>(1)docker有着比虚拟机更少的抽象层。由亍docker不需要Hypervisor实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</p><p>(2)docker利用的是宿主机的内核,而不需要Guest OS。因此,当新建一个容器时,docker不需要和虚拟机一样重新加载一个操作系统内核。仍而避免引寻、加载操作系统内核返个比较费时费资源的过程,当新建一个虚拟机时,虚拟机软件需要加载Guest OS,返个新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了返个过程,因此新建一个docker容器只需要几秒钟。</p><p>docker和vm的对比表:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323171737029.png" alt="image-20220323171737029"></p><h2 id="四、Docker常用命令"><a href="#四、Docker常用命令" class="headerlink" title="四、Docker常用命令"></a>四、Docker常用命令</h2><h3 id="4-1帮助命令"><a href="#4-1帮助命令" class="headerlink" title="4.1帮助命令"></a>4.1帮助命令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker version：详细版本信息    </span><br><span class="line">docker -v：简略版本信息</span><br><span class="line">docker info：对docker镜像、容器、宿主机情况等描述</span><br><span class="line">docker --help：类似于Linux的man，列举所有命令及其含义解释。</span><br></pre></td></tr></table></figure><h3 id="4-2-镜像命令"><a href="#4-2-镜像命令" class="headerlink" title="4.2 镜像命令"></a>4.2 镜像命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images [OPTIONS] [ARGS]：列出本地主机上的镜像</span><br><span class="line">OPTIONS说明：可以通过docker iamges --<span class="built_in">help</span>查看OPTIONS</span><br><span class="line">● -a ：a表示all，列出本地所有的镜像（含中间映像层）</span><br><span class="line">● -q ：只显示镜像ID。</span><br><span class="line">● --digests ：显示镜像的摘要信息</span><br><span class="line">● --no-trunc：:显示完整的镜像信息</span><br><span class="line">ARGS说明：可以直接写镜像名，比如centos，mysql等等，就是直接查对应的镜像信息。</span><br><span class="line"></span><br><span class="line">docker search [OPTIONS] 某个个xxx镜像名字：查镜像</span><br><span class="line">OPTIONS说明： 可以通过docker search --<span class="built_in">help</span>查看OPTIONS</span><br><span class="line">● --no-trunc : 显示完整的镜像描述</span><br><span class="line">● --<span class="built_in">limit</span> int : 显示最多int条信息。</span><br><span class="line"></span><br><span class="line">docker pull 某个个xxx镜像名字[:TAG]：下载镜像</span><br><span class="line">不写版本号默认下载最新版</span><br><span class="line"></span><br><span class="line">docker rmi 某个个xxx镜像ID：删除镜像</span><br></pre></td></tr></table></figure><p>我们尝试删除一下hello-world</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZ2vc5bu6hb90ck1lw0pdtZ ~]<span class="comment"># docker rmi feb5d9fea6a5</span></span><br><span class="line">Error response from daemon: conflict: unable to delete feb5d9fea6a5 (must be forced) - image is being used by stopped container 4cb79a86d213</span><br><span class="line">[root@iZ2vc5bu6hb90ck1lw0pdtZ ~]<span class="comment"># </span></span><br></pre></td></tr></table></figure><p>报错了，因为我们正在使用hello-world需要加-f强制删除<code>docker rmi -f hello-world</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">● 删除单个：docker rmi -f 镜像ID/镜像名[:TAG]</span><br><span class="line">● 删除多个：docker rmi -f 镜像名1:TAG 镜像名2:TAG</span><br><span class="line">● 删除全部：docker rmi -f $(docker images -qa)</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@iZ2vc5bu6hb90ck1lw0pdtZ ~]<span class="comment"># docker rmi -f feb5d9fea6a5</span></span><br><span class="line">Untagged: hello-world:latest</span><br><span class="line">Untagged: hello-world@sha256:bfea6278a0a267fad2634554f4f0c6f31981eea41c553fdf5a83e95a41d40c38</span><br><span class="line">Deleted: sha256:feb5d9fea6a5e9606aa995e879d862b825965ba48de054caab5ef356dc6b3412</span><br></pre></td></tr></table></figure><h3 id="4-3容器命令"><a href="#4-3容器命令" class="headerlink" title="4.3容器命令"></a>4.3容器命令</h3><h4 id="1下载镜像，新建并启动容器"><a href="#1下载镜像，新建并启动容器" class="headerlink" title="1下载镜像，新建并启动容器"></a>1<strong>下载镜像，新建并启动容器</strong></h4><p>有镜像才能创建容器，这是根本前提(下载一个CentOS镜像演示) <code>docker pull centos</code></p><p>一个小插曲：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Error response from daemon: pull access denied for centors, repository does not exist or may require &#x27;docker login&#x27;: denied: requested access to the resource is denied</span><br></pre></td></tr></table></figure><p>这是docker pull centos写错了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323173645773.png" alt="image-20220323173645773"></p><p>我们继续。。。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323173752024.png" alt="image-20220323173752024"></p><p>一个centos只有231M。<br>新建并启动容器，</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run [options] imageID/imageName[:TAG] [<span class="built_in">command</span>] [arg..]</span><br><span class="line">options说明：</span><br><span class="line">●--name=<span class="string">&quot;容器新名字&quot;</span>: 为容器指定一个名称；</span><br><span class="line">●-d: 后台运行容器，并返回容器ID，也即启动守护式容器；</span><br><span class="line">●-i：<span class="string">&quot;以交互模式运行容器，通常与 -t 同时使用；</span></span><br><span class="line"><span class="string">●-t：&quot;</span>为容器重新分配一个伪输入终端，通常与 -i 同时使用；</span><br><span class="line">●-P: 随机端口映射；</span><br><span class="line">●-p: 指定端口映射，有以下四种格式</span><br><span class="line">○ip:hostPort:containerPort</span><br><span class="line">○ip::containerPort</span><br><span class="line">○<span class="string">&quot;hostPort:containerPort</span></span><br><span class="line"><span class="string">○containerPort</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323174025226.png" alt="image-20220323174025226"></p><p>现在我们进入了，centos容器。（-i -t可以合在一起写成-it）</p><h4 id="2列出当前所有正在运行的容器"><a href="#2列出当前所有正在运行的容器" class="headerlink" title="2列出当前所有正在运行的容器"></a>2<strong>列出当前所有正在运行的容器</strong></h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps [OPTIONS]</span><br><span class="line">OPTIONS说明：</span><br><span class="line">●-a :列出当前所有正在运行的容器+历史上运行过的</span><br><span class="line">●-l :显示最近创建的容器。</span><br><span class="line">●-n：显示最近n个创建的容器。</span><br><span class="line">●-q :静默模式，只显示容器编号。</span><br><span class="line">●--no-trunc :不截断输出。</span><br></pre></td></tr></table></figure><p>在刚刚centos容器启动的情况下新打开一个终端窗口<br><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323174522574.png" alt="image-20220323174522574"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323174510415.png" alt="image-20220323174510415"></p><p>可以看到正在运行的容器ID，跟我们启动的centos容器一致。这表示我们通过docker在centos上运行了一个centos容器。</p><h4 id="3退出容器"><a href="#3退出容器" class="headerlink" title="3退出容器"></a>3退出容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">输入<span class="built_in">exit</span>：容器<span class="string">&quot;停止退出；</span></span><br><span class="line"><span class="string">ctrl+d：容器&quot;</span>停止退出</span><br><span class="line"></span><br><span class="line">ctrl+P+Q：容器<span class="string">&quot;不停止退出</span></span><br></pre></td></tr></table></figure><p>先exit退出我们运行的centos容器实例。然后，我们以centosByDocker为名字，生成一个centos的容器实例：</p><p><code>docker run -it --name centosByDocker centos</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323175241367.png" alt="image-20220323175241367"></p><p>然后按ctrl+P+Q，（按了之后还要按一下回车）回到我们的宿主机：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323175353435.png" alt="image-20220323175353435"></p><p>然后执行<code>docker ps</code>可以看到容器<strong>没有关闭</strong>。说明都没有停止推出容器</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323175541956.png" alt="image-20220323175541956"></p><h4 id="4启动容器（start-与-run区分开）-amp-重启容器（restart）"><a href="#4启动容器（start-与-run区分开）-amp-重启容器（restart）" class="headerlink" title="4启动容器（start 与 run区分开） &amp; 重启容器（restart）"></a>4<strong>启动容器（start 与 run区分开） &amp; 重启容器（restart）</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start是启动已有容器，docker run是新建并启动容器，这里需要区分开。</span><br><span class="line">启动容器：docker start 容器ID/容器Names即可启动容器。</span><br><span class="line">重启容器：docker restart 容器ID/容器Names</span><br></pre></td></tr></table></figure><p>这些好像都能不能进去</p><h4 id="5回到已经退出的但是仍然在运行的容器"><a href="#5回到已经退出的但是仍然在运行的容器" class="headerlink" title="5回到已经退出的但是仍然在运行的容器"></a>5回到已经退出的但是仍然在运行的容器</h4><p><code>docker attach 容器ID、容器Names</code>能重新进到正在运行的容器中</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323180948856.png" alt="image-20220323180948856"></p><p><code>docker exec -it 容器ID bashShell</code></p><p>这个命令不同于上面的命令，进入到了指定id的容器内部并将【bashshell命令】执行结果返回到宿主机上</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323181244914.png" alt="image-20220323181244914"></p><p><code>nsenter</code>命令[传送门](<a href="https://www.cnblogs.com/xhyan/p/6593075.html">Docker容器进入的4种方式 - 純黑色 - 博客园 (cnblogs.com)</a>)</p><h4 id="6停止容器-amp-强制停止容器"><a href="#6停止容器-amp-强制停止容器" class="headerlink" title="6停止容器 &amp; 强制停止容器"></a><strong>6停止容器 &amp; 强制停止容器</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">停止容器：`docker stop 容器ID/容器name`</span><br><span class="line">强制停止容器：`docker kill 容器ID/容器name`</span><br></pre></td></tr></table></figure><p>停止容器</p><h4 id="7删除已停止的容器"><a href="#7删除已停止的容器" class="headerlink" title="7删除已停止的容器"></a><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323180047806.png" alt="image-20220323180047806">7删除已停止的容器</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm 容器ID：删除之前需要停止容器。</span><br><span class="line">docker rm -f 容器ID：强制删除，容器运行时可以直接删除。</span><br><span class="line">一次性删除多个容器：</span><br><span class="line">●docker rm -f $(docker ps -a -q)</span><br><span class="line">●docker ps -a -q | xargs docker rm</span><br><span class="line">●docker rm 容器ID1 容器ID2 ..</span><br></pre></td></tr></table></figure><p><font color='red'> 注：删除的时候不需要吧容器ID写全，写两位就可以，删除前请核对，防止误删。 </font></p><h4 id="8重要容器命令"><a href="#8重要容器命令" class="headerlink" title="8重要容器命令"></a>8重要容器命令</h4><p><strong>1. 启动守护式容器</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">命令：docker run -d 镜像名[:TAG]/镜像ID</span><br><span class="line">（后台启动）启动守护容器centos：docker run -d --name centosde centos</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323182922704.png" alt="image-20220323182922704"></p><p><strong>问题：</strong>然后docker ps进行查看, 会发现容器已经退出，并没有处于运行状态。</p><p>如果在运行的话，会发现，其实已经运行于后台了,应该可以通过docker ps -a显示</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323182956301.png" alt="image-20220323182956301"></p><p><strong>很重要的要说明的一点:</strong> </p><p>Docker容器后台运行，就必须有一个前台进程。</p><p>容器运行的命令如果不是那些一直挂起的命令（比如运行top，tail），就是会自动退出的。<br>这个是docker的机制问题,比如你的web容器,我们以nginx为例，正常情况下,我们配置启动服务只需要启动相应的service即可。例如service nginx start但是,这样做，nginx为后台进程模式运行，就导致docker前台没有运行的应用,，这样的容器后台启动后,会立即自杀因为他觉得他没事可做了。所以，最佳的解决方案是,将你要运行的程序以前台进程的形式运行。</p><p><strong>2. 查看容器日志</strong> </p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">命令：docker logs -f -t --tail 数字 容器ID </span><br><span class="line">●-t：表示加入时间戳</span><br><span class="line">●-f：表示跟随最新的日志打印</span><br><span class="line">●--tail 数字：表示显示最后多少条</span><br></pre></td></tr></table></figure><p>后台运行centos，循环打印一句话：<code>docker run -d centos /bin/sh -c &quot;while true;do echo hello ladidol world;sleep 2;done&quot;</code></p><p>这个能显示到docker ps中我是没想到的</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323185149116.png" alt="image-20220323185149116"></p><p>查询一下容器日志：<code>docker logs -f -t --tail 10 容器ID/容器NAME</code></p><p>这里加了-f会不停的追加，如果不加就只会打印–tail指定数目的记录。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323185342763.png" alt="image-20220323185342763"></p><p>ctrl+ z 推出查看容器日志</p><p><strong>3. 查看容器内的进程 &amp; 查看容器内部细节</strong><br>查看容器内进程命令：<code>docker top 容器ID/容器名</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323185721124.png" alt="image-20220323185721124"></p><p><strong>4. 进入正在运行的容器并以命令行交互</strong><br>docker run -it centos 创建并启动一个centos容器，然后ctrl+p+q退出容器但不关闭。<br>那么如何再次进入这个容器呢？<br>●使用<code>docker attach </code>容器ID&#x2F;容器name命令即可再次进入容器。<br>●使用<code>docker exec -it </code>容器ID&#x2F;容器name &#x2F;bin&#x2F;bash</p><p>前面有讲到：</p><p><code>docker attach 容器ID、容器Names</code>能重新进到正在运行的容器中</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323180948856.png" alt="image-20220323180948856"></p><p><code>docker exec -it 容器ID bashShell</code></p><p>这个命令不同于上面的命令，进入到了指定id的容器内部并将【bashshell命令】执行结果返回到宿主机上</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323181244914.png" alt="image-20220323181244914"></p><p>exec与attach的区别：<br>attach 直接进入容器启动命令的终端，不会启动新的进程；<br>exec 是在容器中打开新的终端，并且可以启动新的进程；<br>通过exec进入的容器，使用exit退出时，容器不会关闭。</p><p><strong>关于-i -t 与 -it的区别：</strong>i是创建标准io接口，t是伪造tty终端；如果光一个i的话，虽然也可以输入命令得到输出，但结果很不友好，自己可以试试；如果光一个t，就只有一个tty，你输入什么都没有反应，因为你没有开放对应的输入接口；正确的应该是-it，开放接口并创建伪tty。</p><p><strong>5. 从容器内拷贝文件到主机上</strong><br>命令：<code>docker cp </code> 容器ID:容器内路径 目的主机路径</p><h3 id="4-3总结"><a href="#4-3总结" class="headerlink" title="4.3总结"></a>4.3总结</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638248364830-ec5bca6d-ba97-4138-adb0-e5e0800b1a40.png" alt="image.png"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">attach    Attach to a running container                 # 当前 shell 下 attach 连接指定运行镜像</span><br><span class="line">build     Build an image from a Dockerfile              # 通过 Dockerfile 定制镜像</span><br><span class="line">commit    Create a new image from a container changes   # 提交当前容器为新的镜像</span><br><span class="line">cp        Copy files/folders from the containers filesystem to the host path   #从容器中拷贝指定文件或者目录到宿主机中</span><br><span class="line">create    Create a new container                        # 创建一个新的容器，同 run，但不启动容器</span><br><span class="line">diff      Inspect changes on a container&#x27;s filesystem   # 查看 docker 容器变化</span><br><span class="line">events    Get real time events from the server          # 从 docker 服务获取容器实时事件</span><br><span class="line">exec      Run a command in an existing container        # 在已存在的容器上运行命令</span><br><span class="line">export    Stream the contents of a container as a tar archive   # 导出容器的内容流作为一个 tar 归档文件[对应 import ]</span><br><span class="line">history   Show the history of an image                  # 展示一个镜像形成历史</span><br><span class="line">images    List images                                   # 列出系统当前镜像</span><br><span class="line">import    Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]</span><br><span class="line">info      Display system-wide information               # 显示系统相关信息</span><br><span class="line">inspect   Return low-level information on a container   # 查看容器详细信息</span><br><span class="line">kill      Kill a running container                      # kill 指定 docker 容器</span><br><span class="line">load      Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save]</span><br><span class="line">login     Register or Login to the docker registry server    # 注册或者登陆一个 docker 源服务器</span><br><span class="line">logout    Log out from a Docker registry server          # 从当前 Docker registry 退出</span><br><span class="line">logs      Fetch the logs of a container                 # 输出当前容器日志信息</span><br><span class="line">port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT    # 查看映射端口对应的容器内部源端口</span><br><span class="line">pause     Pause all processes within a container        # 暂停容器</span><br><span class="line">ps        List containers                               # 列出容器列表</span><br><span class="line">pull      Pull an image or a repository from the docker registry server   # 从docker镜像源服务器拉取指定镜像或者库镜像</span><br><span class="line">push      Push an image or a repository to the docker registry server    # 推送指定镜像或者库镜像至docker源服务器</span><br><span class="line">restart   Restart a running container                   # 重启运行的容器</span><br><span class="line">rm        Remove one or more containers                 # 移除一个或者多个容器</span><br><span class="line">rmi       Remove one or more images             # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span><br><span class="line">run       Run a command in a new container              # 创建一个新的容器并运行一个命令</span><br><span class="line">save      Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 load]</span><br><span class="line">search    Search for an image on the Docker Hub         # 在 docker hub 中搜索镜像</span><br><span class="line">start     Start a stopped containers                    # 启动容器</span><br><span class="line">stop      Stop a running containers                     # 停止容器</span><br><span class="line">tag       Tag an image into a repository                # 给源中镜像打标签</span><br><span class="line">top       Lookup the running processes of a container   # 查看容器中运行的进程信息</span><br><span class="line">unpause   Unpause a paused container                    # 取消暂停容器</span><br><span class="line">version   Show the docker version information           # 查看 docker 版本号</span><br><span class="line">wait      Block until a container stops, then print its exit code   # 截取容</span><br></pre></td></tr></table></figure><h2 id="五、Dockers镜像"><a href="#五、Dockers镜像" class="headerlink" title="五、Dockers镜像"></a>五、Dockers镜像</h2><h3 id="5-1-镜像是什么-amp-镜像的特点"><a href="#5-1-镜像是什么-amp-镜像的特点" class="headerlink" title="5.1 镜像是什么 &amp; 镜像的特点"></a>5.1 镜像是什么 &amp; 镜像的特点</h3><p>镜像是一种轻量级、可执行的独立软件包，用来打包软件运行环境和基于运行环境开发的软件，它包含运行某个软件所需的所有内容，包括代码、运行时、库、环境变量和配置文件。</p><p> <strong>1. UnionFS（联合文件系统）</strong> </p><p>UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p><p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p><p> <strong>2.  Docker镜像加载原理</strong> </p><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统称为UnionFS。</p><p>bootfs(boot file system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是bootfs。这一层与我们典型的Linux&#x2F;Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p><p>rootfs (root file system) ，在bootfs之上。包含的就是典型 Linux 系统中的 &#x2F;dev, &#x2F;proc, &#x2F;bin, &#x2F;etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638248743091-a2137397-2cc7-42ed-9625-dc30893165ca.png" alt="image.png"></p><p>思考：平时我们安装进虚拟机的CentOS都是好几个G，为什么docker这里才200M？？<br>对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的linux发行版, bootfs基本是一致的, rootfs会有差别, 因此不同的发行版可以公用bootfs。</p><p><strong>3. 镜像分层</strong><br>我们在pull镜像的时候，可以看到docker的镜像好像是一层一层的在下载。<br>拿tomcat为例，一个单独的tomcat一般只有100多M，但是docker拉取的镜像有400多M，这是为什么？<br>因为tomcat的运行不仅仅只需要tomcat，还需要java、centos等等依赖，所以docker的tomcat镜像中会包含有java、centos等等，所以会很大。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638249258111-da897ffa-ddbd-4d28-b025-c5a090f6f4bb.png" alt="image.png"></p><p><strong>为什么镜像要采用这种分层结构？</strong><br>最大的一个好处就是 <strong>- 共享资源。</strong><br>比如：有多个镜像都从相同的 base 镜像构建而来，那么宿主机只需在磁盘上保存一份base镜像，同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p><p><strong>4.镜像的特点</strong></p><p>Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像的顶部。这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。</p><h3 id="5-2-Docker镜像commit操作补充"><a href="#5-2-Docker镜像commit操作补充" class="headerlink" title="5.2 Docker镜像commit操作补充"></a><strong>5.2 Docker镜像commit操作补充</strong></h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit 提交容器副本使之成为一个新的镜像</span><br><span class="line">docker commit -m=“提交的描述信息” -a=“作者” 容器ID 要创建的目标镜像名:[标签名]</span><br></pre></td></tr></table></figure><p> <strong>案例演示</strong><br> <strong>① 拉取tomcat镜像并运行</strong><br>从Hub上下载tomcat镜像到本地并成功运行：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull tomcat</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里将host的8888端口映射到容器的8080端口</span></span><br><span class="line">docker run -it -p 8888:8080 tomcat</span><br></pre></td></tr></table></figure><p> 我这里虚拟机没有GUI，所以需要通过windows的浏览器来访问tomcat，先看看防火墙是否开启以及是否开放了8888端口的访问权限。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-port=8888/tcp</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><p>然后访问还是404。搜了一圈，解决办法：<a href="https://blog.csdn.net/qq_40891009/article/details/103898876">Docker方式启动tomcat,访问首页出现404错误</a><br>是因为docker的tomcat中&#x2F;usr&#x2F;local&#x2F;tomcat下的webapps文件夹是空的，而原本应该在webapps文件夹下的内容都在旁边的webapps.dist文件夹中。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入正在运行的容器目录</span></span><br><span class="line">docer exec -it tomcat容器ID /bin/bash</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将webapps.dist命名为webapps即可，在此之前可以吧webapps重命名成别的名字</span></span><br><span class="line">mv webapps webapps2</span><br><span class="line">mv webapps.dist webapps</span><br></pre></td></tr></table></figure><p>访问成功：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638257655855-7f203155-75fd-48ec-8c66-969df3b1a8cb.png" alt="image.png"></p><p>退出（停止）tomcat：ctrl+c。</p><p>如果使用docker run -it -P tomcat命令：随机分配一个端口号，映射给8080</p><p> ② 使用commit提交我们修改过的tomcat<br><code>docker commit -m &quot;rename webapps.dist to webapps&quot; -a &quot;mrlinxi&quot; 85fc7f7c0182 mrlinxi/tomcat:0.1</code></p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22423156/1638263596661-0b994177-b1fd-4d2f-8852-1d8808e8930d.png" alt="image.png"></p><p>新建并运行一个我们自己修改过的tomcat容器</p><p><code>docker run -it -p 3333:8080 mrlinxi/tomcat:0.1 </code>  注意版本号不要掉了不然docker会到仓库中找latest版本的mrlinxi&#x2F;tomcat，显然是找不到的。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638272125196-1db0e1c9-e510-41bd-835b-2c0e03ada7ae.png" alt="image.png"></p><p>访问成功</p><p> ③ 后台运行-d </p><p><code>docker run -d -p 8888:8080 mrlinxi/tomcat:0.1 </code>  后台启动tomcat。</p><p>可以通过<code>docker attach 容器ID</code> 或者<code>docker exec -it 容器ID</code>进入交互页面。</p><h2 id="六、Docker容器数据卷"><a href="#六、Docker容器数据卷" class="headerlink" title="六、Docker容器数据卷"></a>六、Docker容器数据卷</h2><h3 id="6-1-容器数据卷简述"><a href="#6-1-容器数据卷简述" class="headerlink" title="6.1 容器数据卷简述"></a><strong>6.1 容器数据卷简述</strong></h3><p>先来看看Docker的理念：</p><p>●将运用与运行的环境打包形成容器运行 ，运行可以伴随着容器，但是我们对数据的要求希望是持久化的</p><p>●容器之间希望有可能共享数据</p><p>Docker容器产生的数据，如果不通过docker commit生成新的镜像，使得数据做为镜像的一部分保存下来，那么当容器删除后，数据自然也就没有了。为了能保存数据在docker中我们使用卷。</p><p>一句话：有点类似我们Redis里面的rdb和aof文件。</p><p>卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或共享数据的特性：卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷。</p><p>特点：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1数据卷可在容器之间共享或重用数据</span><br><span class="line"></span><br><span class="line">2卷中的更改可以直接生效</span><br><span class="line"></span><br><span class="line">3数据卷中的更改不会包含在镜像的更新中</span><br><span class="line"></span><br><span class="line">4数据卷的生命周期一直持续到没有容器使用它为止</span><br><span class="line"></span><br><span class="line">5容器卷也可以完成主机到容器、容器到主机的数据共享（类似于 docker cp）</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-2-容器数据卷案例"><a href="#6-2-容器数据卷案例" class="headerlink" title="6.2 容器数据卷案例"></a>6.2 容器数据卷案例</h3><ol><li><h4 id="命令添加"><a href="#命令添加" class="headerlink" title="命令添加"></a>命令添加</h4></li></ol><p>命令：docker run -it -v &#x2F;宿主机绝对路径目录:&#x2F;容器内目录  镜像名</p><p>添加之前：</p><p>前者为容器内，后者为宿主机；</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323200254912.png" alt="image-20220323200254912"></p><p>执行</p> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it -v /myDataVolume:/dataVolumeContainer centos</span><br></pre></td></tr></table></figure><p>可以看到两边都生成了对应的文件夹：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323200831549.png" alt="image-20220323200831549"></p><p>备注：Docker挂载主机目录Docker访问出现cannot open directory .: Permission denied</p><p>解决办法：在挂载目录后多加一个–privileged&#x3D;true参数即可</p><p>检查是否挂载成功：<code>docker inspect 容器ID</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323201328553.png" alt="image-20220323201328553"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323201339368.png" alt="image-20220323201339368"></p><p>已经成功了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638276849687-1d2ac968-80a4-4fc5-97f6-2610fac0d50e.png" alt="image.png">可以看到实现了宿主机跟容器之间的双向同步</p><p>② 容器停止退出后，主机修改后数据是否同步<br>容器先停止退出、主机修改host.txt、容器重启进入、查看主机修改过的host.log</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638277144504-440a8e3b-68a9-407b-82d2-5c17da524f0d.png" alt="image.png"></p><p><strong>③ 命令（带权限）</strong></p><p>带权限的命令：</p><p><code>docker run -it -v /宿主机绝对路径目录:/容器内目录:ro 镜像名</code><br>ro表示read only只读。</p><p>执行：<code>docker run -it -v /myDataVolume:/dataVolumeContainer:ro centos</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638278104965-502de020-2f94-46c8-8a43-8fa5064de443.png" alt="image.png"><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638278136092-718bc608-09ad-4fd1-bdee-7d7cfa30b009.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638278242942-ba82d0ba-0b90-44f1-b339-5f67702ca552.png" alt="image.png"></p><ol start="2"><li>DockerFile添加</li></ol><p>具体描述放到后面讲，这里先使用。</p><p><strong>主机根目录下新建mydocker文件夹并进入</strong>：<code>mkdir mydocker</code></p><p><strong>可在Dockerfile中使用</strong></p><p><strong>VOLUME指令来给镜像添加一个或多个数据卷</strong>：</p><p><code>VOLUME[&quot;/dataVolumeContainer&quot;,&quot;/dataVolumeContainer2&quot;,&quot;/dataVolumeContainer3&quot;]</code></p><p><strong>说明</strong>：</p><p>出于可移植和分享的考虑，用-v 主机目录:容器目录这种方法不能够直接在Dockerfile中实现。</p><p>由于宿主机目录是依赖于特定宿主机的，并不能够保证在所有的宿主机上都存在这样的特定目录。</p><p><strong>File构建：</strong><br>创建一个文件Dockerfile，然后添加以下内容：<br><code>vim Dockerfile</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">volume <span class="built_in">test</span></span></span><br><span class="line">FROM centos   </span><br><span class="line">VOLUME [&quot;/dataVolumeContainer1&quot;,&quot;/dataVolumeContainer2&quot;]</span><br><span class="line">CMD echo &quot;finished,--------success1&quot;</span><br><span class="line">CMD /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323202205652.png" alt="image-20220323202205652"></p><p>build后生成镜像：获得一个新的镜像<br><code>docker build -f /mydocker/Dockerfile -t mrlinxi/centos .</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323202220708.png" alt="image-20220323202220708"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323202253780.png" alt="image-20220323202253780"></p><p>run我们设置好的容器：<br><code>docker run -it 27ffb21c539d /bin/bash</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220323202458563.png" alt="image-20220323202458563"></p><p>可以看到容器内已经创建好了卷地址。</p><p><strong>通过上述步骤，容器内的卷目录地址已经知道，对应的主机目录地址哪？？</strong></p><p>通过<code>docker inspect 容器ID</code>查看：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638280759530-2b3ce964-ca52-49f4-a35b-3e3f99893544.png" alt="image.png"></p><h3 id="6-3-数据卷容器"><a href="#6-3-数据卷容器" class="headerlink" title="6.3 数据卷容器"></a>6.3 数据卷容器</h3><ol><li><strong>总体介绍</strong></li></ol><p>命名的容器挂载数据卷，其它容器通过挂载这个(父容器)实现数据共享，挂载数据卷的容器，称之为数据卷容器。实际上就是通过父容器传递数据卷的配置，通过传递数据卷的配置，将不同容器挂载到宿主机的相同目录下，从而实现各容器之间的数据传递。</p><p>以上一步新建的镜像mrlinxi&#x2F;centos为模板并运行容器dc01&#x2F;dc02&#x2F;dc03，他们已经具有容器卷&#x2F;dataVolumeContainer1和&#x2F;dataVolumeContainer2</p><ol start="2"><li><strong>容器间传递共享(–volumes-from)</strong></li></ol><p>先启动一个父容器dc01，在dataVolumeContainer2中新增内容</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name dc01 mrlinxi/centos</span><br><span class="line">cd dataVolumeContainer2</span><br><span class="line">touch doc1.txt</span><br><span class="line"></span><br><span class="line">然后ctrl+p+q退出</span><br></pre></td></tr></table></figure><p>dc02&#x2F;dc03继承自dc01，通过–volumes-from继承<br><code>docker run -it --name dc02 --volumes-from dc01 mrlinxi/centos</code><br>然后在dc02和dc03的dataVolumeContainer2中分别添加各自的内容</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name dc02 --volumes-from dc01 mrlinxi/centos</span><br><span class="line">cd dataVolumeContainer2</span><br><span class="line">touch doc2.txt</span><br><span class="line"></span><br><span class="line">docker run -it --name dc03 --volumes-from dc01 mrlinxi/centos</span><br><span class="line">cd dataVolumeContainer2</span><br><span class="line">touch doc3.txt</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638325961173-0a0bfecb-ef9a-48ed-9753-5fb6d76c2ce2.png" alt="image.png"></p><p>回到dc01可以看到02&#x2F;03各自添加的都能共享了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638326029145-e9bbfb14-3537-4197-85ef-3fcec6f7a1d8.png" alt="image.png"></p><p>同理，dc02跟dc03里面都有其他容器的数据<img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638326179150-1b3890a3-61c0-4c35-aff9-a726cf11647f.png" alt="image.png"></p><p>删除dc01，dc02修改后dc03可否访问</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638326385031-9f225650-e7a4-45c3-bc8b-667c8a995f43.png" alt="image.png"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638326404754-e815bf7c-19f5-422e-90b3-979e9d2ae71f.png" alt="image.png"></p><p>删除dc01后，dc02和dc03之间的数据共享并不受影响。</p><p><strong>结论</strong>：容器之间配置信息的传递，数据卷的生命周期一直持续到没有容器使用它为止</p><h2 id="七-DockerFile解析"><a href="#七-DockerFile解析" class="headerlink" title="七. DockerFile解析"></a>七. DockerFile解析</h2><h3 id="7-1-DockerFile简介"><a href="#7-1-DockerFile简介" class="headerlink" title="7.1 DockerFile简介"></a>7.1 DockerFile简介</h3><p>Dockerfile是用来构建Docker镜像的构建文件，是由一系列命令和参数构成的脚本。<br>构建三步骤：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">●编写Dockerfile文件：必须符合file规范</span><br><span class="line">●docker build：docker build -f /mydocker/Dockerfile -t mrlinxi/centos . 通过docker build获得一个自定义的镜像</span><br><span class="line">●docker run</span><br></pre></td></tr></table></figure><p>文件长什么样？下面就是我们使用的centos的Dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> centos-7-x86_64-docker.tar.xz /</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.schema-version=<span class="string">&quot;1.0&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.name=<span class="string">&quot;CentOS Base Image&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.vendor=<span class="string">&quot;CentOS&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.license=<span class="string">&quot;GPLv2&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.label-schema.build-date=<span class="string">&quot;20201113&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.opencontainers.image.title=<span class="string">&quot;CentOS Base Image&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.opencontainers.image.vendor=<span class="string">&quot;CentOS&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.opencontainers.image.licenses=<span class="string">&quot;GPL-2.0-only&quot;</span> \</span></span><br><span class="line"><span class="language-bash">    org.opencontainers.image.created=<span class="string">&quot;2020-11-13 00:00:00+00:00&quot;</span></span></span><br><span class="line"><span class="comment"># default cmd</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/bin/bash&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="7-2-DockerFile构建过程解析"><a href="#7-2-DockerFile构建过程解析" class="headerlink" title="7.2 DockerFile构建过程解析"></a>7.2 DockerFile构建过程解析</h3><p>Dockerfile内容基础知识：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- 每条保留字指令都必须为大写字母且后面要跟随至少一个参数</span><br><span class="line">- 指令按照从上到下，顺序执行</span><br><span class="line">- \#表示注释</span><br><span class="line">- 每条指令都会创建一个新的镜像层，并对镜像进行提交</span><br></pre></td></tr></table></figure><p>Docker执行Dockerfile的大致流程：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- （1）docker从基础镜像运行一个容器</span><br><span class="line">- （2）执行一条指令并对容器作出修改</span><br><span class="line">- （3）执行类似docker commit的操作提交一个新的镜像层</span><br><span class="line">- （4）docker再基于刚提交的镜像运行一个新容器</span><br><span class="line">- （5）执行dockerfile中的下一条指令直到所有指令都执行完成</span><br></pre></td></tr></table></figure><p>总结：</p><p>从应用软件的角度来看，Dockerfile、Docker镜像与Docker容器分别代表软件的三个不同阶段，</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">- Dockerfile是软件的原材料</span><br><span class="line">- Docker镜像是软件的交付品</span><br><span class="line">- Docker容器则可以认为是软件的运行态。</span><br></pre></td></tr></table></figure><p>Dockerfile面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可，合力充当Docker体系的基石。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638329841397-6503d73a-3107-4e68-85b5-5d2f690e19fb.png" alt="img"></p><ol><li>Dockerfile，需要定义一个Dockerfile，Dockerfile定义了进程需要的一切东西。Dockerfile涉及的内容包括执行代码或者是<strong>文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程</strong>(当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制)等等;</li><li>Docker镜像，在用Dockerfile定义一个文件之后，docker build时会产生一个Docker镜像，当运行 Docker镜像时，会真正开始提供服务;</li><li>Docker容器，容器是直接提供服务的。</li></ol><h3 id="7-3-DockerFile体系结构-保留字指令"><a href="#7-3-DockerFile体系结构-保留字指令" class="headerlink" title="7.3 DockerFile体系结构(保留字指令)"></a>7.3 DockerFile体系结构(保留字指令)</h3><p><strong>FROM</strong>：基础镜像，当前新镜像是基于哪个镜像的。基于什么镜像进行修改；<br><strong>MAINTAINER</strong>：镜像维护者的姓名和邮箱地址；<br><strong>RUN</strong>：容器构建时需要运行的命令；<br><strong>EXPOSE</strong>：当前容器对外暴露出的端口；<br><strong>WORKDIR</strong>：指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点，没写默认根目录<code>/</code>；<br><strong>ENV</strong>：用来在构建镜像过程中设置环境变量；<br>例如：<code>ENV MY_PATH /usr/mytest</code> 这个环境变量可以在后续的任何RUN指令中使用，这就如同在命令前面指定了环境变量前缀一样；也可以在其它指令中直接使用这些环境变量。<br>比如：<code>WORKDIR $MY_PATH</code><br><strong>ADD</strong>：将宿主机目录下的文件拷贝进镜像且ADD命令会自动处理URL和解压tar压缩包；<br><strong>COPY</strong>：类似ADD，拷贝文件和目录到镜像中。将从构建上下文目录中 &lt;源路径&gt; 的文件&#x2F;目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置；  <code>COPY src dest</code>   <code>COPY [&quot;src&quot;, &quot;dest&quot;]</code><br><strong>ADD</strong>跟<strong>COPY</strong>的区别在于ADD在复制后会自动解压缩和处理URL，而COPY仅仅进行复制。<br><strong>VOLUME</strong>：容器数据卷，用于数据保存和持久化工作；<br><strong>CMD</strong>：指定一个容器启动时要运行的命令；Dockerfile 中可以有多个 CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数替换（后面案例会具体说明）；<br><strong>ENTRYPOINT</strong>：指定一个容器启动时要运行的命令；ENTRYPOINT 的目的和 CMD 一样，都是在指定容器启动程序及参数；<br><strong>CMD</strong>与<strong>ENTRYPOINT</strong>的区别是CMD存在多个时只有最后一个生效以及CMD会被docker run之后的参数替换；而ENTRYPOINT是追加命令。<br><strong>ONBUILD</strong>：当构建一个被继承的Dockerfile时运行命令，父镜像在被子继承后父镜像的onbuild被触发<br><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638330806027-f7d631f5-99cd-4831-aea3-e9367ddf9d84.png" alt="img"></p><p>.gitlab-ci.yml文件中的</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一些变量, 下面各阶段会使用</span></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">server_ip:</span> <span class="number">106.12</span><span class="number">.167</span><span class="number">.1</span></span><br><span class="line">  <span class="attr">jar_name:</span> <span class="string">core-1.0-SNAPSHOT.jar</span></span><br><span class="line">  <span class="attr">java_path:</span> <span class="string">/usr/local/jdk/jdk1.8.0_321/bin</span></span><br><span class="line">  <span class="attr">TAG:</span> <span class="string">official-website:v1.0</span>  <span class="comment"># 镜像名称</span></span><br><span class="line">  <span class="attr">CONTAINER_NAME:</span> <span class="string">official-website-home</span></span><br><span class="line">  <span class="attr">PORT:</span> <span class="number">8999</span></span><br><span class="line">  <span class="attr">DOCKER_DRIVER:</span> <span class="string">overlay2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义执行的各个阶段及顺序</span></span><br><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 maven 镜像打包项目</span></span><br><span class="line"><span class="attr">maven-build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">maven:3.5.0-jdk-8</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mvn</span> <span class="string">package</span> <span class="string">-B</span> <span class="string">-Dmaven.test.skip=true</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">m2-repo</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.m2/repository</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">core/target/$jar_name</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">build-master:</span> <span class="comment"># 定义的 Jobs 之一，用于构建 Docker 镜像。负责执行 deploy 这一流程。具体执行 build 和 run。</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">rmi</span> <span class="string">-f</span> <span class="string">$TAG</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">-t</span> <span class="string">$TAG</span> <span class="string">.</span> <span class="comment"># 构件镜像</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">rm</span> <span class="string">-f</span> <span class="string">$CONTAINER_NAME</span> <span class="string">||</span> <span class="literal">true</span> <span class="comment"># 删除容器</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">--restart=always</span> <span class="string">--name</span> <span class="string">$CONTAINER_NAME</span> <span class="string">--net=host</span> <span class="string">$TAG</span> <span class="comment"># 运行容器</span></span><br><span class="line">  <span class="attr">only:</span> <span class="comment"># 指定哪些branch的push commit会触发执行该job，本例子指定只有master才会执行deploy这个job</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里是gitlab上面项目的dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">8</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> [<span class="string">&quot;/tmp&quot;</span>,<span class="string">&quot;/log&quot;</span>]</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ./core/target/core-1.0-SNAPSHOT.jar core-1.0-SNAPSHOT.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8999</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;-Xmx400m&quot;</span>,<span class="string">&quot;./core-1.0-SNAPSHOT.jar&quot;</span>,<span class="string">&quot;&amp;&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="7-4-案例"><a href="#7-4-案例" class="headerlink" title="7.4 案例"></a>7.4 案例</h3><h4 id="1-Base镜像-scratch"><a href="#1-Base镜像-scratch" class="headerlink" title="1. Base镜像(scratch)"></a>1. Base镜像(scratch)</h4><p>Docker Hub 中 99% 的镜像都是通过在 base 镜像中安装和配置需要的软件构建出来的。</p><h4 id="2-自定义镜像mycentos"><a href="#2-自定义镜像mycentos" class="headerlink" title="2. 自定义镜像mycentos"></a>2. 自定义镜像mycentos</h4><p>Hub默认CentOS镜像什么情况：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638339665774-80743dc3-bd3f-4781-bd49-68edecce815a.png" alt="img"></p><p>自定义mycentos目的使我们自己的镜像具备如下：</p><p>登陆后的默认路径、vim编辑器、查看网络配置ifconfig支持</p><p>① 编写自定义镜像的Dockerfile</p><p>我们在宿主机的<code>/mydocker</code>文件夹下，新建一个Dockerfile：<code>vim Dockerfile2</code>，写入下面的内容</p><p>这是.gitlab-ci.yml文件中的东西</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一些变量, 下面各阶段会使用</span></span><br><span class="line">variables:</span><br><span class="line">  server_ip: <span class="number">106.12</span>.<span class="number">167.1</span></span><br><span class="line">  jar_name: core-<span class="number">1.0</span>-SNAPSHOT.jar</span><br><span class="line">  java_path: /usr/local/jdk/jdk1.<span class="number">8.0</span>_321/bin</span><br><span class="line">  TAG: official-website:v1.<span class="number">0</span>  <span class="comment"># 镜像名称</span></span><br><span class="line">  CONTAINER_NAME: official-website-home</span><br><span class="line">  PORT: <span class="number">8999</span></span><br><span class="line">  DOCKER_DRIVER: overlay2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义执行的各个阶段及顺序</span></span><br><span class="line">stages:</span><br><span class="line">  - build</span><br><span class="line">  - deploy</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 maven 镜像打包项目</span></span><br><span class="line">maven-build:</span><br><span class="line">  stage: build</span><br><span class="line">  image: maven:<span class="number">3.5</span>.<span class="number">0</span>-jdk-<span class="number">8</span></span><br><span class="line">  script:</span><br><span class="line">    - mvn package -B -Dmaven.test.skip=true</span><br><span class="line">  cache:</span><br><span class="line">    key: m2-repo</span><br><span class="line">    paths:</span><br><span class="line">      - .m2/repository</span><br><span class="line">  artifacts:</span><br><span class="line">    paths:</span><br><span class="line">      - core/target/$jar_name</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">build-master: <span class="comment"># 定义的 Jobs 之一，用于构建 Docker 镜像。负责执行 deploy 这一流程。具体执行 build 和 run。</span></span><br><span class="line">  stage: deploy</span><br><span class="line">  script:</span><br><span class="line">    - docker rmi -f $TAG</span><br><span class="line">    - docker build -t $TAG . <span class="comment"># 构件镜像</span></span><br><span class="line">    - docker rm -f $CONTAINER_NAME || true <span class="comment"># 删除容器</span></span><br><span class="line">    - docker <span class="keyword">run</span><span class="language-bash"> -d --restart=always --name <span class="variable">$CONTAINER_NAME</span> --net=host <span class="variable">$TAG</span> <span class="comment"># 运行容器</span></span></span><br><span class="line">  only: <span class="comment"># 指定哪些branch的push commit会触发执行该job，本例子指定只有master才会执行deploy这个job</span></span><br><span class="line">    - master</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>② 构建自定义镜像——docker build</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f /mydocker/Dockerfile2 -t mycentos:0.1 .</span><br></pre></td></tr></table></figure><p>build语句最后面一个<code>.</code>表示当前目录。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638342897692-120c3467-e33e-45a7-b872-f384e5ea9e2d.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638342983932-5d1acdd1-4c9e-4181-b4ea-b7f569d245dc.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638342971620-02108df8-58de-4c01-b98b-fb160e364e7d.png" alt="img"></p><h4 id="③-运行自定义镜像——docker-run"><a href="#③-运行自定义镜像——docker-run" class="headerlink" title="③ 运行自定义镜像——docker run"></a>③ 运行自定义镜像——docker run</h4><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638343174481-5f9a3806-9c45-4b0f-9dc2-463a9ebc1a23.png" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -it mycentos:0.1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638343199833-59ddfef7-fdbf-4eb8-a0dd-15e3eb71572d.png" alt="img"></p><p>默认目录是&#x2F;usr&#x2F;locl，可以看到我们自己的新镜像已经支持vim&#x2F;ifconfig命令，拓展成功。</p><h4 id="④-列出镜像的变更历史"><a href="#④-列出镜像的变更历史" class="headerlink" title="④ 列出镜像的变更历史"></a>④ 列出镜像的变更历史</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker history 镜像名</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638343381128-8ce9fb4b-13ca-44ce-81a0-d33fcd71fd56.png" alt="img"></p><h4 id="3-CMD-x2F-ENTRYPOINT-镜像案例"><a href="#3-CMD-x2F-ENTRYPOINT-镜像案例" class="headerlink" title="3. CMD&#x2F;ENTRYPOINT 镜像案例"></a>3. CMD&#x2F;ENTRYPOINT 镜像案例</h4><p>CMD&#x2F;ENTRYPOINT都是指定一个容器启动时要运行的命令</p><h5 id="①-CMD镜像案例"><a href="#①-CMD镜像案例" class="headerlink" title="① CMD镜像案例"></a>① CMD镜像案例</h5><p>Dockerfile 中可以有多个 CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数替换。</p><p>这里以tomcat为例，tomcat的dockerfile最后一句是<img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638343671342-f35165d2-de7f-4432-83da-c923ee3dff59.png" alt="img"></p><p>正常我们启动tomcat的命令是：<code>docker run -it -p 主机端口:8080 tomcat</code> </p><p>现在我们执行这样一句命令：<code>docker run -it -p 8888:8080 tomcat ls -l</code></p><p>这样就相当于在tomcat的dockerfile后面又加了一句<code>CMD ls -l</code>，因此会覆盖掉之前的语句。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638343887509-4f0065c1-f5e1-46c5-9c20-df16d1955d1d.png" alt="img"></p><p>此时tomcat并没有运行，只是查看了默认路径下的文件。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638343953044-f74142c5-8327-4893-9634-e0fc4de40da7.png" alt="img"></p><h5 id="②-ENTRYPOINT镜像案例"><a href="#②-ENTRYPOINT镜像案例" class="headerlink" title="② ENTRYPOINT镜像案例"></a>② ENTRYPOINT镜像案例</h5><p>docker run 之后的参数会被当做参数传递给 ENTRYPOINT，之后形成新的命令组合。</p><p><strong>制作CMD版可以查询IP信息的容器：</strong></p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install -y curl</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-s&quot;</span>, <span class="string">&quot;https://ip.cn&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>crul命令解释：curl命令可以用来执行下载、发送各种HTTP请求，指定HTTP头部等操作。curl是将下载文件输出到stdout。</p><p>使用命令：curl <a href="http://www.baidu.com,执行后,www.baidu.com的html就会显示在屏幕上了.这是最简单的使用方法.用这个命令获得了http//curl.haxx.se%E6%8C%87%E5%90%91%E7%9A%84%E9%A1%B5%E9%9D%A2%EF%BC%8C%E5%90%8C%E6%A0%B7%EF%BC%8C%E5%A6%82%E6%9E%9C%E8%BF%99%E9%87%8C%E7%9A%84URL%E6%8C%87%E5%90%91%E7%9A%84%E6%98%AF%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E6%88%96%E8%80%85%E4%B8%80%E5%B9%85%E5%9B%BE%E9%83%BD%E5%8F%AF%E4%BB%A5%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E5%88%B0%E6%9C%AC%E5%9C%B0%E3%80%82%E5%A6%82%E6%9E%9C%E4%B8%8B%E8%BD%BD%E7%9A%84%E6%98%AFHTML%E6%96%87%E6%A1%A3%EF%BC%8C%E9%82%A3%E4%B9%88%E7%BC%BA%E7%9C%81%E7%9A%84%E5%B0%86%E5%8F%AA%E6%98%BE%E7%A4%BA%E6%96%87%E4%BB%B6%E5%A4%B4%E9%83%A8%EF%BC%8C%E5%8D%B3HTML%E6%96%87%E6%A1%A3%E7%9A%84header%E3%80%82%E8%A6%81%E5%85%A8%E9%83%A8%E6%98%BE%E7%A4%BA%EF%BC%8C%E8%AF%B7%E5%8A%A0%E5%8F%82%E6%95%B0">http://www.baidu.com，执行后，www.baidu.com的html就会显示在屏幕上了。这是最简单的使用方法。用这个命令获得了http://curl.haxx.se指向的页面，同样，如果这里的URL指向的是一个文件或者一幅图都可以直接下载到本地。如果下载的是HTML文档，那么缺省的将只显示文件头部，即HTML文档的header。要全部显示，请加参数</a> -i</p><p>构建镜像：<code>docker build -f /mydocker/Dockerfile3 -t myip .</code></p><p>创建并启动容器：<code>docker run myip</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638345202928-05625f38-4bba-48cb-b1a7-3b4f89b034ff.png" alt="img"></p><p>现在返回的是网页的html文件。</p><p><strong>如果我们希望显示 HTTP 头信息</strong>，就需要加上 <code>-i</code> 参数：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638345312728-f6526519-cf9d-4471-a24e-02ac072f8bd1.png" alt="img"></p><p>加上<code>-i</code>后报错了。我们可以看到可执行文件找不到的报错，executable file not found。</p><p>之前我们说过，跟在镜像名后面的是 command，运行时会替换 CMD 的默认值。因此这里的 -i 替换了原来的 CMD，而不是添加在原来的 curl -s <a href="https://ip.cn/">https://ip.cn</a> 后面。而 -i 根本不是命令，所以自然找不到。那么如果我们希望加入 -i 这参数，我们就必须重新完整的输入这个命令：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run myip curl -s https://ip.cn -i</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638345446853-45d8a908-b0f9-4829-9dc4-26d36ff5642d.png" alt="img"></p><p>为了解决上述问题，<strong>制作ENTROYPOINT版查询IP信息的容器</strong>。</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install -y curl</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [ <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-s&quot;</span>, <span class="string">&quot;http://ip.cn&quot;</span> ]</span></span><br><span class="line">docker build -f /mydocker/Dockerfile4 -t myip2</span><br><span class="line">docker <span class="keyword">run</span><span class="language-bash"> myip2 -i</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638345830872-e6ea7ad8-5414-4531-b40e-8ac0525ec186.png" alt="img"></p><p>现在只用追加一个<code>-i</code>即可打印请求头跟html文件。</p><h5 id="③-ONBUILD案例"><a href="#③-ONBUILD案例" class="headerlink" title="③ ONBUILD案例"></a>③ ONBUILD案例</h5><p>直接在Dockerfile4上修改，追加一句<code>ONBUILD RUN echo &quot;father onbuild-----------10086&quot;</code></p><p>然后使用Dockerfile4构建镜像：<code>docker build -f /mydocker/Dockerfile4 -t myip_father .</code></p><p>复制Dockerfile3命名为Dockerfile5，修改Dockerfile5，直接继承自Dockerfile4：</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> myip_father</span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum install -y curl</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [ <span class="string">&quot;curl&quot;</span>, <span class="string">&quot;-s&quot;</span>, <span class="string">&quot;https://ip.cn&quot;</span> ]</span></span><br></pre></td></tr></table></figure><p>使用Dockerfile5构建镜像：<code>docker build -f /mydocker/Dockerfile5 -t myip_son .</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638346429961-5fa21a69-6fc1-4116-9153-5a772ed513d4.png" alt="img"></p><h3 id="7-5-自定义镜像Tomcat9"><a href="#7-5-自定义镜像Tomcat9" class="headerlink" title="7.5 自定义镜像Tomcat9"></a>7.5 自定义镜像Tomcat9</h3><h4 id="1-创建目录"><a href="#1-创建目录" class="headerlink" title="1. 创建目录"></a>1. 创建目录</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /mydocker/tomcat9</span><br></pre></td></tr></table></figure><p>在该目录下新建touch.txt文件</p><h4 id="2-将jdk和tomcat安装的压缩包拷贝进上述目录"><a href="#2-将jdk和tomcat安装的压缩包拷贝进上述目录" class="headerlink" title="2. 将jdk和tomcat安装的压缩包拷贝进上述目录"></a>2. 将jdk和tomcat安装的压缩包拷贝进上述目录</h4><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638349761007-70a682ef-bec4-47b8-afc1-a7f46998d9af.png" alt="img"></p><h4 id="3-在tomcat9目录下新建Dockerfile文件"><a href="#3-在tomcat9目录下新建Dockerfile文件" class="headerlink" title="3. 在tomcat9目录下新建Dockerfile文件"></a>3. 在tomcat9目录下新建Dockerfile文件</h4><p><strong>注意一下</strong>，Dockerfile文件里面涉及到<strong>jdk跟tomcat版本</strong>的地方<strong>一定要确定跟你放在tomcat9文件夹下的一致</strong>（别复制粘贴了就是build，到时候run运行不出来）</p><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span>         centos</span><br><span class="line"><span class="keyword">MAINTAINER</span>    mrzhme&lt;mrzhme@vip.qq.com&gt;</span><br><span class="line"><span class="comment">#把宿主机当前上下文的c.txt拷贝到容器/usr/local/路径下</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> c.txt /usr/local/cincontainer.txt</span></span><br><span class="line"><span class="comment">#把java与tomcat添加到容器中</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> jdk-8u301-linux-x64.tar.gz /usr/local/</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> apache-tomcat-9.0.55.tar.gz /usr/local/</span></span><br><span class="line"><span class="comment">#安装vim编辑器</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install vim</span></span><br><span class="line"><span class="comment">#设置工作访问时候的WORKDIR路径，登录落脚点</span></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="comment">#配置java与tomcat环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/jdk1.<span class="number">8.0</span>_301</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar</span><br><span class="line"><span class="keyword">ENV</span> CATALINA_HOME /usr/local/apache-tomcat-<span class="number">9.0</span>.<span class="number">55</span></span><br><span class="line"><span class="keyword">ENV</span> CATALINA_BASE /usr/local/apache-tomcat-<span class="number">9.0</span>.<span class="number">55</span></span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:$JAVA_HOME/bin:$CATALINA_HOME/lib:$CATALINA_HOME/bin</span><br><span class="line"><span class="comment">#容器运行时监听的端口</span></span><br><span class="line"><span class="keyword">EXPOSE</span>  <span class="number">8080</span></span><br><span class="line"><span class="comment">#启动时运行tomcat</span></span><br><span class="line"><span class="comment"># ENTRYPOINT [&quot;/usr/local/apache-tomcat-9.0.55/bin/startup.sh&quot; ]</span></span><br><span class="line"><span class="comment"># CMD [&quot;/usr/local/apache-tomcat-9.0.55/bin/catalina.sh&quot;,&quot;run&quot;]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /usr/local/apache-tomcat-9.0.55/bin/startup.sh &amp;&amp; <span class="built_in">tail</span> -F /usr/local/apache-tomcat-9.0.55/bin/logs/catalina.out</span></span><br></pre></td></tr></table></figure><h4 id="4-构建镜像：docker-build-t-mrlinxitomcat9"><a href="#4-构建镜像：docker-build-t-mrlinxitomcat9" class="headerlink" title="4. 构建镜像：docker build -t mrlinxitomcat9 ."></a>4. 构建镜像：<code>docker build -t mrlinxitomcat9 .</code></h4><p><strong>注意：</strong>这里为什么没有加 -f 和Dockerfile的路径？Dockerfile的标准文件名就是Dockerfile，当当前目录下用于构建镜像的Dockerfile的文件名是标准文件名时，可以省略-f+路径。这时Docker会直接读取当前目录下名为Dockerfile的文件进行镜像的构建。</p><h4 id="5-创建容器并启动"><a href="#5-创建容器并启动" class="headerlink" title="5. 创建容器并启动"></a>5. 创建容器并启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8888:8080 --name myt9 -v /mydocker/tomcat9/test:/usr/local/apache-tomcat-9.0.55/webapps/test -v /mydocker/tomcat9/tomcat9logs/:/usr/local/apache-tomcat-9.0.55/logs --privileged=true mrlinxitomcat9</span><br></pre></td></tr></table></figure><h4 id="6-测试"><a href="#6-测试" class="headerlink" title="6. 测试"></a>6. 测试</h4><p>记得防火墙开放对应的端口（直接关闭防火墙也可以，但是不推荐）：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">firewall-cmd --permanent --zone=public --add-port=8888/tcp</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638356524487-9744cde1-e0f5-4dd6-bd3f-8bdc55c6249a.png" alt="img">访问成功。</p><h4 id="7-结合前述的容器卷将测试的web服务test发布"><a href="#7-结合前述的容器卷将测试的web服务test发布" class="headerlink" title="7. 结合前述的容器卷将测试的web服务test发布"></a>7. 结合前述的容器卷将测试的web服务test发布</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /mydocker/tomcat9/test</span><br><span class="line">mkdir WEB-INF  </span><br></pre></td></tr></table></figure><p>在test目录下创建a.jsp文件，在WEB-INF下创建web.xml文件</p><p>web.xml：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;2.5&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>test<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>a.jsp：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=&quot;java&quot; contentType=&quot;text/html; charset=UTF-8&quot; pageEncoding=&quot;UTF-8&quot;%&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html; charset=UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Insert title here<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    -----------welcome------------</span><br><span class="line">    &lt;%=&quot;i am in docker tomcat self &quot;%&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    &lt;% System.out.println(&quot;=============docker tomcat self&quot;);%&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>宿主机创建的文件已经同步过去了</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638357904149-61440767-ec7e-4d2f-98e5-52f6283ad049.png" alt="img"></p><p>重启一下容器：<code>docker restart myt9</code>，访问我们刚才发布的test</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638358027262-c2776092-7632-40f8-9486-2a698fe1ae60.png" alt="img"></p><h3 id="7-6-总结"><a href="#7-6-总结" class="headerlink" title="7.6 总结"></a>7.6 总结</h3><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638358194475-8fae9e61-e779-4b62-a12a-432c276b9466.png" alt="img"></p><h2 id="八、Docker常用安装"><a href="#八、Docker常用安装" class="headerlink" title="八、Docker常用安装"></a>八、Docker常用安装</h2><h3 id="8-1-总体步骤"><a href="#8-1-总体步骤" class="headerlink" title="8.1 总体步骤"></a>8.1 总体步骤</h3><p>搜索镜像-&gt;拉取镜像-&gt;查看镜像-&gt;启动镜像-&gt;停止容器-&gt;移除容器</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker search xxx` -&gt; `docker pull xxx:TAG` -&gt; `docker images xxx` -&gt; `docker run [-itd -p port:port] [--name yyy] xxx:TAG` -&gt; `docker stop 容器ID/yyy` -&gt; `docker rm [-f] yyy</span><br></pre></td></tr></table></figure><h3 id="8-2-安装mysql"><a href="#8-2-安装mysql" class="headerlink" title="8.2 安装mysql"></a>8.2 安装mysql</h3><h4 id="mysql5-7"><a href="#mysql5-7" class="headerlink" title="mysql5.7"></a>mysql5.7</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br><span class="line"></span><br><span class="line">docker run -p 3306:3306 --name mysql \</span><br><span class="line">-v /mydata/mysql/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=10086 \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure><p>命令说明：</p><p>-p 12345:3306：将主机的3306端口映射到docker容器的3306端口。</p><p>–name mysql：运行服务名字</p><p>-v &#x2F;mydata&#x2F;mysql&#x2F;conf:&#x2F;etc&#x2F;mysql ：将主机&#x2F;mydata&#x2F;mysql&#x2F;conf目录，挂载到容器的&#x2F;etc&#x2F;mysql目录</p><p>-v &#x2F;mydata&#x2F;mysql&#x2F;data:&#x2F;var&#x2F;lib&#x2F;mysql：将主机的&#x2F;mydata&#x2F;mysql&#x2F;data目录，挂载到容器的&#x2F;var&#x2F;lib&#x2F;mysql目录</p><p>-v &#x2F;mydata&#x2F;mysql&#x2F;log:&#x2F;var&#x2F;log&#x2F;mysql：将主机的&#x2F;mydata&#x2F;mysql&#x2F;log目录，挂载到容器的&#x2F;var&#x2F;log&#x2F;mysql目录</p><p>-e MYSQL_ROOT_PASSWORD&#x3D;10086：初始化 root 用户的密码。</p><p>-d mysql:5.7 : 后台程序运行mysql5.7</p><p>使用windows上的sqlyog进行远程连接：</p><p>记得关闭宿主机防火墙或者开启3306端口</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看防火墙信息，看哪些端口可以访问</span></span><br><span class="line">firewall-cmd --list-all</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭防火墙</span></span><br><span class="line">systemctl stop firewalld</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">或者开启3306端口访问（推荐）</span></span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=3306/tcp</span><br><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638456614470-3fdeeed3-c09b-4f91-ab48-ad906e106adf.png" alt="img"></p><h4 id="mysql8"><a href="#mysql8" class="headerlink" title="mysql8"></a>mysql8</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:8.0.22</span><br><span class="line"></span><br><span class="line">docker run -p 3333:3306 --name mysql8 \</span><br><span class="line">-v /mydata/mysql8/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql8/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql8/conf:/etc/mysql \</span><br><span class="line">-v /mydata/mysql8/mysql-files:/var/lib/mysql-files \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=10086 \</span><br><span class="line">-d mysql:8.0.22</span><br></pre></td></tr></table></figure><p>mysql8 需要多加一个<code>-v /mydata/mysql8/mysql-files:/var/lib/mysql-files</code> 不然启动报错。我们尝试使用windows上的sqlyog远程连接docker启动的mysql8容器，发现报错</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638456847352-cf34e758-fd52-448c-bead-723e5ff170a5.png" alt="img"></p><p>这是因为mysql8默认使用caching_sha2_password加密方式，而sqlyog不支持，所以需要修改加密规则为mysql_native_password</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过/bin/bash 进入mysql8容器</span></span><br><span class="line">docker exec -it mysql8 /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登陆数据库</span></span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><p>随后我们需要查看是否有不受ip限制的用户，以及修改加密方式</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 切换到mysql数据库</span><br><span class="line">use mysql</span><br><span class="line"></span><br><span class="line"># 查看<span class="keyword">user</span>表中的用户和host信息</span><br><span class="line"><span class="keyword">select</span> <span class="keyword">user</span>, host <span class="keyword">from</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638500559346-3608511d-01fd-4333-9827-ac6af6ea4119.png" alt="img"></p><p>可以看到，root已经有一个%，现在修改root@%的加密规则（如果你想新建一个不受访问ip限制的用户也可以mysql高级篇有详细记录：<a href="https://www.yuque.com/mrlinxi/pxvr4g/rigw3d#hKp7S">远程访问授权</a>)</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 修改<span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span>用户的密码规则和密码</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;10086&#x27;</span>;</span><br><span class="line"></span><br><span class="line"># 设置密码永不过期</span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;10086&#x27;</span> PASSWORD EXPIRE NEVER;</span><br><span class="line"></span><br><span class="line">#刷新权限</span><br><span class="line">FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>再次测试远程连接：</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22423156/1638500835658-c77b71e1-32af-488e-9820-284cd73cc9a1.png" alt="img"> 连接成功！</p><h4 id="使用docker对mysql容器中的数据进行备份"><a href="#使用docker对mysql容器中的数据进行备份" class="headerlink" title="使用docker对mysql容器中的数据进行备份"></a>使用docker对mysql容器中的数据进行备份</h4><p>将docker mysql容器中的所有数据库导出到宿主机的&#x2F;mydata&#x2F;mysql8&#x2F;all-databases.sql文件中</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec myql服务容器ID sh -c &#x27; exec mysqldump --all-databases -uroot -p&quot;10086&quot; &#x27; &gt; /mydata/mysql8/all-databases.sql</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果使用UTF-16编码 用--result-file= 替换&gt;</span></span><br><span class="line">docker exec myql服务容器ID sh -c &#x27; exec mysqldump --all-databases -uroot -p&quot;10086&quot; &#x27; --result-file=/mydata/mysql8/all-databases.sql</span><br></pre></td></tr></table></figure><p>mysqldump是mysql自带的逻辑备份工具。命令格式：<a href="https://dev.mysql.com/doc/refman/8.0/en/mysqldump.html">官网mysqldump</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysqldump [选项] 数据库名 [表名] &gt; /路径/filename.sql</span><br><span class="line">mysqldump [选项] --数据库名 [选项 表名] &gt; /路径/filename.sql</span><br><span class="line">mysqldump [选项] --all-databases [选项] &gt; /路径/filename.sql</span><br></pre></td></tr></table></figure><p>常用选项说明：</p><table><thead><tr><th>参数名</th><th>缩写</th><th>含义</th></tr></thead><tbody><tr><td>–host</td><td>-h</td><td>服务器IP地址</td></tr><tr><td>–port</td><td>-P</td><td>服务器端口号</td></tr><tr><td>–user</td><td>-u</td><td>mysql用户名</td></tr><tr><td>–password</td><td>-p</td><td>mysql密码</td></tr><tr><td>–database</td><td></td><td>指定要备份的数据库</td></tr><tr><td>–all-databases</td><td></td><td>备份mysql上的所有数据库</td></tr><tr><td>–compact</td><td></td><td>压缩模式，产生更少的输出</td></tr><tr><td>–comments</td><td></td><td>添加注释信息</td></tr></tbody></table><h3 id="8-3-安装redis"><a href="#8-3-安装redis" class="headerlink" title="8.3 安装redis"></a>8.3 安装redis</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis</span><br><span class="line"></span><br><span class="line">docker run -p 6379:6379 -v /mydata/redis/data:/data -v /mydata/redis/conf/redis.conf:/usr/local/etc/redis/redis.conf  -d redis redis-server /usr/local/etc/redis/redis.conf --appendonly yes</span><br></pre></td></tr></table></figure><p>–appendonly yes 表示使用AOF进行持久化 （redis默认使用rdb进行持久化）</p><p>redis.conf是个文件夹，不是个文件 (小声BB：这个redis.conf文件夹是不是太容易引起歧义了？还有redis-server启动的时候，后面跟的那串不是指定的配置文件的路径吗，讲道理redis.conf应该就是个配置文件才对)；</p><p>在主机&#x2F;mydata&#x2F;redis&#x2F;conf&#x2F;redis.conf目录下新建redis.conf文件</p><p><code>vim /mydata/redis/conf/redis.conf</code>  <a href="https://www.yuque.com/attachments/yuque/0/2021/txt/22423156/1638542972834-f404cbca-6492-4a41-adcd-b6ff934282d3.txt">📎redis.conf.txt</a></p><p>测试redis-cli连接：<code>docker exec -it redis容器ID redis-cli</code></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638543060470-c9d2ae73-1dcf-40d9-8e07-c0f758b27352.png" alt="img"></p><p>测试生成持久化文件：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638543142322-5e0e0c2d-e57d-4801-b432-bf22bf018a99.png" alt="img"></p><h2 id="九、本地镜像发布到阿里云"><a href="#九、本地镜像发布到阿里云" class="headerlink" title="九、本地镜像发布到阿里云"></a>九、本地镜像发布到阿里云</h2><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638543174016-789c3bbe-217b-49d8-a3bf-7be236507bcc.png" alt="img"></p><h3 id="8-1-镜像的生成方法"><a href="#8-1-镜像的生成方法" class="headerlink" title="8.1 镜像的生成方法"></a>8.1 镜像的生成方法</h3><ul><li><p>前面讲过的DockerFile</p></li><li><p>从容器创建一个新的镜像：<code>docker commit [OPTIONS] 容器ID [REPOSITORY[:TAG]]</code></p></li><li><ul><li>OPTIONS选项说明：-a：提交的镜像作者、-m：提交时的说明文字</li></ul></li></ul><p>我们之前自己做了一个包含vim和ifconfig的centos——mycentos:0.1，现在我们把它更新到0.2，并生成一个0.2的镜像。</p><p>先看看mycentos:0.1有没有容器<code>docker ps -a</code>，没有就创建一个容器，<code>docker run -itd mycentos:0.1</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker commit -a mrlinxi -m &quot;new contos 0.2 from 0.1&quot; 容器ID mycentos:0.2</span><br></pre></td></tr></table></figure><p>这样就得到了mycentos:0.2的镜像</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638579150604-5e5e175b-d5de-4522-9a56-ff3e68d41028.png" alt="img"></p><h3 id="9-2-将本地镜像推送到阿里云"><a href="#9-2-将本地镜像推送到阿里云" class="headerlink" title="9.2 将本地镜像推送到阿里云"></a>9.2 将本地镜像推送到阿里云</h3><p>登陆阿里云，进入控制台</p><p><img src="https://cdn.nlark.com/yuque/0/2021/png/22423156/1638579895193-548577ed-ca9a-42f2-a6fc-f9c04f6d4691.png" alt="img"></p><p>左上角菜单，点开搜索容器镜像服务：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638579944641-1dc91178-ba82-429f-8595-865c7455e682.png" alt="img"></p><p>实例列表—&gt;个人&#x2F;企业(要钱) 没有的需要创建一下，创建需要设置一个repository密码</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638580071904-e7a62348-3712-4a7d-bc0e-bcebcc8f4304.png" alt="img"></p><p>然后创建一个镜像仓库</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638580295659-6237e091-42d6-4894-a24e-2c41785ee3a4.png" alt="img"></p><p>然后下一步，选择本地仓库创建：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638580339243-c4662f2d-9894-419a-926c-d09d413d7f44.png" alt="img"></p><p>创建好仓库后，会有相应的操作指南：</p><p>aliyun给的操作指南:</p><h4 id="1-登录阿里云Docker-Registry"><a href="#1-登录阿里云Docker-Registry" class="headerlink" title="1. 登录阿里云Docker Registry"></a>1. 登录阿里云Docker Registry</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker login --username=兴趣使然的小小 registry.cn-chengdu.aliyuncs.com</span><br></pre></td></tr></table></figure><p>用于登录的用户名为阿里云账号全名，密码为开通服务时设置的密码。</p><p>您可以在访问凭证页面修改凭证密码。</p><h4 id="2-从Registry中拉取镜像"><a href="#2-从Registry中拉取镜像" class="headerlink" title="2. 从Registry中拉取镜像"></a>2. 从Registry中拉取镜像</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker pull registry.cn-chengdu.aliyuncs.com/mrilinxi/mycentos:[镜像版本号]</span><br></pre></td></tr></table></figure><h4 id="3-将镜像推送到Registry"><a href="#3-将镜像推送到Registry" class="headerlink" title="3. 将镜像推送到Registry"></a>3. 将镜像推送到Registry</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker login --username=兴趣使然的小小 registry.cn-chengdu.aliyuncs.com$ docker tag [ImageId] registry.cn-chengdu.aliyuncs.com/mrilinxi/mycentos:[镜像版本号]$ docker push registry.cn-chengdu.aliyuncs.com/mrilinxi/mycentos:[镜像版本号]</span><br></pre></td></tr></table></figure><p>请根据实际镜像信息替换示例中的[ImageId]和[镜像版本号]参数。</p><h4 id="4-选择合适的镜像仓库地址"><a href="#4-选择合适的镜像仓库地址" class="headerlink" title="4. 选择合适的镜像仓库地址"></a>4. 选择合适的镜像仓库地址</h4><p>从ECS推送镜像时，可以选择使用镜像仓库内网地址。推送速度将得到提升并且将不会损耗您的公网流量。</p><p>如果您使用的机器位于VPC网络，请使用 registry-vpc.cn-chengdu.aliyuncs.com 作为Registry的域名登录。</p><h4 id="5-示例"><a href="#5-示例" class="headerlink" title="5. 示例"></a>5. 示例</h4><p>使用”docker tag”命令重命名镜像，并将它通过专有网络地址推送至Registry。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker imagesREPOSITORY                                                         TAG                 IMAGE ID            CREATED             VIRTUAL SIZEregistry.aliyuncs.com/acs/agent                                    0.7-dfb6816         37bb9c63c8b2        7 days ago          37.89 MB$ docker tag 37bb9c63c8b2 registry-vpc.cn-chengdu.aliyuncs.com/acs/agent:0.7-dfb6816</span><br></pre></td></tr></table></figure><p>使用 “docker push” 命令将该镜像推送至远程。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ docker push registry-vpc.cn-chengdu.aliyuncs.com/acs/agent:0.7-dfb6816</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638580567240-fcf9ded7-0175-4bb3-8205-0cfb9e359538.png" alt="img"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">登陆仓库 首次登陆需要输入之前我们设置的仓库密码</span></span><br><span class="line">docker login --username=阿里云账户 registry.cn-hangzhou.aliyuncs.com</span><br><span class="line"></span><br><span class="line">docker tag [ImageId] registry.cn-hangzhou.aliyuncs.com/mrlinxi/mycentos:[镜像版本号]</span><br><span class="line">docker push registry.cn-hangzhou.aliyuncs.com/mrlinxi/mycentos:[镜像版本号]</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638580765715-1f3cb6d4-173b-446e-bab4-b1a9b28731e1.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638581159286-1ad8f8a9-b24a-44b2-8a05-9ee291206f5d.png" alt="img"></p><p>提交后，本地也会有一份提交的镜像。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638600211757-8aec55a4-687f-497e-ae7d-811c7b639412.png" alt="img"></p><p>我们尝试从阿里云拉取我们刚才push的镜像。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除本地提交的镜像</span></span><br><span class="line">docker rmi -f registry.cn-hangzhou.aliyuncs.com/mrlinxi/mycentos:0.2.1</span><br><span class="line"></span><br><span class="line">dokcer pull registry.cn-hangzhou.aliyuncs.com/mrlinxi/mycentos:0.2.1</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1638600388706-ddeb4535-dc1e-4dcc-9d5b-24193a91e127.png" alt="img"></p><h2 id="十、Docker-Compose"><a href="#十、Docker-Compose" class="headerlink" title="十、Docker Compose"></a>十、Docker Compose</h2><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p><code>Compose</code>项目是Docker官方的开源项目，负责实现对Docker容器集群的快速编排。从功能上看，跟<code>OpenStack</code>中的<code>Heat</code>十分相似。</p><p><code>Compose</code>定位是[定义和运行多个<code>Dockerfile</code>模板文件]，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要更多应用容器来相互配合完成某个项目的情况。例如要实现一个Web项目，除了Web服务器本身，往往还需要再加上后端的数据服务容器，甚至还需要负载容器等。</p><p><code>Compose</code>恰好满足了这样的需求。它允许用户通过一个单独的<code>docker-compose.yml</code>模板文件(YAML格式)来定义一组相关联的应用容器为一个项目</p><p><code>Compose</code>中有两个重要的概念：</p><ul><li>服务(<code>service</code>)：一个应用的容器，实际上可以包括若干运行相同镜像实例。</li><li>项目(<code>project</code>)：由一组关联的应用容器组成的完整业务单元，在<code>docker-compose.yml</code>文件中定义。</li></ul><p><code>Compose</code>的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷的生命周期管理</p><p><code>Compose</code>项目由Python编写，实现上调用了Docker服务器提供的API来对容器进行管理。因此，只要所操纵的平台支持Docker API，就可以在其上利用<code>Compose</code>来进行编排项目</p><h4 id="Docker-Compose安装"><a href="#Docker-Compose安装" class="headerlink" title="Docker-Compose安装"></a>Docker-Compose安装</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L https://github.com/docker/compose/releases/download/1.29.2/docker-compose-Linux-x86_64 &gt; /usr/local/bin/docker-compose <span class="comment">#下载docker-compose</span></span><br><span class="line">docker-compose --version <span class="comment">#查看docker-compose是否安装成功复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h4 id="Docker-Compose的入门"><a href="#Docker-Compose的入门" class="headerlink" title="Docker-Compose的入门"></a>Docker-Compose的入门</h4><ol><li><p>创建一个docker-compose.yml</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">touch</span> docker-compose.yml复制复制失败复制成功</span><br></pre></td></tr></table></figure></li><li><p>在配置文件中定义一个项目中存在哪些服务</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">webapp:</span>  <span class="comment">#服务名全局唯一</span></span><br><span class="line">        <span class="attr">image:</span> <span class="comment">#镜像名:tag</span></span><br><span class="line">        <span class="attr">ports:</span>  <span class="comment">#端口映射</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br><span class="line">            <span class="string">复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><p>3.通过docker-compose运行一组容器</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up    <span class="comment">#前台运行</span></span><br><span class="line">docker-compose up -d   <span class="comment">#后台运行复制复制失败复制成功</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="Docker-Compose命令模板指令"><a href="#Docker-Compose命令模板指令" class="headerlink" title="Docker-Compose命令模板指令"></a>Docker-Compose命令模板指令</h4><p>模板文件默认是使用<code>Compose</code>的核心，涉及到的指令关键字也比较多，默认的模板文件名称为<code>docker-compose.yml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">webapp:</span>  <span class="comment">#服务名全局唯一</span></span><br><span class="line">        <span class="attr">image:</span> <span class="comment">#镜像名:tag</span></span><br><span class="line">        <span class="attr">ports:</span>  <span class="comment">#端口映射(建议引号括起来)</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><p>注意每个服务都必须通过<code>image</code>指令指定镜像或<code>build</code>指令（需要Dockerfile）等来自动构建生成镜像</p><p>如果使用<code>build</code>指令，在Dockerfile中设置的选项（例如：<code>CMD</code>,<code>EXPOSE</code>,<code>VOLUME</code>,<code>ENV</code>等）将会自动被获取，无需在<code>docker-compose.yml</code>中重复设置。</p><h5 id="imgae"><a href="#imgae" class="headerlink" title="imgae"></a>imgae</h5><p>指定为镜像名称或镜像ID。如果镜像本地不存在，<code>Compose</code>将会尝试手动拉起这个镜像</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">image:</span> <span class="string">ubuntu</span>        <span class="comment">#默认为最新版本</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">镜像名:版本号</span>    </span><br><span class="line"><span class="attr">image:</span> <span class="string">摘要复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h5 id="ports"><a href="#ports" class="headerlink" title="ports"></a>ports</h5><p>暴露端口信息。</p><p>使用宿主端口：容器端口（HOST：CONTAINER）格式，或者仅仅指定容器的端口（宿主将会随机选择端口）都可以。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ports:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;3000&quot;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&quot;8000&quot;</span><span class="string">:&quot;8001&quot;复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><p>主要：当使用<code>HOST:CONTAINER</code>格式来映射端口时，如你使用的容器端口小于60并且没有放到引号里面，可能会得到错误的结果，因为<code>YAML</code>会自动解析xx:yy这种数字格式为60进制，为避免出现这种问题，建议采用引号包括起来的字符串格式</p><h5 id="volumes"><a href="#volumes" class="headerlink" title="volumes"></a>volumes</h5><p>数据卷所挂载路径设置，可以设置为宿主机路径(<code>HOST</code>:<code>CONTAINER</code>)或者数据卷的名称(<code>VOLUME</code>:<code>CONTAINER</code>)，并且可以设置访问模式(<code>HOST</code>:<code>CONTAINER:ro</code>)。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/var/lib/mysql</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cache/:/tmp/cache</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">~/configs:/etc/configs/:ro复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><p>如果路径为数据卷名称，必须在文件中配置数据卷。</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.2&#x27;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">    <span class="attr">tomcat:</span></span><br><span class="line">        <span class="attr">tomcat:</span> <span class="string">tomcat:8.0</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">        <span class="attr">voulumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">tomcatwebapps:/usr/local/tomcat/webapps</span></span><br><span class="line"><span class="attr">volumes:</span> <span class="comment">#声明上面容器使用的卷名</span></span><br><span class="line">    <span class="attr">tomcatwebapps:</span> <span class="comment">#使用的卷名</span></span><br><span class="line">        <span class="attr">external:</span>  <span class="comment">#使用自定义的卷名 </span></span><br><span class="line">            <span class="literal">true</span>    <span class="comment">#true确定使用指定卷名    注意：一旦使用外部自定义卷名，需要手动创建数据卷复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h5 id="networks"><a href="#networks" class="headerlink" title="networks"></a>networks</h5><p>配置容器连接的网络</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&#x27;3.2&#x27;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">    <span class="attr">tomcat01:</span></span><br><span class="line">        <span class="attr">tomcat:</span> <span class="string">tomcat:8.0</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;8080:8080&quot;</span></span><br><span class="line">        <span class="attr">voulumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">tomcatwebapps01:/usr/local/tomcat/webapps</span></span><br><span class="line">        <span class="attr">networks:</span>    <span class="comment">#代表当前服务使用哪个网络桥</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">hello</span></span><br><span class="line">    <span class="attr">tomcat02:</span></span><br><span class="line">        <span class="attr">tomcat:</span> <span class="string">tomcat:8.0</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;8081:8080&quot;</span></span><br><span class="line">        <span class="attr">voulumes:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">tomcatwebapps01:/usr/local/tomcat/webapps</span></span><br><span class="line">        <span class="attr">networks:</span>    <span class="comment">#代表当前服务使用哪个网络桥</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">hello</span></span><br><span class="line"><span class="attr">volumes:</span> <span class="comment">#声明上面容器使用的卷名</span></span><br><span class="line">    <span class="attr">tomcatwebapps01:</span> <span class="comment">#使用的卷名</span></span><br><span class="line">        <span class="attr">external:</span>  <span class="comment">#使用自定义的卷名 </span></span><br><span class="line">            <span class="literal">false</span>    <span class="comment">#true确定使用指定卷名    注意：一旦使用外部自定义卷名，需要手动创建数据卷</span></span><br><span class="line">    <span class="attr">tomcatwebapps02:</span></span><br><span class="line"><span class="attr">networks:</span> <span class="comment">#定义服务用到桥</span></span><br><span class="line">    <span class="attr">hello:</span> <span class="comment">#上面服务用到网桥名称，默认为bridge</span></span><br><span class="line">        <span class="attr">external:</span> </span><br><span class="line">            <span class="literal">true</span>    <span class="comment">#使用外部指定网桥    注意：网桥必须存在复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h5 id="container-name"><a href="#container-name" class="headerlink" title="container_name"></a>container_name</h5><p>指定容器名。默认将会使用<code>项目名称_服务名称_序号</code>这样子的格式</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">container_name:</span> <span class="string">docker-web-container复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：指定容器后，该服务无法进行扩展，因为Docker不允许多个容器具有相同的名称</p></blockquote><h5 id="environment"><a href="#environment" class="headerlink" title="environment"></a>environment</h5><p>设置环境变量，你可以使用数组或字典两种格式</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">environment:</span> </span><br><span class="line">    <span class="attr">RACK_ENV:</span> <span class="string">development</span></span><br><span class="line">    <span class="attr">SESSION_SECRET:</span></span><br><span class="line"><span class="attr">environment:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">RACK_ENV=development</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">SESSION_SECRET复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><p>如果变量名称或者值中用到<code>true</code>|<code>false</code>,<code>yes</code>|<code>no</code>等表达<strong>布尔</strong>含义的词汇，最好放到引号里，避免YAML自动内容为对应的布尔语义</p><h5 id="command"><a href="#command" class="headerlink" title="command"></a>command</h5><p>覆盖容器启动后执行的命令</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">command:</span> <span class="string">echo</span> <span class="string">&quot;hello world&quot;</span><span class="string">复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h5 id="env-file"><a href="#env-file" class="headerlink" title="env_file"></a>env_file</h5><p>从文件中获取环境变量，可以单独的文件路径或列表</p><p>如果通过<code>docker-compose -f FILE</code>方式来指定Compose模板文件，则<code>env_file</code>中变量的路径会基于模板文件路径</p><p>如果有变量名称与<code>environment</code>指令冲突，则按照惯例，以后者为准</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">env_file:</span> <span class="string">.env</span></span><br><span class="line"><span class="attr">env_file:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">./common.env</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">./apps/web.env</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">/opt/secrets.env复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><p>环境变量文件中的每一行必须符合格式，支持<code>#</code>开头的注释行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Common.env: Set development enviroment</span><br><span class="line">PROG_ENV=development复制复制失败复制成功</span><br></pre></td></tr></table></figure><h5 id="depends-on"><a href="#depends-on" class="headerlink" title="depends_on"></a>depends_on</h5><p>解决容器的依赖，启动先后问题。下面的例子中会先启动<code>redis db</code>再启动<code>web</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3.8&quot;</span></span><br><span class="line"><span class="attr">services:</span> </span><br><span class="line">    <span class="attr">web:</span> </span><br><span class="line">        <span class="attr">build:</span> </span><br><span class="line">        <span class="attr">depends_on:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">db</span>    <span class="comment">#服务名</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">redis</span>    <span class="comment">#服务名</span></span><br><span class="line">    <span class="attr">redis:</span> </span><br><span class="line">        <span class="attr">image:</span> <span class="string">redis</span></span><br><span class="line">    <span class="attr">db:</span> </span><br><span class="line">        <span class="attr">image:</span> <span class="string">postgres复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：<code>web</code>服务不会等待<code>redis db</code>[完全启动]之后才启动</p></blockquote><h5 id="healthcheck"><a href="#healthcheck" class="headerlink" title="healthcheck"></a>healthcheck</h5><p>通过命令检查容器是否健康运行</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">healthcheck:</span> </span><br><span class="line">    <span class="attr">test:</span> [<span class="string">&quot;CMD&quot;</span>,<span class="string">&quot;curl&quot;</span>,<span class="string">&quot;-f&quot;</span>,<span class="string">&quot;http://localhost&quot;</span>]</span><br><span class="line">    <span class="attr">interval:</span> <span class="string">1m30s</span></span><br><span class="line">    <span class="attr">timeout:</span> <span class="string">10s</span></span><br><span class="line">    <span class="attr">retries:</span> <span class="number">3</span><span class="string">复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h5 id="sysctls"><a href="#sysctls" class="headerlink" title="sysctls"></a><a href="https://docs.hwawy.cn/#/Docker/?id=sysctls">sysctls</a></h5><p>配置容器内核参数</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sysctls:</span></span><br><span class="line">    <span class="attr">net.core.somaxconn:</span> <span class="number">1024</span></span><br><span class="line">    <span class="attr">net.ipv4.tcp_syncookies:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">sysctls:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">net.core.somaxconn=1024</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">net.ipv4.tcp_syncookies=0复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h5 id="ulimits"><a href="#ulimits" class="headerlink" title="ulimits"></a>ulimits</h5><p>指定容器的ulimits限制数</p><p>例如，指定最大进程数为65535，指定文件句柄数位2000(软限制，应用可以随时修改，不能操作限制)和40000（系统硬件限制，只能root用户提高）</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">ulimits:</span></span><br><span class="line">    <span class="attr">nproc:</span> <span class="number">65535</span></span><br><span class="line">    <span class="attr">nofile:</span> </span><br><span class="line">        <span class="attr">soft:</span> <span class="number">20000</span></span><br><span class="line">        <span class="attr">hard:</span> <span class="number">40000</span><span class="string">复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h5 id="build"><a href="#build" class="headerlink" title="build"></a>build</h5><p>用来将指定的Dockerfile打包成镜像，然后再运行该镜像</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">services:</span> </span><br><span class="line">    <span class="attr">web:</span></span><br><span class="line">        <span class="attr">build:</span>    <span class="comment">#用来指定Dockerfile所在目录，先根据build中的Dockerfile自动构建镜像，自动运行容器</span></span><br><span class="line">            <span class="attr">context:</span> <span class="comment">#指定上下文目录dockerfile所在的目录</span></span><br><span class="line">            <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span> <span class="comment">#dockerfile构建文件名字</span></span><br><span class="line">        <span class="attr">container_name:</span> <span class="string">容器名</span></span><br><span class="line">        <span class="attr">ports:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">&quot;8080:9091&quot;</span></span><br><span class="line">        <span class="attr">network:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">hello</span></span><br><span class="line">        <span class="attr">depends_on:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">tomcat01复制复制失败复制成功</span></span><br></pre></td></tr></table></figure><h4 id="Docker-Compose中的常用命令"><a href="#Docker-Compose中的常用命令" class="headerlink" title="Docker-Compose中的常用命令"></a>Docker-Compose中的常用命令</h4><h5 id="命令对象与格式"><a href="#命令对象与格式" class="headerlink" title="命令对象与格式"></a>命令对象与格式</h5><p>对于<code>Compose</code>来说，大部分命令的对象既可以是项目本身，也可以指定为项目中的服务和容器。如果没有特别的说明，命令对象将是项目，这意味着项目中所有的服务都会收到命令影响</p><p>执行<code>docker-compose [COMMAND] --help</code> 或者<code>docker-compose help [COMMAND]</code>可以查看具体是某个命令的使用格式</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose [-f=&lt;args&gt;...] [options] [COMMAND] [ARGS...]复制复制失败复制成功</span><br></pre></td></tr></table></figure><h5 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h5><ul><li><code>-f</code> ,<code>--file FILE</code>指定使用的Compose模板文件，默认为docker-compose.yml，可以多次指定</li><li><code>-p</code>,’–project-name NAME’指定项目名称，默认使用所在目录作为项目名</li><li><code>--x-networking</code>使用Docker的可插拔网络后端特性</li><li><code>--verbose</code>输出更多调试信息</li><li><code>-v,--version</code>打印版本并退出</li></ul><h5 id="命令使用说明"><a href="#命令使用说明" class="headerlink" title="命令使用说明"></a>命令使用说明</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">up</span><br></pre></td></tr></table></figure><p>格式为<code>docker-compose up [option] [SERVICE...]</code></p><ul><li>该命令十分强大，它将尝试自动完成包括构建镜像，（重新）创建服务，启动服务，并管理服务相关容器的一系列操作</li><li>链接的服务都将自动启动，除非已经处于运行状态</li><li>大部分时候可以通过该命令来启动一个项目</li><li>默认情况，<code>docker-compose up</code>启动的容器都在前台，控制台将会同时打印所有容器的输出信息，可以很方便的进行调试</li><li>当通过<code>Ctrl -C</code> 停止命令时，所有容器将会停止</li><li>如果通过<code>docker-compose up</code>，将会在后台启动并运行所有的容器，一般推荐生产环境下使用该选项</li><li>默认情况下，如果服务容器已经存在，<code>docker-compose up</code>将会尝试停止该容器，然后重新创建（保持使用<code>volumes-from</code>挂载的卷），以保证新启动的服务匹配<code>docker-compose.yml</code>文件的最新内容</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dwon</span><br></pre></td></tr></table></figure><ul><li>此命令将会停止<code>up</code>命令启动的容器，并移除网络</li></ul><p><code>exec</code><strong>只能通过服务ID进入</strong></p><ul><li>进入指定容器</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps</span><br></pre></td></tr></table></figure><ul><li>格式为<code>docker-compose ps [options][SERVICE...]</code></li><li>列出选项中目前的所有容器</li><li>选项<ul><li><code>-q</code> 只打印容器的ID信息</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">restart</span><br></pre></td></tr></table></figure><ul><li>格式为<code>docker-compose rm [OPTION][SERVICE]</code></li><li>重启项目中的服务</li><li>选项：<ul><li><code>-t,--timeout TIMEOUT</code>指定重启前停止容器的操作（默认为10秒）</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm</span><br></pre></td></tr></table></figure><ul><li>格式为<code>docker-compose rm [OPTION][SERVICE]</code></li><li>删除所有（停止状态）服务容器，推荐先执行<code>docker-compose stop</code>来停止容器</li><li>选项：<ul><li><code>-f,--force</code>强制直接删除，包括非停止状态的容器，一般尽量不要使用该选项</li><li><code>-v</code>删除容器所挂在的数据卷</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">statr</span><br></pre></td></tr></table></figure><ul><li>格式为<code>docker-compose start [SERVICE...]</code></li><li>启动已经存在的服务容器</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stop</span><br></pre></td></tr></table></figure><ul><li>格式为<code>docker-compose stop [options][SERVICE...]</code></li><li>停止已经处于运行状态的容器，但不删除它。通过<code>docker-compose start</code>可以再次启动这些容器</li><li>选项：<ul><li><code>-t,--timeout TIMEOUT</code>停止容器时候的超时（默认为10秒）</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><ul><li>查看各个服务容器内运行的进度</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unpause</span><br></pre></td></tr></table></figure><ul><li>格式为docker-compose unpause [SEVICE..]</li><li>恢复处于暂停状态的容器</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">logs</span><br></pre></td></tr></table></figure><ul><li>查看服务日志</li></ul><p><a href="https://www.yuque.com/mrlinxi/pxvr4g/polyyw#fV3l8">借鉴链接1</a><br><a href="https://docs.hwawy.cn/#/Docker/">借鉴链接2</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 入门 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>restful接口设计规范</title>
      <link href="/2022/03/21/restful/"/>
      <url>/2022/03/21/restful/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>本文学习 RESTful API 设计相关的一些原则和规范。</p><p>少量的API在使用时不知不觉，但是当后续API不断增加了，需求变动也会导致API版本的变化。主要是为了可以进行规范化开发，并非是只能使用该规范，其他做法亦可，只是作为前人大佬已经在实践中进行总结整理。学习好的编程设计规范总是便捷有利的。</p><h2 id="二、常见规范"><a href="#二、常见规范" class="headerlink" title="二、常见规范"></a>二、常见规范</h2><h3 id="1、协议和域名"><a href="#1、协议和域名" class="headerlink" title="1、协议和域名"></a>1、协议和域名</h3><p>API通讯使用http协议，如果能使用https尽量使用https。</p><p>尽量使用独立域名，</p><p><a href="https://ladfeng.top/">https://ladfeng.top</a></p><p><a href="http://ladfeng.top/">http://ladfeng.top</a></p><p>如果不能使用可以以api 打头区分访问</p><p><a href="https://ladfeng.top/api">https://ladfeng.top/api</a></p><h3 id="2、版本变化"><a href="#2、版本变化" class="headerlink" title="2、版本变化"></a>2、版本变化</h3><p>常见的三种版本方式：</p><ol><li>在uri中放版本信息：<code>GET /v1/users/1</code></li><li>Accept Header：<code>Accept: application/json+v1</code></li><li>自定义 Header：<code>X-Api-Version: 1</code></li></ol><p>推荐用第一种，虽然没有那么优雅，最明显最方便。</p><h3 id="3、URI资源"><a href="#3、URI资源" class="headerlink" title="3、URI资源"></a>3、URI资源</h3><h3 id="3、URI资源-1"><a href="#3、URI资源-1" class="headerlink" title="3、URI资源"></a>3、URI资源</h3><h4 id="（1）URI概念"><a href="#（1）URI概念" class="headerlink" title="（1）URI概念"></a>（1）URI概念</h4><p>URI 表示资源，资源一般对应服务器端领域模型中的实体类。<br>URI规范</p><ul><li>不用大写;</li><li>用中杠<code>-</code>而不用下杠<code>_</code>;</li><li>参数列表要encode;</li><li>URI中的名词表示资源集合，使用复数形式;</li><li>避免层级过深</li><li>带上版本号</li></ul><h4 id="（2）资源路径"><a href="#（2）资源路径" class="headerlink" title="（2）资源路径"></a>（2）资源路径</h4><p><strong>资源集合：</strong></p><p>所有动物园</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/zoos/　　　　</span><br></pre></td></tr></table></figure><p>id为1的动物园内的所有动物</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">/zoos/1/animals</span><br></pre></td></tr></table></figure><p><strong>单个资源：</strong></p><p>比如：id为1的动物园</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">/zoos/1      </span><br></pre></td></tr></table></figure><p>id为1,2,3的动物园</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">/zoos/1;2;3   </span><br></pre></td></tr></table></figure><p><strong>层级过深资源：</strong></p><p>过深的导航容易导致url膨胀，不易维护，如 <code>GET /zoos/1/areas/3/animals/4</code>，尽量使用查询参数代替路径中的实体导航，如<code>GET /animals?zoo=1&amp;area=3</code>;</p><h3 id="4、操作类型"><a href="#4、操作类型" class="headerlink" title="4、操作类型"></a>4、操作类型</h3><p>对于资源的具体操作类型，由HTTP动词表示。</p><p>常用的HTTP动词有下面五个。</p><table><thead><tr><th align="left">HTTP动作</th><th align="left">含义</th><th align="left">对应的SQL操作</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">从服务器取出资源（一项或多项）</td><td align="left">SELECT</td></tr><tr><td align="left">POST</td><td align="left">在服务器新建一个资源。</td><td align="left">CREATE</td></tr><tr><td align="left">PUT</td><td align="left">在服务器更新资源（客户端提供改变后的完整资源）</td><td align="left">UPDATE</td></tr><tr><td align="left">PATCH</td><td align="left">在服务器更新资源（客户端提供改变的属性）</td><td align="left">UPDATE</td></tr><tr><td align="left">DELETE</td><td align="left">从服务器删除资源。</td><td align="left">DELETE</td></tr><tr><td align="left">HEAD</td><td align="left">获取资源的元数据。</td><td align="left"></td></tr><tr><td align="left">OPTIONS</td><td align="left">获取信息，关于资源的哪些属性是客户端可以改变的。</td><td align="left"></td></tr></tbody></table><p>示例：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">GET /zoos：列出所有动物园</span><br><span class="line">POST /zoos：新建一个动物园</span><br><span class="line">GET /zoos/ID：获取某个指定动物园的信息</span><br><span class="line">PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</span><br><span class="line">PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</span><br><span class="line">DELETE /zoos/ID：删除某个动物园</span><br><span class="line">GET /zoos/ID/animals：列出某个指定动物园的所有动物</span><br><span class="line">DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</span><br></pre></td></tr></table></figure><h3 id="5、条件过滤"><a href="#5、条件过滤" class="headerlink" title="5、条件过滤"></a>5、条件过滤</h3><p>记录数量很多，不能全返回，需要对数据进行过滤。API应该提供参数，过滤返回结果。</p><p>下面是一些常见的参数（分页条件、查询条件）</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">?limit=10：指定返回记录的数量</span><br><span class="line">?offset=10：指定返回记录的开始位置。</span><br><span class="line">?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</span><br><span class="line">?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</span><br><span class="line">?animal_type_id=1：指定筛选条件</span><br></pre></td></tr></table></figure><p>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET &#x2F;zoo&#x2F;ID&#x2F;animals 与 GET &#x2F;animals?zoo_id&#x3D;ID 的含义是相同的。</p><h3 id="6、状态码"><a href="#6、状态码" class="headerlink" title="6、状态码"></a>6、状态码</h3><h4 id="（1）常规状态码"><a href="#（1）常规状态码" class="headerlink" title="（1）常规状态码"></a>（1）常规状态码</h4><p>常规的状态主要是参考 HTTP 状态码。</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</span><br><span class="line">201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</span><br><span class="line">202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</span><br><span class="line">204 NO CONTENT - [DELETE]：用户删除数据成功。</span><br><span class="line">400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</span><br><span class="line">401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</span><br><span class="line">403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</span><br><span class="line">404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</span><br><span class="line">406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</span><br><span class="line">410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</span><br><span class="line">422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</span><br><span class="line">500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</span><br></pre></td></tr></table></figure><p><a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">HTTP状态码</a></p><h4 id="（2）业务类状态码"><a href="#（2）业务类状态码" class="headerlink" title="（2）业务类状态码"></a>（2）业务类状态码</h4><p>系统较多的时候，将系统码也带上，使用数字的定义也可以参考HTTP进行设计。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">业务系统码+四位数字</span><br></pre></td></tr></table></figure><p>具体的可以根据需求来。</p><h4 id="（3）错误与异常"><a href="#（3）错误与异常" class="headerlink" title="（3）错误与异常"></a>（3）错误与异常</h4><p>发生错误或异常时：</p><ol><li><p>不响应2xx开头的状态码，客户端可能会缓存成功的http请求；</p></li><li><p>正确设置http状态码，遵循HTTP协议规范；</p></li><li><p>Response body 需要提供的信息</p><ol><li><p>错误的代码，方便定位日志，排查问题；</p></li><li><p>直接正面的描述错误的文本。</p></li></ol></li></ol><p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p><table><thead><tr><th align="left">状态码</th><th align="left">场景</th></tr></thead><tbody><tr><td align="left">400</td><td align="left">参数校验失败</td></tr><tr><td align="left">401</td><td align="left">未验证的用户，未登录</td></tr><tr><td align="left">403</td><td align="left">无权限</td></tr><tr><td align="left">404</td><td align="left">资源不存在</td></tr><tr><td align="left">500</td><td align="left">非业务类异常</td></tr></tbody></table><p>业务类异常，一般自定义Exception，见词知义。</p><p>常规异常：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;failed&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">400</span>，</span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;参数xxx校验失败&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>业务类异常：系统名为ABCD</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;failed&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span>ABCD2001，</span><br><span class="line">    <span class="attr">&quot;error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;XXX数据已经过期。&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="（4）正常返回"><a href="#（4）正常返回" class="headerlink" title="（4）正常返回"></a>（4）正常返回</h4><p>正常返回，减少数据层级。</p><p>判断操作成功失败的标记 和操作的单个数据</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span>，</span><br><span class="line">    <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;操作成功&quot;</span>，</span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;zhangxiaocai&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>msg可选。</p><p>分页查询</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;paging&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;limit&quot;</span><span class="punctuation">:</span><span class="number">10</span><span class="punctuation">,</span><span class="attr">&quot;offset&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;total&quot;</span><span class="punctuation">:</span><span class="number">119</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>...<span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>操作与响应</p><table><thead><tr><th align="left">HTTP操作</th><th align="left">响应格式</th></tr></thead><tbody><tr><td align="left">GET</td><td align="left">状态标记+集合、单个对象</td></tr><tr><td align="left">POST</td><td align="left">状态标记+新增成功的对象</td></tr><tr><td align="left">PUT&#x2F;PATCH</td><td align="left">状态标记+更新成功的对象</td></tr><tr><td align="left">DELETE</td><td align="left">状态标记</td></tr></tbody></table><h4 id="（5）异步任务"><a href="#（5）异步任务" class="headerlink" title="（5）异步任务"></a>（5）异步任务</h4><p>对耗时的异步任务，服务器端接受客户端传递的参数后，应返回创建成功的任务资源，其中包含了任务的执行状态。客户端可以轮训该任务获得最新的执行进度。</p><p>比如常见信息：</p><p>任务ID，任务执行状态，发起人。<br>请求：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">GET /task/3    </span><br></pre></td></tr></table></figure><p>返回：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;taskId&quot;</span><span class="punctuation">:</span><span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;createBy&quot;</span><span class="punctuation">:</span><span class="string">&quot;Anonymous&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;success&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;taskId&quot;</span><span class="punctuation">:</span><span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;createBy&quot;</span><span class="punctuation">:</span><span class="string">&quot;Anonymous&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;running&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>批量请求：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">POST /batchTasks/1;2;3;</span><br></pre></td></tr></table></figure><p>批量返回：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;taskId&quot;</span><span class="punctuation">:</span><span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;createBy&quot;</span><span class="punctuation">:</span><span class="string">&quot;Anonymous&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;status&quot;</span><span class="punctuation">:</span><span class="string">&quot;success&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>...<span class="punctuation">]</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">[</span><span class="punctuation">&#123;</span><span class="attr">&quot;from&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;to&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;info&quot;</span><span class="punctuation">:</span><span class="string">&quot;Runing 50 %&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="punctuation">&#123;</span><span class="punctuation">&#125;</span>...<span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p>如果任务的执行状态包括较多信息，可以把“执行状态”抽象成组合资源，客户端查询该状态资源了解任务的执行情况。</p><p>提交：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /task/3/status</span><br></pre></td></tr></table></figure><p>返回：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;progress&quot;</span><span class="punctuation">:</span><span class="string">&quot;50%&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span><span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span><span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;fail&quot;</span><span class="punctuation">:</span><span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="7、Hypermedia-API"><a href="#7、Hypermedia-API" class="headerlink" title="7、Hypermedia API"></a>7、Hypermedia API</h3><p>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p><p>比如，当用户向api.doname.com的根目录发出请求，会得到这样一个文档。</p><blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;link&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;rel&quot;</span><span class="punctuation">:</span>   <span class="string">&quot;collection https://www.example.com/zoos&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;href&quot;</span><span class="punctuation">:</span>  <span class="string">&quot;https://api.example.com/zoos&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;List of zoos&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span>  <span class="string">&quot;application/vnd.yourformat+json&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></blockquote><p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。</p><p>Hypermedia API的设计被称为<a href="http://en.wikipedia.org/wiki/HATEOAS">HATEOAS</a>。Github的API就是这种设计，访问<a href="https://api.github.com/">api.github.com</a>会得到一个所有可用API的网址列表。</p><blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;current_user_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/user&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;authorizations_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://api.github.com/authorizations&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></blockquote><p>从上面可以看到，如果想获取当前用户的信息，应该去访问<a href="https://api.github.com/user">api.github.com&#x2F;user</a>，然后就得到了下面结果。</p><blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Requires authentication&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;documentation_url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://developer.github.com/v3&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></blockquote><p>上面代码表示，服务器给出了提示信息，以及文档的网址。</p><h3 id="8、数据格式"><a href="#8、数据格式" class="headerlink" title="8、数据格式"></a>8、数据格式</h3><p>JSON 或 XML 按要求使用即可。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> restful </tag>
            
            <tag> 项目规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>restful在后端的体现</title>
      <link href="/2022/03/21/restful%E5%9C%A8%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%BD%93%E7%8E%B0/"/>
      <url>/2022/03/21/restful%E5%9C%A8%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E7%9A%84%E4%BD%93%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>之前寒假做互联网+项目的时候,看到组长的后端api接口写得那叫一个优雅;</p><p>在分布式、微服务盛行的今天，绝大部分项目都采用的微服务框架，前后端分离方式。题外话：前后端的工作职责越来越明确，现在的前端都称之为大前端，技术栈以及生态圈都已经非常成熟；以前后端人员瞧不起前端人员，那现在后端人员要重新认识一下前端，前端已经很成体系了。</p><h2 id="现代系统架构"><a href="#现代系统架构" class="headerlink" title="现代系统架构:"></a>现代系统架构:</h2><p><strong>一般系统的大致整体架构图如下：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/a3a46ff2ff174c29b71da687f72abbdb~tplv-k3u1fbpfcp-zoom-in-crop-mark:1304:0:0:0.awebp"></p><h2 id="接口交互"><a href="#接口交互" class="headerlink" title="接口交互"></a><strong>接口交互</strong></h2><p>前端和后端进行交互，前端按照约定请求URL路径，并传入相关参数，后端服务器接收请求，进行业务处理，返回数据给前端。</p><p>针对URL路径的restful风格，以及传入参数的公共请求头的要求（如：app_version,api_version,device等），老顾这里就不介绍了，小伙伴们可以自行去了解，也比较简单。</p><p>着重介绍一下后端服务器如何实现把数据返回给前端？</p><h3 id="返回格式"><a href="#返回格式" class="headerlink" title="返回格式"></a><strong>返回格式</strong></h3><p>后端返回给前端我们一般用JSON体方式，定义如下：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    #返回状态码</span><br><span class="line">    code<span class="punctuation">:</span>integer<span class="punctuation">,</span>       </span><br><span class="line">    #返回信息描述</span><br><span class="line">    message<span class="punctuation">:</span>string<span class="punctuation">,</span></span><br><span class="line">    #返回值</span><br><span class="line">    data<span class="punctuation">:</span>object</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="CODE状态码"><a href="#CODE状态码" class="headerlink" title="CODE状态码"></a><strong>CODE状态码</strong></h3><p>code返回状态码，一般小伙伴们是在开发的时候需要什么，就添加什么。<br>如接口要返回用户权限异常，我们加一个状态码为101吧，下一次又要加一个数据参数异常，就加一个102的状态码。这样虽然能够照常满足业务，但状态码太凌乱了</p><p>我们应该可以参考HTTP请求返回的状态码，下面是常见的HTTP状态码<a href="https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html">传送门</a>：</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</span><br><span class="line">201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</span><br><span class="line">202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</span><br><span class="line">204 NO CONTENT - [DELETE]：用户删除数据成功。</span><br><span class="line">400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</span><br><span class="line">401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</span><br><span class="line">403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</span><br><span class="line">404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</span><br><span class="line">406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</span><br><span class="line">410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</span><br><span class="line">422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</span><br><span class="line">500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</span><br></pre></td></tr></table></figure><table><thead><tr><th>分类</th><th>区间</th><th>分类描述</th></tr></thead><tbody><tr><td>100</td><td>100~199</td><td>信息，服务器收到请求，需要请求者这执行操作</td></tr><tr><td>200</td><td>200~299</td><td>成功，操作被成功接受并处理</td></tr><tr><td>300</td><td>300~399</td><td>重定向，需要进一步的操作以完成请求</td></tr><tr><td>400</td><td>400~499</td><td>客户端错误，请求包含语法错误或无法完成请求</td></tr><tr><td>500</td><td>500~599</td><td>服务器的错误，服务器在处理请求的过程中发生了错误</td></tr></tbody></table><p>规定:</p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">#1表示成功</span><br><span class="line">#1001～1999 区间表示参数错误</span><br><span class="line">#2001～2999 区间表示用户错误</span><br><span class="line">#3001～3999 区间表示接口异常</span><br></pre></td></tr></table></figure><p>这样前端开发人员在得到返回值后，根据状态码就可以知道，大概什么错误，再根据message相关的信息描述，可以快速定位。</p><h3 id="Message"><a href="#Message" class="headerlink" title="Message"></a><strong>Message</strong></h3><p>这个字段相对理解比较简单，就是发生错误时，如何友好的进行提示。一般的设计是和code状态码一起设计，如</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 规定:</span></span><br><span class="line"><span class="comment"> * #1表示成功</span></span><br><span class="line"><span class="comment"> * #1001～1999 区间表示参数错误</span></span><br><span class="line"><span class="comment"> * #2001～2999 区间表示用户错误</span></span><br><span class="line"><span class="comment"> * #3001～3999 区间表示接口异常</span></span><br><span class="line"><span class="comment"> * 统一错误枚举类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 成功 */</span></span><br><span class="line">    SUCCESS(<span class="number">200</span>, <span class="string">&quot;成功&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 默认失败 */</span></span><br><span class="line">    COMMON_FAIL(<span class="number">999</span>, <span class="string">&quot;失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    CUSTOM_FAIL(<span class="number">9999</span>, <span class="string">&quot;自定义错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 参数错误：1000～1999 */</span></span><br><span class="line">    PARAM_NOT_VALID(<span class="number">1001</span>, <span class="string">&quot;参数无效&quot;</span>),</span><br><span class="line">    PARAM_IS_BLANK(<span class="number">1002</span>, <span class="string">&quot;参数为空&quot;</span>),</span><br><span class="line">    PARAM_TYPE_ERROR(<span class="number">1003</span>, <span class="string">&quot;参数类型错误&quot;</span>),</span><br><span class="line">    PARAM_NOT_COMPLETE(<span class="number">1004</span>, <span class="string">&quot;参数缺失&quot;</span>),</span><br><span class="line">    FAIL_COPY_PROPERTIES(<span class="number">1076</span>, <span class="string">&quot;创建对象失败或拷贝对象属性失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 微信小程序登录 */</span></span><br><span class="line">    WEI_XIN_CODE_ERROR(<span class="number">3001</span>, <span class="string">&quot;携带code向小程序请求失败&quot;</span>),</span><br><span class="line">    WEI_XIN_SKEY_VALID(<span class="number">3002</span>, <span class="string">&quot;skey无效&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 用户错误 */</span></span><br><span class="line">    USER_NOT_LOGIN(<span class="number">2001</span>, <span class="string">&quot;用户未登录&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_EXPIRED(<span class="number">2002</span>, <span class="string">&quot;账号已过期&quot;</span>),</span><br><span class="line">    USER_CREDENTIALS_ERROR(<span class="number">2003</span>, <span class="string">&quot;密码错误&quot;</span>),</span><br><span class="line">    USER_CREDENTIALS_EXPIRED(<span class="number">2004</span>, <span class="string">&quot;密码过期&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_DISABLE(<span class="number">2005</span>, <span class="string">&quot;账号不可用&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_LOCKED(<span class="number">2006</span>, <span class="string">&quot;账号被锁定&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_NOT_EXIST(<span class="number">2007</span>, <span class="string">&quot;账号不存在&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_ALREADY_EXIST(<span class="number">2008</span>, <span class="string">&quot;账号已存在&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_USE_BY_OTHERS(<span class="number">2009</span>, <span class="string">&quot;账号下线&quot;</span>),</span><br><span class="line">    USER_IS_EMPTY(<span class="number">2010</span>, <span class="string">&quot;用户为空&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Token错误*/</span></span><br><span class="line">    TOKEN_EXPIRED(<span class="number">4001</span>, <span class="string">&quot;登陆信息过期&quot;</span>),</span><br><span class="line">    TOKEN_ERROR(<span class="number">4002</span>, <span class="string">&quot;信息被更改,请重新登陆&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 业务错误 */</span></span><br><span class="line">    NO_PERMISSION(<span class="number">5001</span>, <span class="string">&quot;没有权限&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*订单错误*/</span></span><br><span class="line">    EXISTED_ORDER(<span class="number">6001</span>, <span class="string">&quot;该商品的订单已存在，请支付或取消后再重新下单&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*商品错误*/</span></span><br><span class="line">    EXISTED_GOOD(<span class="number">7001</span>, <span class="string">&quot;已存在该商品&quot;</span>),</span><br><span class="line">    EXISTED_GOOD_INCART(<span class="number">7002</span>,<span class="string">&quot;购物车中已经存在该商品&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*招投标错误*/</span></span><br><span class="line">    EXISTED_SUBMISSION(<span class="number">8001</span>,<span class="string">&quot;已经存在该投标了&quot;</span>),</span><br><span class="line">    EXISTED_INVITATION(<span class="number">8002</span>,<span class="string">&quot;已经存在该招标了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ResultCode(Integer code, String message) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResultCode <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResultCode <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据code获取message</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 状态码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMessageByCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (ResultCode ele : values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ele.getCode().equals(code)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ele.getMessage();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>状态码和信息就会一一对应，比较好维护。</p><h3 id="DATA"><a href="#DATA" class="headerlink" title="DATA"></a>DATA</h3><p>返回数据体，JSON格式，根据不同的业务又不同的JSON体。<br>我们要设计一个返回体类Result</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonResult</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Boolean succeed;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : ResultCode.COMMON_FAIL.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : ResultCode.COMMON_FAIL.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed, ResultCode resultEnum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getCode() : resultEnum.getCode());</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getMessage() : resultEnum.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : ResultCode.COMMON_FAIL.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : ResultCode.COMMON_FAIL.getMessage();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed, ResultCode resultEnum, T data)</span> &#123;</span><br><span class="line">        <span class="comment">//如多成功true,就走成功的code和message,否者就看传进来的resultEnum</span></span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getCode() : resultEnum.getCode());</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getMessage() : resultEnum.getMessage());</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getSucceed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> succeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSucceed</span><span class="params">(Boolean succeed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CommonResult&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;succeed=&quot;</span> + succeed +</span><br><span class="line">                <span class="string">&quot;, code=&quot;</span> + code +</span><br><span class="line">                <span class="string">&quot;, message=&#x27;&quot;</span> + message + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, data=&quot;</span> + data +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="控制层Controller"><a href="#控制层Controller" class="headerlink" title="控制层Controller"></a><strong>控制层Controller</strong></h2><p>我们会在controller层处理业务请求，并返回给前端，以下面的材料查询为例:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/details/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult&lt;GoodDetailInfoVO&gt; <span class="title function_">getDetailsByGoodId</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">    <span class="type">GoodDetailInfoVO</span> <span class="variable">goodDetailInfoVO</span> <span class="operator">=</span> goodService.getGoodDetailById(id);</span><br><span class="line">    CommonResult&lt;GoodDetailInfoVO&gt;  result = <span class="keyword">new</span> <span class="title class_">CommonResult</span>&lt;&gt;(<span class="literal">true</span>,ResultCode.SUCCESS,goodDetailInfoVO);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果加上结果封装类ResultUtil类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; CommonResult&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">true</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title function_">fail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title function_">fail</span><span class="params">(ResultCode resultEnum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">false</span>, resultEnum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>材料查询就可以变成这样(更加简洁了):</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/detail/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> CommonResult&lt;GoodDetailInfoVO&gt; <span class="title function_">getDetailByGoodId</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ResultUtil.success(goodService.getGoodDetailById(id));</span><br><span class="line">&#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><p>代码比较简洁了，也美观了。</p><p>到这里一般都满足日常开发的需求了如果还需要更简洁的话,可以参考以下内容:</p><h2 id="优雅优化"><a href="#优雅优化" class="headerlink" title="优雅优化"></a><strong>优雅优化</strong></h2><p>上面我们看到在Result类中增加了静态方法，使得业务处理代码简洁了。但小伙伴们有没有发现这样有几个问题：</p><p>1、每个方法的返回都是Result封装对象，没有业务含义</p><p>2、在业务代码中，成功的时候我们调用Result.success，异常错误调用Result.failure。是不是很多余</p><p>3、上面的代码，判断id是否为null，其实我们可以使用hibernate validate做校验，没有必要在方法体中做判断。</p><p>我们最好的方式直接返回真实业务对象，最好不要改变之前的业务方式，如下图</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-f9e0a277cbd0e5eca01a3969fc11d1d7_720w.jpg" alt="img"></p><p><strong>实现方案</strong></p><p>小伙伴们怎么去实现是不是有点思路，在这个过程中，我们需要做几个事情</p><ul><li>1、定义一个注解@ResponseResult，表示这个接口返回的值需要包装一下</li><li>2、拦截请求，判断此请求是否需要被@ResponseResult注解</li><li>3、核心步骤就是实现接口ResponseBodyAdvice和@ControllerAdvice，判断是否需要包装返回值，如果需要，就把Controller接口的返回值进行重写。</li></ul><p><strong>注解类</strong></p><p>用来标记方法的返回值，是否需要包装</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220322171452303.png" alt="image-20220322171452303"></p><p><strong>拦截器</strong></p><p>拦截请求，是否此请求返回的值需要包装，其实就是运行的时候，解析@ResponseResult注解</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-353b2bd7d82a4f301e402964eb63fbd6_720w.jpg" alt="img"></p><p>此代码核心思想，就是获取此请求，是否需要返回值包装，设置一个属性标记。</p><p><strong>重写返回体</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-a586efcf09669c7090807e0859fbeb40_720w.jpg" alt="img"></p><p>上面代码就是判断是否需要返回值包装，如果需要就直接包装。这里我们只处理了正常成功的包装，如果方法体报异常怎么办？处理异常也比较简单，只要判断body是否为异常类。</p><p><img src="https://pic3.zhimg.com/80/v2-bd9890ec7d4dc0de08ea46b485faf05e_720w.jpg" alt="img"></p><p>怎么做全局的异常处理，篇幅原因，这里就不做介绍了，只要思路理清楚了，自行改造就行。</p><p><strong>重写Controller</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/v2-113c72e7ce1f6cb0744029e67b17ff76_720w.jpg" alt="img"></p><p>在控制器类上或者方法体上加上@ResponseResult注解，这样就ok了，简单吧。到此返回的设计思路完成，是不是又简洁，又优雅。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个方案还有没有别的优化空间，当然是有的。如：每次请求都要反射一下，获取请求的方法是否需要包装，其实可以做个缓存，不需要每次都需要解析。当然整体思路了解，小伙伴们就可以在此基础上面自行扩展。谢谢！！！</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> restful </tag>
            
            <tag> 项目规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea快捷键</title>
      <link href="/2022/03/21/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2022/03/21/idea%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="Ctrl-Alt-O"><a href="#Ctrl-Alt-O" class="headerlink" title="Ctrl + Alt + O"></a>Ctrl + Alt + O</h3><p>功能：清理不需要的导入</p><h3 id="Ctrl-F12"><a href="#Ctrl-F12" class="headerlink" title="Ctrl+F12"></a>Ctrl+F12</h3><p>功能：查看当前类中的所有成员：方法、属性、内部类<br>亮点：直接显示所有成员的列表，支持搜索功能快速定位到某个成员的位置上。</p><p>搜索类中某个成员位置，直接输入关键字就会匹配出当前类中所有符合的成员。</p><p>选择查询结果直接定位到跳转到代码位置。</p><h3 id="Alt-7"><a href="#Alt-7" class="headerlink" title="Alt+7"></a>Alt+7</h3><p>功能：显示当前类的所有成员：方法、属性<br>亮点：显示当前类的继承关系，同时支持搜索功能快速定位到某个成员的位置上</p><h3 id="Ctrl-Shift-F"><a href="#Ctrl-Shift-F" class="headerlink" title="Ctrl+Shift+F"></a>Ctrl+Shift+F</h3><p>功能：在整个项目中搜索匹配符合关键词的位置</p><h3 id="Shift-Shift"><a href="#Shift-Shift" class="headerlink" title="Shift + Shift"></a>Shift + Shift</h3><p>在整个项目中搜索匹配符合关键词的位置<br>亮点：Symbols支持模糊查询只要记住几个字母就能查询出位置</p><h3 id="Ctrl-e"><a href="#Ctrl-e" class="headerlink" title="Ctrl+e"></a>Ctrl+e</h3><p>功能：查看最近操作的文件</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快捷键 </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot快速入门</title>
      <link href="/2022/03/21/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dspringboot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/21/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dspringboot%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><p>对spingboot的复习;</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 快速入门 </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybatis(plus)找不到xml文件的坑</title>
      <link href="/2022/03/21/mybatis(plus)%E6%89%BE%E4%B8%8D%E5%88%B0xml%E6%96%87%E4%BB%B6%E7%9A%84%E5%9D%91/"/>
      <url>/2022/03/21/mybatis(plus)%E6%89%BE%E4%B8%8D%E5%88%B0xml%E6%96%87%E4%BB%B6%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h1 id="Mybatis-plus-找不到xml文件的坑"><a href="#Mybatis-plus-找不到xml文件的坑" class="headerlink" title="Mybatis(plus)找不到xml文件的坑"></a>Mybatis(plus)找不到xml文件的坑</h1><p>如图，启动SpringBoot项目时报错，</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220321132310967.png" alt="image-20220321132310967"></p><p>image</p><p>解决思路：</p><p>第一步：检查常规配置项是否正确，例如包名，命名空间名，xml中方法名和dao中方法名是否一致等…</p><p>第二步：确认使用的是Mybatis还是MybatisPlus,两者使用的配置项是不同的（这是我遇到的问题）</p><p><strong>properties文件:</strong></p><p>MybatisPlus引的包是<strong>mybatis-plus-boot-starter</strong>，对应的配置项是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mybatis-plus.mapper-locations=classpath:mapper/*.xml</span><br></pre></td></tr></table></figure><p>Mybatis对应的配置项是</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mybatis.mapper-locations=classpath:mapper/*.xml</span><br></pre></td></tr></table></figure><p><strong>yaml文件:</strong></p><p>MybatisPlus对应的配置项是</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:com/feng/mapper/xml/*.xml</span></span><br></pre></td></tr></table></figure><p>第三部：检查xml文件是放在resource目录下单独的目录中还是和dao接口类放在一起，如果放在一起的话，需要在pom.xml中的build中增加</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--引入静态文件--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--引入mapper对应的xml文件--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> Java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小东西 </tag>
            
            <tag> mybatis </tag>
            
            <tag> mybatis-plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jwt的加密原理</title>
      <link href="/2022/03/20/jwt%E7%9A%84%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86,%E5%92%8Ctoken%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/"/>
      <url>/2022/03/20/jwt%E7%9A%84%E5%8A%A0%E5%AF%86%E5%8E%9F%E7%90%86,%E5%92%8Ctoken%E7%9A%84%E7%AE%80%E5%8D%95%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="1-两种token认证方式"><a href="#1-两种token认证方式" class="headerlink" title="1. 两种token认证方式"></a>1. 两种token认证方式</h2><p><strong>传统的token认证</strong></p><p>用户登录，服务端给前端返回token，并将token保存在服务端。<br>以后用户再来访问时，需要携带token，服务端获取token后再去数据库获取token做校验。</p><p><strong>JWT的token认证</strong></p><p>用户登录，服务端给用户返回一个token（服务端不保存）<br>以后用户再来访问时，需要携带token，服务端获取token做校验</p><p><strong>两种认证方式对比：</strong><br><strong>jwt相对于传统的token认证，无需将token保存在服务端。</strong></p><p>因为HTTP request 本身是stateless的，所以要不在server端使用session来判断，要不就用JWT，也就是bearer token，包含的有效期信息，以及user 信息来进行状态判断是否接受HTTP的request（比如用户是否已经登录），来避免存储session，以及服务器集群之间还要实现session同步的麻烦，现在只要定义一个secret_key就行。</p><p>每当用户想要访问受保护的路由或资源时，用户代理应该发送 JWT，通常在<strong>Authorization</strong>标头中使用<strong>Bearer</strong>模式。标头的内容应如下所示：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure><p><strong>JOSN Web Token</strong>(jwt)包含头部（header），载荷（claim set), 和签名(signature)。可以在载荷中存放预定义的元数据，只要是JOSON格式就可以了。</p><h2 id="2-jwt的token加密解密过程"><a href="#2-jwt的token加密解密过程" class="headerlink" title="2. jwt的token加密解密过程"></a>2. jwt的token加密解密过程</h2><p><strong>2.1 生成token</strong></p><p>用户登录成功后，使用jwt创建一个token，并返回给用户，token格式如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Base64URL(header)//第一段header</span><br><span class="line">.base64UrlEncode(payload)//第二段payload</span><br><span class="line">.HMACSHA256(Base64URL(header).base64UrlEncode(payload),secret)//第三段verify signature</span><br></pre></td></tr></table></figure><p>例子:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eyJhbGciOiJIUzI1NiJ9//第一段</span><br><span class="line">.eyJvcGVuSWQiOiJvam5NVjVKQ3htdTI1Zjl6ai1SYU5xN0JiZTJvIiwianRpIjoidG9rZW5JZCIsImlhdCI6MTY0NDEzNDI5MywiZXhwIjoxNjQ0MTM2OTIwfQ//第二段</span><br><span class="line">.MRx_xPGNa9lzDGj4nrcdENCA2OgIp4En0TL_GH-_0BI//第三段</span><br></pre></td></tr></table></figure><p>注意：jwt生成的token是由三段字符串拼接而成，使用 . 连接起来</p><p><strong>1.token的第一段字符串：由下面的json数据通过base64（可逆）加密算法得到。</strong></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;alg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span>   <span class="comment">//第三段字符串的不可逆加密类型HS256</span></span><br><span class="line">  <span class="attr">&quot;typ&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span>   <span class="comment">//token类型JWT</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>2.token的第二段字符串：是由下面的payload信息通过base64（可逆）加密算法得到</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// payload信息 为自定义值，一般不放敏感信息</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;sub&quot;</span>: <span class="string">&quot;1234567890&quot;</span>,   <span class="comment">//用户id</span></span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;John Doe&quot;</span>,<span class="comment">//用户名</span></span><br><span class="line">  <span class="string">&quot;exp&quot;</span>: <span class="number">1516239022</span>,<span class="comment">//token过期时间</span></span><br><span class="line">  <span class="string">&quot;openId&quot;</span>: <span class="string">&quot;fasdkhgflksdhfgsdkjlf&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3.token的第三段字符串构成：<br>1)先将第一段和第二段的密文拼接起来<br>2)对拼接起来的密文字符串和自定义的盐进行 上边指定的HS256加密<br>3)对HS256加密后的密文再做base64加密</strong></p><p>注意：第一、二部分可以通过<code>Base64</code>解密得到，但第三部分不可以！</p><p>生成token代码如下</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 创建JWT</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(Map&lt;String, Object&gt; claims, Long time)</span> &#123;</span><br><span class="line">      <span class="comment">//指定签名的时候使用的签名算法，也就是header那部分，jjwt已经将这部分内容封装好了。</span></span><br><span class="line">      <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line">      <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">      <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">      <span class="comment">//生成JWT的时间</span></span><br><span class="line">      <span class="type">long</span> <span class="variable">nowMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">      <span class="comment">//下面就是在为payload添加各种标准声明和私有声明了</span></span><br><span class="line">      <span class="comment">//这里其实就是new一个JwtBuilder，设置jwt的body</span></span><br><span class="line">      <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">              <span class="comment">//如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的</span></span><br><span class="line">              .setClaims(claims)</span><br><span class="line">              <span class="comment">//设置jti(JWT ID)：是JWT的唯一标识，根据业务需要，这个可以设置为一个不重复的值，主要用来作为一次性token,从而回避重放攻击。</span></span><br><span class="line">              .setId(jwtId)</span><br><span class="line">              <span class="comment">//iat: jwt的签发时间</span></span><br><span class="line">              .setIssuedAt(now)</span><br><span class="line">              <span class="comment">//设置签名使用的签名算法和签名使用的秘钥</span></span><br><span class="line">              .signWith(signatureAlgorithm, secretKey);</span><br><span class="line">      <span class="keyword">if</span> (time &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> nowMillis + time;</span><br><span class="line">          <span class="type">Date</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line">          <span class="comment">//设置过期时间</span></span><br><span class="line">          builder.setExpiration(exp);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> builder.compact();</span><br><span class="line">      <span class="comment">//然后返回token</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2.2 验证（解密）token</strong></p><p>当用户再来访问时，需要携带token，后端需要对token进行校验</p><ul><li>①：获取token</li><li>②：对token进行切割成三部分</li><li>③：对第二段字符串进行base64解密，检测token是否超时？</li><li>④：对第一二段字符串拼接，再次进行HS256加密，得到密文字符串</li><li>⑤：对token的第三段HS256加密</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 验证jwt</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">verifyJwt</span><span class="params">(String token)</span> &#123;</span><br><span class="line">    <span class="comment">//签名秘钥，和生成的签名的秘钥一模一样</span></span><br><span class="line">    <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> generalKey();</span><br><span class="line">    Claims claims;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        claims = Jwts.parser()  <span class="comment">//得到DefaultJwtParser</span></span><br><span class="line">                .setSigningKey(key)         <span class="comment">//设置签名的秘钥</span></span><br><span class="line">                .parseClaimsJws(token).getBody();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        claims = <span class="literal">null</span>;</span><br><span class="line">    &#125;<span class="comment">//设置需要解析的jwt</span></span><br><span class="line">    <span class="keyword">return</span> claims;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ps : token一旦生成，在过期时间内永久有效，即使项目重启！想要失效token必须等待过期，或者重置盐值！</p><h2 id="3-token登出、改密后失效"><a href="#3-token登出、改密后失效" class="headerlink" title="3. token登出、改密后失效"></a>3. token登出、改密后失效</h2><p>使用jwt时，一般修改密码或退出登录时，需要把正在使用的token做失效处理，防止别的客户端使用失效token访问信息。</p><ul><li><strong>方案一</strong>：在每次修改密码或者退出登录后，修改一下自定义的盐值。当进行下次访问时，会根据自定义盐值验证<code>token</code>，修改了自定义盐值，自然访问不通过。</li><li><strong>方案二</strong>：利用数据库，存放一个修改或者登出的时间，在创建<code>token</code>时，标注上创建时间。如果这个创建时间小于修改或登出的时间，就表示它是修改或者登出之前的<code>token</code>，为过期<code>token</code>(有点不是很懂,好像就是判断token是否过期)</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据userId和openid生成token</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String openId)</span> &#123;</span><br><span class="line">       Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">       map.put(<span class="string">&quot;openId&quot;</span>, openId);</span><br><span class="line">       <span class="keyword">return</span> createJWT(map, tokenExpiredTime);<span class="comment">//直接调用上面的createJWT方法</span></span><br><span class="line">   &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * token是否过期,就是拿到</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span>  true：过期</span></span><br><span class="line"><span class="comment">    * lastLoginDate 数据库记录的最后一次登出时间</span></span><br><span class="line"><span class="comment">    * issueDate token 创建时间</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isTokenExpired</span><span class="params">(Date expiration,Date lastLoginDate,Date issueDate)</span> &#123;</span><br><span class="line">       <span class="comment">//token创建时间小于数据库记录的最后一次登出时间 过期</span></span><br><span class="line">       <span class="keyword">if</span>(lastLoginDate == <span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> expiration.before(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">       &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">           <span class="keyword">return</span> issueDate.before(lastLoginDate);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>拦截器的判断:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(jwtUtils.isTokenExpired(claims.getExpiration(),user.getLoginDate(),claims.getIssuedAt()))&#123;</span><br><span class="line">           <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> ResultGenerator.genFailResult(ResultCode.UNAUTHORIZED,<span class="string">&quot;token失效,请重新登录&quot;</span>);</span><br><span class="line">           SendMsgUtil.sendJsonMessage(response,result);</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="4-token的自动续期、一定时间内无操作掉线"><a href="#4-token的自动续期、一定时间内无操作掉线" class="headerlink" title="4. token的自动续期、一定时间内无操作掉线"></a>4. token的自动续期、一定时间内无操作掉线</h2><p><strong>场景</strong>：用户登陆后，token的过期时间为30分钟，如果在这30分钟内没有操作，则重新登录，如果30分钟内有操作，就给token自动续一个新的时间。避免用户正在操作时掉线重登！</p><p><strong>实现①：在jwt生成token时先不设置过期时间，过期时间的操作放在redis中。</strong>()这一次官网项目好像就有这个)</p><ul><li>①：在登陆时，把用户信息（或者token）放进redis，并设置过期时间</li><li>②：如果30分钟内用户有操作，前端带着token来访问，过滤器解析token得到用户信息，去redis中验证用户信息，验证成功则在redis中增加过期时间，验证失败，返回token错误。实现了token时间的自动更新。</li><li>③：如果30分钟内用户无操作，redis中的用户信息已过期，此时再进行操作，token解析出的用户信息在redis中验证失败，则重新登录。实现了一定时间内无操作掉线！</li></ul><p><strong>实现②：使用access_token、refresh_token 解决</strong></p><ul><li><p>登录获取token(包括访问令牌<code>access_token</code>，刷新令牌<code>refresh_token</code>），其中access_token设置过期时间为5分钟，refresh_token设置过期时间为30分钟。不能同时过期</p></li><li><p>前端保存<code>access_token</code>和<code>refresh_token</code>，每次请求带着<code>access_token</code>去访问服务器资源</p></li><li><p>服务器校验<code>access_token</code>有效性，通过解析<code>access_token</code>看是否能解析出用户信息。如果用户信息为<code>null</code>，说明<code>token</code>无效，返回<code>401</code>，让用户重新登录</p></li><li><p>服务器端校验<code>access_token</code>是否过期</p></li><li><p>如果<code>access_token</code>没有过期，则token正常，继续执行业务逻辑</p><ul><li><p>如果<code>access_token</code>过期，计算 过期后到当前的时间大小 是否在<code>refresh_token</code>过期时间之内（是否大于<code>30 - 5 - 5 = 20</code>分钟，为什么不是<code>30 - 5 = 25</code>分钟呢？主要是想对正在请求的用户token做一个缓存，保证在最后五分钟内，新、老token都有效！防止正在进行的请求token突然失效！），</p><ul><li>如果大于<code>refresh_token</code>的过期时间，则表示用户长时间无操作，token真正过期了，返回401，让用户重新登录</li></ul></li><li><p>如果小于<code>refresh_token</code>的过期时间，则继续让该<code>access_token</code>访问业务，但返回给前端标识，提示token已过期，让前端带着<code>refresh_token</code>去服务器获取新的<code>access_token</code>，并保存在前端，后续使用新的<code>access_token</code>去访问！</p></li></ul></li></ul><h2 id="5-JWT工具类"><a href="#5-JWT工具类" class="headerlink" title="5.JWT工具类"></a>5.JWT工具类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.io.BaseEncoding;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtBuilder;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> tokenExpiredTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String jwtId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String jwtSecret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建JWT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(Map&lt;String, Object&gt; claims, Long time)</span> &#123;</span><br><span class="line">        <span class="comment">//指定签名的时候使用的签名算法，也就是header那部分，jjwt已经将这部分内容封装好了。</span></span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="comment">//生成JWT的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">nowMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//下面就是在为payload添加各种标准声明和私有声明了</span></span><br><span class="line">        <span class="comment">//这里其实就是new一个JwtBuilder，设置jwt的body</span></span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                <span class="comment">//如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的</span></span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                <span class="comment">//设置jti(JWT ID)：是JWT的唯一标识，根据业务需要，这个可以设置为一个不重复的值，主要用来作为一次性token,从而回避重放攻击。</span></span><br><span class="line">                .setId(jwtId)</span><br><span class="line">                <span class="comment">//iat: jwt的签发时间</span></span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                <span class="comment">//设置签名使用的签名算法和签名使用的秘钥</span></span><br><span class="line">                .signWith(signatureAlgorithm, secretKey);</span><br><span class="line">        <span class="keyword">if</span> (time &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> nowMillis + time;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line">            <span class="comment">//设置过期时间</span></span><br><span class="line">            builder.setExpiration(exp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证jwt</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">verifyJwt</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="comment">//签名秘钥，和生成的签名的秘钥一模一样</span></span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        Claims claims;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims = Jwts.parser()  <span class="comment">//得到DefaultJwtParser</span></span><br><span class="line">                    .setSigningKey(key)         <span class="comment">//设置签名的秘钥</span></span><br><span class="line">                    .parseClaimsJws(token).getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            claims = <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="comment">//设置需要解析的jwt</span></span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由字符串生成加密key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SecretKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title function_">generalKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">stringKey</span> <span class="operator">=</span> jwtSecret;</span><br><span class="line">        <span class="type">byte</span>[] encodedKey = BaseEncoding.base64().decode(stringKey);</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(encodedKey, <span class="number">0</span>, encodedKey.length, <span class="string">&quot;HmacSHA256&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据userId和openid生成token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String openId)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;openId&quot;</span>, openId);</span><br><span class="line">        <span class="keyword">return</span> createJWT(map, tokenExpiredTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.token-expired-time&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTokenExpiredTime</span><span class="params">(<span class="type">long</span> tokenExpiredTime)</span> &#123;</span><br><span class="line">        JwtUtils.tokenExpiredTime = tokenExpiredTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJwtId</span><span class="params">(String jwtId)</span> &#123;</span><br><span class="line">        JwtUtils.jwtId = jwtId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.secret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJwtSecret</span><span class="params">(String jwtSecret)</span> &#123;</span><br><span class="line">        JwtUtils.jwtSecret = jwtSecret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getTokenExpiredTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tokenExpiredTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJwtId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jwtId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJwtSecret</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jwtSecret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-整合springboot"><a href="#6-整合springboot" class="headerlink" title="6.整合springboot"></a>6.整合springboot</h2><p><strong>搭建springboot+mybatis-plus+jwt环境</strong></p><p><strong>引入依赖:</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--解决生成JWT时base64加密错误--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.guava<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guava<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>31.0.1-jre<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--引入jwt--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--引入lombok--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--引入druid--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.feng<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springbootmybatisplus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>yaml中的配置信息:</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8989</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.1:3306/mybatis?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf-8&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">nihao123</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="attr">initialSize:</span> <span class="number">10</span>   <span class="comment">#初始化连接个数</span></span><br><span class="line">      <span class="attr">minIdle:</span> <span class="number">10</span>       <span class="comment">#最小空闲连接个数</span></span><br><span class="line">      <span class="attr">maxActive:</span> <span class="number">100</span>    <span class="comment">#最大连接个数</span></span><br><span class="line">      <span class="attr">maxWait:</span> <span class="number">60000</span>    <span class="comment">#获取连接时最大等待时间，单位毫秒。</span></span><br><span class="line">      <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span>  <span class="comment">#配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class="line">      <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">30000</span>     <span class="comment">#配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class="line">      <span class="attr">validationQuery:</span> <span class="string">select</span> <span class="string">&#x27;x&#x27;</span> <span class="comment">#用来检测连接是否有效的sql，要求是一个查询语句。</span></span><br><span class="line">      <span class="attr">testWhileIdle:</span> <span class="literal">true</span>       <span class="comment">#建议配置为true，不影响性能，并且保证安全性。如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。</span></span><br><span class="line">      <span class="attr">testOnBorrow:</span> <span class="literal">true</span>        <span class="comment">#申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</span></span><br><span class="line">      <span class="attr">testOnReturn:</span> <span class="literal">false</span>       <span class="comment">#归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能</span></span><br><span class="line">      <span class="attr">poolPreparedStatements:</span> <span class="literal">false</span> <span class="comment">#是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。</span></span><br><span class="line">      <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">-1</span> <span class="comment">#要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100</span></span><br><span class="line">      <span class="attr">filters:</span> <span class="string">stat,wall</span> <span class="comment">#通过别名的方式配置扩展插件，常用的插件有：监控统计用的filter:stat，日志用的filter:log4j，防御sql注入的filter:wall</span></span><br><span class="line">      <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000</span> <span class="comment"># 通过connectProperties属性来打开mergeSql功能；慢SQL记录</span></span><br><span class="line">      <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">false</span> <span class="comment"># 合并多个DruidDataSource的监控数据</span></span><br><span class="line"><span class="attr">jwt:</span></span><br><span class="line">  <span class="comment">#设置token的过期时间，单位为秒</span></span><br><span class="line">  <span class="attr">token-expired-time:</span> <span class="number">36000</span> <span class="comment">#10小时</span></span><br><span class="line">  <span class="comment">#设置token的id</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">tokenId</span></span><br><span class="line">  <span class="comment">#设置密钥</span></span><br><span class="line">  <span class="attr">secret:</span> <span class="string">aPbOBbnH4gnZBzIYEY7mxWNu49kYljNPMeva9Fjrwwqzw0bFlO0kPXZTCGaVcw0j</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:com/feng/mapper/xml/*.xml</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>创建一个简单的数据表</strong></p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `<span class="keyword">user</span>`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">80</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">40</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户密码&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">2</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><p>记得插入账号和密码信息</p><p><strong>entity类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/21 11:01</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain=true)</span><span class="comment">//这是干啥用的哦</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>service里面的</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    User <span class="title function_">login</span><span class="params">(User user)</span>;<span class="comment">//登录接口</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.SUPPORTS)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">login</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">userDB</span> <span class="operator">=</span> userMapper.login(user);</span><br><span class="line">        <span class="keyword">if</span>(userDB!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> userDB;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span>  <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;登录失败~~&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>mapper里面:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    User <span class="title function_">login</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml文件中</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.feng.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这里就写的简单点了毕竟不是重点--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;login&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.feng.entity.User&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.feng.entity.User&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from user</span><br><span class="line">        where name = #&#123;name&#125;</span><br><span class="line">          and password = #&#123;password&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>controller类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 登录判断,得到一个token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: ladidol</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2022/3/21 13:40 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: [user]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span>: java.util.Map&lt;java.lang.String,java.lang.Object&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String,Object&gt; <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        Map&lt;String,Object&gt; result = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        log.info(<span class="string">&quot;用户名: [&#123;&#125;]&quot;</span>, user.getName());</span><br><span class="line">        log.info(<span class="string">&quot;密码: [&#123;&#125;]&quot;</span>, user.getPassword());</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">userDB</span> <span class="operator">=</span> userService.login(user);</span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">//用来存放payload</span></span><br><span class="line">            map.put(<span class="string">&quot;id&quot;</span>,userDB.getId());</span><br><span class="line">            map.put(<span class="string">&quot;username&quot;</span>, userDB.getName());</span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JwtUtils.createJWT(map,<span class="number">10000000L</span>);</span><br><span class="line">            result.put(<span class="string">&quot;state&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">            result.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;登录成功!!!&quot;</span>);</span><br><span class="line">            result.put(<span class="string">&quot;token&quot;</span>,token); <span class="comment">//成功返回token信息</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            result.put(<span class="string">&quot;state&quot;</span>,<span class="string">&quot;false&quot;</span>);</span><br><span class="line">            result.put(<span class="string">&quot;msg&quot;</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 再次判断token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: ladidol</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2022/3/21 13:40 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>: [token]</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span>: java.util.Map&lt;java.lang.String,java.lang.Object&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">test</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            JwtUtils.verifyJwt(token);</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;验证通过~~~&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException e) &#123;</span><br><span class="line">            map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Token已经过期!!!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureVerificationException e)&#123;</span><br><span class="line">            map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;签名错误!!!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlgorithmMismatchException e)&#123;</span><br><span class="line">            map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;加密算法不匹配!!!&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;无效token~~&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>添加拦截器:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">  <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">  Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    JWTUtils.verify(token);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (TokenExpiredException e) &#123;</span><br><span class="line">    map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;Token已经过期!!!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (SignatureVerificationException e)&#123;</span><br><span class="line">    map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;签名错误!!!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (AlgorithmMismatchException e)&#123;</span><br><span class="line">    map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;加密算法不匹配!!!&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    map.put(<span class="string">&quot;state&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;无效token~~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(map);</span><br><span class="line">  response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">  response.getWriter().println(json);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">JwtTokenInterceptor</span>()).</span><br><span class="line">          excludePathPatterns(<span class="string">&quot;/user/**&quot;</span>)</span><br><span class="line">          .addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>可以在postman里面测试:</strong></p><p>登录接口:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220321135050610.png" alt="image-20220321135050610"></p><p>测试接口:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220321134257642.png" alt="image-20220321134257642"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> jwt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jwt </tag>
            
            <tag> 加密原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git注意事项</title>
      <link href="/2022/03/20/git%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2022/03/20/git%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h3 id="1、gitHub-提交"><a href="#1、gitHub-提交" class="headerlink" title="1、gitHub 提交"></a>1、gitHub 提交</h3><p>（1）创建本地的新仓库然后提交：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;# springboot-batch-demo project&quot;</span> &gt;&gt; README.md</span><br><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m <span class="string">&quot;first commit&quot;</span></span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin  https://&lt;your_token&gt;@github.com/ladidol/springboot-batch-demo.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>（2）提交一个已经本地已经存在的仓库：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin  https://&lt;your_token&gt;@github.com/ladidol/springboot-batch-demo.git</span><br><span class="line">git branch -M main</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure><p>…</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 注意事项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java算法小知识点</title>
      <link href="/2022/03/20/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5Djava%E7%AE%97%E6%B3%95%E5%B0%8F%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/03/20/%5B%E6%8C%81%E7%BB%AD%E6%9B%B4%E6%96%B0%5Djava%E7%AE%97%E6%B3%95%E5%B0%8F%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><p>这里主要是一些小小知识点,希望以后能不断完善并总结更系统更有条理的…</p><h1 id="片段"><a href="#片段" class="headerlink" title="片段:"></a>片段:</h1><h2 id="java的一个快速输入"><a href="#java的一个快速输入" class="headerlink" title="java的一个快速输入:"></a>java的一个快速输入:</h2><p><strong>通过BufferedReader来实现(一般就用这个就行):</strong></p><p>&#x2F;&#x2F;注意要引入这个**java.io.***包<br>&#x2F;&#x2F;同时还有异常要抛出</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//基本输入</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Integer.parseInt(br.readLine());</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        String[] tmp = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">a</span> <span class="operator">=</span> Long.parseLong(tmp[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">long</span> <span class="variable">b</span> <span class="operator">=</span> Long.parseLong(tmp[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="日期差简单运算"><a href="#日期差简单运算" class="headerlink" title="日期差简单运算:"></a>日期差简单运算:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/20 15:49</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> class 日期处理 &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//基本输入</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> br.readLine();</span><br><span class="line">        <span class="comment">//通过SimpleDateFormat来解析设置日期格式:</span></span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd hh:mm&quot;</span>);</span><br><span class="line">        <span class="comment">/*天数差*/</span></span><br><span class="line">        <span class="type">Date</span> <span class="variable">fromDate</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;2022-03-20 12:00&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">toDate</span> <span class="operator">=</span> sdf.parse(<span class="string">&quot;2090-03-20 12:00&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">from</span> <span class="operator">=</span> fromDate.getTime();</span><br><span class="line">        <span class="type">long</span> <span class="variable">to</span> <span class="operator">=</span> toDate.getTime();</span><br><span class="line">        <span class="type">int</span> <span class="variable">days</span> <span class="operator">=</span> (<span class="type">int</span>) ((to - from)/(<span class="number">1000</span>*<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>));</span><br><span class="line">        System.out.println(<span class="string">&quot;两个时间之间的天数差为: &quot;</span> + days);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="简单的类的排序"><a href="#简单的类的排序" class="headerlink" title="简单的类的排序:"></a>简单的类的排序:</h2><p><strong>通过新建一个实现了Comparable的类:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Student&gt; &#123;</span><br><span class="line">        <span class="comment">//注意static</span></span><br><span class="line">        String name;</span><br><span class="line">        Integer totalFenShu;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, Integer totalFenShu)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.name = name;</span><br><span class="line">            <span class="built_in">this</span>.totalFenShu = totalFenShu;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(Student o)</span> &#123;</span><br><span class="line">            <span class="comment">//一定重写compareTo这个方法</span></span><br><span class="line">            <span class="keyword">return</span> totalFenShu.compareTo(o.totalFenShu);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                    <span class="string">&quot;, totalFenShu=&quot;</span> + totalFenShu +</span><br><span class="line">                    <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//基本输入</span></span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Integer.parseInt(br.readLine());</span><br><span class="line"></span><br><span class="line">        Student[] students = <span class="keyword">new</span> <span class="title class_">Student</span>[n];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            String[] tmp = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> tmp[<span class="number">0</span>];</span><br><span class="line">            <span class="type">Integer</span> <span class="variable">totalFenShu</span> <span class="operator">=</span> Integer.parseInt(tmp[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">            students[i] = <span class="keyword">new</span> <span class="title class_">Student</span>(name,totalFenShu);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//调用Arrays.sort()对数组进行排序</span></span><br><span class="line">        Arrays.sort(students);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Student i: students) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">4</span><br><span class="line">feng 123</span><br><span class="line">xiao 122</span><br><span class="line">qiang 112</span><br><span class="line">quan 1166</span><br><span class="line">Student&#123;name=&#x27;qiang&#x27;, totalFenShu=112&#125;</span><br><span class="line">Student&#123;name=&#x27;xiao&#x27;, totalFenShu=122&#125;</span><br><span class="line">Student&#123;name=&#x27;feng&#x27;, totalFenShu=123&#125;</span><br><span class="line">Student&#123;name=&#x27;quan&#x27;, totalFenShu=1166&#125;</span><br></pre></td></tr></table></figure><h2 id="常用进制转换"><a href="#常用进制转换" class="headerlink" title="常用进制转换:"></a>常用进制转换:</h2><p><strong>十进制转十六进制:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer.toHexString(shu)<span class="comment">//shu是十进制int型</span></span><br></pre></td></tr></table></figure><p><strong>十六进制转十进制</strong>:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Long.parseLong(hex,<span class="number">16</span>)<span class="comment">//这个hex是String字符串类型</span></span><br></pre></td></tr></table></figure><h2 id="最大公约数的寻找"><a href="#最大公约数的寻找" class="headerlink" title="最大公约数的寻找:"></a>最大公约数的寻找:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">gongYueShu</span><span class="params">(<span class="type">int</span> A, <span class="type">int</span> B)</span>&#123;</span><br><span class="line">    <span class="type">return</span> <span class="variable">B</span> <span class="operator">=</span>= <span class="number">0</span>? A: gongYueShu(B, A % B);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找:"></a>二分查找:</h2><p>目标值小了就去左侧找,大了就去右侧找</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">binarySearch</span><span class="params">(<span class="type">int</span>[] arr, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">left</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> arr.length - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left &lt;= right) &#123;</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">indexOfMid</span> <span class="operator">=</span> (right - left) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> arr[indexOfMid];</span><br><span class="line">        <span class="keyword">if</span> (target &gt; mid)&#123;</span><br><span class="line">            <span class="comment">//从右侧找,就要把左边界给缩小;</span></span><br><span class="line">            left = indexOfMid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target &lt; mid)&#123;</span><br><span class="line">            <span class="comment">//从左侧找,就要把右边界给缩小;</span></span><br><span class="line">            right = indexOfMid - <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//说明找到了,那就返回坐标;</span></span><br><span class="line">            <span class="keyword">return</span> indexOfMid;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="java中有一种大数"><a href="#java中有一种大数" class="headerlink" title="java中有一种大数:"></a>java中有一种大数:</h2><p><strong>BigInteger</strong></p><p>例题题目:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">求两个超大数的最大公因数</span><br><span class="line">输入:</span><br><span class="line">12 16</span><br><span class="line">输出:</span><br><span class="line">4</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">        String[] tmp = br.readLine().split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(tmp[<span class="number">0</span>]);</span><br><span class="line">        <span class="type">BigInteger</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BigInteger</span>(tmp[<span class="number">1</span>]);</span><br><span class="line">        System.out.println(yueFen(a,b));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> BigInteger <span class="title function_">yueFen</span><span class="params">(BigInteger a, BigInteger b)</span> &#123;</span><br><span class="line">        <span class="comment">//注意,这里return b==0 ? a : yueFeng(b, a.mod(b));</span></span><br><span class="line">        <span class="comment">//注意等于用b.equals(BigInteger.ZERO)</span></span><br><span class="line">        <span class="keyword">return</span> b.equals(BigInteger.ZERO) ? a : yueFen(b,a.mod(b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora和PicGo的结合</title>
      <link href="/2022/03/20/typora%E5%92%8Cpicgo%E7%9A%84%E7%BB%93%E5%90%88/"/>
      <url>/2022/03/20/typora%E5%92%8Cpicgo%E7%9A%84%E7%BB%93%E5%90%88/</url>
      
        <content type="html"><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/%E5%A4%87%E7%94%A814.png" alt="备用14"></p><p>图床上传软件picgo的一些简单配置<a href="https://blog.csdn.net/yefcion/article/details/88412025">传送门</a></p><p>结合详情请看这个博客<a href="https://blog.csdn.net/bruce_6/article/details/104821531?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_paycolumn_v3&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1.pc_relevant_paycolumn_v3&utm_relevant_index=1">传送门</a></p><p>这个也是一个<a href="https://blog.csdn.net/u011291916/article/details/119194338">传送门</a></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>作为图床的仓库最好<strong>不能超过 1G</strong>，因为仓库超过 1G 后会有人工审核仓库内容。一旦发现用于图床可能会被删库也可能会被封号！！！所以建议在 1G 之前就换个仓库</li><li>仓库是<strong>公开</strong>的，所以图片放上去要注意隐私问题，特别是单位的一些涉密资料</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 小东西 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PageResult类的使用</title>
      <link href="/2022/03/17/PageResult%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/03/17/PageResult%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">* 一般返回全部东西的话就要用到page页面,</span><br><span class="line">* 然后一般返回普通的page(import com.baomidou.mybatisplus.extension.plugins.pagination.Page</span><br><span class="line">* 其中要新建一个页面的到页面的大小,页面页数</span><br></pre></td></tr></table></figure><p>PageResult类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cuit.epoch.util.result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Pymjl</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2022/1/21 22:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageResult</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt;, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">3720998571176536865L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; records = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一共有多少条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> totalElements;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> currentPage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一页数据最多有多少条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> pageSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一共有多少页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> totalPages;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页数有多少条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> numberOfElements;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法，只用把原来的page类放进来即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 查出来的分页对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageResult</span><span class="params">(Page&lt;T&gt; page)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.records = page.getRecords();</span><br><span class="line">        <span class="built_in">this</span>.totalElements = page.getTotal();</span><br><span class="line">        <span class="built_in">this</span>.currentPage = page.getCurrent();</span><br><span class="line">        <span class="built_in">this</span>.pageSize = page.getSize();</span><br><span class="line">        <span class="built_in">this</span>.numberOfElements = page.getRecords().size();</span><br><span class="line">        <span class="built_in">this</span>.totalPages = page.getPages();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有前一页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPrevious</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getCurrentPage() &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有下一页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getCurrentPage() + <span class="number">1</span> &lt; getTotalPages();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取总的页数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> long</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getTotalPages</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.totalPages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前页的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List&lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;T&gt; <span class="title function_">getRecords</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableList(records);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> records 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRecords</span><span class="params">(List&lt;T&gt; records)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.records = records;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasRecords</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getNumberOfElements() &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单页大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getPageSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置单页大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageSize</span><span class="params">(Long pageSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pageSize = pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取全部元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getTotalElements</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> totalElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置全部元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotalElements</span><span class="params">(<span class="type">long</span> totalElements)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.totalElements = totalElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前页号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getCurrentPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置当前页号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCurrentPage</span><span class="params">(Long currentPage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.currentPage = currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单页元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumberOfElements</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> numberOfElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置单页元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNumberOfElements</span><span class="params">(<span class="type">int</span> numberOfElements)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.numberOfElements = numberOfElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getRecords().iterator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PrizeService:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PrizeService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Prize&gt; &#123;</span><br><span class="line">    Page&lt;Prize&gt; <span class="title function_">getPrizeByEverything</span><span class="params">(Integer currentPage, Integer pageSize, PrizeUpdateDTO PrizeUpdateDTO)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PrizeServiceImpl:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/17 21:03</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrizeServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;PrizeMapper, Prize&gt; <span class="keyword">implements</span> <span class="title class_">PrizeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    PrizeMapper prizeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    通过奖项的一些属性筛选,查询,通过分页返回</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Page&lt;Prize&gt; <span class="title function_">getPrizeByEverything</span><span class="params">(Integer currentPage, Integer pageSize, PrizeUpdateDTO prizeUpdateDTO)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Prize&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        System.out.println(<span class="string">&quot;需要查询的班级为:&quot;</span> + prizeUpdateDTO.getClbum());</span><br><span class="line">        queryWrapper</span><br><span class="line">                .like(Strings.isNotBlank(prizeUpdateDTO.getPrizeName()),Prize::getPrizeName,prizeUpdateDTO.getPrizeName())</span><br><span class="line">                .like(Strings.isNotBlank(prizeUpdateDTO.getPrizeWinner()),Prize::getPrizeWinner,prizeUpdateDTO.getPrizeWinner())</span><br><span class="line">                .like(Strings.isNotBlank(prizeUpdateDTO.getClbum()),Prize::getClbum,prizeUpdateDTO.getClbum())</span><br><span class="line">                .like(Strings.isNotBlank(prizeUpdateDTO.getGrade()),Prize::getGrade,prizeUpdateDTO.getGrade())</span><br><span class="line">                .like(Strings.isNotBlank(prizeUpdateDTO.getProfession()),Prize::getProfession,prizeUpdateDTO.getProfession())</span><br><span class="line">                .like(Strings.isNotBlank(prizeUpdateDTO.getPrizeName()),Prize::getPrizeName,prizeUpdateDTO.getPrizeName());</span><br><span class="line">        <span class="keyword">if</span> (prizeUpdateDTO.getPrizeTime() != <span class="literal">null</span>)&#123;</span><br><span class="line">            queryWrapper.like(Prize::getPrizeTime,prizeUpdateDTO.getPrizeTime());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Page&lt;Prize&gt; prizePage = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(currentPage, pageSize);</span><br><span class="line">        prizeMapper.selectPage(prizePage,queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> prizePage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>PrizeController:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>: todo 异常拦截</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/17 20:51</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/prizes&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrizeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    PrizeService prizeService</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>: 通过分类筛选,你想要怎么筛选都可以,你直接传一个prize对象给我就行</span></span><br><span class="line"><span class="comment">     * 这里的prizeUpdateDTO没有将json中的class识别转换成clbum,一个小bug,是因为,没有加<span class="doctag">@requestBody</span>这个注解,这里是直接从require参数中取值,不是json中取值,<span class="doctag">@Json</span>就没有很大的作用,可以新建一个类</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Author</span>: ladidol</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Date</span>: 2022/3/18 11:28</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Param</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Return</span>:</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/searchByEverything&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;PageResult&lt;Prize&gt;&gt; <span class="title function_">getPrizesByEverything</span><span class="params">(<span class="meta">@RequestParam(&quot;currentPage&quot;)</span>Integer currentPage, <span class="meta">@RequestParam(&quot;pageSize&quot;)</span>Integer pageSize, PrizeUpdateDTO prizeUpdateDTO)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="keyword">new</span> <span class="title class_">PageResult</span>&lt;&gt;(prizeService.getPrizeByEverything(currentPage, pageSize, prizeUpdateDTO)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>PrizeUpdateDTO:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/17 21:15</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrizeUpdateDTO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;奖项id不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;奖项者不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String prizeWinner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;奖项名字不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String prizeName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull(message = &quot;奖项时间不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date prizeTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;奖项文件不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;专业不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String profession;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;年级不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String grade;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;班级不能为空&quot;)</span></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;class&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String clbum;<span class="comment">//班级</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>apifox上查询结果:</p><p>例一:</p><p>途中是对奖项名字prizeName带有”奖项”和奖项专业profession带有计算机的进行的筛选返回</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220318124622466.png" alt="image-20220318124622466"></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220318124600563.png" alt="image-20220318124600563"></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;records&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小小1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;奖项11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小小2&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;奖项11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:17&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:17&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">14</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小小3&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;奖项11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:22&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:22&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">15</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小小4&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;奖项11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:29&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:29&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;succeed&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;totalElements&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;currentPage&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pageSize&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;totalPages&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;numberOfElements&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;succeed&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>例二:直接查询全部奖项</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220318124910533.png" alt="image-20220318124910533"></p><p>结果:</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;result&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;records&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小李&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;蓝桥杯一等奖省&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-09 20:42:25&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 15:09:34&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 15:09:36&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;202&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小钱&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;奖项1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;电子信息&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 15:17:39&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 15:17:42&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;208&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小金&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获奖1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 20:42:31&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;大气&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;19级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 16:35:24&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 16:35:24&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;191&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">6</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小彭&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获奖3&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 20:42:36&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;区块链&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;18级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 16:42:22&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 16:42:22&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;181&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">7</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小刚&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获奖7&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 20:42:41&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;资环&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;17级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 17:46:13&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 17:46:13&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;176&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">8</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;李华&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获奖8&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 20:42:44&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;资环&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;19级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 17:54:23&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 17:54:23&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;194&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">9</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小小&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;获奖9&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 20:42:47&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="keyword">null</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;外国语&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;21级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 21:55:14&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-13 21:55:14&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;212&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">11</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小强&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;项11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:26:15&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:26:15&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小小1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;奖项11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">13</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeWinner&quot;</span><span class="punctuation">:</span> <span class="string">&quot;小小2&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;奖项11&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;prizeTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-17 22:16:35&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://1.15.245.21:8888/group1/M00/00/00/rBEAA2IzIqiAIYUnAACQbY6JA7I103.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;profession&quot;</span><span class="punctuation">:</span> <span class="string">&quot;计算机&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;grade&quot;</span><span class="punctuation">:</span> <span class="string">&quot;20级&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:17&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2022-03-18 12:44:17&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;201&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;succeed&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;totalElements&quot;</span><span class="punctuation">:</span> <span class="number">12</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;currentPage&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;pageSize&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;totalPages&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;numberOfElements&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;succeed&quot;</span><span class="punctuation">:</span> <span class="keyword">true</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;成功&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
          <category> 项目开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(未完成)JavaScript学习</title>
      <link href="/2022/03/17/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5DJavaScript%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/17/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5DJavaScript%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><p><strong>JavaScript</strong>是一种属于网络的脚本语言，有它自身的基本数据类型、表达式和算术运算符及程序的基本程序框架，已经被广泛用于Web应用开发。</p><p>更重要的是JavaScript同HTML5一样具有<strong>跨平台性</strong>。</p><p><strong>简单</strong>是JavaScript的又一大优点。</p><p>随着服务器的强壮，引擎如V8和框架如Node.js的发展，及其事件驱动及异步IO等特性，<strong>JavaScript</strong>也逐渐被用来编写服务器端程序</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> web前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> 前端基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(未完成)CSS学习</title>
      <link href="/2022/03/17/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dcss%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/17/%5B%E6%9C%AA%E5%AE%8C%E6%88%90%5Dcss%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><h2 id="一、CSS简介"><a href="#一、CSS简介" class="headerlink" title="一、CSS简介"></a>一、CSS简介</h2><p><strong>CSS即层叠样式表</strong>（Cascading StyleSheet），</p><p>层叠样式表可以有效地对游戏场景、网站页面、微信小程序和各种基于H5的应用软件进行布局，对字体、颜色、背景和其它效果实现更加精确的控制</p><p><strong>HTML、CSS和JavaScript的关系如下：</strong></p><p>“HTML是网页的结构，CSS是网页的外观，而JavaScript是页面的行为。”</p><h2 id="二、内容"><a href="#二、内容" class="headerlink" title="二、内容"></a>二、内容</h2><h3 id="1-css的引入方式"><a href="#1-css的引入方式" class="headerlink" title="1.css的引入方式"></a>1.css的引入方式</h3><p>在HTML中引入CSS共有3种方式：</p><p>（1）外部样式表； （2）内部样式表； （3）内联样式表；</p><p>下面我们详细为大家介绍这3种CSS引入方式。</p><p>一、CSS的3种引用方式</p><p><strong>1、外部样式表</strong>(解耦合)</p><p>外部样式表是<strong>最理想的CSS引用方式，</strong>在实际开发当中，为了提升网站的性能和维护性，一般都是使用外部样式表。所谓的“外部样式表”，就是把CSS代码和HTML代码都单独放在不同文件中，然后<strong>在HTML文档中使用link标签来引用CSS样式表</strong>。 当样式需要被应用到多个页面时，外部样式表是最理想的选择。使用样式表，你就可以通过更改一个CSS文件来改变整个网站的外观。 外部样式表在单独文件中定义，并且在标签对中使用link标签来引用。 举例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在HTML页面中引用文件名为index的css文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;index.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>说明</strong>：外部样式表都是在head标签内使用link标签来引用的。</p><p><strong>2、内部样式表</strong></p><p>内部样式，指的就是把CSS代码和HTML代码放在同一个文件中，其中CSS代码放在标签对是放在标签对内的。 举例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这是内部样式表，CSS样式在style标签中定义--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span>&#123;<span class="attribute">color</span>:Red;&#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器预览效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220317112626183.png" alt="image-20220317112626183"></p><p>说明：</p><p>对于内部样式表，CSS样式在<style>标签内定义，而<style>标签必须放在<head>标签内。</p><p><strong>3.内联样式表</strong></p><p>内联样式表，也是把CSS代码和HTML代码放在同一个文件中，但是跟内部样式表不同，CSS样式不是在<style></style>标签对中定义，而是在标签的style属性中定义。</p><p>举例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:Red; &quot;</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:Red; &quot;</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">&quot;color:Red; &quot;</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器预览效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220317113125557.png" alt="image-20220317113125557"></p><h3 id="2-元素的id和class"><a href="#2-元素的id和class" class="headerlink" title="2.元素的id和class"></a>2.元素的id和class</h3><p>id和class是HTML元素中两个最基本的公共属性。</p><p><strong>一、元素的id属性</strong></p><p>id属性被赋予了标识页面元素的唯一身份。如果一个页面出现了多个相同id属性取值，<a href="http://www.lvyestudy.com/les_cj/cj_2.2.aspx">CSS选择器</a>或者JavaScript就会因为无法分辨要控制的元素而最终报错。</p><p>举例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/css_reset.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;first&quot;</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>上面HTML代码是错误的，因为在同一个HTML页面中，不允许出现两个相同的id。不过要注意一下，在不同页面是可以出现相同id的元素。</p><p><strong>二、元素的class属性</strong></p><p>class，顾名思义，就是“类”。它采用的思想跟其他C、Java等编程语言的“类”相似。我们可以为同一个页面的相同元素或者不同元素设置相同的class，然后使得相同的class具有相同的CSS样式。</p><p>如果你要为两个元素或者两个以上元素定义相同的样式，建议使用class属性。</p><p>举例：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;css/css_reset.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;first&quot;</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说明：</p><p>这段HTML代码是正确的，因为在同一个HTML页面中，允许相同的元素或者不同的元素设置相同的class属性，以便我们可以统一对具有相同的class属性的元素定义相同的CSS样式。</p><p><strong>id和class就像你的身份证号和姓名，身份证号是全国唯一的，id号也就是唯一的，class（类名）就是姓名，两个人的姓名就有可能一样。</strong></p><p>此外，需要注意一下：</p><ul><li>（1）一个标签可以同时定义多个class；</li><li>（2）id也可以写成name，区别在于name是HTML中的标准，而id是XHTML中的标准，现在网页的标准都是使用id，所以大家尽量不要用name属性；</li></ul><h3 id="3、CSS选择器"><a href="#3、CSS选择器" class="headerlink" title="3、CSS选择器"></a>3、CSS<a href="https://so.csdn.net/so/search?q=%E9%80%89%E6%8B%A9%E5%99%A8&spm=1001.2101.3001.7020">选择器</a></h3><p>我们先看一段代码：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>什么叫CSS选择器？<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>小小的博客世界<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>ladidol<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>ladfeng<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在浏览器预览效果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220317114045000.png" alt="image-20220317114045000"></p><p>如果我们只想要第二个div文本颜色为红色，怎么办呢？我们必须通过一种方式来“选中”第二个div（因为其他的div不能选中），然后把它的CSS属性颜色color改为红色，这样才行。像这种把某一个你想要的标签选中的方式就是所谓的“选择器”，也就是说选择器就是一种选择元素的方式。</p><p><strong>选择器</strong></p><p>选择器，说白了就是用一种方式把你想要的那一个标签选中！把它选中了，你才能操作这个标签的CSS样式。这样够简单了吧。CSS有很多把你所需要的标签选中的方式，这些不同的方式就是不同的选择器。</p><p>选择器的不同，在于它选择方式不同，但是他们的目的都是相同的，那就是把你需要的标签选中，然后让你定义该标签的CSS样式。当然，你也有可能会用某一种选择器代替另一种选择器，这仅仅是由于选择方式不一样罢了，目的还是一样的。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">选择器</span><br><span class="line">&#123;</span><br><span class="line">  样式属性1:取值1;</span><br><span class="line">  样式属性2:取值2;</span><br><span class="line">  ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一、基本选择器</strong></p><p><strong>1、元素选择器</strong></p><p>元素选择器，就是“选中”相同的元素，然后对相同的元素设置同一个CSS样式。</p><p>语法：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220317114426383.png" alt="image-20220317114426383"></p><p>举例:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">div</span>&#123;<span class="attribute">color</span>:red;&#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>ladidol<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>ladidol<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>ladidol<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>ladidol<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220317114702486.png" alt="image-20220317114702486"></p><p>分析：</p><p>选中了div元素为红色</p><p><strong>2、id选择器</strong></p><p>我们可以为元素设置一个id，然后针对这个id的元素进行CSS样式操作。注意，在同一个页面中，不允许出现两个相同的id，这个就像没有哪两个人的身份证号是相同的道理一样。</p><p>语法：</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220317130614161.png" alt="image-20220317130614161"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> web前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-plus快速入门</title>
      <link href="/2022/03/16/Mybatis-plus%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/16/Mybatis-plus%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h1><p>官网文档也有入门介绍，如果有耐心和一定基础的小伙伴可以直接看官网<a href="https://baomidou.com/">传送门</a></p><h2 id="准备依赖"><a href="#准备依赖" class="headerlink" title="准备依赖"></a>准备依赖</h2><p>1.mybatis-plus依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.mysql驱动JDBC依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.mysql驱动、JDBC和其他springboot依赖可以在IDEA中构建springboot项目时选择添加，这里就不加概述。</p><h2 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h2><p>创建user表</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> mybatis_plus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE mybatis_plus;</span><br><span class="line"></span><br><span class="line">USE mybatis_plus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">    id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;姓名&#x27;</span>,</span><br><span class="line">    age <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    create_time DATETIME COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time DATETIME COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span> <span class="keyword">where</span> <span class="number">1</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;Jone&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;test1@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;Jack&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;test2@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;Tom&#x27;</span>, <span class="number">28</span>, <span class="string">&#x27;test3@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">&#x27;Sandy&#x27;</span>, <span class="number">21</span>, <span class="string">&#x27;test4@baomidou.com&#x27;</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">&#x27;Billie&#x27;</span>, <span class="number">24</span>, <span class="string">&#x27;test5@baomidou.com&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="初始化工程"><a href="#初始化工程" class="headerlink" title="初始化工程"></a>初始化工程</h2><p>用IDEA初始化一个springboot项目</p><h2 id="配置数据源"><a href="#配置数据源" class="headerlink" title="配置数据源"></a>配置数据源</h2><p>在resource目录下的配置文件里配置自己的数据源，建议在application.yml中配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">nihao123</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus?useSSL=true&amp;useUnicode=true&amp;characterEcoding=utf-8</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><p>注意，我这里使用的mysql驱动是8+，在url中还需要配置时区，因为我在mysql配置文件中设置了默认时区，所以这里我没有配置时区。如果没有设置时区请加上serverTimezone&#x3D;Asia&#x2F;Shanghai.</p><p>另外，如果mysql驱动用的5+版本则应这样driver-class-name: com.mysql.jdbc.Driver配置驱动。</p><p>下面的mybatis-plus配置是开启日志，因为我没有导入其他的日志依赖，所以用的是自带的日志</p><h2 id="创建User实体类"><a href="#创建User实体类" class="headerlink" title="创建User实体类"></a>创建User实体类</h2><p>在pojo包下创建User对象，这里我引入了Lombok，用Lombok给对象创建构造器以及getter和setter</p><p>注意：若之前在IDEA中并未使用过Lombok，请先在IDEA中安装Lombok插件，Lombok</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.ToString;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ToString</span> <span class="comment">//重写toString方法</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span> <span class="comment">//创建有参构造</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//创建getter和setter</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span> <span class="comment">//创建无参构造，用了创建有参构造的注解是默认没有无参构造的，需要手动创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span> <span class="comment">//主键注解，具体参考官方文档，注意使用AUTO创建表时请把主键设置为自增</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span><span class="comment">//字段注解，具体参考官方文档</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的@TableField后面会讲到,可以先暂时跳过</p><h2 id="配置Mybatis-Plus"><a href="#配置Mybatis-Plus" class="headerlink" title="配置Mybatis-Plus"></a>配置Mybatis-Plus</h2><p>在main&#x2F;src目录下创建mapper文件夹，在mapper文件夹下创建UserMapper这个接口，让这个接口继承BaseMapper ,注意泛型里面是要操作的实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis_plus.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.mybatis_plus.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Repository</span></span><br><span class="line"><span class="meta">@Mapper</span><span class="comment">//一般就是用这个注解了</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line"><span class="comment">//这里可以自己写sql，用法和mybatis一样。现在暂时不写，仅测试mybatis-plus的实现类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后还要在springboot启动类上添加扫描注解，扫描这个mapper</p><p>注意：扫描包名千万别写错了，否则后面的代码全部白写</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis_plus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@MapperScan(&quot;com.mybatis_plus.Mapper&quot;)如果mapper层注释为repository就加一个这个注解</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>在spring boot测试类里面编写测试类</p><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>查询所有用户</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mybatis_plus;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.mybatis_plus.Mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.mybatis_plus.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="literal">null</span>);<span class="comment">//这里的参数是一个条件构造器wrapper,这里先暂时不讲，后面会讲到</span></span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行测试，得到结果(因为开启了日志，所以在控制台看到了sql这个执行过程,因为我之前测试过，所以表里的数据有些不一样)</p><p>控制台输出:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::                (v2.6.4)</span><br><span class="line"></span><br><span class="line">2022-03-12 14:27:54.068  INFO 9548 --- [           main] com.feng.MybatisplusApplicationTests     : Starting MybatisplusApplicationTests using Java 1.8.0_202 on SmallWolfberry with PID 9548 (started by 冯小强 in E:\Java\springboot\mybatisplus)</span><br><span class="line">2022-03-12 14:27:54.069  INFO 9548 --- [           main] com.feng.MybatisplusApplicationTests     : No active profile set, falling back to 1 default profile: &quot;default&quot;</span><br><span class="line">Logging initialized using &#x27;class org.apache.ibatis.logging.stdout.StdOutImpl&#x27; adapter.</span><br><span class="line">Property &#x27;mapperLocations&#x27; was not specified.</span><br><span class="line"> _ _   |_  _ _|_. ___ _ |    _ </span><br><span class="line">| | |\/|_)(_| | |_\  |_)||_|_\ </span><br><span class="line">     /               |         </span><br><span class="line">                        3.4.3 </span><br><span class="line">This primary key of &quot;id&quot; is primitive !不建议如此请使用包装类 in Class: &quot;com.feng.entity.User&quot;</span><br><span class="line">2022-03-12 14:27:56.229  INFO 9548 --- [           main] com.feng.MybatisplusApplicationTests     : Started MybatisplusApplicationTests in 2.544 seconds (JVM running for 3.685)</span><br><span class="line"></span><br><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@350a94ce] was not registered for synchronization because synchronization is not active</span><br><span class="line">2022-03-12 14:27:56.449  INFO 9548 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...</span><br><span class="line">2022-03-12 14:27:57.551  INFO 9548 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.</span><br><span class="line">JDBC Connection [HikariProxyConnection@488422671 wrapping com.mysql.cj.jdbc.ConnectionImpl@6fa13e6] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: SELECT id,name,age,email,create_time,update_time FROM user</span><br><span class="line">==&gt; Parameters: </span><br><span class="line">&lt;==    Columns: id, name, age, email, create_time, update_time</span><br><span class="line">&lt;==        Row: 1, Jone, 18, test1@baomidou.com, null, null</span><br><span class="line">&lt;==        Row: 2, Jack, 20, test2@baomidou.com, null, null</span><br><span class="line">&lt;==        Row: 3, Tom, 28, test3@baomidou.com, null, null</span><br><span class="line">&lt;==        Row: 4, Sandy, 21, test4@baomidou.com, null, null</span><br><span class="line">&lt;==        Row: 5, Billie, 24, test5@baomidou.com, null, null</span><br><span class="line">&lt;==      Total: 5</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@350a94ce]</span><br><span class="line">User(id=1, name=Jone, age=18, email=test1@baomidou.com, createTime=null, updateTime=null)</span><br><span class="line">User(id=2, name=Jack, age=20, email=test2@baomidou.com, createTime=null, updateTime=null)</span><br><span class="line">User(id=3, name=Tom, age=28, email=test3@baomidou.com, createTime=null, updateTime=null)</span><br><span class="line">User(id=4, name=Sandy, age=21, email=test4@baomidou.com, createTime=null, updateTime=null)</span><br><span class="line">User(id=5, name=Billie, age=24, email=test5@baomidou.com, createTime=null, updateTime=null)</span><br><span class="line"></span><br><span class="line">2022-03-12 14:27:57.631  INFO 9548 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...</span><br><span class="line">2022-03-12 14:27:57.633  INFO 9548 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.</span><br><span class="line"></span><br><span class="line">Process finished with exit code 0</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>除此之外，除了selectList（）方法以外，mybatis-plus还带有很多其他的查询方法方法，在此不一一演示</p><p>，读者可以自行探索</p><h2 id="使用Service层来调用服务"><a href="#使用Service层来调用服务" class="headerlink" title="使用Service层来调用服务:"></a>使用Service层来调用服务:</h2><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作:"></a>准备工作:</h3><p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-fo0xsDA4-1647069309210)(E:&#x2F;myblog&#x2F;source&#x2F;images&#x2F;mybatis-plus%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B&#x2F;image-20220312150929158.png)]</p><p>新建一个UserService类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.IService;</span><br><span class="line"><span class="keyword">import</span> com.feng.entity.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/12 14:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    Boolean <span class="title function_">saveUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>新建一个UserServiceImpl实现类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.service.impl.ServiceImpl;</span><br><span class="line"><span class="keyword">import</span> com.feng.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.feng.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.feng.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Author</span> Ladidol</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Date</span>: 2022/3/12 14:55</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt;   <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">saveUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">                .eq(User::getId, <span class="number">6</span>)</span><br><span class="line">                .eq(User::getName, <span class="string">&quot;ladidol&quot;</span>)</span><br><span class="line">                .eq(User::getEmail, <span class="string">&quot;599426945@qq.com&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">oldUser</span> <span class="operator">=</span> baseMapper.selectOne(queryWrapper);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(oldUser)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Exception</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">User</span> <span class="variable">newUser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        newUser.setAge(<span class="number">20</span>);</span><br><span class="line">        newUser.setName(<span class="string">&quot;ladidol&quot;</span>);</span><br><span class="line">        newUser.setEmail(<span class="string">&quot;ladidol@outlook.com&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> baseMapper.insert(newUser) &gt; <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试类中新添加方法:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.feng.entity.User;</span><br><span class="line"><span class="keyword">import</span> com.feng.service.UserService;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MybatisplusApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    BaseMapper&lt;User&gt; baseMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;User&gt; users = baseMapper.selectList(<span class="literal">null</span>);<span class="comment">//这里的参数是一个条件构造器wrapper,这里先暂时不讲，后面会讲到</span></span><br><span class="line">        users.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveTest</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        userService.saveUser();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  .   ____          _            __ _ _</span><br><span class="line"> /\\ / ___&#x27;_ __ _ _(_)_ __  __ _ \ \ \ \</span><br><span class="line">( ( )\___ | &#x27;_ | &#x27;_| | &#x27;_ \/ _` | \ \ \ \</span><br><span class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</span><br><span class="line">  &#x27;  |____| .__|_| |_|_| |_\__, | / / / /</span><br><span class="line"> =========|_|==============|___/=/_/_/_/</span><br><span class="line"> :: Spring Boot ::                (v2.6.4)</span><br><span class="line"></span><br><span class="line">2022-03-12 15:06:39.024  INFO 14752 --- [           main] com.feng.MybatisplusApplicationTests     : Starting MybatisplusApplicationTests using Java 1.8.0_202 on SmallWolfberry with PID 14752 (started by 冯小强 in E:\Java\springboot\mybatisplus)</span><br><span class="line">2022-03-12 15:06:39.025  INFO 14752 --- [           main] com.feng.MybatisplusApplicationTests     : No active profile set, falling back to 1 default profile: &quot;default&quot;</span><br><span class="line">Logging initialized using &#x27;class org.apache.ibatis.logging.stdout.StdOutImpl&#x27; adapter.</span><br><span class="line">Property &#x27;mapperLocations&#x27; was not specified.</span><br><span class="line"> _ _   |_  _ _|_. ___ _ |    _ </span><br><span class="line">| | |\/|_)(_| | |_\  |_)||_|_\ </span><br><span class="line">     /               |         </span><br><span class="line">                        3.4.3 </span><br><span class="line">2022-03-12 15:06:41.136  INFO 14752 --- [           main] com.feng.MybatisplusApplicationTests     : Started MybatisplusApplicationTests in 2.669 seconds (JVM running for 3.816)</span><br><span class="line"></span><br><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@790a251b] was not registered for synchronization because synchronization is not active</span><br><span class="line">2022-03-12 15:06:41.387  INFO 14752 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Starting...</span><br><span class="line">2022-03-12 15:06:42.509  INFO 14752 --- [           main] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Start completed.</span><br><span class="line">JDBC Connection [HikariProxyConnection@1134011961 wrapping com.mysql.cj.jdbc.ConnectionImpl@24841372] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: SELECT id,name,age,email,create_time,update_time FROM user WHERE (id = ? AND name = ? AND email = ?)</span><br><span class="line">==&gt; Parameters: 6(Integer), ladidol(String), 599426945@qq.com(String)</span><br><span class="line">&lt;==      Total: 0</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@790a251b]</span><br><span class="line">Creating a new SqlSession</span><br><span class="line">SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@47406941] was not registered for synchronization because synchronization is not active</span><br><span class="line">JDBC Connection [HikariProxyConnection@1643565953 wrapping com.mysql.cj.jdbc.ConnectionImpl@24841372] will not be managed by Spring</span><br><span class="line">==&gt;  Preparing: INSERT INTO user ( name, age, email, create_time, update_time ) VALUES ( ?, ?, ?, ?, ? )</span><br><span class="line">==&gt; Parameters: ladidol(String), 20(Integer), ladidol@outlook.com(String), null, null</span><br><span class="line">&lt;==    Updates: 1</span><br><span class="line">Closing non transactional SqlSession [org.apache.ibatis.session.defaults.DefaultSqlSession@47406941]</span><br><span class="line"></span><br><span class="line">2022-03-12 15:06:42.596  INFO 14752 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown initiated...</span><br><span class="line">2022-03-12 15:06:42.599  INFO 14752 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : HikariPool-1 - Shutdown completed.</span><br></pre></td></tr></table></figure><h1 id="代码自动生成器"><a href="#代码自动生成器" class="headerlink" title="代码自动生成器"></a>代码自动生成器</h1><p>mybatis-plus可以通过代码自动生成代码</p><p>需要导入如下依赖:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写运行程序代码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.FieldFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.*;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.po.TableFill;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 演示例子，执行 main 方法控制台输入模块表名回车自动生成对应项目目录中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CodeGenerator</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 需要构建一个 代码自动生成器 对象</span></span><br><span class="line">        <span class="type">AutoGenerator</span> <span class="variable">mpg</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AutoGenerator</span>();</span><br><span class="line"><span class="comment">// 配置策略</span></span><br><span class="line"><span class="comment">// 1、全局配置</span></span><br><span class="line">        <span class="type">GlobalConfig</span> <span class="variable">gc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GlobalConfig</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">projectPath</span> <span class="operator">=</span> System.getProperty(<span class="string">&quot;user.dir&quot;</span>);<span class="comment">//用户当前的目录,可以根据需求改</span></span><br><span class="line">        gc.setOutputDir(projectPath+<span class="string">&quot;/src/main/java&quot;</span>);<span class="comment">//配置输出路径</span></span><br><span class="line">        gc.setAuthor(<span class="string">&quot;Ladidol&quot;</span>);<span class="comment">//配置作者</span></span><br><span class="line">        gc.setOpen(<span class="literal">false</span>);</span><br><span class="line">        gc.setFileOverride(<span class="literal">false</span>); <span class="comment">// 是否覆盖</span></span><br><span class="line">        gc.setServiceName(<span class="string">&quot;%sService&quot;</span>); <span class="comment">// 去Service的I前缀</span></span><br><span class="line">        gc.setIdType(IdType.AUTO);</span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);</span><br><span class="line">        gc.setSwagger2(<span class="literal">true</span>);</span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"><span class="comment">//2、设置数据源</span></span><br><span class="line">        <span class="type">DataSourceConfig</span> <span class="variable">dsc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceConfig</span>();</span><br><span class="line">        dsc.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis_plus?useSSL=true&amp;useUnicode=true&amp;characterEcoding=utf-8&quot;</span>);<span class="comment">//配置数据库url</span></span><br><span class="line">        dsc.setDriverName(<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">&quot;root&quot;</span>);<span class="comment">//用户</span></span><br><span class="line">        dsc.setPassword(<span class="string">&quot;nihao123&quot;</span>);<span class="comment">//密码</span></span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"><span class="comment">//3、包的配置</span></span><br><span class="line">        <span class="type">PackageConfig</span> <span class="variable">pc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PackageConfig</span>();</span><br><span class="line">        pc.setModuleName(<span class="string">&quot;feng&quot;</span>);<span class="comment">//需要将auto生成的代码放在的那一个包下面</span></span><br><span class="line">        pc.setParent(<span class="string">&quot;com&quot;</span>);</span><br><span class="line">        pc.setEntity(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">        pc.setMapper(<span class="string">&quot;mapper&quot;</span>);</span><br><span class="line">        pc.setService(<span class="string">&quot;service&quot;</span>);</span><br><span class="line">        pc.setController(<span class="string">&quot;controller&quot;</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"><span class="comment">//4、策略配置</span></span><br><span class="line">        <span class="type">StrategyConfig</span> <span class="variable">strategy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StrategyConfig</span>();</span><br><span class="line">        strategy.setInclude(<span class="string">&quot;user&quot;</span>);<span class="comment">//映射表名，这里也可以添加多个表</span></span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);</span><br><span class="line">        strategy.setEntityLombokModel(<span class="literal">true</span>); <span class="comment">// 自动lombok；</span></span><br><span class="line">        strategy.setLogicDeleteFieldName(<span class="string">&quot;deleted&quot;</span>);<span class="comment">//配置逻辑删除</span></span><br><span class="line"><span class="comment">// 自动填充配置</span></span><br><span class="line">        <span class="type">TableFill</span> <span class="variable">createTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFill</span>(<span class="string">&quot;create_time&quot;</span>, FieldFill.INSERT);</span><br><span class="line">        <span class="type">TableFill</span> <span class="variable">updateTime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TableFill</span>(<span class="string">&quot;update_time&quot;</span>, FieldFill.INSERT_UPDATE);</span><br><span class="line">        ArrayList&lt;TableFill&gt; tableFills = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        tableFills.add(createTime);</span><br><span class="line">        tableFills.add(updateTime);</span><br><span class="line">        strategy.setTableFillList(tableFills);</span><br><span class="line"><span class="comment">// 乐观锁</span></span><br><span class="line">        strategy.setVersionFieldName(<span class="string">&quot;version&quot;</span>);</span><br><span class="line">        strategy.setRestControllerStyle(<span class="literal">true</span>);</span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="literal">true</span>); <span class="comment">//   localhost:8080/hello_id_2</span></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line">        mpg.execute(); <span class="comment">//执行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行这个方法就会得到生成的代码了！</p><p>注意配置自己的数据库，另外，映射表名时注意对应自己表里面的字段。</p><h1 id="小知识点补充"><a href="#小知识点补充" class="headerlink" title="小知识点补充:"></a>小知识点补充:</h1><p><strong>对于实体类有@Accessor(chain&#x3D;true)这个注解，一个小小知识点的补充：</strong></p><p>一、来源<br>@Accessors注解是来自这个包下—&gt;lombok.experimental</p><p>二、功能介绍<br>@Accessors 注解用来配置lombok如何产生和显示get和set的方法,@Accessors(chain &#x3D; true)加上参数以后就可以开启链式编程.</p><p>传统set方法赋值(臃肿、占空间)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person.setName(<span class="string">&quot;wang&quot;</span>);</span><br><span class="line">person.setSex(<span class="string">&quot;男&quot;</span>);</span><br><span class="line">person.setEmail(<span class="string">&quot;123@qq.com&quot;</span>);</span><br><span class="line">person.setDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">person.setAddr(<span class="string">&quot;山东&quot;</span>);</span><br></pre></td></tr></table></figure><p>加上@Accessors(chain &#x3D; true)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person.setName(<span class="string">&quot;wang&quot;</span>).setSex(<span class="string">&quot;男&quot;</span>).setEmail(<span class="string">&quot;123@qq.com&quot;</span>).setDate(<span class="keyword">new</span> <span class="title class_">Date</span>()).setAddr(<span class="string">&quot;山东&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------或者向下面这样,不太推荐-------------</span></span><br><span class="line"><span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>().setName(<span class="string">&quot;wang&quot;</span>).setSex(<span class="string">&quot;男&quot;</span>).setEmail(<span class="string">&quot;123@qq.com&quot;</span>)</span><br><span class="line">.setDate(<span class="keyword">new</span> <span class="title class_">Date</span>()).setAddr(<span class="string">&quot;山东&quot;</span>);</span><br></pre></td></tr></table></figure><p>三、总结<br>这样一来解决了开发中字段一百个要set一百行的情况,一个注解,非常好用,大力推荐!!!</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 快速入门 </tag>
            
            <tag> Mybatis-plus </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用拦截器</title>
      <link href="/2022/03/16/%E5%B8%B8%E7%94%A8%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
      <url>/2022/03/16/%E5%B8%B8%E7%94%A8%E6%8B%A6%E6%88%AA%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>拦截器的在springboot中的一点小认识:<a href="https://blog.csdn.net/qq_40771567/article/details/115097428">传送门</a></p><p>interceptor中编写我们的拦截器,</p><p>在config中注册我们的拦截器</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/20210322204340530.png" alt="img"></p><h2 id="Mybatis-plus自动填充配置"><a href="#Mybatis-plus自动填充配置" class="headerlink" title="Mybatis-plus自动填充配置:"></a>Mybatis-plus自动填充配置:</h2><p><strong>MyMetaObjectHandler类:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;createTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;lastVisitedTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;finishedTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;updateTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setFieldValByName(<span class="string">&quot;lastVisitedTime&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>(), metaObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="全局异常处理"><a href="#全局异常处理" class="headerlink" title="全局异常处理:"></a>全局异常处理:</h2><p><strong>AppException类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.AllArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"><span class="keyword">import</span> lombok.NoArgsConstructor;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.util.result.ResultCode;</span><br><span class="line"></span><br><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AppException</span><span class="params">(ResultCode resultCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = resultCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = resultCode.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>全局异常处理类:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.util.result.CommonResult;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.util.result.ResultCode;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.util.result.ResultUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">error</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        log.error(e.getMessage());</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.fail(ResultCode.COMMON_FAIL.setMessage(e.getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(AppException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">error</span><span class="params">(AppException e)</span> &#123;</span><br><span class="line">        log.error(e.getMessage());</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.fail(ResultCode.CUSTOM_FAIL.setCode(e.getCode()).setMessage(e.getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="登录拦截"><a href="#登录拦截" class="headerlink" title="登录拦截:"></a>登录拦截:</h2><p><strong>jwt验证实例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.ExpiredJwtException;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.log4j.Log4j2;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.entity.user.OpenIdAndSessionKey;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.entity.user.User;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.handler.exception.AppException;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.mapper.user.UserMapper;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.util.JwtUtils;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.util.RedisService;</span><br><span class="line"><span class="keyword">import</span> org.cuit.epoch.util.result.ResultCode;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    RedisService redisService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Authorization&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(header) &amp;&amp; header.startsWith(<span class="string">&quot;Bearer &quot;</span>)) &#123;</span><br><span class="line">            <span class="comment">//获取token</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> header.substring(<span class="number">7</span>);</span><br><span class="line">            log.info(<span class="string">&quot;开始验证token==&gt; &quot;</span> + token);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//验证token</span></span><br><span class="line">                <span class="type">Claims</span> <span class="variable">claims</span> <span class="operator">=</span> JwtUtils.verifyJwt(token);</span><br><span class="line">                <span class="comment">//根据token从redis中获取openId和sessionKey</span></span><br><span class="line">                <span class="type">OpenIdAndSessionKey</span> <span class="variable">openIdAndSessionKey</span> <span class="operator">=</span> (OpenIdAndSessionKey) redisService.get(token);</span><br><span class="line">                <span class="comment">//将用户的openId和sessionKey放入request作用域中</span></span><br><span class="line">                request.setAttribute(<span class="string">&quot;openId&quot;</span>, openIdAndSessionKey.getOpenId());</span><br><span class="line">                log.info(<span class="string">&quot;用户的openId==&gt; &quot;</span> + openIdAndSessionKey.getOpenId());</span><br><span class="line">                request.setAttribute(<span class="string">&quot;sessionKey&quot;</span>, openIdAndSessionKey.getSessionKey());</span><br><span class="line">                log.info(<span class="string">&quot;用户的sessionKey==&gt; &quot;</span> + openIdAndSessionKey.getSessionKey());</span><br><span class="line">                <span class="comment">//从redis中获取用户信息</span></span><br><span class="line">                log.info(<span class="string">&quot;开始从redis中获取用户信息&quot;</span>);</span><br><span class="line">                user = (User) redisService.get(openIdAndSessionKey.getOpenId());</span><br><span class="line">                <span class="comment">//如果redis中数据为空，从数据库中获取</span></span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isEmpty(user)) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;从redis中获取用户信息失败，开始从数据库中获取用户信息&quot;</span>);</span><br><span class="line">                    LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;User&gt;()</span><br><span class="line">                            .eq(User::getOpenId, openIdAndSessionKey.getOpenId());</span><br><span class="line">                    user = userMapper.selectOne(wrapper);</span><br><span class="line">                    <span class="keyword">if</span> (StringUtils.isEmpty(user)) &#123;</span><br><span class="line">                        log.warn(<span class="string">&quot;用户首次登录，redis和数据库中均无该用户信息，request域中user值为null&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//将用户信息保存在request中,key=user</span></span><br><span class="line">                request.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ExpiredJwtException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AppException</span>(ResultCode.TOKEN_EXPIRED);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AppException</span>(ResultCode.TOKEN_ERROR);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AppException</span>(ResultCode.USER_NOT_LOGIN);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
            <tag> handler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习</title>
      <link href="/2022/03/16/html%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/16/html%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h1><p>“HTML是网页的结构，CSS是网页的外观，而JavaScript是页面的行为。”</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220317105010980.png" alt="image-20220317105010980"></p><h1 id="第一章-HTML5概述"><a href="#第一章-HTML5概述" class="headerlink" title="第一章 HTML5概述"></a>第一章 <a href="https://so.csdn.net/so/search?q=HTML5&spm=1001.2101.3001.7020">HTML5</a>概述</h1><h2 id="1-1、什么是HTML"><a href="#1-1、什么是HTML" class="headerlink" title="1.1、什么是HTML"></a>1.1、什么是HTML</h2><p>HTML（<strong>H</strong>yper<strong>T</strong>ext <strong>M</strong>arkup <strong>L</strong>anguage，超文本标记语言）是用来描述网页的一种语言，它不是一种编程语言，而是一种<strong>标记</strong>语言。</p><h2 id="1-2、什么是HTML5"><a href="#1-2、什么是HTML5" class="headerlink" title="1.2、什么是HTML5"></a>1.2、什么是HTML5</h2><p>HTML5是构建Web内容的一种语言描述方式，HTML5是互联网的下一代标准，是构建以及呈现互联网内容的一种语言方式，被认为是互联网的核心技术之一。HTML产生于1990年，1997年HTML4成为互联网标准，并广泛应用于互联网应用的开发。</p><p>HTML5是Web中核心语言HTML的规范，用户使用任何手段进行网页浏览时看到的内容原本都是HTML格式的，在浏览器中通过一些技术处理将其转换成为了可识别的信息，HTML5在从前HTML4.01的基础上进行了一定的改进。</p><h2 id="1-3、本文重要说明"><a href="#1-3、本文重要说明" class="headerlink" title="1.3、本文重要说明"></a>1.3、本文重要说明</h2><p>由于HTML5只是在HTML的基础上进行了新增或者废弃一些标签或者特性，本文默认均为HTML5语法，被废弃的部分就不再提起，HTML一般用于描述网页的结构，所以一些样式和脚本方面的标签和属性以及关于JavaScript部分的特性也不再提及，重点在于梳理常用标签体系。</p><h2 id="1-4、浏览器的版本"><a href="#1-4、浏览器的版本" class="headerlink" title="1.4、浏览器的版本"></a>1.4、浏览器的版本</h2><p>现今浏览器的许多新功能都是从HTML5标准中发展而来的。目前常用的浏览器有IE、火狐、谷歌、Safari和Opera等等，通过对这些主流web浏览器的发展策略调查，发现它们都支持HTML5上采取了措施。</p><p><strong>（1）IE浏览器</strong></p><p>2010年3月16日，微软MIX10技术大会上宣布其推出的IE9浏览器已经支持HTML5。同时还声称，随后将会更多的支持HTML新标准和CSS3新特性。</p><p><strong>（2）FireFox浏览器</strong></p><p>2010年7月，Mozilla基金会发布了即将推出的Firefox4浏览器的第一个早期测试版，该版本中Firefox浏览器中进行了大幅改进，包括新的HTML5语法分析器，以及支持更多的HTML5语法分析器，以及支持更多的HTML5形式的控制等。从官方文档来看，Firefox4对HTML5是完全级别的支持。目前，包括在线视频，在线音频在内的多种应用都已经在版本中实现。</p><p><strong>（3）Google浏览器</strong></p><p>2010年2月19日，谷歌Gears项目经理通过微博宣布，谷歌将放弃对Gears浏览器插件项目的支持，以重点开发HTML5项目。据费特表示，目前在谷歌看来，Gears应用用于HTML5的诸多创新非常相似，并且谷歌一直积极发展HTML5项目。因此只要谷歌不断以加强网络标准的应用功能为工作重点，那么为Gears增加新功能就无太大意义了。另外，Gears面临的需求也在日益下降，这也是谷歌做出吊证的重要原因。</p><p><strong>（4）Safari浏览器</strong></p><p>2010年6月7日，苹果在开发者发布会公布Safari5，这款浏览器支持10个以上的HTML5新技术，包括全屏幕播放、HTML5视频、HTML5地理位置、HTML5切片元素、HTML5的可拖动属性、HTML5的形式验证、HTML5的Ruby、HTML5的Ajaxl.ishi和WebSocket字幕。</p><p><strong>（5）Opera浏览器</strong></p><p>2010年5月5日，Opera软件公司首席技术官，号称“CSS之父”的Hakon Wium Lie认为，HTML5和CSS3，将会是全球互联网发展的未来趋势，包括目前Opera在内的诸多浏览器厂商，纷纷研发HTML5的相关产品，web未来属于HTML5。</p><p>综上所述，目前这些浏览器纷纷朝着HTML5的方向迈进，HTML5的时代即将来临</p><h1 id="第二章-HTML5语法"><a href="#第二章-HTML5语法" class="headerlink" title="第二章 HTML5语法"></a>第二章 HTML5语法</h1><h2 id="2-1、基本结构"><a href="#2-1、基本结构" class="headerlink" title="2.1、基本结构"></a>2.1、基本结构</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2、语法规范"><a href="#2-2、语法规范" class="headerlink" title="2.2、语法规范"></a>2.2、语法规范</h2><ul><li>HTML中不区分大小写，但是我们一般都使用小写</li><li>HTML中的注释不能嵌套</li><li>HTML标签必须结构完整，要么成对出现，要么自结束标签</li><li>HTML标签可以嵌套，但是不能交叉嵌套</li><li>HTML标签中的属性必须有值，且值必须加引号(双引号单引号都可以)</li></ul><h2 id="2-3、标签规范"><a href="#2-3、标签规范" class="headerlink" title="2.3、标签规范"></a>2.3、标签规范</h2><p>单标签:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;标签名 [属性名=属性值,...]&gt;</span><br></pre></td></tr></table></figure><p>成对标签:</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;标签名 [属性名=属性值,...]&gt;&lt;/标签名&gt;</span><br></pre></td></tr></table></figure><h1 id="第三章-HTML5标签"><a href="#第三章-HTML5标签" class="headerlink" title="第三章 HTML5标签"></a>第三章 HTML5标签</h1><h2 id="3-1、标题标签"><a href="#3-1、标题标签" class="headerlink" title="3.1、标题标签"></a>3.1、标题标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是三级标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>这是四级标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>这是五级标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>这是六级标题<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-2、段落标签"><a href="#3-2、段落标签" class="headerlink" title="3.2、段落标签"></a>3.2、段落标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-3、链接标签"><a href="#3-3、链接标签" class="headerlink" title="3.3、链接标签"></a>3.3、链接标签</h2><p><strong>使用示例：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.ladidol.top&quot;</span>&gt;</span>不要点开呀!点了你就后悔的！<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>常见属性：</strong></p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>href</td><td>URL</td><td>规定链接的目标 URL。</td></tr><tr><td>target</td><td>_blank   _parent    _self _top framename</td><td>规定在何处打开目标 URL。 仅在 href 属性存在时使用。就好比是新建窗口打开</td></tr></tbody></table><h2 id="3-4、图像标签"><a href="#3-4、图像标签" class="headerlink" title="3.4、图像标签"></a>3.4、图像标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;百度LOGO&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-5、表格标签"><a href="#3-5、表格标签" class="headerlink" title="3.5、表格标签"></a>3.5、表格标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1px&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;10px&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--一行的开始--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头一<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头二<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头三<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>表头四<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="comment">&lt;!--新一行的开始--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格一<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格二<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220310112150009.png" alt="image-20220310112150009"></p><h2 id="3-6、列表标签"><a href="#3-6、列表标签" class="headerlink" title="3.6、列表标签"></a>3.6、列表标签</h2><p><strong>无序列表：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>有序列表：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span>    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>自定义列表：</strong></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span>    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>+<span class="tag">&lt;/<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">dd</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">dd</span>&gt;</span>    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>+<span class="tag">&lt;/<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">dd</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">dd</span>&gt;</span>    <span class="tag">&lt;<span class="name">dt</span>&gt;</span>+<span class="tag">&lt;/<span class="name">dt</span>&gt;</span><span class="tag">&lt;<span class="name">dd</span>&gt;</span>列表项<span class="tag">&lt;/<span class="name">dd</span>&gt;</span><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220310112129523.png" alt="image-20220310112129523"></p><h2 id="3-7、分组标签"><a href="#3-7、分组标签" class="headerlink" title="3.7、分组标签"></a>3.7、分组标签</h2><p>1.1 HTML 区块元素</p><p>大多数 HTML 元素被定义为块级元素或内联元素。<br>块级元素在浏览器显示时，通常会以新行来开始（和结束）。<br>实例: <code>&lt;h1&gt;</code>, <code>&lt;p&gt;</code>,<code>&lt;ul&gt;</code>, <code>&lt;table&gt;</code>,<code>&lt;div&gt;</code></p><p>1.2 HTML 内联元素</p><p>内联元素在显示时通常不会以新行开始。<br>实例: <code>&lt;b&gt;</code>, <code>&lt;td&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code>,<code>&lt;span&gt;</code></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>具体内容,可以储存其他html元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>具体内容<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>eg.</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一些文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;color:#0000FF&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>这是一个在 div 元素中的标题。<span class="tag">&lt;/<span class="name">h3</span>&gt;</span>  <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个在 div 元素中的文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一些文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/20210529224941133-16468829330953.png" alt="在这里插入图片描述"></p><p>eg.</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我的母亲有     <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:blue;font-weight:bold&quot;</span>&gt;</span>蓝色<span class="tag">&lt;/<span class="name">span</span>&gt;</span>     的眼睛，我的父亲有     <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color:darkolivegreen;font-weight:bold&quot;</span>&gt;</span>碧绿色<span class="tag">&lt;/<span class="name">span</span>&gt;</span>     的眼睛。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/20210529224932180-16468829862615.png" alt="在这里插入图片描述"></p><h2 id="3-8、页面结构分析"><a href="#3-8、页面结构分析" class="headerlink" title="3.8、页面结构分析"></a>3.8、页面结构分析</h2><p><strong>常见标签：</strong>(主要是为了让结构清晰)</p><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><header></td><td>规定文档或节的页眉。</td></tr><tr><td><footer></td><td>定义文档或节的页脚。</td></tr><tr><td><main></td><td>规定文档的主内容。</td></tr><tr><td><section></td><td>定义文档的节。</td></tr><tr><td><article></td><td>定义文档的文章。</td></tr><tr><td><aside></td><td>定义页面内容以外的内容。</td></tr><tr><td><nav></td><td>定义导航链接。</td></tr><tr><td><mark></td><td>定义重要的或强调的文本。</td></tr><tr><td><figure></td><td>规定自包含内容，比如图示、图表、照片、代码清单等。</td></tr><tr><td><figcaption></td><td>定义 <figure> 元素的标题。</td></tr><tr><td><details></td><td>定义用户能够查看或隐藏的额外细节。</td></tr><tr><td><summary></td><td>定义 <details> 元素的可见标题。</td></tr><tr><td><time></td><td>定义日期&#x2F;时间。</td></tr></tbody></table><p><strong>基本布局：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/438a198f50ba388aa1fed83ff6bebb6d.png" alt="HTML5 语义元素"></p><p>eg.</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页头部<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span><span class="tag">&lt;<span class="name">section</span>&gt;</span>    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页主题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span><span class="tag">&lt;<span class="name">footer</span>&gt;</span>    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>网页脚步<span class="tag">&lt;/<span class="name">h2</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-9、表单标签"><a href="#3-9、表单标签" class="headerlink" title="3.9、表单标签"></a>3.9、表单标签</h2><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220310151323579.png" alt="image-20220310151323579"></p><p><strong>常见标签：</strong></p><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><form></td><td>定义供用户输入的表单。</td></tr><tr><td><input></td><td>定义输入域。</td></tr><tr><td><label></td><td>定义了 <input> 元素的标签，一般为输入标题。</td></tr><tr><td><textarea></td><td>定义文本域 (一个多行的输入控件)。</td></tr><tr><td><fieldset></td><td>定义了一组相关的表单元素，并使用外框包含起来。</td></tr><tr><td><legend></td><td>定义了 <fieldset> 元素的标题。</td></tr><tr><td><select></td><td>定义了下拉选项列表。</td></tr><tr><td><optgroup></td><td>定义选项组。</td></tr><tr><td><option></td><td>定义下拉列表中的选项。</td></tr><tr><td><button></td><td>定义一个点击按钮。</td></tr><tr><td><datalist></td><td>指定一个预先定义的输入控件选项列表。</td></tr><tr><td><keygen></td><td>定义了表单的密钥对生成器字段。</td></tr><tr><td><output></td><td>定义一个计算结果。</td></tr></tbody></table><p><strong>案例演示：</strong></p><p>1、form、input、label演示</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220310114308896.png" alt="image-20220310114308896"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--表单formaction 表示提交奥德地方,可以是网站,可以是一个请求地址method post和get方法来请求--&gt;</span><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;get&quot;</span>&gt;</span>       <span class="comment">&lt;!--浏览器通过get方法或者post方法来请求    get可能暴露一些,post先对安全一些--&gt;</span>    <span class="tag">&lt;<span class="name">p</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>账户：<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span>&gt;</span>    <span class="tag">&lt;/<span class="name">p</span>&gt;</span>    <span class="tag">&lt;<span class="name">p</span>&gt;</span>        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;password&quot;</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span>        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;password&quot;</span>&gt;</span>    <span class="tag">&lt;/<span class="name">p</span>&gt;</span>    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>    <span class="tag">&lt;/<span class="name">p</span>&gt;</span>    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2、textarea演示</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220310114330614.png" alt="image-20220310114330614"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;mycontext&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span>    <span class="comment">&lt;!--就是提交按钮--&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3、fieldset、legend、select、optgroup、option演示</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220310114546399.png" alt="image-20220310114546399"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">fieldset</span>&gt;</span>        <span class="tag">&lt;<span class="name">legend</span>&gt;</span>请选择你的爱好：<span class="tag">&lt;/<span class="name">legend</span>&gt;</span>        <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;myhobby&quot;</span> <span class="attr">id</span>=<span class="string">&quot;myhobby&quot;</span>&gt;</span>            <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;运动&quot;</span>&gt;</span>                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span>&gt;</span>篮球<span class="tag">&lt;/<span class="name">option</span>&gt;</span>                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span>&gt;</span>足球<span class="tag">&lt;/<span class="name">option</span>&gt;</span>            <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span>            <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;电子&quot;</span>&gt;</span>                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;看电影&quot;</span>&gt;</span>看电影<span class="tag">&lt;/<span class="name">option</span>&gt;</span>                <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;看电视&quot;</span>&gt;</span>看电视<span class="tag">&lt;/<span class="name">option</span>&gt;</span>            <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span>        <span class="tag">&lt;/<span class="name">select</span>&gt;</span>    <span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4、datalist演示</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220310114601947.png" alt="image-20220310114601947"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">list</span>=<span class="string">&quot;browsers&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;browsers&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Internet Explorer&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Firefox&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Chrome&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Opera&quot;</span>&gt;</span>        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;Safari&quot;</span>&gt;</span>    <span class="tag">&lt;/<span class="name">datalist</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>5、单选框演示</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220310114637272.png" alt="image-20220310114637272"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">value</span>=<span class="string">&quot;male&quot;</span> <span class="attr">checked</span>&gt;</span>    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span>Male<span class="tag">&lt;/<span class="name">label</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">value</span>=<span class="string">&quot;female&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span>female<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6、复选框演示</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220310114646813.png" alt="image-20220310114646813"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vehicle&quot;</span> <span class="attr">id</span>=<span class="string">&quot;bike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bike&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;bike&quot;</span>&gt;</span>I have a bike<span class="tag">&lt;/<span class="name">label</span>&gt;</span>    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;vehicle&quot;</span> <span class="attr">id</span>=<span class="string">&quot;car&quot;</span> <span class="attr">value</span>=<span class="string">&quot;car&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;car&quot;</span>&gt;</span>I have a car<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-10、框架标签"><a href="#3-10、框架标签" class="headerlink" title="3.10、框架标签"></a>3.10、框架标签</h2><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220310114909420.png" alt="image-20220310114909420"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;https://www.bilibili.com&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span> <span class="attr">height</span>=<span class="string">&quot;500px&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span><span class="comment">&lt;!--就是类似一个新建标签页,然后内置与当前页面--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-11、音频标签"><a href="#3-11、音频标签" class="headerlink" title="3.11、音频标签"></a>3.11、音频标签</h2><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220310115243672.png" alt="image-20220310115243672"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span>    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;horse.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/ogg&quot;</span>&gt;</span>    <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;horse.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span>    您的浏览器不支持 Audio 标签。<span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-12、视频标签"><a href="#3-12、视频标签" class="headerlink" title="3.12、视频标签"></a>3.12、视频标签</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">width</span>=<span class="string">&quot;320&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span> <span class="attr">controls</span>&gt;</span>  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span>  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.ogg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/ogg&quot;</span>&gt;</span>    您的浏览器不支持 Video 标签。<span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-13、其它标签"><a href="#3-13、其它标签" class="headerlink" title="3.13、其它标签"></a>3.13、其它标签</h2><p>每一个加了个换行符来更好演示一下</p><p>效果如下:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220310115650374.png" alt="image-20220310115650374"></p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">水平线：<span class="tag">&lt;<span class="name">hr</span>&gt;</span>换行：<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体文本<span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;<span class="name">code</span>&gt;</span>计算机代码<span class="tag">&lt;/<span class="name">code</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>强调文本<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体文本<span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">kbd</span>&gt;</span>键盘输入<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span><span class="tag">&lt;<span class="name">pre</span>&gt;</span>预格式化文本<span class="tag">&lt;/<span class="name">pre</span>&gt;</span><span class="tag">&lt;<span class="name">small</span>&gt;</span>更小的文本<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span>重要的文本<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">abbr</span>&gt;</span>缩写词或者首字母缩略词<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span><span class="tag">&lt;<span class="name">address</span>&gt;</span>联系信息<span class="tag">&lt;/<span class="name">address</span>&gt;</span><span class="tag">&lt;<span class="name">bdo</span>&gt;</span>文字方向<span class="tag">&lt;/<span class="name">bdo</span>&gt;</span><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span>从另一个源引用的部分<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span><span class="tag">&lt;<span class="name">cite</span>&gt;</span>工作的名称<span class="tag">&lt;/<span class="name">cite</span>&gt;</span><span class="tag">&lt;<span class="name">del</span>&gt;</span>删除的文本<span class="tag">&lt;/<span class="name">del</span>&gt;</span><span class="tag">&lt;<span class="name">ins</span>&gt;</span>插入的文本<span class="tag">&lt;/<span class="name">ins</span>&gt;</span><span class="tag">&lt;<span class="name">sub</span>&gt;</span>下标文本<span class="tag">&lt;/<span class="name">sub</span>&gt;</span><span class="tag">&lt;<span class="name">sup</span>&gt;</span>上标文本<span class="tag">&lt;/<span class="name">sup</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="3-14、头部标签"><a href="#3-14、头部标签" class="headerlink" title="3.14、头部标签"></a>3.14、头部标签</h2><table><thead><tr><th>标签</th><th>描述</th></tr></thead><tbody><tr><td><head></td><td>定义了文档的信息。</td></tr><tr><td><title></td><td>定义了文档的标题。</td></tr><tr><td><base></td><td>定义了页面链接标签的默认链接地址。</td></tr><tr><td><link></td><td>定义了一个文档和外部资源之间的关系。</td></tr><tr><td><meta></td><td>定义了HTML文档中的元数据。</td></tr><tr><td><script></td><td>定义了客户端的脚本文件。</td></tr><tr><td><style></td><td>定义了HTML文档的样式文件。</td></tr></tbody></table><h2 id="部分小结"><a href="#部分小结" class="headerlink" title="部分小结:"></a>部分小结:</h2><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220310121427212.png" alt="image-20220310121427212"></p><h1 id="第四章-HTML5属性"><a href="#第四章-HTML5属性" class="headerlink" title="第四章 HTML5属性"></a>第四章 HTML5属性</h1><h2 id="4-1、属性概述"><a href="#4-1、属性概述" class="headerlink" title="4.1、属性概述"></a>4.1、属性概述</h2><p>HTML标签可以设置属性，属性总是以名称/值对的形式出现，比如：name=“value”，它的主要作用是控制或修饰标签。</p><h2 id="4-2、通用属性"><a href="#4-2、通用属性" class="headerlink" title="4.2、通用属性"></a>4.2、通用属性</h2><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>accesskey</td><td>设置访问元素的键盘快捷键。</td></tr><tr><td>class</td><td>规定元素的类名（classname）。</td></tr><tr><td>contenteditable</td><td>规定是否可编辑元素的内容。</td></tr><tr><td>contextmenu</td><td>指定一个元素的上下文菜单。当用户右击该元素，出现上下文菜单。</td></tr><tr><td>data-*</td><td>用于存储页面的自定义数据。</td></tr><tr><td>dir</td><td>设置元素中内容的文本方向。</td></tr><tr><td>draggable</td><td>指定某个元素是否可以拖动。</td></tr><tr><td>dropzone</td><td>指定是否将数据复制，移动，或链接，或删除。</td></tr><tr><td>hidden</td><td>hidden 属性规定对元素进行隐藏。</td></tr><tr><td>id</td><td>规定元素的唯一 id。</td></tr><tr><td>lang</td><td>设置元素中内容的语言代码。</td></tr><tr><td>spellcheck</td><td>检测元素是否拼写错误。</td></tr><tr><td>style</td><td>规定元素的行内样式（inline style）。</td></tr><tr><td>tabindex</td><td>设置元素的 Tab 键控制次序。</td></tr><tr><td>title</td><td>规定元素的额外信息（可在工具提示中显示）。</td></tr><tr><td>translate</td><td>指定是否一个元素的值在页面载入时是否需要翻译。</td></tr></tbody></table><h1 id="第五章-HTML5事件-好像用的少"><a href="#第五章-HTML5事件-好像用的少" class="headerlink" title="第五章 HTML5事件(好像用的少)"></a>第五章 HTML5事件(好像用的少)</h1><h2 id="5-1、事件概述"><a href="#5-1、事件概述" class="headerlink" title="5.1、事件概述"></a>5.1、事件概述</h2><p>HTML事件可以触发浏览器中的行为，比方说当用户点击某个 HTML 元素时启动一段 JavaScript。</p><h2 id="5-2、窗口事件"><a href="#5-2、窗口事件" class="headerlink" title="5.2、窗口事件"></a>5.2、窗口事件</h2><p>由窗口触发该事件 (同样适用于 <body> 标签)：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>onafterprint</td><td>script</td><td>在打印文档之后运行脚本。</td></tr><tr><td>onbeforeprint</td><td>script</td><td>在文档打印之前运行脚本。</td></tr><tr><td>onbeforeonload</td><td>script</td><td>在文档加载之前运行脚本。</td></tr><tr><td>onblur</td><td>script</td><td>当窗口失去焦点时运行脚本。</td></tr><tr><td>onerror</td><td>script</td><td>当错误发生时运行脚本。</td></tr><tr><td>onfocus</td><td>script</td><td>当窗口获得焦点时运行脚本。</td></tr><tr><td>onhashchange</td><td>script</td><td>当文档改变时运行脚本。</td></tr><tr><td>onload</td><td>script</td><td>当文档加载时运行脚本。</td></tr><tr><td>onmessage</td><td>script</td><td>当触发消息时运行脚本。</td></tr><tr><td>onoffline</td><td>script</td><td>当文档离线时运行脚本。</td></tr><tr><td>ononline</td><td>script</td><td>当文档上线时运行脚本。</td></tr><tr><td>onpagehide</td><td>script</td><td>当窗口隐藏时运行脚本。</td></tr><tr><td>onpageshow</td><td>script</td><td>当窗口可见时运行脚本。</td></tr><tr><td>onpopstate</td><td>script</td><td>当窗口历史记录改变时运行脚本。</td></tr><tr><td>onredo</td><td>script</td><td>当文档执行再执行操作（redo）时运行脚本。</td></tr><tr><td>onresize</td><td>script</td><td>当调整窗口大小时运行脚本。</td></tr><tr><td>onstorage</td><td>script</td><td>当 Web Storage 区域更新时（存储空间中的数据发生变化时）运行脚本。</td></tr><tr><td>onundo</td><td>script</td><td>当文档执行撤销时运行脚本。</td></tr><tr><td>onunload</td><td>script</td><td>当用户离开文档时运行脚本。</td></tr></tbody></table><h2 id="5-3、表单事件"><a href="#5-3、表单事件" class="headerlink" title="5.3、表单事件"></a>5.3、表单事件</h2><p>表单事件在HTML表单中触发 (适用于所有 HTML 元素，但该HTML元素需在form表单内)：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>onblur</td><td>script</td><td>当元素失去焦点时运行脚本。</td></tr><tr><td>onchange</td><td>script</td><td>当元素改变时运行脚本。</td></tr><tr><td>oncontextmenu</td><td>script</td><td>当触发上下文菜单时运行脚本。</td></tr><tr><td>onfocus</td><td>script</td><td>当元素获得焦点时运行脚本。</td></tr><tr><td>onformchange</td><td>script</td><td>当表单改变时运行脚本。</td></tr><tr><td>onforminput</td><td>script</td><td>当表单获得用户输入时运行脚本。</td></tr><tr><td>oninput</td><td>script</td><td>当元素获得用户输入时运行脚本。</td></tr><tr><td>oninvalid</td><td>script</td><td>当元素无效时运行脚本。</td></tr><tr><td>onselect</td><td>script</td><td>当选取元素时运行脚本。</td></tr><tr><td>onsubmit</td><td>script</td><td>当提交表单时运行脚本。</td></tr></tbody></table><h2 id="5-4、键盘事件"><a href="#5-4、键盘事件" class="headerlink" title="5.4、键盘事件"></a>5.4、键盘事件</h2><p>通过键盘触发事件，类似用户的行为：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>onkeydown</td><td>script</td><td>当按下按键时运行脚本。</td></tr><tr><td>onkeypress</td><td>script</td><td>当按下并松开按键时运行脚本。</td></tr><tr><td>onkeyup</td><td>script</td><td>当松开按键时运行脚本。</td></tr></tbody></table><h2 id="5-5、鼠标事件"><a href="#5-5、鼠标事件" class="headerlink" title="5.5、鼠标事件"></a>5.5、鼠标事件</h2><p>通过鼠标触发事件，类似用户的行为：</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>onclick</td><td>script</td><td>当单击鼠标时运行脚本</td></tr><tr><td>ondblclick</td><td>script</td><td>当双击鼠标时运行脚本</td></tr><tr><td>ondrag</td><td>script</td><td>当拖动元素时运行脚本</td></tr><tr><td>ondragend</td><td>script</td><td>当拖动操作结束时运行脚本</td></tr><tr><td>ondragenter</td><td>script</td><td>当元素被拖动至有效的拖放目标时运行脚本</td></tr><tr><td>ondragleave</td><td>script</td><td>当元素离开有效拖放目标时运行脚本</td></tr><tr><td>ondragover</td><td>script</td><td>当元素被拖动至有效拖放目标上方时运行脚本</td></tr><tr><td>ondragstart</td><td>script</td><td>当拖动操作开始时运行脚本</td></tr><tr><td>ondrop</td><td>script</td><td>当被拖动元素正在被拖放时运行脚本</td></tr><tr><td>onmousedown</td><td>script</td><td>当按下鼠标按钮时运行脚本</td></tr><tr><td>onmousemove</td><td>script</td><td>当鼠标指针移动时运行脚本</td></tr><tr><td>onmouseout</td><td>script</td><td>当鼠标指针移出元素时运行脚本</td></tr><tr><td>onmouseover</td><td>script</td><td>当鼠标指针移至元素之上时运行脚本</td></tr><tr><td>onmouseup</td><td>script</td><td>当松开鼠标按钮时运行脚本</td></tr><tr><td>onmousewheel</td><td>script</td><td>当转动鼠标滚轮时运行脚本</td></tr><tr><td>onscroll</td><td>script</td><td>当滚动元素的滚动条时运行脚本</td></tr></tbody></table><h2 id="5-6、媒体事件"><a href="#5-6、媒体事件" class="headerlink" title="5.6、媒体事件"></a>5.6、媒体事件</h2><p>通过视频（videos），图像（images）或音频（audio） 触发该事件，多应用于HTML媒体元素比如：<embed>，<object>，<img>，<audio>和<video>。</p><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>onabort</td><td>script</td><td>当发生中止事件时运行脚本。</td></tr><tr><td>oncanplay</td><td>script</td><td>当媒介能够开始播放但可能因缓冲而需要停止时运行脚本。</td></tr><tr><td>oncanplaythrough</td><td>script</td><td>当媒介能够无需因缓冲而停止即可播放至结尾时运行脚本。</td></tr><tr><td>ondurationchange</td><td>script</td><td>当媒介长度改变时运行脚本。</td></tr><tr><td>onemptied</td><td>script</td><td>当媒介资源元素突然为空时（网络错误、加载错误等）运行脚本。</td></tr><tr><td>onended</td><td>script</td><td>当媒介已抵达结尾时运行脚本。</td></tr><tr><td>onerror</td><td>script</td><td>当在元素加载期间发生错误时运行脚本。</td></tr><tr><td>onloadeddata</td><td>script</td><td>当加载媒介数据时运行脚本。</td></tr><tr><td>onloadedmetadata</td><td>script</td><td>当媒介元素的持续时间以及其他媒介数据已加载时运行脚本。</td></tr><tr><td>onloadstart</td><td>script</td><td>当浏览器开始加载媒介数据时运行脚本。</td></tr><tr><td>onpause</td><td>script</td><td>当媒介数据暂停时运行脚本。</td></tr><tr><td>onplay</td><td>script</td><td>当媒介数据将要开始播放时运行脚本。</td></tr><tr><td>onplaying</td><td>script</td><td>当媒介数据已开始播放时运行脚本。</td></tr><tr><td>onprogress</td><td>script</td><td>当浏览器正在取媒介数据时运行脚本。</td></tr><tr><td>onratechange</td><td>script</td><td>当媒介数据的播放速率改变时运行脚本。</td></tr><tr><td>onreadystatechange</td><td>script</td><td>当就绪状态（ready-state）改变时运行脚本。</td></tr><tr><td>onseeked</td><td>script</td><td>当媒介元素的定位属性不再为真且定位已结束时运行脚本。</td></tr><tr><td>onseeking</td><td>script</td><td>当媒介元素的定位属性为真且定位已开始时运行脚本。</td></tr><tr><td>onstalled</td><td>script</td><td>当取回媒介数据过程中（延迟）存在错误时运行脚本。</td></tr><tr><td>onsuspend</td><td>script</td><td>当浏览器已在取媒介数据但在取回整个媒介文件之前停止时运行脚本。</td></tr><tr><td>ontimeupdate</td><td>script</td><td>当媒介改变其播放位置时运行脚本。</td></tr><tr><td>onvolumechange</td><td>script</td><td>当媒介改变音量亦或当音量被设置为静音时运行脚本。</td></tr><tr><td>onwaiting</td><td>script</td><td>当媒介已停止播放但打算继续播放时运行脚本。</td></tr></tbody></table><h2 id="5-7、其它事件"><a href="#5-7、其它事件" class="headerlink" title="5.7、其它事件"></a>5.7、其它事件</h2><table><thead><tr><th>属性</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>onshow</td><td>script</td><td>当 <menu> 元素在上下文显示时触发。</td></tr><tr><td>ontoggle</td><td>script</td><td>当用户打开或关闭 <details> 元素时触发。</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> web前端基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端基础 </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>common-utils</title>
      <link href="/2022/03/16/common-utils/"/>
      <url>/2022/03/16/common-utils/</url>
      
        <content type="html"><![CDATA[<p>做前后端项目中,为了方便对接,前后端会有相应的规范,这些类一般都是常用的</p><h2 id="CommonResult类"><a href="#CommonResult类" class="headerlink" title="CommonResult类:"></a>CommonResult类:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.utils.result;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonResult</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Boolean succeed;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : ResultCode.COMMON_FAIL.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : ResultCode.COMMON_FAIL.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed, ResultCode resultEnum)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getCode() : resultEnum.getCode());</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getMessage() : resultEnum.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : ResultCode.COMMON_FAIL.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : ResultCode.COMMON_FAIL.getMessage();</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CommonResult</span><span class="params">(<span class="type">boolean</span> succeed, ResultCode resultEnum, T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">        <span class="built_in">this</span>.code = succeed ? ResultCode.SUCCESS.getCode() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getCode() : resultEnum.getCode());</span><br><span class="line">        <span class="built_in">this</span>.message = succeed ? ResultCode.SUCCESS.getMessage() : (resultEnum == <span class="literal">null</span> ? ResultCode.COMMON_FAIL.getMessage() : resultEnum.getMessage());</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getSucceed</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> succeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSucceed</span><span class="params">(Boolean succeed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.succeed = succeed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> T <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;CommonResult&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;succeed=&quot;</span> + succeed +</span><br><span class="line">                <span class="string">&quot;, code=&quot;</span> + code +</span><br><span class="line">                <span class="string">&quot;, message=&#x27;&quot;</span> + message + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, data=&quot;</span> + data +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="返回类的封装工具类"><a href="#返回类的封装工具类" class="headerlink" title="返回类的封装工具类:"></a>返回类的封装工具类:</h2><p>ResultUtil类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.utils.result;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResultUtil</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title function_">success</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; CommonResult&lt;T&gt; <span class="title function_">success</span><span class="params">(T data)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">true</span>, data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title function_">fail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> CommonResult <span class="title function_">fail</span><span class="params">(ResultCode resultEnum)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">CommonResult</span>(<span class="literal">false</span>, resultEnum);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="PageResult类"><a href="#PageResult类" class="headerlink" title="PageResult类:"></a>PageResult类:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.utils.result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageResult</span>&lt;T&gt; <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;T&gt;, Serializable &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">3720998571176536865L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; records = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一共有多少条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> totalElements;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> currentPage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一页数据最多有多少条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> pageSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一共有多少页</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> totalPages;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前页数有多少条数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> numberOfElements;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageResult</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造方法，只用把原来的page类放进来即可</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> page 查出来的分页对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageResult</span><span class="params">(Page&lt;T&gt; page)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.records = page.getRecords();</span><br><span class="line">        <span class="built_in">this</span>.totalElements = page.getTotal();</span><br><span class="line">        <span class="built_in">this</span>.currentPage = page.getCurrent();</span><br><span class="line">        <span class="built_in">this</span>.pageSize = page.getSize();</span><br><span class="line">        <span class="built_in">this</span>.numberOfElements = page.getRecords().size();</span><br><span class="line">        <span class="built_in">this</span>.totalPages = page.getPages();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有前一页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasPrevious</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getCurrentPage() &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有下一页</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getCurrentPage() + <span class="number">1</span> &lt; getTotalPages();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取总的页数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> long</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getTotalPages</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.totalPages;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前页的数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> List&lt;T&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;T&gt; <span class="title function_">getRecords</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Collections.unmodifiableList(records);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> records 内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRecords</span><span class="params">(List&lt;T&gt; records)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.records = records;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否有内容</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasRecords</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getNumberOfElements() &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单页大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getPageSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置单页大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageSize</span><span class="params">(Long pageSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pageSize = pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取全部元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">getTotalElements</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> totalElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置全部元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTotalElements</span><span class="params">(<span class="type">long</span> totalElements)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.totalElements = totalElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前页号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getCurrentPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置当前页号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCurrentPage</span><span class="params">(Long currentPage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.currentPage = currentPage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取单页元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNumberOfElements</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> numberOfElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置单页元素数目</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNumberOfElements</span><span class="params">(<span class="type">int</span> numberOfElements)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.numberOfElements = numberOfElements;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;T&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getRecords().iterator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ResultCode类-枚举"><a href="#ResultCode类-枚举" class="headerlink" title="ResultCode类(枚举):"></a>ResultCode类(枚举):</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.utils.result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.experimental.Accessors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 规定:</span></span><br><span class="line"><span class="comment"> * #1表示成功</span></span><br><span class="line"><span class="comment"> * #1001～1999 区间表示参数错误</span></span><br><span class="line"><span class="comment"> * #2001～2999 区间表示用户错误</span></span><br><span class="line"><span class="comment"> * #3001～3999 区间表示接口异常</span></span><br><span class="line"><span class="comment"> * 统一错误枚举类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">ResultCode</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 成功 */</span></span><br><span class="line">    SUCCESS(<span class="number">200</span>, <span class="string">&quot;成功&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 默认失败 */</span></span><br><span class="line">    COMMON_FAIL(<span class="number">999</span>, <span class="string">&quot;失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    CUSTOM_FAIL(<span class="number">9999</span>, <span class="string">&quot;自定义错误&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 参数错误：1000～1999 */</span></span><br><span class="line">    PARAM_NOT_VALID(<span class="number">1001</span>, <span class="string">&quot;参数无效&quot;</span>),</span><br><span class="line">    PARAM_IS_BLANK(<span class="number">1002</span>, <span class="string">&quot;参数为空&quot;</span>),</span><br><span class="line">    PARAM_TYPE_ERROR(<span class="number">1003</span>, <span class="string">&quot;参数类型错误&quot;</span>),</span><br><span class="line">    PARAM_NOT_COMPLETE(<span class="number">1004</span>, <span class="string">&quot;参数缺失&quot;</span>),</span><br><span class="line">    FAIL_COPY_PROPERTIES(<span class="number">1076</span>, <span class="string">&quot;创建对象失败或拷贝对象属性失败&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 微信小程序登录 */</span></span><br><span class="line">    WEI_XIN_CODE_ERROR(<span class="number">3001</span>, <span class="string">&quot;携带code向小程序请求失败&quot;</span>),</span><br><span class="line">    WEI_XIN_SKEY_VALID(<span class="number">3002</span>, <span class="string">&quot;skey无效&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 用户错误 */</span></span><br><span class="line">    USER_NOT_LOGIN(<span class="number">2001</span>, <span class="string">&quot;用户未登录&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_EXPIRED(<span class="number">2002</span>, <span class="string">&quot;账号已过期&quot;</span>),</span><br><span class="line">    USER_CREDENTIALS_ERROR(<span class="number">2003</span>, <span class="string">&quot;密码错误&quot;</span>),</span><br><span class="line">    USER_CREDENTIALS_EXPIRED(<span class="number">2004</span>, <span class="string">&quot;密码过期&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_DISABLE(<span class="number">2005</span>, <span class="string">&quot;账号不可用&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_LOCKED(<span class="number">2006</span>, <span class="string">&quot;账号被锁定&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_NOT_EXIST(<span class="number">2007</span>, <span class="string">&quot;账号不存在&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_ALREADY_EXIST(<span class="number">2008</span>, <span class="string">&quot;账号已存在&quot;</span>),</span><br><span class="line">    USER_ACCOUNT_USE_BY_OTHERS(<span class="number">2009</span>, <span class="string">&quot;账号下线&quot;</span>),</span><br><span class="line">    USER_IS_EMPTY(<span class="number">2010</span>, <span class="string">&quot;用户为空&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*Token错误*/</span></span><br><span class="line">    TOKEN_EXPIRED(<span class="number">4001</span>, <span class="string">&quot;登陆信息过期&quot;</span>),</span><br><span class="line">    TOKEN_ERROR(<span class="number">4002</span>, <span class="string">&quot;信息被更改,请重新登陆&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 业务错误 */</span></span><br><span class="line">    NO_PERMISSION(<span class="number">5001</span>, <span class="string">&quot;没有权限&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*订单错误*/</span></span><br><span class="line">    EXISTED_ORDER(<span class="number">6001</span>, <span class="string">&quot;该商品的订单已存在，请支付或取消后再重新下单&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*商品错误*/</span></span><br><span class="line">    EXISTED_GOOD(<span class="number">7001</span>, <span class="string">&quot;已存在该商品&quot;</span>),</span><br><span class="line">    EXISTED_GOOD_INCART(<span class="number">7002</span>,<span class="string">&quot;购物车中已经存在该商品&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*招投标错误*/</span></span><br><span class="line">    EXISTED_SUBMISSION(<span class="number">8001</span>,<span class="string">&quot;已经存在该投标了&quot;</span>),</span><br><span class="line">    EXISTED_INVITATION(<span class="number">8002</span>,<span class="string">&quot;已经存在该招标了&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ResultCode(Integer code, String message) &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResultCode <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ResultCode <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据code获取message</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> code 状态码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getMessageByCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (ResultCode ele : values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ele.getCode().equals(code)) &#123;</span><br><span class="line">                <span class="keyword">return</span> ele.getMessage();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="异常返回类"><a href="#异常返回类" class="headerlink" title="异常返回类"></a>异常返回类</h2><p>GlobalException类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="meta">@Log4j2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">error</span><span class="params">(Exception e)</span> &#123;</span><br><span class="line">        log.error(e.getMessage());</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.fail(ResultCode.COMMON_FAIL.setMessage(e.getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(AppException.class)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult <span class="title function_">error</span><span class="params">(AppException e)</span> &#123;</span><br><span class="line">        log.error(e.getMessage());</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.fail(ResultCode.CUSTOM_FAIL.setCode(e.getCode()).setMessage(e.getMessage()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>APPExceptin类:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EqualsAndHashCode(callSuper = true)</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 状态码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">AppException</span><span class="params">(ResultCode resultCode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = resultCode.getCode();</span><br><span class="line">        <span class="built_in">this</span>.message = resultCode.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Redis工具类"><a href="#Redis工具类" class="headerlink" title="Redis工具类:"></a>Redis工具类:</h2><p><strong>redis接口类:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RedisService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存存属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">get</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">del</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">del</span><span class="params">(List&lt;String&gt; keys)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">getExpire</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否有该属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hasKey</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按delta递增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按delta递减</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Hash结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">hGet</span><span class="params">(String key, String hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Hash结构中放入一个属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Hash结构中放入一个属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接获取整个Hash结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;Object, Object&gt; <span class="title function_">hGetAll</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接设置整个Hash结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接设置整个Hash结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Hash结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hDel</span><span class="params">(String key, Object... hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断Hash结构中是否有该属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hHasKey</span><span class="params">(String key, String hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash结构中属性递增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">hIncr</span><span class="params">(String key, String hashKey, Long delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash结构中属性递减</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">hDecr</span><span class="params">(String key, String hashKey, Long delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Set结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Set&lt;Object&gt; <span class="title function_">sMembers</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Set结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sAdd</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Set结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sAdd</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否为Set中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">sIsMember</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Set结构的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sSize</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Set结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sRemove</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取List结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Object&gt; <span class="title function_">lRange</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取List结构的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lSize</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引获取List中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">lIndex</span><span class="params">(String key, <span class="type">long</span> index)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPush</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPush</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中批量添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPushAll</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中批量添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPushAll</span><span class="params">(String key, Long time, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从List结构中移除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>redis接口实现类:</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">RedisService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">del</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">del</span><span class="params">(List&lt;String&gt; keys)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(keys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getExpire</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hasKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hGet</span><span class="params">(String key, String hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hashKey, value);</span><br><span class="line">        <span class="keyword">return</span> expire(key, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hashKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hGetAll</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">        <span class="keyword">return</span> expire(key, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hDel</span><span class="params">(String key, Object... hashKey)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hHasKey</span><span class="params">(String key, String hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">hIncr</span><span class="params">(String key, String hashKey, Long delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, hashKey, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">hDecr</span><span class="params">(String key, String hashKey, Long delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, hashKey, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">sMembers</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sAdd</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sAdd</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">sIsMember</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sRemove</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">lRange</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">lIndex</span><span class="params">(String key, <span class="type">long</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPush</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPush</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">index</span> <span class="operator">=</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPushAll</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPushAll</span><span class="params">(String key, Long time, Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JWT工具类"><a href="#JWT工具类" class="headerlink" title="JWT工具类:"></a>JWT工具类:</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.crypto.SecretKey;</span><br><span class="line"><span class="keyword">import</span> javax.crypto.spec.SecretKeySpec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.io.BaseEncoding;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Claims;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.JwtBuilder;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.Jwts;</span><br><span class="line"><span class="keyword">import</span> io.jsonwebtoken.SignatureAlgorithm;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JwtUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">long</span> tokenExpiredTime;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String jwtId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String jwtSecret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建JWT</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">createJWT</span><span class="params">(Map&lt;String, Object&gt; claims, Long time)</span> &#123;</span><br><span class="line">        <span class="comment">//指定签名的时候使用的签名算法，也就是header那部分，jjwt已经将这部分内容封装好了。</span></span><br><span class="line">        <span class="type">SignatureAlgorithm</span> <span class="variable">signatureAlgorithm</span> <span class="operator">=</span> SignatureAlgorithm.HS256;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">now</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(System.currentTimeMillis());</span><br><span class="line"></span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">secretKey</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        <span class="comment">//生成JWT的时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">nowMillis</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//下面就是在为payload添加各种标准声明和私有声明了</span></span><br><span class="line">        <span class="comment">//这里其实就是new一个JwtBuilder，设置jwt的body</span></span><br><span class="line">        <span class="type">JwtBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> Jwts.builder()</span><br><span class="line">                <span class="comment">//如果有私有声明，一定要先设置这个自己创建的私有的声明，这个是给builder的claim赋值，一旦写在标准的声明赋值之后，就是覆盖了那些标准的声明的</span></span><br><span class="line">                .setClaims(claims)</span><br><span class="line">                <span class="comment">//设置jti(JWT ID)：是JWT的唯一标识，根据业务需要，这个可以设置为一个不重复的值，主要用来作为一次性token,从而回避重放攻击。</span></span><br><span class="line">                .setId(jwtId)</span><br><span class="line">                <span class="comment">//iat: jwt的签发时间</span></span><br><span class="line">                .setIssuedAt(now)</span><br><span class="line">                <span class="comment">//设置签名使用的签名算法和签名使用的秘钥</span></span><br><span class="line">                .signWith(signatureAlgorithm, secretKey);</span><br><span class="line">        <span class="keyword">if</span> (time &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">expMillis</span> <span class="operator">=</span> nowMillis + time;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">exp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>(expMillis);</span><br><span class="line">            <span class="comment">//设置过期时间</span></span><br><span class="line">            builder.setExpiration(exp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> builder.compact();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证jwt</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title function_">verifyJwt</span><span class="params">(String token)</span> &#123;</span><br><span class="line">        <span class="comment">//签名秘钥，和生成的签名的秘钥一模一样</span></span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> generalKey();</span><br><span class="line">        Claims claims;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            claims = Jwts.parser()  <span class="comment">//得到DefaultJwtParser</span></span><br><span class="line">                    .setSigningKey(key)         <span class="comment">//设置签名的秘钥</span></span><br><span class="line">                    .parseClaimsJws(token).getBody();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            claims = <span class="literal">null</span>;</span><br><span class="line">        &#125;<span class="comment">//设置需要解析的jwt</span></span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 由字符串生成加密key</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SecretKey</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SecretKey <span class="title function_">generalKey</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">stringKey</span> <span class="operator">=</span> jwtSecret;</span><br><span class="line">        <span class="type">byte</span>[] encodedKey = BaseEncoding.base64().decode(stringKey);</span><br><span class="line">        <span class="type">SecretKey</span> <span class="variable">key</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SecretKeySpec</span>(encodedKey, <span class="number">0</span>, encodedKey.length, <span class="string">&quot;HmacSHA256&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> key;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据userId和openid生成token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">generateToken</span><span class="params">(String openId)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;openId&quot;</span>, openId);</span><br><span class="line">        <span class="keyword">return</span> createJWT(map, tokenExpiredTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.token-expired-time&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTokenExpiredTime</span><span class="params">(<span class="type">long</span> tokenExpiredTime)</span> &#123;</span><br><span class="line">        JwtUtils.tokenExpiredTime = tokenExpiredTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJwtId</span><span class="params">(String jwtId)</span> &#123;</span><br><span class="line">        JwtUtils.jwtId = jwtId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jwt.secret&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setJwtSecret</span><span class="params">(String jwtSecret)</span> &#123;</span><br><span class="line">        JwtUtils.jwtSecret = jwtSecret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">getTokenExpiredTime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tokenExpiredTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJwtId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jwtId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getJwtSecret</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> jwtSecret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>待补充…</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 工具类 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux入门</title>
      <link href="/2022/03/16/linux%E5%85%A5%E9%97%A8/"/>
      <url>/2022/03/16/linux%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="linux介绍"><a href="#linux介绍" class="headerlink" title="linux介绍:"></a>linux介绍:</h1><p><a href="https://www.runoob.com/linux/linux-command-manual.html">详细较全面的linux命令</a>)</p><p>本文主要写linux的操作过程知识点。</p><h2 id="开机"><a href="#开机" class="headerlink" title="开机"></a>开机</h2><p>开机会启动许多程序。它们在Windows叫做”服务”（service），在Linux就叫做”守护进程”（daemon）。</p><hr><blockquote><p>守护进程</p></blockquote><p>守护进程是提供基本操作系统下可能无法使用的多种功能的服务。其主要任务是监听服务请求，同时对这些请求采取行动。服务完成后，它将断开连接并等待进一步的请求。守护进程是脱离于终端并且在后台运行的进程，脱离终端是为了避免在执行的过程中的信息在终端上显示，并且进程也不会被任何终端所产生的终端信息所打断。</p><p>守护进程一般的生命周期是系统启动到系统停止运行。</p><p>我们用daemon来做什么事情呢？我们可以用守护进程监控一个进程的运行，如果发现其被kill了，那就重新启动进程。简单来说，就是用来守护其它进程。</p><p>做法也很简单，首先生成这个守护进程，在这个进程中启动个定时器或者while循环：让其不断检测另外一个进程是否还在运行，如果没有在运行那就启动之。当然，也可以不用检测，直接不断的循环去启动即可！ 如果已经正常启动，再次去启动就会失败，这无所谓。如果已经kill,则立即将之启动。</p><hr><p>开机成功后，它会显示一个文本登录界面，这个界面就是我们经常看到的登录界面，在这个登录界面中会提示用户输入用户名，而用户输入的用户将作为参数传给login程序来验证用户的身份，密码是不显示的，输完回车即可！</p><p>一般来说，用户的登录方式有三种：</p><ul><li>命令行登录</li><li>ssh登录</li><li>图形界面登录</li></ul><p>最高权限账户为 root，可以操作一切！</p><h2 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h2><p>在linux领域内大多用在服务器上，很少遇到关机的操作。毕竟服务器上跑一个服务是永无止境的，除非特殊情况下，不得已才会关机。</p><p>关机指令为：shutdown ；</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sync # 将数据由内存同步到硬盘中。</span><br><span class="line"></span><br><span class="line">shutdown # 关机指令，你可以man shutdown 来看一下帮助文档。例如你可以运行如下命令关机：</span><br><span class="line"></span><br><span class="line">shutdown –h 10 # 这个命令告诉大家，计算机将在10分钟后关机</span><br><span class="line"></span><br><span class="line">shutdown –h now # 立马关机</span><br><span class="line"></span><br><span class="line">shutdown –h 20:25 # 系统会在今天20:25关机</span><br><span class="line"></span><br><span class="line">shutdown –h +10 # 十分钟后关机</span><br><span class="line"></span><br><span class="line">shutdown –r now # 系统立马重启</span><br><span class="line"></span><br><span class="line">shutdown –r +10 # 系统十分钟后重启</span><br><span class="line"></span><br><span class="line">reboot # 就是重启，等同于 shutdown –r now</span><br><span class="line"></span><br><span class="line">halt # 关闭系统，等同于shutdown –h now 和 poweroff</span><br></pre></td></tr></table></figure><p>最后总结一下，不管是重启系统还是关闭系统，首先要运行 sync 命令，把内存中的数据写到磁盘中。</p><h2 id="系统目录介绍"><a href="#系统目录介绍" class="headerlink" title="系统目录介绍"></a>系统目录介绍</h2><p>可以通过ls查看系统下面的目录</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220309173857323.png" alt="image-20220309173857323"></p><p>树状目录结构:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220309174037598.png" alt="image-20220309174037598"></p><ul><li><strong>&#x2F;bin：</strong>bin是Binary的缩写, 这个目录存放着最经常使用的命令。</li><li>&#x2F;boot： 这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件。(不要动)</li><li>&#x2F;dev ： dev是Device(设备)的缩写, 存放的是Linux的外部设备，在Linux中访问设备的方式和访问文件的方式是相同的。</li><li><strong>&#x2F;etc：</strong> 这个目录用来存放所有的系统管理所需要的配置文件和子目录。</li><li>&#x2F;<strong>home</strong>：用户的主目录，在Linux中，每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</li><li>&#x2F;lib：这个目录里存放着系统最基本的动态连接共享库，其作用类似于Windows里的DLL文件。(不要动)</li><li>&#x2F;lost+found：这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。(存放突然关机的一些文件)</li><li>&#x2F;media：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</li><li>&#x2F;mnt：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在&#x2F;mnt&#x2F;上，然后进入该目录就可以查看光驱里的内容了。</li><li>&#x2F;opt：这是给主机额外安装软件所摆放的目录。比如你安装一个ORACLE数据库则就可以放到这个目录下。默认是空的。</li><li>&#x2F;proc：这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</li><li>&#x2F;<strong>root</strong>：该目录为系统管理员，也称作超级权限者的用户主目录。</li><li>&#x2F;sbin：s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</li><li>&#x2F;srv：该目录存放一些服务启动之后需要提取的数据。</li><li>&#x2F;sys：这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。</li><li>&#x2F;tmp：这个目录是用来存放一些临时文件的。(用完就可以丢的文件,安装包啥的)</li><li>&#x2F;<strong>usr</strong>：这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似于windows下的program files目录。</li><li>&#x2F;usr&#x2F;bin： 系统用户使用的应用程序。</li><li>&#x2F;usr&#x2F;sbin： 超级用户使用的比较高级的管理程序和系统守护程序。</li><li>&#x2F;usr&#x2F;src： 内核源代码默认的放置目录。</li><li>&#x2F;var：这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</li><li>&#x2F;run：是一个临时文件系统，存储系统启动以来的信息。当系统重启时，这个目录下的文件应该被删掉或清除。</li></ul><h1 id="目录管理"><a href="#目录管理" class="headerlink" title="目录管理"></a>目录管理</h1><blockquote><p>绝对路径和相对路径</p></blockquote><p>我们知道Linux的目录结构为树状结构，最顶级的目录为根目录 <code>/</code>。</p><p>其他目录通过挂载可以将它们添加到树中，通过解除挂载可以移除它们。</p><p>在开始本教程前我们需要先知道什么是绝对路径与相对路径。</p><blockquote><p>绝对路径：</p></blockquote><p>路径的写法，由根目录 <code>/</code> 写起，例如：<code>/usr/share/doc</code> 这个目录。</p><blockquote><p>相对路径：</p></blockquote><p>路径的写法，不是由 <code>/</code> 写起，例如由 <code>/usr/share/doc</code> 要到 <code>/usr/share/man</code> 底下时，可以写成：<code>cd ../man</code> 这就是相对路径的写法啦！</p><blockquote><p>处理目录的常用命令</p></blockquote><ul><li>ls: 列出目录</li><li>ll:  一列表的形式列出目录</li><li>cd：切换目录</li><li>pwd：显示目前的目录</li><li>mkdir：创建一个新的目录</li><li>rmdir：删除一个空的目录</li><li>cp: 复制文件或目录</li><li>rm: 移除文件或目录</li><li>mv: 移动文件与目录，或修改文件与目录的名称</li></ul><p>你可以使用 man [命令] 来查看各个命令的使用文档，如 ：man cp。</p><h2 id="ls-（列出目录）"><a href="#ls-（列出目录）" class="headerlink" title="ls （列出目录）"></a>ls （列出目录）</h2><p>在Linux系统当中， ls 命令可能是最常被运行的。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# ls [-aAdfFhilnrRSt] 目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-a ：全部的文件，连同隐藏文件( 开头为 . 的文件) 一起列出来(常用)</p><p>-l ：长数据串列出，包含文件的属性与权限等等数据；(常用)</p><p>将目录下的所有文件列出来(含属性与隐藏档)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# ls -al ~</span><br><span class="line">ll -al 列出全部的文件(包括隐藏文件)</span><br></pre></td></tr></table></figure><p>补充：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -A 列出除.及..的其它文件</span><br><span class="line">ls -r 反序排列</span><br><span class="line">ls -t 以文件修改时间排序</span><br><span class="line">ls -S 以文件大小排序</span><br><span class="line">ls -h 以易读大小显示</span><br><span class="line">ls -l  == ll列出全部的文件(不包括隐藏文件)</span><br></pre></td></tr></table></figure><h2 id="cd-（切换目录）"><a href="#cd-（切换目录）" class="headerlink" title="cd （切换目录）"></a>cd （切换目录）</h2><p>cd是Change Directory的缩写，这是用来变换工作目录的命令。</p><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd [相对路径或绝对路径]</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 切换到用户目录下</span><br><span class="line">[root@kuangshen /]# cd home  </span><br><span class="line"></span><br><span class="line"># 使用 mkdir 命令创建 kuangstudy 目录</span><br><span class="line">[root@kuangshen home]# mkdir kuangstudy</span><br><span class="line"></span><br><span class="line"># 进入 kuangstudy 目录</span><br><span class="line">[root@kuangshen home]# cd kuangstudy</span><br><span class="line"></span><br><span class="line"># 回到上一级</span><br><span class="line">[root@kuangshen kuangstudy]# cd ..</span><br><span class="line"></span><br><span class="line"># 回到根目录</span><br><span class="line">[root@kuangshen kuangstudy]# cd /</span><br><span class="line"></span><br><span class="line"># 表示回到自己的家目录，亦即是 /root 这个目录</span><br><span class="line">[root@kuangshen kuangstudy]# cd ~</span><br></pre></td></tr></table></figure><h2 id="pwd-显示目前所在的目录"><a href="#pwd-显示目前所在的目录" class="headerlink" title="pwd ( 显示目前所在的目录 )"></a>pwd ( 显示目前所在的目录 )</h2><p>pwd 是 Print Working Directory 的缩写，也就是显示目前所在目录的命令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen kuangstudy]#pwd [-P]</span><br></pre></td></tr></table></figure><p>选项与参数：-P ：显示出确实的路径，而非使用连接(link) 路径。</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 单纯显示出目前的工作目录</span><br><span class="line">[root@kuangshen ~]# pwd</span><br><span class="line">/root</span><br><span class="line"></span><br><span class="line"># 如果是链接，要显示真实地址，可以使用 -P参数</span><br><span class="line">[root@kuangshen /]# cd bin</span><br><span class="line">[root@kuangshen bin]# pwd -P</span><br><span class="line">/usr/bin</span><br></pre></td></tr></table></figure><h2 id="mkdir-（创建新目录）"><a href="#mkdir-（创建新目录）" class="headerlink" title="mkdir （创建新目录）"></a>mkdir （创建新目录）</h2><p>如果想要创建新的目录的话，那么就使用mkdir (make directory)吧。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mkdir [-mp] 目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-m ：配置文件的权限喔！直接配置，不需要看默认权限 (umask) 的脸色～</p><p>-p ：帮助你直接将所需要的目录(包含上一级目录)<strong>递归</strong>创建起来！</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 进入我们用户目录下</span><br><span class="line">[root@kuangshen /]# cd /home</span><br><span class="line"></span><br><span class="line"># 创建一个 test 文件夹</span><br><span class="line">[root@kuangshen home]# mkdir test</span><br><span class="line"></span><br><span class="line"># 创建多层级目录</span><br><span class="line">[root@kuangshen home]# mkdir test1/test2/test3/test4</span><br><span class="line">mkdir: cannot create directory ‘test1/test2/test3/test4’:</span><br><span class="line">No such file or directory  # &lt;== 没办法直接创建此目录啊！</span><br><span class="line"></span><br><span class="line"># 加了这个 -p 的选项，可以自行帮你创建多层目录！</span><br><span class="line">[root@kuangshen home]# mkdir -p test1/test2/test3/test4</span><br><span class="line"></span><br><span class="line"># 创建权限为 rwx--x--x 的目录。</span><br><span class="line">[root@kuangshen home]# mkdir -m 711 test2</span><br><span class="line">[root@kuangshen home]# ls -l</span><br><span class="line">drwxr-xr-x 2 root root  4096 Mar 12 21:55 test</span><br><span class="line">drwxr-xr-x 3 root root  4096 Mar 12 21:56 test1</span><br><span class="line">drwx--x--x 2 root root  4096 Mar 12 21:58 test2</span><br></pre></td></tr></table></figure><h2 id="rmdir-删除空的目录"><a href="#rmdir-删除空的目录" class="headerlink" title="rmdir ( 删除空的目录 )"></a>rmdir ( 删除空的目录 )</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rmdir [-p] 目录名称</span><br></pre></td></tr></table></figure><p>选项与参数：-p ：连同上一级『空的』目录也一起删除</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 看看有多少目录存在？[root@kuangshen home]# ls -ldrwxr-xr-x 2 root root  4096 Mar 12 21:55 testdrwxr-xr-x 3 root root  4096 Mar 12 21:56 test1drwx--x--x 2 root root  4096 Mar 12 21:58 test2# 可直接删除掉，没问题[root@kuangshen home]# rmdir test# 因为尚有内容，所以无法删除！[root@kuangshen home]# rmdir test1rmdir: failed to remove ‘test1’: Directory not empty# 利用 -p 这个选项，立刻就可以将 test1/test2/test3/test4 依次删除。[root@kuangshen home]# rmdir -p test1/test2/test3/test4</span><br></pre></td></tr></table></figure><p>注意：这个 rmdir 仅能删除空的目录，你可以使用 rm 命令来删除非空目录，后面我们会将学习！</p><h2 id="cp-复制文件或目录"><a href="#cp-复制文件或目录" class="headerlink" title="cp ( 复制文件或目录 )"></a>cp ( 复制文件或目录 )</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# cp [-adfilprsu] 来源档(source) 目标档(destination)[root@www ~]# cp [options] source1 source2 source3 .... directory</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-a：相当於 -pdr 的意思，至於 pdr 请参考下列说明；(常用)</p><p>-p：连同文件的属性一起复制过去，而非使用默认属性(备份常用)；</p><p>-d：若来源档为连结档的属性(link file)，则复制连结档属性而非文件本身；</p><p>-r：递归持续复制，用於目录的复制行为；(常用)</p><p>-f：为强制(force)的意思，若目标文件已经存在且无法开启，则移除后再尝试一次；</p><p>-i：若目标档(destination)已经存在时，在覆盖时会先询问动作的进行(常用)</p><p>-l：进行硬式连结(hard link)的连结档创建，而非复制文件本身。</p><p>-s：复制成为符号连结档 (symbolic link)，亦即『捷径』文件；</p><p>-u：若 destination 比 source 旧才升级 destination ！</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 找一个有文件的目录，我这里找到 root目录[root@kuangshen home]# cd /root[root@kuangshen ~]# lsinstall.sh[root@kuangshen ~]# cd /home# 复制 root目录下的install.sh 到 home目录下[root@kuangshen home]# cp /root/install.sh /home[root@kuangshen home]# lsinstall.sh# 再次复制，加上-i参数，增加覆盖询问？[root@kuangshen home]# cp -i /root/install.sh /homecp: overwrite ‘/home/install.sh’? y # n不覆盖，y为覆盖</span><br></pre></td></tr></table></figure><h2 id="rm-移除文件或目录"><a href="#rm-移除文件或目录" class="headerlink" title="rm ( 移除文件或目录 )"></a>rm ( 移除文件或目录 )</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rm [-fir] 文件或目录</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-f ：就是 force 的意思，忽略不存在的文件，不会出现警告信息；</p><p>-i ：互动模式，在删除前会询问使用者是否动作</p><p>-r ：递归删除啊！最常用在目录的删除了！<strong>这是非常危险的选项！！！</strong></p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 将刚刚在 cp 的实例中创建的 install.sh删除掉！[root@kuangshen home]# rm -i install.shrm: remove regular file ‘install.sh’? y# 如果加上 -i 的选项就会主动询问喔，避免你删除到错误的档名！# 尽量不要在服务器上使用 rm -rf /</span><br></pre></td></tr></table></figure><h2 id="mv-移动文件与目录，或修改名称"><a href="#mv-移动文件与目录，或修改名称" class="headerlink" title="mv  ( 移动文件与目录，或修改名称 )"></a>mv  ( 移动文件与目录，或修改名称 )</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www ~]# mv [-fiu] source destination[root@www ~]# mv [options] source1 source2 source3 .... directory</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖；</p><p>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖！</p><p>-u ：若目标文件已经存在，且 source 比较新，才会升级 (update)</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 复制一个文件到当前目录[root@kuangshen home]# cp /root/install.sh /home# 创建一个文件夹 test[root@kuangshen home]# mkdir test# 将复制过来的文件移动到我们创建的目录，并查看[root@kuangshen home]# mv install.sh test[root@kuangshen home]# lstest[root@kuangshen home]# cd test[root@kuangshen test]# lsinstall.sh# 将文件夹重命名，然后再次查看！[root@kuangshen test]# cd ..[root@kuangshen home]# mv test mvtest[root@kuangshen home]# lsmvtest</span><br></pre></td></tr></table></figure><h1 id="Linux-文件基本属性"><a href="#Linux-文件基本属性" class="headerlink" title="Linux 文件基本属性"></a>Linux 文件基本属性</h1><p>Linux 系统是一种典型的多用户系统，不同的用户处于不同的地位，拥有不同的权限。</p><p>为了保护系统的安全性，Linux 系统对不同的用户访问同一文件（包括目录文件）的权限做了不同的规定。</p><p>在 Linux 中我们通常使用以下两个命令来修改文件或目录的所属用户与权限：</p><ul><li>chown (change owner) ： 修改所属用户与组。</li><li>chmod (change mode) ： 修改用户的权限。</li></ul><p>下图中通过 chown 来授权用户，通过 chmod 为用户设置可以开门的权限。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1_151733904241.png" alt="img"></p><p>在 Linux 中我们可以使用 <strong>ll</strong> 或者 <strong>ls –l</strong> 命令来显示一个文件的属性以及文件所属的用户和组，如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@www /]# ls -ltotal 64dr-xr-xr-x   2 root root 4096 Dec 14  2012 bindr-xr-xr-x   4 root root 4096 Apr 19  2012 boot……</span><br></pre></td></tr></table></figure><p>实例中，<strong>bin</strong> 文件的第一个属性用 <strong>d</strong> 表示。<strong>d</strong> 在 Linux 中代表该文件是一个目录文件。</p><p>在 Linux 中第一个字符代表这个文件是目录、文件或链接文件等等。</p><ul><li>当为 <strong>d</strong> 则是目录</li><li>当为 <strong>-</strong> 则是文件；</li><li>若是 <strong>l</strong> 则表示为链接文档(link file)；</li><li>若是 <strong>b</strong> 则表示为装置文件里面的可供储存的接口设备(可随机存取装置)；</li><li>若是 <strong>c</strong> 则表示为装置文件里面的串行端口设备，例如键盘、鼠标(一次性读取装置)。</li></ul><p>接下来的字符中，以三个为一组，且均为 <strong>rwx</strong> 的三个参数的组合。其中， <strong>r</strong> 代表可读(read)、 <strong>w</strong> 代表可写(write)、 <strong>x</strong> 代表可执行(execute)。 要注意的是，这三个权限的位置不会改变，如果没有权限，就会出现减号 <strong>-</strong> 而已。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/file-llls22.jpg" alt="img"></p><p>每个文件的属性由左边第一部分的 10 个字符来确定（如下图）。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/363003_1227493859FdXT-16468222156635.png" alt="363003_1227493859FdXT"></p><p>从左至右用 <strong>0-9</strong> 这些数字来表示。</p><p>第 <strong>0</strong> 位确定文件类型，第 <strong>1-3</strong> 位确定属主（该文件的所有者）拥有该文件的权限。</p><p>第4-6位确定属组（所有者的同组用户）拥有该文件的权限，第7-9位确定其他用户拥有该文件的权限。</p><p>其中，</p><p>第 <strong>1、4、7</strong> 位表示<strong>读权限</strong>，如果用 <strong>r</strong> 字符表示，则有读权限，如果用 <strong>-</strong> 字符表示，则没有读权限；</p><p>第 <strong>2、5、8</strong> 位表示<strong>写权限</strong>，如果用 <strong>w</strong> 字符表示，则有写权限，如果用 <strong>-</strong> 字符表示没有写权限；</p><p>第 <strong>3、6、9</strong> 位表示<strong>可执行权限</strong>，如果用 <strong>x</strong> 字符表示，则有执行权限，如果用 <strong>-</strong> 字符表示，则没有执行权限。</p><p>对于文件来说，它都有一个特定的所有者，也就是对该文件具有所有权的用户。</p><p>同时，在Linux系统中，用户是按组分类的，一个用户属于一个或多个组。</p><p>文件所有者以外的用户又可以分为文件所有者的同组用户和其他用户。</p><p>因此，Linux系统按文件所有者、文件所有者同组用户和其他用户来规定了不同的文件访问权限。</p><p>在以上实例中，boot 文件是一个目录文件，属主和属组都为 root。</p><h1 id="修改文件属性"><a href="#修改文件属性" class="headerlink" title="修改文件属性"></a>修改文件属性</h1><h2 id="chgrp：更改文件属组"><a href="#chgrp：更改文件属组" class="headerlink" title="chgrp：更改文件属组"></a>chgrp：更改文件属组</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chgrp [-R] 属组名 文件名</span><br></pre></td></tr></table></figure><p>-R：递归更改文件属组，就是在更改某个目录文件的属组时，如果加上-R的参数，那么该目录下的所有文件的属组都会更改。</p><h2 id="chown：更改文件属主，也可以同时更改文件属组"><a href="#chown：更改文件属主，也可以同时更改文件属组" class="headerlink" title="chown：更改文件属主，也可以同时更改文件属组"></a>chown：更改文件属主，也可以同时更改文件属组</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown [–R] 属主名 文件名chown [-R] 属主名：属组名 文件名</span><br></pre></td></tr></table></figure><h2 id="chmod：更改文件9个属性"><a href="#chmod：更改文件9个属性" class="headerlink" title="chmod：更改文件9个属性"></a>chmod：更改文件9个属性</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod [-R] xyz 文件或目录</span><br></pre></td></tr></table></figure><p>Linux文件属性有两种设置方法，一种是数字，一种是符号。</p><p>Linux文件的基本权限就有九个，分别是<strong>owner&#x2F;group&#x2F;others</strong>三种身份各有自己的<strong>read&#x2F;write&#x2F;execute</strong>权限。</p><p>先复习一下刚刚上面提到的数据：文件的权限字符为：『-rwxrwxrwx』， 这九个权限是三个三个一组的！其中，我们可以使用数字来代表各个权限，各权限的分数对照表如下：</p><p><strong>r:4 w:2 x:1</strong><br>每种身份(owner&#x2F;group&#x2F;others)各自的三个权限(r&#x2F;w&#x2F;x)分数是需要累加的，例如当权限为：[-rwxrwx—] 分数则是：</p><p>owner &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</p><p>group &#x3D; rwx &#x3D; 4+2+1 &#x3D; 7</p><p>others&#x3D; — &#x3D; 0+0+0 &#x3D; 0</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 770 filename</span><br></pre></td></tr></table></figure><h1 id="文件内容查看"><a href="#文件内容查看" class="headerlink" title="文件内容查看"></a>文件内容查看</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Linux系统中使用以下命令来查看文件的内容：</p><ul><li>cat 由第一行开始显示文件内容</li><li>tac 从最后一行开始显示，可以看出 tac 是 cat 的倒着写！</li><li>nl 显示的时候，顺道输出行号！</li><li>more 一页一页的显示文件内容</li><li>less 与 more 类似，但是比 more 更好的是，他可以往前翻页！</li><li>head 只看头几行</li><li>tail 只看尾巴几行</li></ul><p>你可以使用 man [命令]来查看各个命令的使用文档，如 ：man cp。</p><h2 id="cat-由第一行开始显示文件内容"><a href="#cat-由第一行开始显示文件内容" class="headerlink" title="cat 由第一行开始显示文件内容"></a>cat 由第一行开始显示文件内容</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cat [-AbEnTv]</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-A ：相当於 -vET 的整合选项，可列出一些特殊字符而不是空白而已；</p><p>-b ：列出行号，仅针对非空白行做行号显示，空白行不标行号！</p><p>-E ：将结尾的断行字节 $ 显示出来；</p><p>-n ：列印出行号，连同空白行也会有行号，与 -b 的选项不同；</p><p>-T ：将 [tab] 按键以 ^I 显示出来；</p><p>-v ：列出一些看不出来的特殊字符</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看网络配置: 文件地址 /etc/sysconfig/network-scripts/[root@kuangshen ~]# cat /etc/sysconfig/network-scripts/ifcfg-eth0DEVICE=eth0BOOTPROTO=dhcpONBOOT=yes</span><br></pre></td></tr></table></figure><h2 id="tac"><a href="#tac" class="headerlink" title="tac"></a>tac</h2><p>tac与cat命令刚好相反，文件内容从最后一行开始显示，可以看出 tac 是 cat 的倒着写！如：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen ~]# tac /etc/sysconfig/network-scripts/ifcfg-eth0ONBOOT=yesBOOTPROTO=dhcpDEVICE=eth0</span><br></pre></td></tr></table></figure><h2 id="nl-显示行号"><a href="#nl-显示行号" class="headerlink" title="nl 显示行号"></a>nl 显示行号</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nl [-bnw] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-b ：指定行号指定的方式，主要有两种：-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；-b t ：如果有空行，空的那一行不要列出行号(默认值)；</p><p>-n ：列出行号表示的方法，主要有三种：-n ln ：行号在荧幕的最左方显示；-n rn ：行号在自己栏位的最右方显示，且不加 0 ；-n rz ：行号在自己栏位的最右方显示，且加 0 ；</p><p>-w ：行号栏位的占用的位数。</p><p>测试：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen ~]# nl /etc/sysconfig/network-scripts/ifcfg-eth01DEVICE=eth02BOOTPROTO=dhcp3ONBOOT=yes</span><br></pre></td></tr></table></figure><h2 id="more-一页一页翻动"><a href="#more-一页一页翻动" class="headerlink" title="more 一页一页翻动"></a>more 一页一页翻动</h2><p>在 more 这个程序的运行过程中，你有几个按键可以按的：</p><p>空白键 (space)：代表向下翻一页；</p><p>Enter ：代表向下翻『一行』；</p><p>&#x2F;字串 ：代表在这个显示的内容当中，向下搜寻『字串』这个关键字；</p><p>:f ：立刻显示出档名以及目前显示的行数；</p><p>q ：代表立刻离开 more ，不再显示该文件内容。</p><p>b 或 [ctrl]-b ：代表往回翻页，不过这动作只对文件有用，对管线无用。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen etc]# more /etc/csh.login....(中间省略)....--More--(28%) # 重点在这一行喔！你的光标也会在这里等待你的命令</span><br></pre></td></tr></table></figure><h2 id="less-一页一页翻动，以下实例输出-x2F-etc-x2F-man-config文件的内容："><a href="#less-一页一页翻动，以下实例输出-x2F-etc-x2F-man-config文件的内容：" class="headerlink" title="less 一页一页翻动，以下实例输出&#x2F;etc&#x2F;man.config文件的内容："></a>less 一页一页翻动，以下实例输出&#x2F;etc&#x2F;man.config文件的内容：</h2><p>less运行时可以输入的命令有：</p><p>空白键 ：向下翻动一页；</p><p>[pagedown]：向下翻动一页；</p><p>[pageup] ：向上翻动一页；</p><p>&#x2F;字串 ：向下搜寻『字串』的功能；</p><p>?字串 ：向上搜寻『字串』的功能；</p><p>n ：重复前一个搜寻 (与 &#x2F; 或 ? 有关！)</p><p>N ：反向的重复前一个搜寻 (与 &#x2F; 或 ? 有关！)</p><p>q ：离开 less 这个程序；</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen etc]# more /etc/csh.login....(中间省略)....:   # 这里可以等待你输入命令！</span><br></pre></td></tr></table></figure><h2 id="head-取出文件前面几行"><a href="#head-取出文件前面几行" class="headerlink" title="head 取出文件前面几行"></a>head 取出文件前面几行</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">head [-n number] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：-n 后面接数字，代表显示几行的意思！</p><p>默认的情况中，显示前面 10 行！若要显示前 20 行，就得要这样：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen etc]# head -n 20 /etc/csh.login</span><br></pre></td></tr></table></figure><h2 id="tail-取出文件后面几行"><a href="#tail-取出文件后面几行" class="headerlink" title="tail 取出文件后面几行"></a>tail 取出文件后面几行</h2><p>语法：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail [-n number] 文件</span><br></pre></td></tr></table></figure><p>选项与参数：</p><p>-n ：后面接数字，代表显示几行的意思</p><p>默认的情况中，显示最后 10 行！若要显示最后 20 行，就得要这样：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kuangshen etc]# tail -n 20 /etc/csh.login</span><br></pre></td></tr></table></figure><h1 id="拓展：Linux-链接概念-了解即可"><a href="#拓展：Linux-链接概念-了解即可" class="headerlink" title="拓展：Linux 链接概念(了解即可)"></a>拓展：Linux 链接概念(了解即可)</h1><p>Linux 链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。</p><p>情况下，ln 命令产生硬链接。</p><blockquote><p>硬连接(并列关系)</p></blockquote><p>硬连接指通过索引节点来进行连接。在 Linux 的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在 Linux 中，多个文件名指向同一索引节点是存在的。比如：A 是 B 的硬链接（A 和 B 都是文件名），则 A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号相同，即一个 inode 节点对应两个不同的文件名，两个文件名指向同一个文件，<strong>A 和 B 对文件系统来说是完全平等的</strong>。删除其中任何一个都不会影响另外一个的访问。</p><p>硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，<strong>文件真正删除的条件是与之相关的所有硬连接文件均被删除。</strong></p><blockquote><p>软连接(主从关系)</p></blockquote><p>另外一种连接称之为符号连接（Symbolic Link），也叫软连接。<strong>软链接文件有类似于 Windows 的快捷方式</strong>。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。比如：A 是 B 的软链接（A 和 B 都是文件名），A 的目录项中的 inode 节点号与 B 的目录项中的 inode 节点号不相同，A 和 B 指向的是两个不同的 inode，继而指向两块不同的数据块。但是 A 的数据块中存放的只是 B 的路径名（可以根据这个找到 B 的目录项）。A 和 B 之间是<strong>“主从”关系</strong>，<strong>如果 B 被删除了，A 仍然存在（因为两个是不同的文件），但指向的是一个无效的链接。</strong></p><p>语法:</p><p><strong>ln</strong> 创建连接</p><p><strong>touch</strong> 创建文件夹</p><p><strong>echo</strong> 输入字符串,也可以是输入到指定文件中</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ln 源文件名 硬连接文件名ln -s 源文件名 软连接文件名</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@kuangshen /]# cd /home[root@kuangshen home]# touch f1 # 创建一个测试文件f1[root@kuangshen home]# lsf1[root@kuangshen home]# ln f1 f2     # 创建f1的一个硬连接文件f2[root@kuangshen home]# ln -s f1 f3   # 创建f1的一个符号连接文件f3[root@kuangshen home]# ls -li       # -i参数显示文件的inode节点信息397247 -rw-r--r-- 2 root root     0 Mar 13 00:50 f1397247 -rw-r--r-- 2 root root     0 Mar 13 00:50 f2397248 lrwxrwxrwx 1 root root     2 Mar 13 00:50 f3 -&gt; f1</span><br></pre></td></tr></table></figure><p>从上面的结果中可以看出，硬连接文件 f2 与原文件 f1 的 inode 节点相同，均为 397247，然而符号连接文件的 inode 节点不同。</p><p><strong>echo 字符串输出 &gt;&gt; f1 输出到 f1文件</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># echo 字符串输出 &gt;&gt; f1 输出到 f1文件[root@kuangshen home]# echo &quot;I am f1 file&quot; &gt;&gt;f1[root@kuangshen home]# cat f1I am f1 file[root@kuangshen home]# cat f2I am f1 file[root@kuangshen home]# cat f3I am f1 file[root@kuangshen home]# rm -f f1[root@kuangshen home]# cat f2I am f1 file[root@kuangshen home]# cat f3cat: f3: No such file or directory</span><br></pre></td></tr></table></figure><p>通过上面的测试可以看出：当删除原始文件 f1 后，硬连接 f2 不受影响，但是符号连接 f1 文件无效；</p><p>依此您可以做一些相关的测试，可以得到以下全部结论：</p><p>删除符号连接f3,对f1,f2无影响；</p><p>删除硬连接f2，对f1,f3也无影响；</p><p>删除原文件f1，对硬连接f2没有影响，导致符号连接f3失效；</p><p>同时删除原文件f1,硬连接f2，整个文件会真正的被删除。</p><h1 id="Linux-vi-x2F-vim"><a href="#Linux-vi-x2F-vim" class="headerlink" title="Linux vi&#x2F;vim"></a>Linux vi&#x2F;vim</h1><p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。</p><p>但是目前我们使用比较多的是 vim 编辑器。</p><p>vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。</p><p>相关文章：<a href="https://www.runoob.com/w3cnote/all-vim-cheatsheat.html">史上最全Vim快捷键键位图 — 入门到进阶</a></p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/vi-vim-cheat-sheet-sch.gif" alt="img">vi&#x2F;vim 的使用</p><p>基本上 vi&#x2F;vim 共分为三种模式，分别是<strong>命令模式（Command mode）</strong>，<strong>输入模式（Insert mode）</strong>和<strong>底线命令模式（Last line mode）</strong>。 这三种模式的作用分别是：</p><h3 id="命令模式："><a href="#命令模式：" class="headerlink" title="命令模式："></a>命令模式：</h3><p>用户刚刚启动 vi&#x2F;vim，便进入了命令模式。</p><p>此状态下敲击键盘动作会被Vim识别为命令，而非输入字符。比如我们此时按下i，并不会输入一个字符，i被当作了一个命令。</p><p>以下是常用的几个命令：</p><ul><li><strong>i</strong> 切换到输入模式，以输入字符。</li><li><strong>x</strong> 删除当前光标所在处的字符。</li><li><strong>:</strong> 切换到底线命令模式，以在最底一行输入命令。</li></ul><p>若想要编辑文本：启动Vim，进入了命令模式，按下i，切换到输入模式。</p><p>命令模式只有一些最基本的命令，因此仍要依靠底线命令模式输入更多命令。</p><h3 id="输入模式"><a href="#输入模式" class="headerlink" title="输入模式"></a>输入模式</h3><p>在命令模式下按下i就进入了输入模式。</p><p>在输入模式中，可以使用以下按键：</p><ul><li><strong>字符按键以及Shift组合</strong>，输入字符</li><li><strong>ENTER</strong>，回车键，换行</li><li><strong>BACK SPACE</strong>，退格键，删除光标前一个字符</li><li><strong>DEL</strong>，删除键，删除光标后一个字符</li><li><strong>方向键</strong>，在文本中移动光标</li><li><strong>HOME</strong>&#x2F;<strong>END</strong>，移动光标到行首&#x2F;行尾</li><li><strong>Page Up</strong>&#x2F;<strong>Page Down</strong>，上&#x2F;下翻页</li><li><strong>Insert</strong>，切换光标为输入&#x2F;替换模式，光标将变成竖线&#x2F;下划线</li><li><strong>ESC</strong>，退出输入模式，切换到命令模式</li></ul><h3 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h3><p>在命令模式下按下:（英文冒号）就进入了底线命令模式。</p><p>底线命令模式可以输入单个或多个字符的命令，可用的命令非常多。</p><p>在底线命令模式中，基本的命令有（已经省略了冒号）：</p><ul><li>q 退出程序</li><li>w 保存文件</li></ul><p>按ESC键可随时退出底线命令模式。</p><p>简单的说，我们可以将这三个模式想成底下的图标来表示</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/vim-vi-workmodel.png" alt="img"></p><h2 id="vi-x2F-vim-使用实例"><a href="#vi-x2F-vim-使用实例" class="headerlink" title="vi&#x2F;vim 使用实例"></a>vi&#x2F;vim 使用实例</h2><h3 id="使用-vi-x2F-vim-进入一般模式"><a href="#使用-vi-x2F-vim-进入一般模式" class="headerlink" title="使用 vi&#x2F;vim 进入一般模式"></a>使用 vi&#x2F;vim 进入一般模式</h3><p>如果你想要使用 vi 来建立一个名为 runoob.txt 的文件时，你可以这样做：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$ vim runoob.txt</span><br></pre></td></tr></table></figure><p>直接输入 <strong>vi 文件名</strong> 就能够进入 vi 的一般模式了。请注意，记得 vi 后面一定要加文件名，不管该文件存在与否！</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/078207F0-B204-4464-AAEF-982F45EDDAE9.jpg" alt="img"></p><h3 id="按下-i-进入输入模式-也称为编辑模式-，开始编辑文字"><a href="#按下-i-进入输入模式-也称为编辑模式-，开始编辑文字" class="headerlink" title="按下 i 进入输入模式(也称为编辑模式)，开始编辑文字"></a>按下 i 进入输入模式(也称为编辑模式)，开始编辑文字</h3><p>在一般模式之中，只要按下 i, o, a 等字符就可以进入输入模式了！</p><p>在编辑模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。</p><p>这个时候，键盘上除了 <strong>Esc</strong> 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/1C928383-471E-4AF1-A61E-9E2CCBD5A913.jpg" alt="img"></p><h3 id="按下-ESC-按钮回到一般模式"><a href="#按下-ESC-按钮回到一般模式" class="headerlink" title="按下 ESC 按钮回到一般模式"></a>按下 ESC 按钮回到一般模式</h3><p>好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 <strong>Esc</strong> 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！</p><h3 id="在一般模式中按下-wq-储存后离开-vi"><a href="#在一般模式中按下-wq-储存后离开-vi" class="headerlink" title="在一般模式中按下 :wq 储存后离开 vi"></a>在一般模式中按下 <strong>:wq</strong> 储存后离开 vi</h3><p>OK，我们要存档了，存盘并离开的指令很简单，输入 <strong>:wq</strong> 即可保存离开！</p><p><img src="/../imgs/B2FB5146-327C-4019-AC96-DD7A8EE7460C.jpg" alt="img"></p><p>OK! 这样我们就成功创建了一个 runoob.txt 的文件。</p><hr><h2 id="vi-x2F-vim-按键说明"><a href="#vi-x2F-vim-按键说明" class="headerlink" title="vi&#x2F;vim 按键说明"></a>vi&#x2F;vim 按键说明</h2><p>除了上面简易范例的 i, Esc, :wq 之外，其实 vim 还有非常多的按键可以使用。</p><h3 id="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等"><a href="#第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等" class="headerlink" title="第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等"></a>第一部分：一般模式可用的光标移动、复制粘贴、搜索替换等</h3><table><thead><tr><th align="left">移动光标的方法</th><th></th></tr></thead><tbody><tr><td align="left">h 或 向左箭头键(←)</td><td>光标向左移动一个字符</td></tr><tr><td align="left">j 或 向下箭头键(↓)</td><td>光标向下移动一个字符</td></tr><tr><td align="left">k 或 向上箭头键(↑)</td><td>光标向上移动一个字符</td></tr><tr><td align="left">l 或 向右箭头键(→)</td><td>光标向右移动一个字符</td></tr><tr><td align="left">如果你将右手放在键盘上的话，你会发现 hjkl 是排列在一起的，因此可以使用这四个按钮来移动光标。 如果想要进行多次移动的话，例如向下移动 30 行，可以使用 “30j” 或 “30↓” 的组合按键， 亦即加上想要进行的次数(数字)后，按下动作即可！</td><td></td></tr><tr><td align="left">[Ctrl] + [f]</td><td>屏幕『向下』移动一页，相当于 [Page Down]按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [b]</td><td>屏幕『向上』移动一页，相当于 [Page Up] 按键 (常用)</td></tr><tr><td align="left">[Ctrl] + [d]</td><td>屏幕『向下』移动半页</td></tr><tr><td align="left">[Ctrl] + [u]</td><td>屏幕『向上』移动半页</td></tr><tr><td align="left">+</td><td>光标移动到非空格符的下一行</td></tr><tr><td align="left">-</td><td>光标移动到非空格符的上一行</td></tr><tr><td align="left">n<space></td><td>那个 n 表示『数字』，例如 20 。按下数字后再按空格键，光标会向右移动这一行的 n 个字符。例如 20<space> 则光标会向后面移动 20 个字符距离。</td></tr><tr><td align="left">0 或功能键[Home]</td><td>这是数字『 0 』：移动到这一行的最前面字符处 (常用)</td></tr><tr><td align="left">$ 或功能键[End]</td><td>移动到这一行的最后面字符处(常用)</td></tr><tr><td align="left">H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td align="left">M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td align="left">L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td align="left">G</td><td>移动到这个档案的最后一行(常用)</td></tr><tr><td align="left">nG</td><td>n 为数字。移动到这个档案的第 n 行。例如 20G 则会移动到这个档案的第 20 行(可配合 :set nu)</td></tr><tr><td align="left">gg</td><td>移动到这个档案的第一行，相当于 1G 啊！ (常用)</td></tr><tr><td align="left">n<Enter></td><td>n 为数字。光标向下移动 n 行(常用)</td></tr><tr><td align="left">搜索替换</td><td></td></tr><tr><td align="left">&#x2F;word</td><td>向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻 vbird 这个字符串，就输入 &#x2F;vbird 即可！ (常用)</td></tr><tr><td align="left">?word</td><td>向光标之上寻找一个字符串名称为 word 的字符串。</td></tr><tr><td align="left">n</td><td>这个 n 是英文按键。代表重复前一个搜寻的动作。举例来说， 如果刚刚我们执行 &#x2F;vbird 去向下搜寻 vbird 这个字符串，则按下 n 后，会向下继续搜寻下一个名称为 vbird 的字符串。如果是执行 ?vbird 的话，那么按下 n 则会向上继续搜寻名称为 vbird 的字符串！</td></tr><tr><td align="left">N</td><td>这个 N 是英文按键。与 n 刚好相反，为『反向』进行前一个搜寻动作。 例如 &#x2F;vbird 后，按下 N 则表示『向上』搜寻 vbird 。</td></tr><tr><td align="left">使用 &#x2F;word 配合 n 及 N 是非常有帮助的！可以让你重复的找到一些你搜寻的关键词！</td><td></td></tr><tr><td align="left">:n1,n2s&#x2F;word1&#x2F;word2&#x2F;g</td><td>n1 与 n2 为数字。在第 n1 与 n2 行之间寻找 word1 这个字符串，并将该字符串取代为 word2 ！举例来说，在 100 到 200 行之间搜寻 vbird 并取代为 VBIRD 则： 『:100,200s&#x2F;vbird&#x2F;VBIRD&#x2F;g』。(常用)</td></tr><tr><td align="left"><strong>:1,$s&#x2F;word1&#x2F;word2&#x2F;g</strong> 或 <strong>:%s&#x2F;word1&#x2F;word2&#x2F;g</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！(常用)</td></tr><tr><td align="left"><strong>:1,$s&#x2F;word1&#x2F;word2&#x2F;gc</strong> 或 <strong>:%s&#x2F;word1&#x2F;word2&#x2F;gc</strong></td><td>从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！且在取代前显示提示字符给用户确认 (confirm) 是否需要取代！(常用)</td></tr><tr><td align="left">删除、复制与贴上</td><td></td></tr><tr><td align="left">x, X</td><td>在一行字当中，x 为向后删除一个字符 (相当于 [del] 按键)， X 为向前删除一个字符(相当于 [backspace] 亦即是退格键) (常用)</td></tr><tr><td align="left">nx</td><td>n 为数字，连续向后删除 n 个字符。举例来说，我要连续删除 10 个字符， 『10x』。</td></tr><tr><td align="left">dd</td><td>剪切游标所在的那一整行(常用)，用 p&#x2F;P 可以粘贴。</td></tr><tr><td align="left">ndd</td><td>n 为数字。剪切光标所在的向下 n 行，例如 20dd 则是剪切 20 行(常用)，用 p&#x2F;P 可以粘贴。</td></tr><tr><td align="left">d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td align="left">dG</td><td>删除光标所在到最后一行的所有数据</td></tr><tr><td align="left">d$</td><td>删除游标所在处，到该行的最后一个字符</td></tr><tr><td align="left">d0</td><td>那个是数字的 0 ，删除游标所在处，到该行的最前面一个字符</td></tr><tr><td align="left">yy</td><td>复制游标所在的那一行(常用)</td></tr><tr><td align="left">nyy</td><td>n 为数字。复制光标所在的向下 n 行，例如 20yy 则是复制 20 行(常用)</td></tr><tr><td align="left">y1G</td><td>复制游标所在行到第一行的所有数据</td></tr><tr><td align="left">yG</td><td>复制游标所在行到最后一行的所有数据</td></tr><tr><td align="left">y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td align="left">y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td align="left">p, P</td><td>p 为将已复制的数据在光标下一行贴上，P 则为贴在游标上一行！ 举例来说，我目前光标在第 20 行，且已经复制了 10 行数据。则按下 p 后， 那 10 行数据会贴在原本的 20 行之后，亦即由 21 行开始贴。但如果是按下 P 呢？ 那么原本的第 20 行会被推到变成 30 行。 (常用)</td></tr><tr><td align="left">J</td><td>将光标所在行与下一行的数据结合成同一行</td></tr><tr><td align="left">c</td><td>重复删除多个数据，例如向下删除 10 行，[ 10cj ]</td></tr><tr><td align="left">u</td><td>复原前一个动作。(常用)</td></tr><tr><td align="left">[Ctrl]+r</td><td>重做上一个动作。(常用)</td></tr><tr><td align="left">这个 u 与 [Ctrl]+r 是很常用的指令！一个是复原，另一个则是重做一次～ 利用这两个功能按键，你的编辑，嘿嘿！很快乐的啦！</td><td></td></tr><tr><td align="left">.</td><td>不要怀疑！这就是小数点！意思是重复前一个动作的意思。 如果你想要重复删除、重复贴上等等动作，按下小数点『.』就好了！ (常用)</td></tr></tbody></table><h3 id="第二部分：一般模式切换到编辑模式的可用的按钮说明"><a href="#第二部分：一般模式切换到编辑模式的可用的按钮说明" class="headerlink" title="第二部分：一般模式切换到编辑模式的可用的按钮说明"></a>第二部分：一般模式切换到编辑模式的可用的按钮说明</h3><table><thead><tr><th align="left">进入输入或取代的编辑模式</th><th></th></tr></thead><tbody><tr><td align="left">i, I</td><td>进入输入模式(Insert mode)： i 为『从目前光标所在处输入』， I 为『在目前所在行的第一个非空格符处开始输入』。 (常用)</td></tr><tr><td align="left">a, A</td><td>进入输入模式(Insert mode)： a 为『从目前光标所在的下一个字符处开始输入』， A 为『从光标所在行的最后一个字符处开始输入』。(常用)</td></tr><tr><td align="left">o, O</td><td>进入输入模式(Insert mode)： 这是英文字母 o 的大小写。o 为在目前光标所在的下一行处输入新的一行； O 为在目前光标所在的上一行处输入新的一行！(常用)</td></tr><tr><td align="left">r, R</td><td>进入取代模式(Replace mode)： r 只会取代光标所在的那一个字符一次；R会一直取代光标所在的文字，直到按下 ESC 为止；(常用)</td></tr><tr><td align="left">上面这些按键中，在 vi 画面的左下角处会出现『–INSERT–』或『–REPLACE–』的字样。 由名称就知道该动作了吧！！特别注意的是，我们上面也提过了，你想要在档案里面输入字符时， 一定要在左下角处看到 INSERT 或 REPLACE 才能输入喔！</td><td></td></tr><tr><td align="left">[Esc]</td><td>退出编辑模式，回到一般模式中(常用)</td></tr></tbody></table><h3 id="第三部分：一般模式切换到指令行模式的可用的按钮说明"><a href="#第三部分：一般模式切换到指令行模式的可用的按钮说明" class="headerlink" title="第三部分：一般模式切换到指令行模式的可用的按钮说明"></a>第三部分：一般模式切换到指令行模式的可用的按钮说明</h3><table><thead><tr><th align="left">指令行的储存、离开等指令</th><th></th></tr></thead><tbody><tr><td align="left">:w</td><td>将编辑的数据写入硬盘档案中(常用)</td></tr><tr><td align="left">:w!</td><td>若文件属性为『只读』时，强制写入该档案。不过，到底能不能写入， 还是跟你对该档案的档案权限有关啊！</td></tr><tr><td align="left">:q</td><td>离开 vi (常用)</td></tr><tr><td align="left">:q!</td><td>若曾修改过档案，又不想储存，使用 ! 为强制离开不储存档案。</td></tr><tr><td align="left">注意一下啊，那个惊叹号 (!) 在 vi 当中，常常具有『强制』的意思～</td><td></td></tr><tr><td align="left">:wq</td><td>储存后离开，若为 :wq! 则为强制储存后离开 (常用)</td></tr><tr><td align="left">ZZ</td><td>这是大写的 Z 喔！如果修改过，保存当前文件，然后退出！效果等同于(保存并退出)</td></tr><tr><td align="left">ZQ</td><td>不保存，强制退出。效果等同于 **:q!**。</td></tr><tr><td align="left">:w [filename]</td><td>将编辑的数据储存成另一个档案（类似另存新档）</td></tr><tr><td align="left">:r [filename]</td><td>在编辑的数据中，读入另一个档案的数据。亦即将 『filename』 这个档案内容加到游标所在行后面</td></tr><tr><td align="left">:n1,n2 w [filename]</td><td>将 n1 到 n2 的内容储存成 filename 这个档案。</td></tr><tr><td align="left">:! command</td><td>暂时离开 vi 到指令行模式下执行 command 的显示结果！例如 『:! ls &#x2F;home』即可在 vi 当中察看 &#x2F;home 底下以 ls 输出的档案信息！</td></tr><tr><td align="left">vim 环境的变更</td><td></td></tr><tr><td align="left">:set nu</td><td>显示行号，设定之后，会在每一行的前缀显示该行的行号</td></tr><tr><td align="left">:set nonu</td><td>与 set nu 相反，为取消行号！</td></tr></tbody></table><p>特别注意，在 vi&#x2F;vim 中，数字是很有意义的！数字通常代表重复做几次的意思！ 也有可能是代表去到第几个什么什么的意思。</p><p>举例来说，要删除 50 行，则是用 『50dd』 对吧！ 数字加在动作之前，如我要向下移动 20 行呢？那就是『20j』或者是『20↓』即可。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot整合redis</title>
      <link href="/2022/03/15/springboot%E6%95%B4%E5%90%88redis/"/>
      <url>/2022/03/15/springboot%E6%95%B4%E5%90%88redis/</url>
      
        <content type="html"><![CDATA[<h1 id="springboot整合redis"><a href="#springboot整合redis" class="headerlink" title="springboot整合redis"></a>springboot整合redis</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言:"></a>前言:</h2><p>Redis是目前使用最多的缓存，包括Spring Boot 中我们也是会用Redis做很多事情。那么今天就来说一说Spring Boot如何整合Redis。Spring Boot整合Redis 需要那些步骤呢？</p><h2 id="整合redis"><a href="#整合redis" class="headerlink" title="整合redis:"></a>整合redis:</h2><h3 id="一-pom-xml增加依赖如下"><a href="#一-pom-xml增加依赖如下" class="headerlink" title="一 pom.xml增加依赖如下:"></a>一 pom.xml增加依赖如下:</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- redis 连接池 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--新版本连接池lettuce--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="二-资源文件application-yaml中增加Redis相关配置"><a href="#二-资源文件application-yaml中增加Redis相关配置" class="headerlink" title="二 资源文件application.yaml中增加Redis相关配置"></a>二 资源文件application.yaml中增加Redis相关配置</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cache:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">redis</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">//这里用的是本地的redis</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span></span><br><span class="line">    <span class="attr">database:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">100</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">-1ms</span> <span class="comment"># 连接池最大阻塞等待时间，负值表示没有限制</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三-封装redis工具类"><a href="#三-封装redis工具类" class="headerlink" title="三 封装redis工具类"></a>三 封装redis工具类</h3><p>这个工具类就是封装操作redisTemplate的实现类,基本涵盖了redis常用的基本类型</p><p><strong>redis工具类接口</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cuit.epoch.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RedisService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存存属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取属性</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> object</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">get</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">del</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">del</span><span class="params">(List&lt;String&gt; keys)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">getExpire</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否有该属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hasKey</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按delta递增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按delta递减</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Hash结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">hGet</span><span class="params">(String key, String hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Hash结构中放入一个属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Hash结构中放入一个属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接获取整个Hash结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Map&lt;Object, Object&gt; <span class="title function_">hGetAll</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接设置整个Hash结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 直接设置整个Hash结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Hash结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">hDel</span><span class="params">(String key, Object... hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断Hash结构中是否有该属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">hHasKey</span><span class="params">(String key, String hashKey)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash结构中属性递增</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">hIncr</span><span class="params">(String key, String hashKey, Long delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Hash结构中属性递减</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">hDecr</span><span class="params">(String key, String hashKey, Long delta)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Set结构</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Set&lt;Object&gt; <span class="title function_">sMembers</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Set结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sAdd</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向Set结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sAdd</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否为Set中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Boolean <span class="title function_">sIsMember</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取Set结构的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sSize</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除Set结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">sRemove</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取List结构中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Object&gt; <span class="title function_">lRange</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取List结构的长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lSize</span><span class="params">(String key)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据索引获取List中的属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Object <span class="title function_">lIndex</span><span class="params">(String key, <span class="type">long</span> index)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPush</span><span class="params">(String key, Object value)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPush</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中批量添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPushAll</span><span class="params">(String key, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向List结构中批量添加属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lPushAll</span><span class="params">(String key, Long time, Object... values)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从List结构中移除属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Long <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>redis工具类实现类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.cuit.epoch.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">RedisService</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">del</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">del</span><span class="params">(List&lt;String&gt; keys)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.delete(keys);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">getExpire</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.getExpire(key, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hasKey</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.hasKey(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">incr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">decr</span><span class="params">(String key, <span class="type">long</span> delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().increment(key, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hGet</span><span class="params">(String key, String hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().get(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hashKey, value);</span><br><span class="line">        <span class="keyword">return</span> expire(key, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hSet</span><span class="params">(String key, String hashKey, Object value)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().put(key, hashKey, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hGetAll</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().entries(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">        <span class="keyword">return</span> expire(key, time);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hSetAll</span><span class="params">(String key, Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().putAll(key, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hDel</span><span class="params">(String key, Object... hashKey)</span> &#123;</span><br><span class="line">        redisTemplate.opsForHash().delete(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">hHasKey</span><span class="params">(String key, String hashKey)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().hasKey(key, hashKey);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">hIncr</span><span class="params">(String key, String hashKey, Long delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, hashKey, delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">hDecr</span><span class="params">(String key, String hashKey, Long delta)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForHash().increment(key, hashKey, -delta);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Object&gt; <span class="title function_">sMembers</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().members(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sAdd</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sAdd</span><span class="params">(String key, <span class="type">long</span> time, Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForSet().add(key, values);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">sIsMember</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().isMember(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">sRemove</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForSet().remove(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">lRange</span><span class="params">(String key, <span class="type">long</span> start, <span class="type">long</span> end)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().range(key, start, end);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lSize</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().size(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">lIndex</span><span class="params">(String key, <span class="type">long</span> index)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().index(key, index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPush</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPush</span><span class="params">(String key, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">index</span> <span class="operator">=</span> redisTemplate.opsForList().rightPush(key, value);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPushAll</span><span class="params">(String key, Object... values)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lPushAll</span><span class="params">(String key, Long time, Object... values)</span> &#123;</span><br><span class="line">        <span class="type">Long</span> <span class="variable">count</span> <span class="operator">=</span> redisTemplate.opsForList().rightPushAll(key, values);</span><br><span class="line">        expire(key, time);</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Long <span class="title function_">lRemove</span><span class="params">(String key, <span class="type">long</span> count, Object value)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForList().remove(key, count, value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="四-创建RedisController控制器"><a href="#四-创建RedisController控制器" class="headerlink" title="四 创建RedisController控制器"></a>四 创建RedisController控制器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.feng.domain.User;</span><br><span class="line"><span class="keyword">import</span> com.feng.utils.RedisService;</span><br><span class="line"><span class="keyword">import</span> com.feng.utils.result.CommonResult;</span><br><span class="line"><span class="keyword">import</span> com.feng.utils.result.ResultUtil;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/redis&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisController</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/nihao&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">niHao</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;这里是nihao方法!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;User&gt; <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(<span class="number">111L</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;ladidol&quot;</span>);</span><br><span class="line">        user.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        redis.set(<span class="string">&quot;json:user&quot;</span>, user);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/getUsers&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CommonResult&lt;Map&lt;Object, Object&gt;&gt; <span class="title function_">getJsonList</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setId(<span class="number">111L</span>);</span><br><span class="line">        user1.setName(<span class="string">&quot;ladidol1&quot;</span>);</span><br><span class="line">        user1.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user2.setId(<span class="number">111L</span>);</span><br><span class="line">        user2.setName(<span class="string">&quot;ladidol2&quot;</span>);</span><br><span class="line">        user2.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user3.setId(<span class="number">111L</span>);</span><br><span class="line">        user3.setName(<span class="string">&quot;ladidol3&quot;</span>);</span><br><span class="line">        user3.setCreateTime(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;ladidol1&quot;</span>, user1);</span><br><span class="line">        map.put(<span class="string">&quot;ladidol2&quot;</span>, user2);</span><br><span class="line">        map.put(<span class="string">&quot;ladidol3&quot;</span>, user3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        redis.hSetAll(<span class="string">&quot;json:userMaps&quot;</span>, map, <span class="number">2000</span>);</span><br><span class="line">        Map&lt;Object, Object&gt; userMaps = redis.hGetAll(<span class="string">&quot;json:userMaps&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ResultUtil.success(userMaps);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果截图:</p><p>单个用户查询:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220311173344155.png" alt="image-20220311173344155"></p><p>查询全部用户:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220311173322149.png" alt="image-20220311173322149"></p><p>在idea中项目的最终结构是这样:</p><p><img src="https://cdn.jsdelivr.net/gh/ladidol/figurebed@main/img/image-20220311175106978.png" alt="image-20220311175106978"></p><p>tips:这里面导入了一些工具类,可以去我其他博客看一下;</p><p><strong>一些小小瑕疵:</strong></p><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">用这个redis工具类的时候会出现,key值在redis中存储有多余的前缀</span><br><span class="line">类似这种:</span><br><span class="line">\xac\xed\x00\x05t\x00\x0djson:userMaps</span><br><span class="line">\xac\xed\x00\x05t\x00\x08ladidol2</span><br><span class="line">但是不影响使用;</span><br></pre></td></tr></table></figure><p>key值有前缀乱码解决方法:(好像并没有全部解决,有点寄)</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.feng.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonAutoDetect;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.PropertyAccessor;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.jsontype.impl.LaissezFaireSubTypeValidator;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.CacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.cache.annotation.EnableCaching;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.cache.RedisCacheManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.connection.RedisConnectionFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.Jackson2JsonRedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.RedisSerializer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.serializer.StringRedisSerializer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis数据库自定义key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">REDIS_KEY_DATABASE</span> <span class="operator">=</span> <span class="string">&quot;community&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance,ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        template.setConnectionFactory(factory);</span><br><span class="line">        <span class="comment">//key序列化方式</span></span><br><span class="line">        template.setKeySerializer(redisSerializer);</span><br><span class="line">        <span class="comment">//value序列化</span></span><br><span class="line">        template.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="comment">//value hashmap序列化</span></span><br><span class="line">        template.setHashValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> CacheManager <span class="title function_">cacheManager</span><span class="params">(RedisConnectionFactory factory)</span> &#123;</span><br><span class="line">        RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>();</span><br><span class="line">        <span class="type">Jackson2JsonRedisSerializer</span> <span class="variable">jackson2JsonRedisSerializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Jackson2JsonRedisSerializer</span>(Object.class);</span><br><span class="line">        <span class="comment">//解决查询缓存转换异常的问题</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">om</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        om.activateDefaultTyping(LaissezFaireSubTypeValidator.instance,ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</span><br><span class="line">        <span class="comment">// 配置序列化（解决乱码的问题）,过期时间600秒</span></span><br><span class="line">        <span class="type">RedisCacheConfiguration</span> <span class="variable">config</span> <span class="operator">=</span> RedisCacheConfiguration.defaultCacheConfig()</span><br><span class="line">                .entryTtl(Duration.ofSeconds(<span class="number">600</span>))</span><br><span class="line">                .serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(redisSerializer))</span><br><span class="line">                .serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(jackson2JsonRedisSerializer))</span><br><span class="line">                .disableCachingNullValues();</span><br><span class="line">        <span class="type">RedisCacheManager</span> <span class="variable">cacheManager</span> <span class="operator">=</span> RedisCacheManager.builder(factory)</span><br><span class="line">                .cacheDefaults(config)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
          <category> java后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springboot </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/03/15/hello-world/"/>
      <url>/2022/03/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 第一篇 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
